var arguments_ = [];

var ENVIRONMENT_IS_NODE = typeof process === "object";

var ENVIRONMENT_IS_WEB = typeof window === "object";

var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";

var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  print = (function(x) {
    process["stdout"].write(x + "\n");
  });
  printErr = (function(x) {
    process["stderr"].write(x + "\n");
  });
  var nodeFS = require("fs");
  read = (function(filename) {
    var ret = nodeFS["readFileSync"](filename).toString();
    if (!ret && filename[0] != "/") {
      filename = __dirname.split("/").slice(0, -1).join("/") + "/src/" + filename;
      ret = nodeFS["readFileSync"](filename).toString();
    }
    return ret;
  });
  arguments_ = process["argv"].slice(2);
} else if (ENVIRONMENT_IS_SHELL) {
  if (!this["read"]) {
    read = (function(f) {
      snarf(f);
    });
  }
  if (!this["arguments"]) {
    arguments_ = scriptArgs;
  } else {
    arguments_ = arguments;
  }
} else if (ENVIRONMENT_IS_WEB) {
  print = printErr = (function(x) {
    console.log(x);
  });
  read = (function(url) {
    var xhr = new XMLHttpRequest;
    xhr.open("GET", url, false);
    xhr.send(null);
    return xhr.responseText;
  });
  if (this["arguments"]) {
    arguments_ = arguments;
  }
} else if (ENVIRONMENT_IS_WORKER) {
  load = importScripts;
} else {
  throw "Unknown runtime environment. Where are we?";
}

function globalEval(x) {
  eval.call(null, x);
}

if (typeof load == "undefined" && typeof read != "undefined") {
  load = (function(f) {
    globalEval(read(f));
  });
}

if (typeof printErr === "undefined") {
  printErr = (function() {});
}

if (typeof print === "undefined") {
  print = printErr;
}

try {
  this["Module"] = Module;
} catch (e) {
  this["Module"] = Module = {};
}

if (!Module.arguments) {
  Module.arguments = arguments_;
}

if (Module.print) {
  print = Module.print;
}

var Runtime = {
  stackSave: (function() {
    return STACKTOP;
  }),
  stackRestore: (function(stackTop) {
    STACKTOP = stackTop;
  }),
  forceAlign: (function(target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target / quantum) * quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return "((((" + target + ")+" + (quantum - 1) + ")>>" + logg + ")<<" + logg + ")";
    }
    return "Math.ceil((" + target + ")/" + quantum + ")*" + quantum;
  }),
  isNumberType: (function(type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  }),
  isPointerType: function isPointerType(type) {
    return type[type.length - 1] == "*";
  },
  isStructType: function isStructType(type) {
    if (isPointerType(type)) return false;
    if (/^\[\d+\ x\ (.*)\]/.test(type)) return true;
    if (/<?{ [^}]* }>?/.test(type)) return true;
    return type[0] == "%";
  },
  INT_TYPES: {
    "i1": 0,
    "i8": 0,
    "i16": 0,
    "i32": 0,
    "i64": 0
  },
  FLOAT_TYPES: {
    "float": 0,
    "double": 0
  },
  bitshift64: (function(low, high, op, bits) {
    var ander = Math.pow(2, bits) - 1;
    if (bits < 32) {
      switch (op) {
       case "shl":
        return [ low << bits, high << bits | (low & ander << 32 - bits) >>> 32 - bits ];
       case "ashr":
        return [ (low >>> bits | (high & ander) << 32 - bits) >> 0 >>> 0, high >> bits >>> 0 ];
       case "lshr":
        return [ (low >>> bits | (high & ander) << 32 - bits) >>> 0, high >>> bits ];
      }
    } else if (bits == 32) {
      switch (op) {
       case "shl":
        return [ 0, low ];
       case "ashr":
        return [ high, (high | 0) < 0 ? ander : 0 ];
       case "lshr":
        return [ high, 0 ];
      }
    } else {
      switch (op) {
       case "shl":
        return [ 0, low << bits - 32 ];
       case "ashr":
        return [ high >> bits - 32 >>> 0, (high | 0) < 0 ? ander : 0 ];
       case "lshr":
        return [ high >>> bits - 32, 0 ];
      }
    }
    abort("unknown bitshift64 op: " + [ value, op, bits ]);
  }),
  or64: (function(x, y) {
    var l = x | 0 | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  and64: (function(x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  xor64: (function(x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  }),
  getNativeTypeSize: (function(type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      "%i1": 1,
      "%i8": 1,
      "%i16": 2,
      "%i32": 4,
      "%i64": 8,
      "%float": 4,
      "%double": 8
    }["%" + type];
    if (!size) {
      if (type[type.length - 1] == "*") {
        size = Runtime.QUANTUM_SIZE;
      } else if (type[0] == "i") {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits / 8;
      }
    }
    return size;
  }),
  getNativeFieldSize: (function(type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  }),
  dedup: function dedup(items, ident) {
    var seen = {};
    if (ident) {
      return items.filter((function(item) {
        if (seen[item[ident]]) return false;
        seen[item[ident]] = true;
        return true;
      }));
    } else {
      return items.filter((function(item) {
        if (seen[item]) return false;
        seen[item] = true;
        return true;
      }));
    }
  },
  set: function set() {
    var args = typeof arguments[0] === "object" ? arguments[0] : arguments;
    var ret = {};
    for (var i = 0; i < args.length; i++) {
      ret[args[i]] = 0;
    }
    return ret;
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map((function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field);
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw "Unclear type in struct: " + field + ", in " + type.name_ + " :: " + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize);
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr - prev);
      }
      prev = curr;
      return curr;
    }));
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = type.flatFactor != 1;
    return type.flatIndexes;
  },
  generateStructInfo: (function(struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === "undefined" ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      assert(type.fields.length === struct.length, "Number of named fields must match the type for " + typeName);
      alignment = type.flatIndexes;
    } else {
      var type = {
        fields: struct.map((function(item) {
          return item[0];
        }))
      };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach((function(item, i) {
        if (typeof item === "string") {
          ret[item] = alignment[i] + offset;
        } else {
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      }));
    } else {
      struct.forEach((function(item, i) {
        ret[item[1]] = alignment[i];
      }));
    }
    return ret;
  }),
  stackAlloc: function stackAlloc(size) {
    var ret = STACKTOP;
    STACKTOP += size;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    return ret;
  },
  staticAlloc: function staticAlloc(size) {
    var ret = STATICTOP;
    STATICTOP += size;
    STATICTOP = STATICTOP + 3 >> 2 << 2;
    if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();
    return ret;
  },
  alignMemory: function alignMemory(size, quantum) {
    var ret = size = Math.ceil(size / (quantum ? quantum : 4)) * (quantum ? quantum : 4);
    return ret;
  },
  makeBigInt: function makeBigInt(low, high, unsigned) {
    var ret = unsigned ? (low >>> 0) + (high >>> 0) * 4294967296 : (low >>> 0) + (high | 0) * 4294967296;
    return ret;
  },
  QUANTUM_SIZE: 4,
  __dummy__: 0
};

var CorrectionsMonitor = {
  MAX_ALLOWED: 0,
  corrections: 0,
  sigs: {},
  note: (function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort("\n\nToo many corrections!");
    }
  }),
  print: (function() {})
};

var __THREW__ = false;

var ABORT = false;

var undef = 0;

var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;

var tempI64, tempI64b;

function abort(text) {
  print(text + ":\n" + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort("Assertion failed: " + text);
  }
}

var globalScope = this;

function ccall(ident, returnType, argTypes, args) {
  function toC(value, type) {
    if (type == "string") {
      var ret = STACKTOP;
      Runtime.stackAlloc(value.length + 1);
      writeStringToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == "string") {
      return Pointer_stringify(value);
    }
    return value;
  }
  try {
    var func = eval("_" + ident);
  } catch (e) {
    try {
      func = globalScope["Module"]["_" + ident];
    } catch (e) {}
  }
  assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
  var i = 0;
  var cArgs = args ? args.map((function(arg) {
    return toC(arg, argTypes[i++]);
  })) : [];
  return fromC(func.apply(null, cArgs), returnType);
}

Module["ccall"] = ccall;

function setValue(ptr, value, type, noSafe) {
  type = type || "i8";
  if (type[type.length - 1] === "*") type = "i32";
  switch (type) {
   case "i1":
    HEAP8[ptr] = value;
    break;
   case "i8":
    HEAP8[ptr] = value;
    break;
   case "i16":
    HEAP16[ptr >> 1] = value;
    break;
   case "i32":
    HEAP32[ptr >> 2] = value;
    break;
   case "i64":
    HEAP32[ptr >> 2] = value;
    break;
   case "float":
    HEAPF32[ptr >> 2] = value;
    break;
   case "double":
    tempDoubleF64[0] = value, HEAP32[ptr >> 2] = tempDoubleI32[0], HEAP32[ptr + 4 >> 2] = tempDoubleI32[1];
    break;
   default:
    abort("invalid type for setValue: " + type);
  }
}

Module["setValue"] = setValue;

function getValue(ptr, type, noSafe) {
  type = type || "i8";
  if (type[type.length - 1] === "*") type = "i32";
  switch (type) {
   case "i1":
    return HEAP8[ptr];
   case "i8":
    return HEAP8[ptr];
   case "i16":
    return HEAP16[ptr >> 1];
   case "i32":
    return HEAP32[ptr >> 2];
   case "i64":
    return HEAP32[ptr >> 2];
   case "float":
    return HEAPF32[ptr >> 2];
   case "double":
    return tempDoubleI32[0] = HEAP32[ptr >> 2], tempDoubleI32[1] = HEAP32[ptr + 4 >> 2], tempDoubleF64[0];
   default:
    abort("invalid type for setValue: " + type);
  }
  return null;
}

Module["getValue"] = getValue;

var ALLOC_NORMAL = 0;

var ALLOC_STACK = 1;

var ALLOC_STATIC = 2;

Module["ALLOC_NORMAL"] = ALLOC_NORMAL;

Module["ALLOC_STACK"] = ALLOC_STACK;

Module["ALLOC_STATIC"] = ALLOC_STATIC;

function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === "number") {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === "string" ? types : null;
  var ret = [ _malloc, Runtime.stackAlloc, Runtime.staticAlloc ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }
  var i = 0, type;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === "function") {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == "i64") type = "i32";
    setValue(ret + i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }
  return ret;
}

Module["allocate"] = allocate;

function Pointer_stringify(ptr, length) {
  var nullTerminated = typeof length == "undefined";
  var ret = "";
  var i = 0;
  var t;
  var nullByte = String.fromCharCode(0);
  while (1) {
    t = String.fromCharCode(HEAPU8[ptr + i]);
    if (nullTerminated && t == nullByte) {
      break;
    } else {}
    ret += t;
    i += 1;
    if (!nullTerminated && i == length) {
      break;
    }
  }
  return ret;
}

Module["Pointer_stringify"] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}

Module["Array_stringify"] = Array_stringify;

var FUNCTION_TABLE;

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  return Math.ceil(x / PAGE_SIZE) * PAGE_SIZE;
}

var HEAP;

var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32;

var STACK_ROOT, STACKTOP, STACK_MAX;

var STATICTOP;

function enlargeMemory() {
  while (TOTAL_MEMORY <= STATICTOP) {
    TOTAL_MEMORY = alignMemoryPage(2 * TOTAL_MEMORY);
  }
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAP8.set(oldHEAP8);
}

var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;

var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 10485760;

var FAST_MEMORY = Module["FAST_MEMORY"] || 2097152;

assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "Cannot fallback to non-typed array case: Code is too specialized");

var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);

HEAP16 = new Int16Array(buffer);

HEAP32 = new Int32Array(buffer);

HEAPU8 = new Uint8Array(buffer);

HEAPU16 = new Uint16Array(buffer);

HEAPU32 = new Uint32Array(buffer);

HEAPF32 = new Float32Array(buffer);

HEAP32[0] = 255;

assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");

var base = intArrayFromString("(null)");

STATICTOP = base.length;

for (var i = 0; i < base.length; i++) {
  HEAP8[i] = base[i];
}

Module["HEAP"] = HEAP;

Module["HEAP8"] = HEAP8;

Module["HEAP16"] = HEAP16;

Module["HEAP32"] = HEAP32;

Module["HEAPU8"] = HEAPU8;

Module["HEAPU16"] = HEAPU16;

Module["HEAPU32"] = HEAPU32;

Module["HEAPF32"] = HEAPF32;

STACK_ROOT = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_ROOT + TOTAL_STACK;

var tempDoublePtr = Runtime.alignMemory(STACK_MAX, 8);

var tempDoubleI8 = HEAP8.subarray(tempDoublePtr);

var tempDoubleI32 = HEAP32.subarray(tempDoublePtr >> 2);

var tempDoubleF32 = HEAPF32.subarray(tempDoublePtr >> 2);

var tempDoubleF64 = (new Float64Array(HEAP8.buffer)).subarray(tempDoublePtr >> 3);

function copyTempFloat(ptr) {
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr + 1];
  tempDoubleI8[2] = HEAP8[ptr + 2];
  tempDoubleI8[3] = HEAP8[ptr + 3];
}

function copyTempDouble(ptr) {
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr + 1];
  tempDoubleI8[2] = HEAP8[ptr + 2];
  tempDoubleI8[3] = HEAP8[ptr + 3];
  tempDoubleI8[4] = HEAP8[ptr + 4];
  tempDoubleI8[5] = HEAP8[ptr + 5];
  tempDoubleI8[6] = HEAP8[ptr + 6];
  tempDoubleI8[7] = HEAP8[ptr + 7];
}

STACK_MAX = tempDoublePtr + 8;

STATICTOP = alignMemoryPage(STACK_MAX);

function callRuntimeCallbacks(callbacks) {
  while (callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === "number") {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}

var __ATINIT__ = [];

var __ATEXIT__ = [];

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  CorrectionsMonitor.print();
}

function Array_copy(ptr, num) {
  return Array.prototype.slice.call(HEAP8.subarray(ptr, ptr + num));
  return HEAP.slice(ptr, ptr + num);
}

Module["Array_copy"] = Array_copy;

function TypedArray_copy(ptr, num) {
  var arr = new Uint8Array(num);
  for (var i = 0; i < num; ++i) {
    arr[i] = HEAP8[ptr + i];
  }
  return arr.buffer;
}

Module["TypedArray_copy"] = TypedArray_copy;

function String_len(ptr) {
  var i = 0;
  while (HEAP8[ptr + i]) i++;
  return i;
}

Module["String_len"] = String_len;

function String_copy(ptr, addZero) {
  var len = String_len(ptr);
  if (addZero) len++;
  var ret = Array_copy(ptr, len);
  if (addZero) ret[len - 1] = 0;
  return ret;
}

Module["String_copy"] = String_copy;

function intArrayFromString(stringy, dontAddNull) {
  var ret = [];
  var t;
  var i = 0;
  while (i < stringy.length) {
    var chr = stringy.charCodeAt(i);
    if (chr > 255) {
      chr &= 255;
    }
    ret.push(chr);
    i = i + 1;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}

Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 255) {
      chr &= 255;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join("");
}

Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var i = 0;
  while (i < string.length) {
    var chr = string.charCodeAt(i);
    if (chr > 255) {
      chr &= 255;
    }
    HEAP8[buffer + i] = chr;
    i = i + 1;
  }
  if (!dontAddNull) {
    HEAP8[buffer + i] = 0;
  }
}

Module["writeStringToMemory"] = writeStringToMemory;

var STRING_TABLE = [];

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}

function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
  if (value >= half && (bits <= 32 || value > half)) {
    value = -2 * half + value;
  }
  return value;
}

function __ZN12b2BroadPhase12UnBufferMoveEi($this, $proxyId) {
  var $0 = HEAP32[$this + 40 >> 2];
  var $m_moveBuffer = $this + 32 | 0;
  var $i_0 = 0;
  while (1) {
    var $i_0;
    if (($i_0 | 0) >= ($0 | 0)) {
      break;
    }
    var $arrayidx = ($i_0 << 2) + HEAP32[$m_moveBuffer >> 2] | 0;
    if ((HEAP32[$arrayidx >> 2] | 0) == ($proxyId | 0)) {
      HEAP32[$arrayidx >> 2] = -1;
      break;
    }
    var $i_0 = $i_0 + 1 | 0;
  }
  return;
  return;
}

function __Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_($manifold, $circleA, $xfA, $circleB, $xfB) {
  var $pointCount = $manifold + 60 | 0;
  HEAP32[$pointCount >> 2] = 0;
  var $m_p = $circleA + 12 | 0;
  var $0 = HEAPF32[$xfA + 12 >> 2];
  var $1 = HEAPF32[$m_p >> 2];
  var $2 = HEAPF32[$xfA + 8 >> 2];
  var $3 = HEAPF32[$circleA + 16 >> 2];
  var $m_p1 = $circleB + 12 | 0;
  var $6 = HEAPF32[$xfB + 12 >> 2];
  var $7 = HEAPF32[$m_p1 >> 2];
  var $8 = HEAPF32[$xfB + 8 >> 2];
  var $9 = HEAPF32[$circleB + 16 >> 2];
  var $sub_i10 = $6 * $7 - $8 * $9 + HEAPF32[$xfB >> 2] - ($0 * $1 - $2 * $3 + HEAPF32[$xfA >> 2]);
  var $sub3_i = $8 * $7 + $6 * $9 + HEAPF32[$xfB + 4 >> 2] - ($2 * $1 + $0 * $3 + HEAPF32[$xfA + 4 >> 2]);
  var $add = HEAPF32[$circleA + 8 >> 2] + HEAPF32[$circleB + 8 >> 2];
  if ($sub_i10 * $sub_i10 + $sub3_i * $sub3_i <= $add * $add) {
    HEAP32[$manifold + 56 >> 2] = 0;
    var $14 = $m_p;
    var $15 = $manifold + 48 | 0;
    var $16$0 = HEAP32[$14 >> 2];
    var $16$1 = HEAP32[$14 + 4 >> 2];
    HEAP32[$15 >> 2] = $16$0;
    HEAP32[$15 + 4 >> 2] = $16$1;
    HEAPF32[$manifold + 40 >> 2] = 0;
    HEAPF32[$manifold + 44 >> 2] = 0;
    HEAP32[$pointCount >> 2] = 1;
    var $17 = $m_p1;
    var $18 = $manifold;
    var $19$0 = HEAP32[$17 >> 2];
    var $19$1 = HEAP32[$17 + 4 >> 2];
    HEAP32[$18 >> 2] = $19$0;
    HEAP32[$18 + 4 >> 2] = $19$1;
    HEAP32[$manifold + 16 >> 2] = 0;
  }
  return;
  return;
}

function __ZN12b2BroadPhaseC2Ev($this) {
  var $m_nodes_i$s2;
  var $m_nodeCapacity_i$s2;
  var $this$s2 = $this >> 2;
  HEAP32[$this$s2] = -1;
  var $m_nodeCapacity_i$s2 = ($this + 12 | 0) >> 2;
  HEAP32[$m_nodeCapacity_i$s2] = 16;
  HEAP32[$this$s2 + 2] = 0;
  var $call_i_i = _malloc(576);
  var $m_nodes_i$s2 = ($this + 4 | 0) >> 2;
  HEAP32[$m_nodes_i$s2] = $call_i_i;
  var $mul5_i = HEAP32[$m_nodeCapacity_i$s2] * 36 | 0;
  _memset($call_i_i, 0, $mul5_i, 1);
  var $sub1_i = HEAP32[$m_nodeCapacity_i$s2] - 1 | 0;
  var $cmp2_i = ($sub1_i | 0) > 0;
  $for_body_i$$_ZN13b2DynamicTreeC2Ev_exit$2 : do {
    if ($cmp2_i) {
      var $i_03_i = 0;
      while (1) {
        var $i_03_i;
        var $add_i = $i_03_i + 1 | 0;
        var $next_i = HEAP32[$m_nodes_i$s2] + $i_03_i * 36 + 20 | 0;
        HEAP32[$next_i >> 2] = $add_i;
        var $height_i = HEAP32[$m_nodes_i$s2] + $i_03_i * 36 + 32 | 0;
        HEAP32[$height_i >> 2] = -1;
        var $sub_i = HEAP32[$m_nodeCapacity_i$s2] - 1 | 0;
        if (($add_i | 0) >= ($sub_i | 0)) {
          var $sub_lcssa_i = $sub_i;
          break $for_body_i$$_ZN13b2DynamicTreeC2Ev_exit$2;
        }
        var $i_03_i = $add_i;
      }
    } else {
      var $sub_lcssa_i = $sub1_i;
    }
  } while (0);
  var $sub_lcssa_i;
  var $next14_i = HEAP32[$m_nodes_i$s2] + $sub_lcssa_i * 36 + 20 | 0;
  HEAP32[$next14_i >> 2] = -1;
  var $height19_i = HEAP32[$m_nodes_i$s2] + (HEAP32[$m_nodeCapacity_i$s2] - 1) * 36 + 32 | 0;
  HEAP32[$height19_i >> 2] = -1;
  HEAP32[$this$s2 + 4] = 0;
  HEAP32[$this$s2 + 5] = 0;
  HEAP32[$this$s2 + 6] = 0;
  HEAP32[$this$s2 + 7] = 0;
  HEAP32[$this$s2 + 12] = 16;
  HEAP32[$this$s2 + 13] = 0;
  var $call_i = _malloc(192);
  HEAP32[$this$s2 + 11] = $call_i;
  HEAP32[$this$s2 + 9] = 16;
  HEAP32[$this$s2 + 10] = 0;
  var $call_i1 = _malloc(64);
  HEAP32[$this$s2 + 8] = $call_i1;
  return;
  return;
}

function __ZN12b2BroadPhaseD2Ev($this) {
  var $1 = HEAP32[$this + 32 >> 2];
  _free($1);
  var $3 = HEAP32[$this + 44 >> 2];
  _free($3);
  var $5 = HEAP32[$this + 4 >> 2];
  _free($5);
  return;
  return;
}

function __ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($this, $aabb, $userData) {
  var $m_moveBuffer_i$s2;
  var $m_moveCount_i$s2;
  var $m_nodes_i$s2;
  var $m_tree = $this | 0;
  var $call_i = __ZN13b2DynamicTree12AllocateNodeEv($m_tree);
  var $m_nodes_i$s2 = ($this + 4 | 0) >> 2;
  var $sub3_i_i = HEAPF32[$aabb + 4 >> 2] - .10000000149011612;
  var $4 = HEAP32[$m_nodes_i$s2] + $call_i * 36 | 0;
  var $5 = (tempDoubleF32[0] = HEAPF32[$aabb >> 2] - .10000000149011612, tempDoubleI32[0]);
  var $6$0 = $5;
  var $7 = (tempDoubleF32[0] = $sub3_i_i, tempDoubleI32[0]);
  var $10$1 = $7 | 0;
  var $st$22$0 = $4 | 0;
  HEAP32[$st$22$0 >> 2] = 0 | $6$0;
  var $st$22$1 = $4 + 4 | 0;
  HEAP32[$st$22$1 >> 2] = $10$1;
  var $add3_i_i = HEAPF32[$aabb + 12 >> 2] + .10000000149011612;
  var $15 = HEAP32[$m_nodes_i$s2] + $call_i * 36 + 8 | 0;
  var $16 = (tempDoubleF32[0] = HEAPF32[$aabb + 8 >> 2] + .10000000149011612, tempDoubleI32[0]);
  var $17$0 = $16;
  var $18 = (tempDoubleF32[0] = $add3_i_i, tempDoubleI32[0]);
  var $21$1 = $18 | 0;
  var $st$45$0 = $15 | 0;
  HEAP32[$st$45$0 >> 2] = 0 | $17$0;
  var $st$45$1 = $15 + 4 | 0;
  HEAP32[$st$45$1 >> 2] = $21$1;
  var $userData11_i = HEAP32[$m_nodes_i$s2] + $call_i * 36 + 16 | 0;
  HEAP32[$userData11_i >> 2] = $userData;
  var $height_i = HEAP32[$m_nodes_i$s2] + $call_i * 36 + 32 | 0;
  HEAP32[$height_i >> 2] = 0;
  __ZN13b2DynamicTree10InsertLeafEi($m_tree, $call_i);
  var $m_proxyCount = $this + 28 | 0;
  var $inc = HEAP32[$m_proxyCount >> 2] + 1 | 0;
  HEAP32[$m_proxyCount >> 2] = $inc;
  var $m_moveCount_i$s2 = ($this + 40 | 0) >> 2;
  var $25 = HEAP32[$m_moveCount_i$s2];
  var $m_moveCapacity_i = $this + 36 | 0;
  var $26 = HEAP32[$m_moveCapacity_i >> 2];
  var $m_moveBuffer_i$s2 = ($this + 32 | 0) >> 2;
  if (($25 | 0) == ($26 | 0)) {
    var $27 = HEAP32[$m_moveBuffer_i$s2];
    var $mul_i = $26 << 1;
    HEAP32[$m_moveCapacity_i >> 2] = $mul_i;
    var $mul4_i = $26 << 3;
    var $call_i_i = _malloc($mul4_i);
    var $28 = $call_i_i;
    HEAP32[$m_moveBuffer_i$s2] = $28;
    var $29 = $27;
    var $mul8_i = HEAP32[$m_moveCount_i$s2] << 2;
    _memcpy($call_i_i, $29, $mul8_i, 1);
    _free($29);
    var $31 = HEAP32[$m_moveCount_i$s2];
  } else {
    var $31 = $25;
  }
  var $31;
  var $arrayidx_i = ($31 << 2) + HEAP32[$m_moveBuffer_i$s2] | 0;
  HEAP32[$arrayidx_i >> 2] = $call_i;
  var $inc_i = HEAP32[$m_moveCount_i$s2] + 1 | 0;
  HEAP32[$m_moveCount_i$s2] = $inc_i;
  return $call_i;
  return null;
}

function __ZN12b2BroadPhase10BufferMoveEi($this, $proxyId) {
  var $m_moveBuffer$s2;
  var $m_moveCount$s2;
  var $m_moveCount$s2 = ($this + 40 | 0) >> 2;
  var $0 = HEAP32[$m_moveCount$s2];
  var $m_moveCapacity = $this + 36 | 0;
  var $1 = HEAP32[$m_moveCapacity >> 2];
  var $m_moveBuffer$s2 = ($this + 32 | 0) >> 2;
  if (($0 | 0) == ($1 | 0)) {
    var $2 = HEAP32[$m_moveBuffer$s2];
    var $mul = $1 << 1;
    HEAP32[$m_moveCapacity >> 2] = $mul;
    var $mul4 = $1 << 3;
    var $call_i = _malloc($mul4);
    var $3 = $call_i;
    HEAP32[$m_moveBuffer$s2] = $3;
    var $4 = $2;
    var $mul8 = HEAP32[$m_moveCount$s2] << 2;
    _memcpy($call_i, $4, $mul8, 1);
    _free($4);
    var $6 = HEAP32[$m_moveCount$s2];
  } else {
    var $6 = $0;
  }
  var $6;
  var $arrayidx = ($6 << 2) + HEAP32[$m_moveBuffer$s2] | 0;
  HEAP32[$arrayidx >> 2] = $proxyId;
  var $inc = HEAP32[$m_moveCount$s2] + 1 | 0;
  HEAP32[$m_moveCount$s2] = $inc;
  return;
  return;
}

function __ZN12b2BroadPhase12DestroyProxyEi($this, $proxyId) {
  var $0 = HEAP32[$this + 40 >> 2];
  var $m_moveBuffer_i = $this + 32 | 0;
  var $i_0_i = 0;
  while (1) {
    var $i_0_i;
    if (($i_0_i | 0) >= ($0 | 0)) {
      break;
    }
    var $arrayidx_i = ($i_0_i << 2) + HEAP32[$m_moveBuffer_i >> 2] | 0;
    if ((HEAP32[$arrayidx_i >> 2] | 0) == ($proxyId | 0)) {
      HEAP32[$arrayidx_i >> 2] = -1;
      break;
    }
    var $i_0_i = $i_0_i + 1 | 0;
  }
  var $m_proxyCount = $this + 28 | 0;
  var $dec = HEAP32[$m_proxyCount >> 2] - 1 | 0;
  HEAP32[$m_proxyCount >> 2] = $dec;
  var $m_tree = $this | 0;
  __ZN13b2DynamicTree12DestroyProxyEi($m_tree, $proxyId);
  return;
  return;
}

function __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($this, $proxyId, $aabb, $displacement) {
  var $m_moveBuffer_i$s2;
  var $m_moveCount_i$s2;
  var $m_tree = $this | 0;
  var $call = __ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($m_tree, $proxyId, $aabb, $displacement);
  if ($call) {
    var $m_moveCount_i$s2 = ($this + 40 | 0) >> 2;
    var $0 = HEAP32[$m_moveCount_i$s2];
    var $m_moveCapacity_i = $this + 36 | 0;
    var $1 = HEAP32[$m_moveCapacity_i >> 2];
    var $m_moveBuffer_i$s2 = ($this + 32 | 0) >> 2;
    if (($0 | 0) == ($1 | 0)) {
      var $2 = HEAP32[$m_moveBuffer_i$s2];
      var $mul_i = $1 << 1;
      HEAP32[$m_moveCapacity_i >> 2] = $mul_i;
      var $mul4_i = $1 << 3;
      var $call_i_i = _malloc($mul4_i);
      var $3 = $call_i_i;
      HEAP32[$m_moveBuffer_i$s2] = $3;
      var $4 = $2;
      var $mul8_i = HEAP32[$m_moveCount_i$s2] << 2;
      _memcpy($call_i_i, $4, $mul8_i, 1);
      _free($4);
      var $6 = HEAP32[$m_moveCount_i$s2];
    } else {
      var $6 = $0;
    }
    var $6;
    var $arrayidx_i = ($6 << 2) + HEAP32[$m_moveBuffer_i$s2] | 0;
    HEAP32[$arrayidx_i >> 2] = $proxyId;
    var $inc_i = HEAP32[$m_moveCount_i$s2] + 1 | 0;
    HEAP32[$m_moveCount_i$s2] = $inc_i;
  }
  return;
  return;
}

function __ZN12b2BroadPhase10TouchProxyEi($this, $proxyId) {
  var $m_moveBuffer_i$s2;
  var $m_moveCount_i$s2;
  var $m_moveCount_i$s2 = ($this + 40 | 0) >> 2;
  var $0 = HEAP32[$m_moveCount_i$s2];
  var $m_moveCapacity_i = $this + 36 | 0;
  var $1 = HEAP32[$m_moveCapacity_i >> 2];
  var $m_moveBuffer_i$s2 = ($this + 32 | 0) >> 2;
  if (($0 | 0) == ($1 | 0)) {
    var $2 = HEAP32[$m_moveBuffer_i$s2];
    var $mul_i = $1 << 1;
    HEAP32[$m_moveCapacity_i >> 2] = $mul_i;
    var $mul4_i = $1 << 3;
    var $call_i_i = _malloc($mul4_i);
    var $3 = $call_i_i;
    HEAP32[$m_moveBuffer_i$s2] = $3;
    var $4 = $2;
    var $mul8_i = HEAP32[$m_moveCount_i$s2] << 2;
    _memcpy($call_i_i, $4, $mul8_i, 1);
    _free($4);
    var $6 = HEAP32[$m_moveCount_i$s2];
  } else {
    var $6 = $0;
  }
  var $6;
  var $arrayidx_i = ($6 << 2) + HEAP32[$m_moveBuffer_i$s2] | 0;
  HEAP32[$arrayidx_i >> 2] = $proxyId;
  var $inc_i = HEAP32[$m_moveCount_i$s2] + 1 | 0;
  HEAP32[$m_moveCount_i$s2] = $inc_i;
  return;
  return;
}

function __ZN12b2BroadPhase13QueryCallbackEi($this, $proxyId) {
  var $m_pairBuffer$s2;
  var $m_pairCount$s2;
  var $m_queryProxyId$s2;
  var $m_queryProxyId$s2 = ($this + 56 | 0) >> 2;
  var $0 = HEAP32[$m_queryProxyId$s2];
  if (($0 | 0) != ($proxyId | 0)) {
    var $m_pairCount$s2 = ($this + 52 | 0) >> 2;
    var $1 = HEAP32[$m_pairCount$s2];
    var $m_pairCapacity = $this + 48 | 0;
    var $2 = HEAP32[$m_pairCapacity >> 2];
    var $m_pairBuffer$s2 = ($this + 44 | 0) >> 2;
    if (($1 | 0) == ($2 | 0)) {
      var $3 = HEAP32[$m_pairBuffer$s2];
      var $mul = $2 << 1;
      HEAP32[$m_pairCapacity >> 2] = $mul;
      var $mul6 = $2 * 24 | 0;
      var $call_i = _malloc($mul6);
      var $4 = $call_i;
      HEAP32[$m_pairBuffer$s2] = $4;
      var $5 = $3;
      var $mul10 = HEAP32[$m_pairCount$s2] * 12 | 0;
      _memcpy($call_i, $5, $mul10, 1);
      _free($5);
      var $8 = HEAP32[$m_queryProxyId$s2];
      var $7 = HEAP32[$m_pairCount$s2];
    } else {
      var $8 = $0;
      var $7 = $1;
    }
    var $7;
    var $8;
    var $cond_i = ($8 | 0) > ($proxyId | 0) ? $proxyId : $8;
    var $proxyIdA = HEAP32[$m_pairBuffer$s2] + $7 * 12 | 0;
    HEAP32[$proxyIdA >> 2] = $cond_i;
    var $10 = HEAP32[$m_queryProxyId$s2];
    var $cond_i2 = ($10 | 0) < ($proxyId | 0) ? $proxyId : $10;
    var $proxyIdB = HEAP32[$m_pairBuffer$s2] + HEAP32[$m_pairCount$s2] * 12 + 4 | 0;
    HEAP32[$proxyIdB >> 2] = $cond_i2;
    var $inc = HEAP32[$m_pairCount$s2] + 1 | 0;
    HEAP32[$m_pairCount$s2] = $inc;
  }
  return 1;
  return null;
}

function __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, $polygonA, $xfA, $circleB, $xfB) {
  var $pointCount$s2;
  var $polygonA$s2 = $polygonA >> 2;
  var $manifold$s2 = $manifold >> 2;
  var $pointCount$s2 = ($manifold + 60 | 0) >> 2;
  HEAP32[$pointCount$s2] = 0;
  var $m_p = $circleB + 12 | 0;
  var $0 = HEAPF32[$xfB + 12 >> 2];
  var $1 = HEAPF32[$m_p >> 2];
  var $2 = HEAPF32[$xfB + 8 >> 2];
  var $3 = HEAPF32[$circleB + 16 >> 2];
  var $sub_i28 = $0 * $1 - $2 * $3 + HEAPF32[$xfB >> 2] - HEAPF32[$xfA >> 2];
  var $sub4_i = $2 * $1 + $0 * $3 + HEAPF32[$xfB + 4 >> 2] - HEAPF32[$xfA + 4 >> 2];
  var $8 = HEAPF32[$xfA + 12 >> 2];
  var $9 = HEAPF32[$xfA + 8 >> 2];
  var $add_i33 = $8 * $sub_i28 + $9 * $sub4_i;
  var $add16_i = $sub_i28 * -$9 + $8 * $sub4_i;
  var $add = HEAPF32[$polygonA$s2 + 2] + HEAPF32[$circleB + 8 >> 2];
  var $12 = HEAP32[$polygonA$s2 + 37];
  var $i_0 = 0;
  var $separation_0 = -3.4028234663852886e+38;
  var $normalIndex_0 = 0;
  while (1) {
    var $normalIndex_0;
    var $separation_0;
    var $i_0;
    if (($i_0 | 0) < ($12 | 0)) {
      var $add_i152 = HEAPF32[(($i_0 << 3) + 84 >> 2) + $polygonA$s2] * ($add_i33 - HEAPF32[(($i_0 << 3) + 20 >> 2) + $polygonA$s2]) + HEAPF32[(($i_0 << 3) + 88 >> 2) + $polygonA$s2] * ($add16_i - HEAPF32[(($i_0 << 3) + 24 >> 2) + $polygonA$s2]);
      if ($add_i152 > $add) {
        break;
      }
      var $cmp5 = $add_i152 > $separation_0;
      var $normalIndex_1 = $cmp5 ? $i_0 : $normalIndex_0;
      var $separation_1 = $cmp5 ? $add_i152 : $separation_0;
      var $i_0 = $i_0 + 1 | 0;
      var $separation_0 = $separation_1;
      var $normalIndex_0 = $normalIndex_1;
    } else {
      var $add8 = $normalIndex_0 + 1 | 0;
      var $cond = ($add8 | 0) < ($12 | 0) ? $add8 : 0;
      var $17 = ($normalIndex_0 << 3) + $polygonA + 20 | 0;
      var $18$0 = HEAPU32[$17 >> 2];
      var $18$1 = HEAPU32[$17 + 4 >> 2];
      var $20 = (tempDoubleI32[0] = $18$0, tempDoubleF32[0]);
      var $22 = (tempDoubleI32[0] = $18$1, tempDoubleF32[0]);
      var $23 = ($cond << 3) + $polygonA + 20 | 0;
      var $24$0 = HEAPU32[$23 >> 2];
      var $24$1 = HEAPU32[$23 + 4 >> 2];
      var $26 = (tempDoubleI32[0] = $24$0, tempDoubleF32[0]);
      var $28 = (tempDoubleI32[0] = $24$1, tempDoubleF32[0]);
      if ($separation_0 < 1.1920928955078125e-7) {
        HEAP32[$pointCount$s2] = 1;
        HEAP32[$manifold$s2 + 14] = 1;
        var $29 = ($normalIndex_0 << 3) + $polygonA + 84 | 0;
        var $30 = $manifold + 40 | 0;
        var $31$0 = HEAP32[$29 >> 2];
        var $31$1 = HEAP32[$29 + 4 >> 2];
        HEAP32[$30 >> 2] = $31$0;
        HEAP32[$30 + 4 >> 2] = $31$1;
        var $mul_i133 = ($20 + $26) * .5;
        var $mul1_i135 = ($22 + $28) * .5;
        var $32 = $manifold + 48 | 0;
        var $33 = (tempDoubleF32[0] = $mul_i133, tempDoubleI32[0]);
        var $34$0 = $33;
        var $35 = (tempDoubleF32[0] = $mul1_i135, tempDoubleI32[0]);
        var $38$0 = 0 | $34$0;
        var $38$1 = $35 | 0;
        HEAP32[$32 >> 2] = $38$0;
        HEAP32[$32 + 4 >> 2] = $38$1;
        var $39 = $m_p;
        var $40 = $manifold;
        var $41$0 = HEAP32[$39 >> 2];
        var $41$1 = HEAP32[$39 + 4 >> 2];
        HEAP32[$40 >> 2] = $41$0;
        HEAP32[$40 + 4 >> 2] = $41$1;
        HEAP32[$manifold$s2 + 4] = 0;
        break;
      }
      var $sub_i126 = $add_i33 - $20;
      var $sub3_i129 = $add16_i - $22;
      var $sub_i103 = $add_i33 - $26;
      var $sub3_i106 = $add16_i - $28;
      if ($sub_i126 * ($26 - $20) + $sub3_i129 * ($28 - $22) <= 0) {
        var $add_i_i85 = $sub_i126 * $sub_i126 + $sub3_i129 * $sub3_i129;
        if ($add_i_i85 > $add * $add) {
          break;
        }
        HEAP32[$pointCount$s2] = 1;
        HEAP32[$manifold$s2 + 14] = 1;
        var $localNormal39 = $manifold + 40 | 0;
        var $42 = $localNormal39;
        var $43 = (tempDoubleF32[0] = $sub_i126, tempDoubleI32[0]);
        var $44$0 = $43;
        var $45 = (tempDoubleF32[0] = $sub3_i129, tempDoubleI32[0]);
        var $48$1 = $45 | 0;
        var $st$15$0 = $42 | 0;
        HEAP32[$st$15$0 >> 2] = 0 | $44$0;
        var $st$15$1 = $42 + 4 | 0;
        HEAP32[$st$15$1 >> 2] = $48$1;
        var $call_i_i_i53 = _sqrtf($add_i_i85);
        if ($call_i_i_i53 >= 1.1920928955078125e-7) {
          var $y_i_i50 = $manifold + 44 | 0;
          var $div_i55 = 1 / $call_i_i_i53;
          var $mul_i56 = $sub_i126 * $div_i55;
          HEAPF32[$localNormal39 >> 2] = $mul_i56;
          var $mul2_i57 = $sub3_i129 * $div_i55;
          HEAPF32[$y_i_i50 >> 2] = $mul2_i57;
        }
        var $49 = $manifold + 48 | 0;
        var $st$2$0 = $49 | 0;
        HEAP32[$st$2$0 >> 2] = $18$0;
        var $st$2$1 = $49 + 4 | 0;
        HEAP32[$st$2$1 >> 2] = $18$1;
        var $50 = $m_p;
        var $51 = $manifold;
        var $st$8$0 = $50 | 0;
        var $52$0 = HEAP32[$st$8$0 >> 2];
        var $st$8$1 = $50 + 4 | 0;
        var $52$1 = HEAP32[$st$8$1 >> 2];
        var $st$12$0 = $51 | 0;
        HEAP32[$st$12$0 >> 2] = $52$0;
        var $st$12$1 = $51 + 4 | 0;
        HEAP32[$st$12$1 >> 2] = $52$1;
        HEAP32[$manifold$s2 + 4] = 0;
        break;
      }
      if ($sub_i103 * ($20 - $26) + $sub3_i106 * ($22 - $28) > 0) {
        var $mul_i14 = ($20 + $26) * .5;
        var $mul1_i = ($22 + $28) * .5;
        var $arrayidx78 = ($normalIndex_0 << 3) + $polygonA + 84 | 0;
        if (($add_i33 - $mul_i14) * HEAPF32[$arrayidx78 >> 2] + ($add16_i - $mul1_i) * HEAPF32[(($normalIndex_0 << 3) + 88 >> 2) + $polygonA$s2] > $add) {
          break;
        }
        HEAP32[$pointCount$s2] = 1;
        HEAP32[$manifold$s2 + 14] = 1;
        var $66 = $arrayidx78;
        var $67 = $manifold + 40 | 0;
        var $68$0 = HEAP32[$66 >> 2];
        var $68$1 = HEAP32[$66 + 4 >> 2];
        HEAP32[$67 >> 2] = $68$0;
        HEAP32[$67 + 4 >> 2] = $68$1;
        var $69 = $manifold + 48 | 0;
        var $70 = (tempDoubleF32[0] = $mul_i14, tempDoubleI32[0]);
        var $71$0 = $70;
        var $72 = (tempDoubleF32[0] = $mul1_i, tempDoubleI32[0]);
        var $75$0 = 0 | $71$0;
        var $75$1 = $72 | 0;
        HEAP32[$69 >> 2] = $75$0;
        HEAP32[$69 + 4 >> 2] = $75$1;
        var $76 = $m_p;
        var $77 = $manifold;
        var $78$0 = HEAP32[$76 >> 2];
        var $78$1 = HEAP32[$76 + 4 >> 2];
        HEAP32[$77 >> 2] = $78$0;
        HEAP32[$77 + 4 >> 2] = $78$1;
        HEAP32[$manifold$s2 + 4] = 0;
        break;
      }
      var $add_i_i47 = $sub_i103 * $sub_i103 + $sub3_i106 * $sub3_i106;
      if ($add_i_i47 > $add * $add) {
        break;
      }
      HEAP32[$pointCount$s2] = 1;
      HEAP32[$manifold$s2 + 14] = 1;
      var $localNormal61 = $manifold + 40 | 0;
      var $53 = $localNormal61;
      var $54 = (tempDoubleF32[0] = $sub_i103, tempDoubleI32[0]);
      var $55$0 = $54;
      var $56 = (tempDoubleF32[0] = $sub3_i106, tempDoubleI32[0]);
      var $59$0 = 0 | $55$0;
      var $59$1 = $56 | 0;
      var $st$15$0 = $53 | 0;
      HEAP32[$st$15$0 >> 2] = $59$0;
      var $st$15$1 = $53 + 4 | 0;
      HEAP32[$st$15$1 >> 2] = $59$1;
      var $call_i_i_i = _sqrtf($add_i_i47);
      if ($call_i_i_i >= 1.1920928955078125e-7) {
        var $y_i_i = $manifold + 44 | 0;
        var $div_i = 1 / $call_i_i_i;
        var $mul_i25 = $sub_i103 * $div_i;
        HEAPF32[$localNormal61 >> 2] = $mul_i25;
        var $mul2_i = $sub3_i106 * $div_i;
        HEAPF32[$y_i_i >> 2] = $mul2_i;
      }
      var $60 = $manifold + 48 | 0;
      var $st$2$0 = $60 | 0;
      HEAP32[$st$2$0 >> 2] = $24$0;
      var $st$2$1 = $60 + 4 | 0;
      HEAP32[$st$2$1 >> 2] = $24$1;
      var $61 = $m_p;
      var $62 = $manifold;
      var $st$8$0 = $61 | 0;
      var $63$0 = HEAP32[$st$8$0 >> 2];
      var $st$8$1 = $61 + 4 | 0;
      var $63$1 = HEAP32[$st$8$1 >> 2];
      var $st$12$0 = $62 | 0;
      HEAP32[$st$12$0 >> 2] = $63$0;
      var $st$12$1 = $62 + 4 | 0;
      HEAP32[$st$12$1 >> 2] = $63$1;
      HEAP32[$manifold$s2 + 4] = 0;
      break;
    }
  }
  return;
  return;
}

function __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, $edgeA, $xfA, $circleB, $xfB) {
  var $pointCount$s2;
  var $manifold$s2 = $manifold >> 2;
  var $pointCount$s2 = ($manifold + 60 | 0) >> 2;
  HEAP32[$pointCount$s2] = 0;
  var $m_p = $circleB + 12 | 0;
  var $0 = HEAPF32[$xfB + 12 >> 2];
  var $1 = HEAPF32[$m_p >> 2];
  var $2 = HEAPF32[$xfB + 8 >> 2];
  var $3 = HEAPF32[$circleB + 16 >> 2];
  var $sub_i17 = $0 * $1 - $2 * $3 + HEAPF32[$xfB >> 2] - HEAPF32[$xfA >> 2];
  var $sub4_i = $2 * $1 + $0 * $3 + HEAPF32[$xfB + 4 >> 2] - HEAPF32[$xfA + 4 >> 2];
  var $8 = HEAPF32[$xfA + 12 >> 2];
  var $9 = HEAPF32[$xfA + 8 >> 2];
  var $add_i22 = $8 * $sub_i17 + $9 * $sub4_i;
  var $add16_i = $sub_i17 * -$9 + $8 * $sub4_i;
  var $10 = $edgeA + 12 | 0;
  var $11$0 = HEAPU32[$10 >> 2];
  var $11$1 = HEAPU32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = $11$0, tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = $edgeA + 20 | 0;
  var $17$0 = HEAPU32[$16 >> 2];
  var $17$1 = HEAPU32[$16 + 4 >> 2];
  var $19 = (tempDoubleI32[0] = $17$0, tempDoubleF32[0]);
  var $21 = (tempDoubleI32[0] = $17$1, tempDoubleF32[0]);
  var $sub_i198 = $19 - $13;
  var $sub3_i201 = $21 - $15;
  var $add_i187 = $sub_i198 * ($19 - $add_i22) + $sub3_i201 * ($21 - $add16_i);
  var $sub_i175 = $add_i22 - $13;
  var $sub3_i178 = $add16_i - $15;
  var $add_i172 = $sub_i198 * $sub_i175 + $sub3_i201 * $sub3_i178;
  var $add = HEAPF32[$edgeA + 8 >> 2] + HEAPF32[$circleB + 8 >> 2];
  var $cmp = $add_i172 > 0;
  do {
    if ($cmp) {
      if ($add_i187 > 0) {
        var $add_i85 = $sub_i198 * $sub_i198 + $sub3_i201 * $sub3_i201;
        if ($add_i85 <= 0) {
          ___assert_func(STRING_TABLE.__str | 0, 127, STRING_TABLE.___PRETTY_FUNCTION____Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_ | 0, STRING_TABLE.__str1 | 0);
        }
        var $div = 1 / $add_i85;
        var $sub_i49 = $add_i22 - ($13 * $add_i187 + $19 * $add_i172) * $div;
        var $sub3_i52 = $add16_i - ($15 * $add_i187 + $21 * $add_i172) * $div;
        if ($sub_i49 * $sub_i49 + $sub3_i52 * $sub3_i52 > $add * $add) {
          break;
        }
        var $sub = -$sub3_i201;
        if ($sub_i175 * $sub + $sub_i198 * $sub3_i178 < 0) {
          var $49 = $sub3_i201;
          var $48 = -$sub_i198;
        } else {
          var $49 = $sub;
          var $48 = $sub_i198;
        }
        var $48;
        var $49;
        var $call_i_i_i = _sqrtf($49 * $49 + $48 * $48);
        if ($call_i_i_i < 1.1920928955078125e-7) {
          var $51 = $49;
          var $50 = $48;
        } else {
          var $div_i = 1 / $call_i_i_i;
          var $51 = $49 * $div_i;
          var $50 = $48 * $div_i;
        }
        var $50;
        var $51;
        HEAP32[$pointCount$s2] = 1;
        HEAP32[$manifold$s2 + 14] = 1;
        var $52 = $manifold + 40 | 0;
        var $53 = (tempDoubleF32[0] = $51, tempDoubleI32[0]);
        var $54$0 = $53;
        var $55 = (tempDoubleF32[0] = $50, tempDoubleI32[0]);
        var $58$1 = $55 | 0;
        HEAP32[$52 >> 2] = 0 | $54$0;
        HEAP32[$52 + 4 >> 2] = $58$1;
        var $59 = $manifold + 48 | 0;
        HEAP32[$59 >> 2] = $11$0;
        HEAP32[$59 + 4 >> 2] = $11$1;
        var $id93 = $manifold + 16 | 0;
        HEAP32[$id93 >> 2] = 0;
        var $id971 = $id93;
        HEAP8[$id93] = 0;
        HEAP8[$id971 + 1 | 0] = 0;
        HEAP8[$id971 + 2 | 0] = 1;
        HEAP8[$id971 + 3 | 0] = 0;
        var $60 = $m_p;
        var $61 = $manifold;
        var $62$0 = HEAP32[$60 >> 2];
        var $62$1 = HEAP32[$60 + 4 >> 2];
        HEAP32[$61 >> 2] = $62$0;
        HEAP32[$61 + 4 >> 2] = $62$1;
      } else {
        var $sub_i120 = $add_i22 - $19;
        var $sub3_i123 = $add16_i - $21;
        if ($sub_i120 * $sub_i120 + $sub3_i123 * $sub3_i123 > $add * $add) {
          break;
        }
        if ((HEAP8[$edgeA + 45 | 0] & 1) << 24 >> 24 != 0) {
          var $38 = $edgeA + 36 | 0;
          var $st$2$0 = $38 | 0;
          var $st$2$1 = $38 + 4 | 0;
          var $39$1 = HEAP32[$st$2$1 >> 2];
          var $41 = (tempDoubleI32[0] = HEAP32[$st$2$0 >> 2], tempDoubleF32[0]);
          var $43 = (tempDoubleI32[0] = $39$1, tempDoubleF32[0]);
          if (($41 - $19) * $sub_i120 + ($43 - $21) * $sub3_i123 > 0) {
            break;
          }
        }
        HEAP32[$pointCount$s2] = 1;
        HEAP32[$manifold$s2 + 14] = 0;
        HEAPF32[$manifold$s2 + 10] = 0;
        HEAPF32[$manifold$s2 + 11] = 0;
        var $44 = $manifold + 48 | 0;
        var $st$9$0 = $44 | 0;
        HEAP32[$st$9$0 >> 2] = $17$0;
        var $st$9$1 = $44 + 4 | 0;
        HEAP32[$st$9$1 >> 2] = $17$1;
        var $id51 = $manifold + 16 | 0;
        HEAP32[$id51 >> 2] = 0;
        var $id555 = $id51;
        HEAP8[$id51] = 1;
        HEAP8[$id555 + 1 | 0] = 0;
        HEAP8[$id555 + 2 | 0] = 0;
        HEAP8[$id555 + 3 | 0] = 0;
        var $45 = $m_p;
        var $46 = $manifold;
        var $st$27$0 = $45 | 0;
        var $47$0 = HEAP32[$st$27$0 >> 2];
        var $st$27$1 = $45 + 4 | 0;
        var $47$1 = HEAP32[$st$27$1 >> 2];
        var $st$31$0 = $46 | 0;
        HEAP32[$st$31$0 >> 2] = $47$0;
        var $st$31$1 = $46 + 4 | 0;
        HEAP32[$st$31$1 >> 2] = $47$1;
      }
    } else {
      if ($sub_i175 * $sub_i175 + $sub3_i178 * $sub3_i178 > $add * $add) {
        break;
      }
      if ((HEAP8[$edgeA + 44 | 0] & 1) << 24 >> 24 != 0) {
        var $26 = $edgeA + 28 | 0;
        var $st$2$0 = $26 | 0;
        var $st$2$1 = $26 + 4 | 0;
        var $27$1 = HEAP32[$st$2$1 >> 2];
        var $29 = (tempDoubleI32[0] = HEAP32[$st$2$0 >> 2], tempDoubleF32[0]);
        var $31 = (tempDoubleI32[0] = $27$1, tempDoubleF32[0]);
        if (($13 - $29) * ($13 - $add_i22) + ($15 - $31) * ($15 - $add16_i) > 0) {
          break;
        }
      }
      HEAP32[$pointCount$s2] = 1;
      HEAP32[$manifold$s2 + 14] = 0;
      HEAPF32[$manifold$s2 + 10] = 0;
      HEAPF32[$manifold$s2 + 11] = 0;
      var $32 = $manifold + 48 | 0;
      var $st$9$0 = $32 | 0;
      HEAP32[$st$9$0 >> 2] = $11$0;
      var $st$9$1 = $32 + 4 | 0;
      HEAP32[$st$9$1 >> 2] = $11$1;
      var $id = $manifold + 16 | 0;
      HEAP32[$id >> 2] = 0;
      var $id1810 = $id;
      HEAP8[$id] = 0;
      HEAP8[$id1810 + 1 | 0] = 0;
      HEAP8[$id1810 + 2 | 0] = 0;
      HEAP8[$id1810 + 3 | 0] = 0;
      var $33 = $m_p;
      var $34 = $manifold;
      var $st$27$0 = $33 | 0;
      var $35$0 = HEAP32[$st$27$0 >> 2];
      var $st$27$1 = $33 + 4 | 0;
      var $35$1 = HEAP32[$st$27$1 >> 2];
      var $st$31$0 = $34 | 0;
      HEAP32[$st$31$0 >> 2] = $35$0;
      var $st$31$1 = $34 + 4 | 0;
      HEAP32[$st$31$1 >> 2] = $35$1;
    }
  } while (0);
  return;
  return;
}

function __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($this, $manifold, $edgeA, $xfA, $polygonB, $xfB) {
  var $465$s2;
  var $464$s2;
  var $463$s2;
  var $462$s2;
  var $450$s2;
  var $449$s2;
  var $448$s2;
  var $447$s2;
  var $m_radius$s2;
  var $count$s2;
  var $m_vertexCount$s2;
  var $st$20$1$s2;
  var $st$20$0$s2;
  var $st$32$1$s2;
  var $st$32$0$s2;
  var $st$23$1$s2;
  var $st$23$0$s2;
  var $st$6$1$s2;
  var $st$6$0$s2;
  var $st$2$1$s2;
  var $st$2$0$s2;
  var $st$29$1$s2;
  var $st$29$0$s2;
  var $st$25$1$s2;
  var $st$25$0$s2;
  var $st$33$1$s2;
  var $st$33$0$s2;
  var $st$13$1$s2;
  var $st$13$0$s2;
  var $st$27$1$s2;
  var $st$27$0$s2;
  var $st$19$1$s2;
  var $st$19$0$s2;
  var $st$15$1$s2;
  var $st$15$0$s2;
  var $st$7$1$s2;
  var $st$7$0$s2;
  var $st$3$1$s2;
  var $st$3$0$s2;
  var $st$24$1$s2;
  var $st$24$0$s2;
  var $st$18$1$s2;
  var $st$18$0$s2;
  var $st$12$1$s2;
  var $st$12$0$s2;
  var $y_i360$s2;
  var $x_i359$s2;
  var $y_i437$s2;
  var $x_i436$s2;
  var $y16_i$s2;
  var $x4_i$s2;
  var $s_i131$s2;
  var $c_i128$s2;
  var $clipPoints2$s2;
  var $clipPoints1$s2;
  var $polygonAxis$s2;
  var $polygonB$s2 = $polygonB >> 2;
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 84;
  var __label__;
  var $polygonAxis = __stackBase__, $polygonAxis$s2 = $polygonAxis >> 2;
  var $ie = __stackBase__ + 12;
  var $clipPoints1 = __stackBase__ + 36, $clipPoints1$s2 = $clipPoints1 >> 2;
  var $clipPoints2 = __stackBase__ + 60, $clipPoints2$s2 = $clipPoints2 >> 2;
  var $m_xf = $this + 132 | 0;
  var $0 = HEAPF32[$xfA + 12 >> 2];
  var $1 = HEAPF32[$xfB + 8 >> 2];
  var $2 = HEAPF32[$xfA + 8 >> 2];
  var $3 = HEAPF32[$xfB + 12 >> 2];
  var $sub_i9_i = $0 * $1 - $2 * $3;
  var $add_i11_i = $0 * $3 + $2 * $1;
  var $4 = (tempDoubleF32[0] = $sub_i9_i, tempDoubleI32[0]);
  var $5$0 = $4;
  var $6 = (tempDoubleF32[0] = $add_i11_i, tempDoubleI32[0]);
  var $9$0 = 0 | $5$0;
  var $9$1 = $6 | 0;
  var $sub_i2_i = HEAPF32[$xfB >> 2] - HEAPF32[$xfA >> 2];
  var $sub3_i_i = HEAPF32[$xfB + 4 >> 2] - HEAPF32[$xfA + 4 >> 2];
  var $add_i_i = $0 * $sub_i2_i + $2 * $sub3_i_i;
  var $add8_i_i = $sub_i2_i * -$2 + $0 * $sub3_i_i;
  var $14 = (tempDoubleF32[0] = $add_i_i, tempDoubleI32[0]);
  var $15$0 = $14;
  var $16 = (tempDoubleF32[0] = $add8_i_i, tempDoubleI32[0]);
  var $19$1 = $16 | 0;
  var $20 = $m_xf;
  var $st$57$0 = $20 | 0;
  HEAP32[$st$57$0 >> 2] = 0 | $15$0;
  var $st$57$1 = $20 + 4 | 0;
  HEAP32[$st$57$1 >> 2] = $19$1;
  var $21 = $this + 140 | 0;
  HEAP32[$21 >> 2] = $9$0;
  HEAP32[$21 + 4 >> 2] = $9$1;
  var $c_i128$s2 = ($this + 144 | 0) >> 2;
  var $22 = HEAPF32[$polygonB$s2 + 3];
  var $s_i131$s2 = ($this + 140 | 0) >> 2;
  var $23 = HEAPF32[$polygonB$s2 + 4];
  var $x4_i$s2 = ($m_xf | 0) >> 2;
  var $add_i135 = $add_i11_i * $22 - $sub_i9_i * $23 + $add_i_i;
  var $y16_i$s2 = ($this + 136 | 0) >> 2;
  var $add17_i = $sub_i9_i * $22 + $add_i11_i * $23 + $add8_i_i;
  var $24 = $this + 148 | 0;
  var $25 = (tempDoubleF32[0] = $add_i135, tempDoubleI32[0]);
  var $26$0 = $25;
  var $27 = (tempDoubleF32[0] = $add17_i, tempDoubleI32[0]);
  var $30$1 = $27 | 0;
  HEAP32[$24 >> 2] = 0 | $26$0;
  HEAP32[$24 + 4 >> 2] = $30$1;
  var $31 = $edgeA + 28 | 0;
  var $32 = $this + 156 | 0;
  var $33$0 = HEAP32[$31 >> 2];
  var $33$1 = HEAP32[$31 + 4 >> 2];
  HEAP32[$32 >> 2] = $33$0;
  HEAP32[$32 + 4 >> 2] = $33$1;
  var $34 = $edgeA + 12 | 0;
  var $35 = $this + 164 | 0;
  var $36$0 = HEAP32[$34 >> 2];
  var $36$1 = HEAP32[$34 + 4 >> 2];
  HEAP32[$35 >> 2] = $36$0;
  HEAP32[$35 + 4 >> 2] = $36$1;
  var $37 = $edgeA + 20 | 0;
  var $38 = $this + 172 | 0;
  var $39$0 = HEAP32[$37 >> 2];
  var $39$1 = HEAP32[$37 + 4 >> 2];
  HEAP32[$38 >> 2] = $39$0;
  HEAP32[$38 + 4 >> 2] = $39$1;
  var $40 = $edgeA + 36 | 0;
  var $41 = $this + 180 | 0;
  var $42$0 = HEAP32[$40 >> 2];
  var $42$1 = HEAP32[$40 + 4 >> 2];
  HEAP32[$41 >> 2] = $42$0;
  HEAP32[$41 + 4 >> 2] = $42$1;
  var $44 = HEAP8[$edgeA + 44 | 0] & 1;
  var $tobool = $44 << 24 >> 24 != 0;
  var $45 = HEAP8[$edgeA + 45 | 0];
  var $tobool4 = ($45 & 1) << 24 >> 24 != 0;
  var $bitcast608 = (tempDoubleI32[0] = $39$0, tempDoubleF32[0]);
  var $bitcast610 = (tempDoubleI32[0] = $36$0, tempDoubleF32[0]);
  var $sub_i372 = $bitcast608 - $bitcast610;
  var $49 = (tempDoubleI32[0] = $39$1, tempDoubleF32[0]);
  var $y2_i374 = $this + 168 | 0;
  var $52 = (tempDoubleI32[0] = $36$1, tempDoubleF32[0]);
  var $sub3_i375 = $49 - $52;
  var $add_i_i427 = $sub_i372 * $sub_i372 + $sub3_i375 * $sub3_i375;
  var $call_i_i_i428 = _sqrtf($add_i_i427);
  var $cmp_i429 = $call_i_i_i428 < 1.1920928955078125e-7;
  var $54 = (tempDoubleI32[0] = $33$0, tempDoubleF32[0]);
  var $57 = (tempDoubleI32[0] = $33$1, tempDoubleF32[0]);
  var $59 = (tempDoubleI32[0] = $42$0, tempDoubleF32[0]);
  var $62 = (tempDoubleI32[0] = $42$1, tempDoubleF32[0]);
  if ($cmp_i429) {
    var $64 = $sub_i372;
    var $63 = $sub3_i375;
  } else {
    var $div_i430 = 1 / $call_i_i_i428;
    var $64 = $sub_i372 * $div_i430;
    var $63 = $sub3_i375 * $div_i430;
  }
  var $63;
  var $64;
  var $m_normal1 = $this + 196 | 0;
  var $sub = -$64;
  var $x_i436$s2 = ($m_normal1 | 0) >> 2;
  HEAPF32[$x_i436$s2] = $63;
  var $y_i437$s2 = ($this + 200 | 0) >> 2;
  HEAPF32[$y_i437$s2] = $sub;
  var $add_i452 = $63 * ($add_i135 - $bitcast610) + ($add17_i - $52) * $sub;
  if ($tobool) {
    var $sub_i440 = $bitcast610 - $54;
    var $sub3_i443 = $52 - $57;
    var $add_i_i414 = $sub_i440 * $sub_i440 + $sub3_i443 * $sub3_i443;
    var $call_i_i_i415 = _sqrtf($add_i_i414);
    if ($call_i_i_i415 < 1.1920928955078125e-7) {
      var $66 = $sub_i440;
      var $65 = $sub3_i443;
    } else {
      var $div_i417 = 1 / $call_i_i_i415;
      var $66 = $sub_i440 * $div_i417;
      var $65 = $sub3_i443 * $div_i417;
    }
    var $65;
    var $66;
    var $sub19 = -$66;
    HEAPF32[$this$s2 + 47] = $65;
    HEAPF32[$this$s2 + 48] = $sub19;
    var $convex1_0 = $66 * $63 - $65 * $64 >= 0;
    var $offset0_0 = $65 * ($add_i135 - $54) + ($add17_i - $57) * $sub19;
  } else {
    var $convex1_0 = 0;
    var $offset0_0 = 0;
  }
  var $offset0_0;
  var $convex1_0;
  $if_then28$$if_else165$11 : do {
    if ($tobool4) {
      var $sub_i380 = $59 - $bitcast608;
      var $sub3_i383 = $62 - $49;
      var $add_i_i365 = $sub_i380 * $sub_i380 + $sub3_i383 * $sub3_i383;
      var $call_i_i_i = _sqrtf($add_i_i365);
      if ($call_i_i_i < 1.1920928955078125e-7) {
        var $68 = $sub_i380;
        var $67 = $sub3_i383;
      } else {
        var $div_i367 = 1 / $call_i_i_i;
        var $68 = $sub_i380 * $div_i367;
        var $67 = $sub3_i383 * $div_i367;
      }
      var $67;
      var $68;
      var $sub34 = -$68;
      var $x_i359$s2 = ($this + 204 | 0) >> 2;
      HEAPF32[$x_i359$s2] = $67;
      var $y_i360$s2 = ($this + 208 | 0) >> 2;
      HEAPF32[$y_i360$s2] = $sub34;
      var $cmp36 = $64 * $67 - $63 * $68 > 0;
      var $add_i345 = $67 * ($add_i135 - $bitcast608) + ($add17_i - $49) * $sub34;
      if (($44 & $45) << 24 >> 24 == 0) {
        var $offset2_0544 = $add_i345;
        var $convex2_0545 = $cmp36;
        __label__ = 37;
        break;
      }
      if ($convex1_0 & $cmp36) {
        var $or_cond = $offset0_0 < 0 & $add_i452 < 0;
        do {
          if ($or_cond) {
            var $cmp53 = $add_i345 >= 0;
            HEAP8[$this + 248 | 0] = $cmp53 & 1;
            var $m_normal = $this + 212 | 0;
            if ($cmp53) {
              var $m_normal549 = $m_normal;
              break;
            }
            var $79 = $m_normal;
            var $80 = (tempDoubleF32[0] = -$63, tempDoubleI32[0]);
            var $81$0 = $80;
            var $82 = (tempDoubleF32[0] = $64, tempDoubleI32[0]);
            var $85$0 = 0 | $81$0;
            var $85$1 = $82 | 0;
            var $st$12$0 = $79 | 0, $st$12$0$s2 = $st$12$0 >> 2;
            HEAP32[$st$12$0$s2] = $85$0;
            var $st$12$1 = $79 + 4 | 0, $st$12$1$s2 = $st$12$1 >> 2;
            HEAP32[$st$12$1$s2] = $85$1;
            var $86 = $this + 228 | 0;
            var $st$18$0 = $86 | 0, $st$18$0$s2 = $st$18$0 >> 2;
            HEAP32[$st$18$0$s2] = $85$0;
            var $st$18$1 = $86 + 4 | 0, $st$18$1$s2 = $st$18$1 >> 2;
            HEAP32[$st$18$1$s2] = $85$1;
            var $87 = $this + 236 | 0;
            var $st$24$0 = $87 | 0, $st$24$0$s2 = $st$24$0 >> 2;
            HEAP32[$st$24$0$s2] = $85$0;
            var $st$24$1 = $87 + 4 | 0, $st$24$1$s2 = $st$24$1 >> 2;
            HEAP32[$st$24$1$s2] = $85$1;
            __label__ = 64;
            break $if_then28$$if_else165$11;
          }
          HEAP8[$this + 248 | 0] = 1;
          var $m_normal549 = $this + 212 | 0;
        } while (0);
        var $m_normal549;
        var $70 = $m_normal1;
        var $71 = $m_normal549;
        var $st$3$0 = $70 | 0, $st$3$0$s2 = $st$3$0 >> 2;
        var $72$0 = HEAP32[$st$3$0$s2];
        var $st$3$1 = $70 + 4 | 0, $st$3$1$s2 = $st$3$1 >> 2;
        var $72$1 = HEAP32[$st$3$1$s2];
        var $st$7$0 = $71 | 0, $st$7$0$s2 = $st$7$0 >> 2;
        HEAP32[$st$7$0$s2] = $72$0;
        var $st$7$1 = $71 + 4 | 0, $st$7$1$s2 = $st$7$1 >> 2;
        HEAP32[$st$7$1$s2] = $72$1;
        var $73 = $this + 188 | 0;
        var $74 = $this + 228 | 0;
        var $st$15$0 = $73 | 0, $st$15$0$s2 = $st$15$0 >> 2;
        var $75$0 = HEAP32[$st$15$0$s2];
        var $st$15$1 = $73 + 4 | 0, $st$15$1$s2 = $st$15$1 >> 2;
        var $75$1 = HEAP32[$st$15$1$s2];
        var $st$19$0 = $74 | 0, $st$19$0$s2 = $st$19$0 >> 2;
        HEAP32[$st$19$0$s2] = $75$0;
        var $st$19$1 = $74 + 4 | 0, $st$19$1$s2 = $st$19$1 >> 2;
        HEAP32[$st$19$1$s2] = $75$1;
        var $76 = $this + 204 | 0;
        var $77 = $this + 236 | 0;
        var $st$27$0 = $76 | 0, $st$27$0$s2 = $st$27$0 >> 2;
        var $78$0 = HEAP32[$st$27$0$s2];
        var $st$27$1 = $76 + 4 | 0, $st$27$1$s2 = $st$27$1 >> 2;
        var $78$1 = HEAP32[$st$27$1$s2];
        HEAP32[$77 >> 2] = $78$0;
        HEAP32[$77 + 4 >> 2] = $78$1;
        __label__ = 64;
        break;
      }
      if ($convex1_0) {
        var $cmp74 = $offset0_0 < 0;
        do {
          if ($cmp74) {
            if ($add_i452 < 0) {
              HEAP8[$this + 248 | 0] = 0;
              var $m_normal84558 = $this + 212 | 0;
            } else {
              var $cmp77 = $add_i345 >= 0;
              HEAP8[$this + 248 | 0] = $cmp77 & 1;
              var $m_normal84 = $this + 212 | 0;
              if ($cmp77) {
                var $m_normal84553 = $m_normal84;
                break;
              }
              var $m_normal84558 = $m_normal84;
            }
            var $m_normal84558;
            var $96 = $m_normal84558;
            var $97 = (tempDoubleF32[0] = -$63, tempDoubleI32[0]);
            var $98$0 = $97;
            var $99 = (tempDoubleF32[0] = $64, tempDoubleI32[0]);
            var $102$1 = $99 | 0;
            var $st$13$0 = $96 | 0, $st$13$0$s2 = $st$13$0 >> 2;
            HEAP32[$st$13$0$s2] = 0 | $98$0;
            var $st$13$1 = $96 + 4 | 0, $st$13$1$s2 = $st$13$1 >> 2;
            HEAP32[$st$13$1$s2] = $102$1;
            var $sub2_i312 = -HEAPF32[$y_i360$s2];
            var $105 = $this + 228 | 0;
            var $106 = (tempDoubleF32[0] = -HEAPF32[$x_i359$s2], tempDoubleI32[0]);
            var $107$0 = $106;
            var $108 = (tempDoubleF32[0] = $sub2_i312, tempDoubleI32[0]);
            var $111$1 = $108 | 0;
            var $st$33$0 = $105 | 0, $st$33$0$s2 = $st$33$0 >> 2;
            HEAP32[$st$33$0$s2] = 0 | $107$0;
            var $st$33$1 = $105 + 4 | 0, $st$33$1$s2 = $st$33$1 >> 2;
            HEAP32[$st$33$1$s2] = $111$1;
            var $sub2_i306 = -HEAPF32[$y_i437$s2];
            var $114 = $this + 236 | 0;
            var $115 = (tempDoubleF32[0] = -HEAPF32[$x_i436$s2], tempDoubleI32[0]);
            var $116$0 = $115;
            var $117 = (tempDoubleF32[0] = $sub2_i306, tempDoubleI32[0]);
            var $120$1 = $117 | 0;
            HEAP32[$114 >> 2] = 0 | $116$0;
            HEAP32[$114 + 4 >> 2] = $120$1;
            __label__ = 64;
            break $if_then28$$if_else165$11;
          }
          HEAP8[$this + 248 | 0] = 1;
          var $m_normal84553 = $this + 212 | 0;
        } while (0);
        var $m_normal84553;
        var $88 = $m_normal1;
        var $89 = $m_normal84553;
        var $st$3$0 = $88 | 0, $st$3$0$s2 = $st$3$0 >> 2;
        var $90$0 = HEAP32[$st$3$0$s2];
        var $st$3$1 = $88 + 4 | 0, $st$3$1$s2 = $st$3$1 >> 2;
        var $90$1 = HEAP32[$st$3$1$s2];
        var $st$7$0 = $89 | 0, $st$7$0$s2 = $st$7$0 >> 2;
        HEAP32[$st$7$0$s2] = $90$0;
        var $st$7$1 = $89 + 4 | 0, $st$7$1$s2 = $st$7$1 >> 2;
        HEAP32[$st$7$1$s2] = $90$1;
        var $91 = $this + 188 | 0;
        var $92 = $this + 228 | 0;
        var $st$15$0 = $91 | 0, $st$15$0$s2 = $st$15$0 >> 2;
        var $93$0 = HEAP32[$st$15$0$s2];
        var $st$15$1 = $91 + 4 | 0, $st$15$1$s2 = $st$15$1 >> 2;
        var $93$1 = HEAP32[$st$15$1$s2];
        var $st$19$0 = $92 | 0, $st$19$0$s2 = $st$19$0 >> 2;
        HEAP32[$st$19$0$s2] = $93$0;
        var $st$19$1 = $92 + 4 | 0, $st$19$1$s2 = $st$19$1 >> 2;
        HEAP32[$st$19$1$s2] = $93$1;
        var $94 = $this + 236 | 0;
        var $st$25$0 = $88 | 0, $st$25$0$s2 = $st$25$0 >> 2;
        var $95$0 = HEAP32[$st$25$0$s2];
        var $st$25$1 = $88 + 4 | 0, $st$25$1$s2 = $st$25$1 >> 2;
        var $95$1 = HEAP32[$st$25$1$s2];
        var $st$29$0 = $94 | 0, $st$29$0$s2 = $st$29$0 >> 2;
        HEAP32[$st$29$0$s2] = $95$0;
        var $st$29$1 = $94 + 4 | 0, $st$29$1$s2 = $st$29$1 >> 2;
        HEAP32[$st$29$1$s2] = $95$1;
        __label__ = 64;
        break;
      }
      if ($cmp36) {
        var $cmp104 = $add_i345 < 0;
        do {
          if ($cmp104) {
            if ($offset0_0 < 0) {
              HEAP8[$this + 248 | 0] = 0;
              var $m_normal116567 = $this + 212 | 0;
            } else {
              var $cmp108 = $add_i452 >= 0;
              HEAP8[$this + 248 | 0] = $cmp108 & 1;
              var $m_normal116 = $this + 212 | 0;
              if ($cmp108) {
                var $m_normal116562 = $m_normal116;
                break;
              }
              var $m_normal116567 = $m_normal116;
            }
            var $m_normal116567;
            var $129 = $m_normal116567;
            var $130 = (tempDoubleF32[0] = -$63, tempDoubleI32[0]);
            var $131$0 = $130;
            var $132 = (tempDoubleF32[0] = $64, tempDoubleI32[0]);
            var $135$1 = $132 | 0;
            var $st$13$0 = $129 | 0, $st$13$0$s2 = $st$13$0 >> 2;
            HEAP32[$st$13$0$s2] = 0 | $131$0;
            var $st$13$1 = $129 + 4 | 0, $st$13$1$s2 = $st$13$1 >> 2;
            HEAP32[$st$13$1$s2] = $135$1;
            var $sub2_i294 = -HEAPF32[$y_i437$s2];
            var $138 = $this + 228 | 0;
            var $139 = (tempDoubleF32[0] = -HEAPF32[$x_i436$s2], tempDoubleI32[0]);
            var $140$0 = $139;
            var $141 = (tempDoubleF32[0] = $sub2_i294, tempDoubleI32[0]);
            var $144$1 = $141 | 0;
            var $st$33$0 = $138 | 0, $st$33$0$s2 = $st$33$0 >> 2;
            HEAP32[$st$33$0$s2] = 0 | $140$0;
            var $st$33$1 = $138 + 4 | 0, $st$33$1$s2 = $st$33$1 >> 2;
            HEAP32[$st$33$1$s2] = $144$1;
            var $sub2_i288 = -HEAPF32[$this$s2 + 48];
            var $147 = $this + 236 | 0;
            var $148 = (tempDoubleF32[0] = -HEAPF32[$this$s2 + 47], tempDoubleI32[0]);
            var $149$0 = $148;
            var $150 = (tempDoubleF32[0] = $sub2_i288, tempDoubleI32[0]);
            var $153$1 = $150 | 0;
            var $st$55$0 = $147 | 0;
            HEAP32[$st$55$0 >> 2] = 0 | $149$0;
            var $st$55$1 = $147 + 4 | 0;
            HEAP32[$st$55$1 >> 2] = $153$1;
            __label__ = 64;
            break $if_then28$$if_else165$11;
          }
          HEAP8[$this + 248 | 0] = 1;
          var $m_normal116562 = $this + 212 | 0;
        } while (0);
        var $m_normal116562;
        var $121 = $m_normal1;
        var $122 = $m_normal116562;
        var $st$3$0 = $121 | 0, $st$3$0$s2 = $st$3$0 >> 2;
        var $123$0 = HEAP32[$st$3$0$s2];
        var $st$3$1 = $121 + 4 | 0, $st$3$1$s2 = $st$3$1 >> 2;
        var $123$1 = HEAP32[$st$3$1$s2];
        var $st$7$0 = $122 | 0, $st$7$0$s2 = $st$7$0 >> 2;
        HEAP32[$st$7$0$s2] = $123$0;
        var $st$7$1 = $122 + 4 | 0, $st$7$1$s2 = $st$7$1 >> 2;
        HEAP32[$st$7$1$s2] = $123$1;
        var $124 = $this + 228 | 0;
        var $st$13$0 = $121 | 0, $st$13$0$s2 = $st$13$0 >> 2;
        var $125$0 = HEAP32[$st$13$0$s2];
        var $st$13$1 = $121 + 4 | 0, $st$13$1$s2 = $st$13$1 >> 2;
        var $125$1 = HEAP32[$st$13$1$s2];
        HEAP32[$124 >> 2] = $125$0;
        HEAP32[$124 + 4 >> 2] = $125$1;
        var $126 = $this + 204 | 0;
        var $127 = $this + 236 | 0;
        var $st$25$0 = $126 | 0, $st$25$0$s2 = $st$25$0 >> 2;
        var $128$0 = HEAP32[$st$25$0$s2];
        var $st$25$1 = $126 + 4 | 0, $st$25$1$s2 = $st$25$1 >> 2;
        var $128$1 = HEAP32[$st$25$1$s2];
        var $st$29$0 = $127 | 0, $st$29$0$s2 = $st$29$0 >> 2;
        HEAP32[$st$29$0$s2] = $128$0;
        var $st$29$1 = $127 + 4 | 0, $st$29$1$s2 = $st$29$1 >> 2;
        HEAP32[$st$29$1$s2] = $128$1;
        __label__ = 64;
        break;
      }
      var $or_cond13 = $offset0_0 < 0 | $add_i452 < 0;
      do {
        if (!$or_cond13) {
          var $cmp138 = $add_i345 >= 0;
          HEAP8[$this + 248 | 0] = $cmp138 & 1;
          var $m_normal145 = $this + 212 | 0;
          if (!$cmp138) {
            var $m_normal145571 = $m_normal145;
            break;
          }
          var $154 = $m_normal1;
          var $155 = $m_normal145;
          var $st$2$0 = $154 | 0, $st$2$0$s2 = $st$2$0 >> 2;
          var $156$0 = HEAPU32[$st$2$0$s2];
          var $st$2$1 = $154 + 4 | 0, $st$2$1$s2 = $st$2$1 >> 2;
          var $156$1 = HEAPU32[$st$2$1$s2];
          var $st$6$0 = $155 | 0, $st$6$0$s2 = $st$6$0 >> 2;
          HEAP32[$st$6$0$s2] = $156$0;
          var $st$6$1 = $155 + 4 | 0, $st$6$1$s2 = $st$6$1 >> 2;
          HEAP32[$st$6$1$s2] = $156$1;
          var $157 = $this + 228 | 0;
          var $st$12$0 = $157 | 0, $st$12$0$s2 = $st$12$0 >> 2;
          HEAP32[$st$12$0$s2] = $156$0;
          var $st$12$1 = $157 + 4 | 0, $st$12$1$s2 = $st$12$1 >> 2;
          HEAP32[$st$12$1$s2] = $156$1;
          var $158 = $this + 236 | 0;
          var $st$18$0 = $158 | 0, $st$18$0$s2 = $st$18$0 >> 2;
          HEAP32[$st$18$0$s2] = $156$0;
          var $st$18$1 = $158 + 4 | 0, $st$18$1$s2 = $st$18$1 >> 2;
          HEAP32[$st$18$1$s2] = $156$1;
          __label__ = 64;
          break $if_then28$$if_else165$11;
        }
        HEAP8[$this + 248 | 0] = 0;
        var $m_normal145571 = $this + 212 | 0;
      } while (0);
      var $m_normal145571;
      var $159 = $m_normal145571;
      var $160 = (tempDoubleF32[0] = -$63, tempDoubleI32[0]);
      var $161$0 = $160;
      var $162 = (tempDoubleF32[0] = $64, tempDoubleI32[0]);
      var $165$1 = $162 | 0;
      var $st$13$0 = $159 | 0, $st$13$0$s2 = $st$13$0 >> 2;
      HEAP32[$st$13$0$s2] = 0 | $161$0;
      var $st$13$1 = $159 + 4 | 0, $st$13$1$s2 = $st$13$1 >> 2;
      HEAP32[$st$13$1$s2] = $165$1;
      var $sub2_i276 = -HEAPF32[$y_i360$s2];
      var $168 = $this + 228 | 0;
      var $169 = (tempDoubleF32[0] = -HEAPF32[$x_i359$s2], tempDoubleI32[0]);
      var $170$0 = $169;
      var $171 = (tempDoubleF32[0] = $sub2_i276, tempDoubleI32[0]);
      var $174$1 = $171 | 0;
      var $st$33$0 = $168 | 0, $st$33$0$s2 = $st$33$0 >> 2;
      HEAP32[$st$33$0$s2] = 0 | $170$0;
      var $st$33$1 = $168 + 4 | 0, $st$33$1$s2 = $st$33$1 >> 2;
      HEAP32[$st$33$1$s2] = $174$1;
      var $sub2_i270 = -HEAPF32[$this$s2 + 48];
      var $177 = $this + 236 | 0;
      var $178 = (tempDoubleF32[0] = -HEAPF32[$this$s2 + 47], tempDoubleI32[0]);
      var $179$0 = $178;
      var $180 = (tempDoubleF32[0] = $sub2_i270, tempDoubleI32[0]);
      var $183$1 = $180 | 0;
      var $st$55$0 = $177 | 0;
      HEAP32[$st$55$0 >> 2] = 0 | $179$0;
      var $st$55$1 = $177 + 4 | 0;
      HEAP32[$st$55$1 >> 2] = $183$1;
      __label__ = 64;
      break;
    } else {
      var $offset2_0544 = 0;
      var $convex2_0545 = 0;
      __label__ = 37;
    }
  } while (0);
  $if_else165$$if_end310$52 : do {
    if (__label__ == 37) {
      var $convex2_0545;
      var $offset2_0544;
      if ($tobool) {
        var $cmp170 = $offset0_0 >= 0;
        if ($convex1_0) {
          do {
            if (!$cmp170) {
              var $cmp172 = $add_i452 >= 0;
              HEAP8[$this + 248 | 0] = $cmp172 & 1;
              var $m_normal179 = $this + 212 | 0;
              if ($cmp172) {
                var $m_normal179575 = $m_normal179;
                break;
              }
              var $199 = $m_normal179;
              var $200 = (tempDoubleF32[0] = -$63, tempDoubleI32[0]);
              var $201$0 = $200;
              var $202 = (tempDoubleF32[0] = $64, tempDoubleI32[0]);
              var $204$0 = 0;
              var $204$1 = $202;
              var $205$1 = $204$1 | 0;
              var $st$12$0 = $199 | 0, $st$12$0$s2 = $st$12$0 >> 2;
              HEAP32[$st$12$0$s2] = $204$0 | $201$0;
              var $st$12$1 = $199 + 4 | 0, $st$12$1$s2 = $st$12$1 >> 2;
              HEAP32[$st$12$1$s2] = $205$1;
              var $206 = $m_normal1;
              var $207 = $this + 228 | 0;
              var $st$19$0 = $206 | 0, $st$19$0$s2 = $st$19$0 >> 2;
              var $208$0 = HEAP32[$st$19$0$s2];
              var $st$19$1 = $206 + 4 | 0, $st$19$1$s2 = $st$19$1 >> 2;
              var $208$1 = HEAP32[$st$19$1$s2];
              var $st$23$0 = $207 | 0, $st$23$0$s2 = $st$23$0 >> 2;
              HEAP32[$st$23$0$s2] = $208$0;
              var $st$23$1 = $207 + 4 | 0, $st$23$1$s2 = $st$23$1 >> 2;
              HEAP32[$st$23$1$s2] = $208$1;
              var $m_upperLimit192 = $this + 236 | 0;
              var $bitcast612 = (tempDoubleI32[0] = $208$0, tempDoubleF32[0]);
              var $sub_i250 = -$bitcast612;
              var $209 = $m_upperLimit192;
              var $210 = (tempDoubleF32[0] = $sub_i250, tempDoubleI32[0]);
              var $212$0 = $204$0 | $210;
              var $212$1 = $204$1 | 0;
              HEAP32[$209 >> 2] = $212$0;
              HEAP32[$209 + 4 >> 2] = $212$1;
              break $if_else165$$if_end310$52;
            }
            HEAP8[$this + 248 | 0] = 1;
            var $m_normal179575 = $this + 212 | 0;
          } while (0);
          var $m_normal179575;
          var $184 = $m_normal1;
          var $185 = $m_normal179575;
          var $st$3$0 = $184 | 0, $st$3$0$s2 = $st$3$0 >> 2;
          var $186$0 = HEAP32[$st$3$0$s2];
          var $st$3$1 = $184 + 4 | 0, $st$3$1$s2 = $st$3$1 >> 2;
          var $186$1 = HEAP32[$st$3$1$s2];
          var $st$7$0 = $185 | 0, $st$7$0$s2 = $st$7$0 >> 2;
          HEAP32[$st$7$0$s2] = $186$0;
          var $st$7$1 = $185 + 4 | 0, $st$7$1$s2 = $st$7$1 >> 2;
          HEAP32[$st$7$1$s2] = $186$1;
          var $187 = $this + 188 | 0;
          var $188 = $this + 228 | 0;
          var $st$15$0 = $187 | 0, $st$15$0$s2 = $st$15$0 >> 2;
          var $189$0 = HEAP32[$st$15$0$s2];
          var $st$15$1 = $187 + 4 | 0, $st$15$1$s2 = $st$15$1 >> 2;
          var $189$1 = HEAP32[$st$15$1$s2];
          var $st$19$0 = $188 | 0, $st$19$0$s2 = $st$19$0 >> 2;
          HEAP32[$st$19$0$s2] = $189$0;
          var $st$19$1 = $188 + 4 | 0, $st$19$1$s2 = $st$19$1 >> 2;
          HEAP32[$st$19$1$s2] = $189$1;
          var $sub2_i264 = -HEAPF32[$y_i437$s2];
          var $192 = $this + 236 | 0;
          var $193 = (tempDoubleF32[0] = -HEAPF32[$x_i436$s2], tempDoubleI32[0]);
          var $194$0 = $193;
          var $195 = (tempDoubleF32[0] = $sub2_i264, tempDoubleI32[0]);
          var $198$1 = $195 | 0;
          var $st$39$0 = $192 | 0;
          HEAP32[$st$39$0 >> 2] = 0 | $194$0;
          var $st$39$1 = $192 + 4 | 0;
          HEAP32[$st$39$1 >> 2] = $198$1;
        } else {
          do {
            if ($cmp170) {
              var $cmp199 = $add_i452 >= 0;
              HEAP8[$this + 248 | 0] = $cmp199 & 1;
              var $m_normal206 = $this + 212 | 0;
              if (!$cmp199) {
                var $m_normal206579 = $m_normal206;
                break;
              }
              var $213 = $m_normal1;
              var $214 = $m_normal206;
              var $st$2$0 = $213 | 0, $st$2$0$s2 = $st$2$0 >> 2;
              var $215$0 = HEAPU32[$st$2$0$s2];
              var $st$2$1 = $213 + 4 | 0, $st$2$1$s2 = $st$2$1 >> 2;
              var $215$1 = HEAPU32[$st$2$1$s2];
              var $st$6$0 = $214 | 0, $st$6$0$s2 = $st$6$0 >> 2;
              HEAP32[$st$6$0$s2] = $215$0;
              var $st$6$1 = $214 + 4 | 0, $st$6$1$s2 = $st$6$1 >> 2;
              HEAP32[$st$6$1$s2] = $215$1;
              var $216 = $this + 228 | 0;
              var $st$12$0 = $216 | 0, $st$12$0$s2 = $st$12$0 >> 2;
              HEAP32[$st$12$0$s2] = $215$0;
              var $st$12$1 = $216 + 4 | 0, $st$12$1$s2 = $st$12$1 >> 2;
              HEAP32[$st$12$1$s2] = $215$1;
              var $m_upperLimit210 = $this + 236 | 0;
              var $bitcast614 = (tempDoubleI32[0] = $215$0, tempDoubleF32[0]);
              var $sub_i244 = -$bitcast614;
              var $217 = $m_upperLimit210;
              var $218 = (tempDoubleF32[0] = $sub_i244, tempDoubleI32[0]);
              var $219$0 = $218;
              var $220 = (tempDoubleF32[0] = $64, tempDoubleI32[0]);
              var $223$1 = $220 | 0;
              var $st$32$0 = $217 | 0, $st$32$0$s2 = $st$32$0 >> 2;
              HEAP32[$st$32$0$s2] = 0 | $219$0;
              var $st$32$1 = $217 + 4 | 0, $st$32$1$s2 = $st$32$1 >> 2;
              HEAP32[$st$32$1$s2] = $223$1;
              break $if_else165$$if_end310$52;
            }
            HEAP8[$this + 248 | 0] = 0;
            var $m_normal206579 = $this + 212 | 0;
          } while (0);
          var $m_normal206579;
          var $224 = $m_normal206579;
          var $225 = (tempDoubleF32[0] = -$63, tempDoubleI32[0]);
          var $226$0 = $225;
          var $227 = (tempDoubleF32[0] = $64, tempDoubleI32[0]);
          var $230$1 = $227 | 0;
          var $st$13$0 = $224 | 0, $st$13$0$s2 = $st$13$0 >> 2;
          HEAP32[$st$13$0$s2] = 0 | $226$0;
          var $st$13$1 = $224 + 4 | 0, $st$13$1$s2 = $st$13$1 >> 2;
          HEAP32[$st$13$1$s2] = $230$1;
          var $231 = $m_normal1;
          var $232 = $this + 228 | 0;
          var $st$20$0 = $231 | 0, $st$20$0$s2 = $st$20$0 >> 2;
          var $233$0 = HEAP32[$st$20$0$s2];
          var $st$20$1 = $231 + 4 | 0, $st$20$1$s2 = $st$20$1 >> 2;
          var $233$1 = HEAP32[$st$20$1$s2];
          var $st$24$0 = $232 | 0, $st$24$0$s2 = $st$24$0 >> 2;
          HEAP32[$st$24$0$s2] = $233$0;
          var $st$24$1 = $232 + 4 | 0, $st$24$1$s2 = $st$24$1 >> 2;
          HEAP32[$st$24$1$s2] = $233$1;
          var $sub2_i234 = -HEAPF32[$this$s2 + 48];
          var $236 = $this + 236 | 0;
          var $237 = (tempDoubleF32[0] = -HEAPF32[$this$s2 + 47], tempDoubleI32[0]);
          var $238$0 = $237;
          var $239 = (tempDoubleF32[0] = $sub2_i234, tempDoubleI32[0]);
          var $242$1 = $239 | 0;
          var $st$46$0 = $236 | 0;
          HEAP32[$st$46$0 >> 2] = 0 | $238$0;
          var $st$46$1 = $236 + 4 | 0;
          HEAP32[$st$46$1 >> 2] = $242$1;
        }
      } else {
        var $cmp229 = $add_i452 >= 0;
        if ($tobool4) {
          if ($convex2_0545) {
            do {
              if (!$cmp229) {
                var $cmp231 = $offset2_0544 >= 0;
                HEAP8[$this + 248 | 0] = $cmp231 & 1;
                var $m_normal239 = $this + 212 | 0;
                if ($cmp231) {
                  var $m_normal239583 = $m_normal239;
                  break;
                }
                var $258 = $m_normal239;
                var $259 = (tempDoubleF32[0] = -$63, tempDoubleI32[0]);
                var $260$0 = $259;
                var $261 = (tempDoubleF32[0] = $64, tempDoubleI32[0]);
                var $264$0 = 0 | $260$0;
                var $264$1 = $261 | 0;
                var $st$12$0 = $258 | 0, $st$12$0$s2 = $st$12$0 >> 2;
                HEAP32[$st$12$0$s2] = $264$0;
                var $st$12$1 = $258 + 4 | 0, $st$12$1$s2 = $st$12$1 >> 2;
                HEAP32[$st$12$1$s2] = $264$1;
                var $265 = $this + 228 | 0;
                var $st$18$0 = $265 | 0, $st$18$0$s2 = $st$18$0 >> 2;
                HEAP32[$st$18$0$s2] = $264$0;
                var $st$18$1 = $265 + 4 | 0, $st$18$1$s2 = $st$18$1 >> 2;
                HEAP32[$st$18$1$s2] = $264$1;
                var $266 = $m_normal1;
                var $267 = $this + 236 | 0;
                var $st$25$0 = $266 | 0, $st$25$0$s2 = $st$25$0 >> 2;
                var $268$0 = HEAP32[$st$25$0$s2];
                var $st$25$1 = $266 + 4 | 0, $st$25$1$s2 = $st$25$1 >> 2;
                var $268$1 = HEAP32[$st$25$1$s2];
                var $st$29$0 = $267 | 0, $st$29$0$s2 = $st$29$0 >> 2;
                HEAP32[$st$29$0$s2] = $268$0;
                var $st$29$1 = $267 + 4 | 0, $st$29$1$s2 = $st$29$1 >> 2;
                HEAP32[$st$29$1$s2] = $268$1;
                break $if_else165$$if_end310$52;
              }
              HEAP8[$this + 248 | 0] = 1;
              var $m_normal239583 = $this + 212 | 0;
            } while (0);
            var $m_normal239583;
            var $243 = $m_normal1;
            var $244 = $m_normal239583;
            var $st$3$0 = $243 | 0, $st$3$0$s2 = $st$3$0 >> 2;
            var $245$0 = HEAP32[$st$3$0$s2];
            var $st$3$1 = $243 + 4 | 0, $st$3$1$s2 = $st$3$1 >> 2;
            var $245$1 = HEAP32[$st$3$1$s2];
            var $st$7$0 = $244 | 0, $st$7$0$s2 = $st$7$0 >> 2;
            HEAP32[$st$7$0$s2] = $245$0;
            var $st$7$1 = $244 + 4 | 0, $st$7$1$s2 = $st$7$1 >> 2;
            HEAP32[$st$7$1$s2] = $245$1;
            var $sub2_i228 = -HEAPF32[$y_i437$s2];
            var $248 = $this + 228 | 0;
            var $249 = (tempDoubleF32[0] = -HEAPF32[$x_i436$s2], tempDoubleI32[0]);
            var $250$0 = $249;
            var $251 = (tempDoubleF32[0] = $sub2_i228, tempDoubleI32[0]);
            var $254$1 = $251 | 0;
            var $st$27$0 = $248 | 0, $st$27$0$s2 = $st$27$0 >> 2;
            HEAP32[$st$27$0$s2] = 0 | $250$0;
            var $st$27$1 = $248 + 4 | 0, $st$27$1$s2 = $st$27$1 >> 2;
            HEAP32[$st$27$1$s2] = $254$1;
            var $255 = $this + 204 | 0;
            var $256 = $this + 236 | 0;
            var $st$35$0 = $255 | 0;
            var $257$0 = HEAP32[$st$35$0 >> 2];
            var $st$35$1 = $255 + 4 | 0;
            var $257$1 = HEAP32[$st$35$1 >> 2];
            var $st$39$0 = $256 | 0;
            HEAP32[$st$39$0 >> 2] = $257$0;
            var $st$39$1 = $256 + 4 | 0;
            HEAP32[$st$39$1 >> 2] = $257$1;
          } else {
            do {
              if ($cmp229) {
                var $cmp259 = $offset2_0544 >= 0;
                HEAP8[$this + 248 | 0] = $cmp259 & 1;
                var $m_normal266 = $this + 212 | 0;
                if (!$cmp259) {
                  var $m_normal266587 = $m_normal266;
                  break;
                }
                var $269 = $m_normal1;
                var $270 = $m_normal266;
                var $st$2$0 = $269 | 0, $st$2$0$s2 = $st$2$0 >> 2;
                var $271$0 = HEAPU32[$st$2$0$s2];
                var $st$2$1 = $269 + 4 | 0, $st$2$1$s2 = $st$2$1 >> 2;
                var $271$1 = HEAPU32[$st$2$1$s2];
                var $st$6$0 = $270 | 0, $st$6$0$s2 = $st$6$0 >> 2;
                HEAP32[$st$6$0$s2] = $271$0;
                var $st$6$1 = $270 + 4 | 0, $st$6$1$s2 = $st$6$1 >> 2;
                HEAP32[$st$6$1$s2] = $271$1;
                var $m_lowerLimit268 = $this + 228 | 0;
                var $bitcast616 = (tempDoubleI32[0] = $271$0, tempDoubleF32[0]);
                var $sub_i208 = -$bitcast616;
                var $272 = $m_lowerLimit268;
                var $273 = (tempDoubleF32[0] = $sub_i208, tempDoubleI32[0]);
                var $274$0 = $273;
                var $275 = (tempDoubleF32[0] = $64, tempDoubleI32[0]);
                var $278$1 = $275 | 0;
                var $st$26$0 = $272 | 0;
                HEAP32[$st$26$0 >> 2] = 0 | $274$0;
                var $st$26$1 = $272 + 4 | 0;
                HEAP32[$st$26$1 >> 2] = $278$1;
                var $279 = $this + 236 | 0;
                var $st$32$0 = $279 | 0, $st$32$0$s2 = $st$32$0 >> 2;
                HEAP32[$st$32$0$s2] = $271$0;
                var $st$32$1 = $279 + 4 | 0, $st$32$1$s2 = $st$32$1 >> 2;
                HEAP32[$st$32$1$s2] = $271$1;
                break $if_else165$$if_end310$52;
              }
              HEAP8[$this + 248 | 0] = 0;
              var $m_normal266587 = $this + 212 | 0;
            } while (0);
            var $m_normal266587;
            var $280 = $m_normal266587;
            var $281 = (tempDoubleF32[0] = -$63, tempDoubleI32[0]);
            var $282$0 = $281;
            var $283 = (tempDoubleF32[0] = $64, tempDoubleI32[0]);
            var $286$1 = $283 | 0;
            var $st$13$0 = $280 | 0, $st$13$0$s2 = $st$13$0 >> 2;
            HEAP32[$st$13$0$s2] = 0 | $282$0;
            var $st$13$1 = $280 + 4 | 0, $st$13$1$s2 = $st$13$1 >> 2;
            HEAP32[$st$13$1$s2] = $286$1;
            var $sub2_i198 = -HEAPF32[$this$s2 + 52];
            var $289 = $this + 228 | 0;
            var $290 = (tempDoubleF32[0] = -HEAPF32[$this$s2 + 51], tempDoubleI32[0]);
            var $291$0 = $290;
            var $292 = (tempDoubleF32[0] = $sub2_i198, tempDoubleI32[0]);
            var $295$1 = $292 | 0;
            var $st$35$0 = $289 | 0;
            HEAP32[$st$35$0 >> 2] = 0 | $291$0;
            var $st$35$1 = $289 + 4 | 0;
            HEAP32[$st$35$1 >> 2] = $295$1;
            var $296 = $m_normal1;
            var $297 = $this + 236 | 0;
            var $298$0 = HEAP32[$296 >> 2];
            var $298$1 = HEAP32[$296 + 4 >> 2];
            var $st$46$0 = $297 | 0;
            HEAP32[$st$46$0 >> 2] = $298$0;
            var $st$46$1 = $297 + 4 | 0;
            HEAP32[$st$46$1 >> 2] = $298$1;
          }
        } else {
          HEAP8[$this + 248 | 0] = $cmp229 & 1;
          var $m_normal291 = $this + 212 | 0;
          if ($cmp229) {
            var $299 = $m_normal1;
            var $300 = $m_normal291;
            var $st$2$0 = $299 | 0, $st$2$0$s2 = $st$2$0 >> 2;
            var $301$0 = HEAPU32[$st$2$0$s2];
            var $st$2$1 = $299 + 4 | 0, $st$2$1$s2 = $st$2$1 >> 2;
            var $301$1 = HEAP32[$st$2$1$s2];
            var $st$6$0 = $300 | 0, $st$6$0$s2 = $st$6$0 >> 2;
            HEAP32[$st$6$0$s2] = $301$0;
            var $st$6$1 = $300 + 4 | 0, $st$6$1$s2 = $st$6$1 >> 2;
            HEAP32[$st$6$1$s2] = $301$1;
            var $m_lowerLimit293 = $this + 228 | 0;
            var $bitcast618 = (tempDoubleI32[0] = $301$0, tempDoubleF32[0]);
            var $sub_i190 = -$bitcast618;
            var $302 = $m_lowerLimit293;
            var $303 = (tempDoubleF32[0] = $sub_i190, tempDoubleI32[0]);
            var $304$0 = $303;
            var $305 = (tempDoubleF32[0] = $64, tempDoubleI32[0]);
            var $308$0 = 0 | $304$0;
            var $308$1 = $305 | 0;
            var $st$26$0 = $302 | 0;
            HEAP32[$st$26$0 >> 2] = $308$0;
            var $st$26$1 = $302 + 4 | 0;
            HEAP32[$st$26$1 >> 2] = $308$1;
            var $309 = $this + 236 | 0;
            var $st$32$0 = $309 | 0, $st$32$0$s2 = $st$32$0 >> 2;
            HEAP32[$st$32$0$s2] = $308$0;
            var $st$32$1 = $309 + 4 | 0, $st$32$1$s2 = $st$32$1 >> 2;
            HEAP32[$st$32$1$s2] = $308$1;
          } else {
            var $310 = $m_normal291;
            var $311 = (tempDoubleF32[0] = -$63, tempDoubleI32[0]);
            var $312$0 = $311;
            var $313 = (tempDoubleF32[0] = $64, tempDoubleI32[0]);
            var $316$1 = $313 | 0;
            var $st$12$0 = $310 | 0, $st$12$0$s2 = $st$12$0 >> 2;
            HEAP32[$st$12$0$s2] = 0 | $312$0;
            var $st$12$1 = $310 + 4 | 0, $st$12$1$s2 = $st$12$1 >> 2;
            HEAP32[$st$12$1$s2] = $316$1;
            var $317 = $m_normal1;
            var $318 = $this + 228 | 0;
            var $st$19$0 = $317 | 0, $st$19$0$s2 = $st$19$0 >> 2;
            var $319$0 = HEAP32[$st$19$0$s2];
            var $st$19$1 = $317 + 4 | 0, $st$19$1$s2 = $st$19$1 >> 2;
            var $319$1 = HEAP32[$st$19$1$s2];
            var $st$23$0 = $318 | 0, $st$23$0$s2 = $st$23$0 >> 2;
            HEAP32[$st$23$0$s2] = $319$0;
            var $st$23$1 = $318 + 4 | 0, $st$23$1$s2 = $st$23$1 >> 2;
            HEAP32[$st$23$1$s2] = $319$1;
            var $320 = $this + 236 | 0;
            var $st$29$0 = $320 | 0, $st$29$0$s2 = $st$29$0 >> 2;
            HEAP32[$st$29$0$s2] = $319$0;
            var $st$29$1 = $320 + 4 | 0, $st$29$1$s2 = $st$29$1 >> 2;
            HEAP32[$st$29$1$s2] = $319$1;
          }
        }
      }
    }
  } while (0);
  var $m_vertexCount$s2 = ($polygonB + 148 | 0) >> 2;
  var $321 = HEAP32[$m_vertexCount$s2];
  var $count$s2 = ($this + 128 | 0) >> 2;
  HEAP32[$count$s2] = $321;
  var $cmp312602 = (HEAP32[$m_vertexCount$s2] | 0) > 0;
  $for_body$$for_end$90 : do {
    if ($cmp312602) {
      var $i_0603 = 0;
      while (1) {
        var $i_0603;
        var $323 = HEAPF32[$c_i128$s2];
        var $324 = HEAPF32[(($i_0603 << 3) + 20 >> 2) + $polygonB$s2];
        var $325 = HEAPF32[$s_i131$s2];
        var $326 = HEAPF32[(($i_0603 << 3) + 24 >> 2) + $polygonB$s2];
        var $add17_i174 = $325 * $324 + $323 * $326 + HEAPF32[$y16_i$s2];
        var $329 = ($i_0603 << 3) + $this | 0;
        var $330 = (tempDoubleF32[0] = $323 * $324 - $325 * $326 + HEAPF32[$x4_i$s2], tempDoubleI32[0]);
        var $331$0 = $330;
        var $332 = (tempDoubleF32[0] = $add17_i174, tempDoubleI32[0]);
        var $335$1 = $332 | 0;
        var $st$29$0 = $329 | 0, $st$29$0$s2 = $st$29$0 >> 2;
        HEAP32[$st$29$0$s2] = 0 | $331$0;
        var $st$29$1 = $329 + 4 | 0, $st$29$1$s2 = $st$29$1 >> 2;
        HEAP32[$st$29$1$s2] = $335$1;
        var $336 = HEAPF32[$c_i128$s2];
        var $337 = HEAPF32[(($i_0603 << 3) + 84 >> 2) + $polygonB$s2];
        var $338 = HEAPF32[$s_i131$s2];
        var $339 = HEAPF32[(($i_0603 << 3) + 88 >> 2) + $polygonB$s2];
        var $add_i158 = $338 * $337 + $336 * $339;
        var $340 = ($i_0603 << 3) + $this + 64 | 0;
        var $341 = (tempDoubleF32[0] = $336 * $337 - $338 * $339, tempDoubleI32[0]);
        var $342$0 = $341;
        var $343 = (tempDoubleF32[0] = $add_i158, tempDoubleI32[0]);
        var $346$1 = $343 | 0;
        var $st$57$0 = $340 | 0;
        HEAP32[$st$57$0 >> 2] = 0 | $342$0;
        var $st$57$1 = $340 + 4 | 0;
        HEAP32[$st$57$1 >> 2] = $346$1;
        var $inc = $i_0603 + 1 | 0;
        if (($inc | 0) >= (HEAP32[$m_vertexCount$s2] | 0)) {
          break $for_body$$for_end$90;
        }
        var $i_0603 = $inc;
      }
    }
  } while (0);
  var $m_radius$s2 = ($this + 244 | 0) >> 2;
  HEAPF32[$m_radius$s2] = .019999999552965164;
  var $pointCount = $manifold + 60 | 0;
  HEAP32[$pointCount >> 2] = 0;
  var $m_front_i = $this + 248 | 0;
  var $348 = HEAP32[$count$s2];
  var $cmp5_i = ($348 | 0) > 0;
  $for_body_lr_ph_i$$if_end324$94 : do {
    if ($cmp5_i) {
      var $349 = HEAPF32[$this$s2 + 41];
      var $350 = HEAPF32[$y2_i374 >> 2];
      var $351 = HEAPF32[$this$s2 + 53];
      var $352 = HEAPF32[$this$s2 + 54];
      var $i_06_i = 0;
      var $353 = 3.4028234663852886e+38;
      while (1) {
        var $353;
        var $i_06_i;
        var $add_i_i148 = $351 * (HEAPF32[($i_06_i << 3 >> 2) + $this$s2] - $349) + $352 * (HEAPF32[(($i_06_i << 3) + 4 >> 2) + $this$s2] - $350);
        var $356 = $add_i_i148 < $353 ? $add_i_i148 : $353;
        var $inc_i = $i_06_i + 1 | 0;
        if (($inc_i | 0) == ($348 | 0)) {
          var $357 = $356;
          break $for_body_lr_ph_i$$if_end324$94;
        }
        var $i_06_i = $inc_i;
        var $353 = $356;
      }
    } else {
      var $357 = 3.4028234663852886e+38;
    }
  } while (0);
  var $357;
  var $cmp326 = $357 > HEAPF32[$m_radius$s2];
  $return$$if_end328$99 : do {
    if (!$cmp326) {
      __ZN12b2EPCollider24ComputePolygonSeparationEv($polygonAxis, $this);
      var $359 = HEAP32[$polygonAxis$s2];
      var $cmp330 = ($359 | 0) == 0;
      do {
        if (!$cmp330) {
          var $360 = HEAPF32[$polygonAxis$s2 + 2];
          if ($360 > HEAPF32[$m_radius$s2]) {
            break $return$$if_end328$99;
          }
          if ($360 <= $357 * .9800000190734863 + .0010000000474974513) {
            __label__ = 73;
            break;
          }
          var $tmp4 = HEAPU32[$polygonAxis$s2 + 1];
          var $type351 = $manifold + 56 | 0;
          if (($359 | 0) == 1) {
            var $type351625 = $type351;
            __label__ = 75;
            break;
          }
          HEAP32[$type351 >> 2] = 2;
          var $407 = $ie;
          var $st$2$0 = $35 | 0, $st$2$0$s2 = $st$2$0 >> 2;
          var $408$0 = HEAP32[$st$2$0$s2];
          var $st$2$1 = $35 + 4 | 0, $st$2$1$s2 = $st$2$1 >> 2;
          var $408$1 = HEAP32[$st$2$1$s2];
          var $st$6$0 = $407 | 0, $st$6$0$s2 = $st$6$0 >> 2;
          HEAP32[$st$6$0$s2] = $408$0;
          var $st$6$1 = $407 + 4 | 0, $st$6$1$s2 = $st$6$1 >> 2;
          HEAP32[$st$6$1$s2] = $408$1;
          var $id440 = $ie + 8 | 0;
          var $cf441 = $id440;
          HEAP8[$id440] = 0;
          var $conv443 = $tmp4 & 255;
          HEAP8[$cf441 + 1 | 0] = $conv443;
          HEAP8[$cf441 + 2 | 0] = 0;
          HEAP8[$cf441 + 3 | 0] = 1;
          var $409 = $ie + 12 | 0;
          var $st$23$0 = $38 | 0, $st$23$0$s2 = $st$23$0 >> 2;
          var $410$0 = HEAP32[$st$23$0$s2];
          var $st$23$1 = $38 + 4 | 0, $st$23$1$s2 = $st$23$1 >> 2;
          var $410$1 = HEAP32[$st$23$1$s2];
          var $st$27$0 = $409 | 0, $st$27$0$s2 = $st$27$0 >> 2;
          HEAP32[$st$27$0$s2] = $410$0;
          var $st$27$1 = $409 + 4 | 0, $st$27$1$s2 = $st$27$1 >> 2;
          HEAP32[$st$27$1$s2] = $410$1;
          var $id460 = $ie + 20 | 0;
          var $cf461 = $id460;
          HEAP8[$id460] = 0;
          HEAP8[$cf461 + 1 | 0] = $conv443;
          HEAP8[$cf461 + 2 | 0] = 0;
          HEAP8[$cf461 + 3 | 0] = 1;
          var $add480 = $tmp4 + 1 | 0;
          var $cond489 = ($add480 | 0) < (HEAP32[$count$s2] | 0) ? $add480 : 0;
          var $412 = ($tmp4 << 3) + $this | 0;
          var $414 = HEAP32[$412 >> 2];
          var $415 = HEAP32[$412 + 4 >> 2];
          var $416 = ($cond489 << 3) + $this | 0;
          var $418 = HEAP32[$416 >> 2];
          var $419 = HEAP32[$416 + 4 >> 2];
          var $420 = ($tmp4 << 3) + $this + 64 | 0;
          var $422 = HEAP32[$420 >> 2];
          var $423 = HEAP32[$420 + 4 >> 2];
          var $phitmp = $cond489 & 255;
          var $425 = (tempDoubleI32[0] = $408$0, tempDoubleF32[0]);
          var $428 = (tempDoubleI32[0] = $408$1, tempDoubleF32[0]);
          var $430 = (tempDoubleI32[0] = $410$0, tempDoubleF32[0]);
          var $433 = (tempDoubleI32[0] = $410$1, tempDoubleF32[0]);
          var $440 = $tmp4;
          var $439 = $phitmp;
          var $_in593 = $414;
          var $_in592 = $415;
          var $_in591 = $418;
          var $_in590 = $419;
          var $_in589 = $422;
          var $_in = $423;
          var $438 = $430;
          var $437 = $425;
          var $436 = $433;
          var $435 = $428;
          var $434 = $conv443;
          var $primaryAxis_0_0623 = 0;
          __label__ = 82;
          break;
        }
        __label__ = 73;
      } while (0);
      do {
        if (__label__ == 73) {
          var $type351625 = $manifold + 56 | 0;
          __label__ = 75;
          break;
        }
      } while (0);
      if (__label__ == 75) {
        var $type351625;
        HEAP32[$type351625 >> 2] = 1;
        var $362 = HEAP32[$count$s2];
        var $cmp361596 = ($362 | 0) > 1;
        $for_body362_lr_ph$$for_end373$110 : do {
          if ($cmp361596) {
            var $364 = HEAPF32[$this$s2 + 54];
            var $366 = HEAPF32[$this$s2 + 53];
            var $bestIndex_0597 = 0;
            var $bestValue_0598 = $366 * HEAPF32[$this$s2 + 16] + $364 * HEAPF32[$this$s2 + 17];
            var $i357_0599 = 1;
            while (1) {
              var $i357_0599;
              var $bestValue_0598;
              var $bestIndex_0597;
              var $add_i120 = $366 * HEAPF32[(($i357_0599 << 3) + 64 >> 2) + $this$s2] + $364 * HEAPF32[(($i357_0599 << 3) + 68 >> 2) + $this$s2];
              var $cmp368 = $add_i120 < $bestValue_0598;
              var $bestIndex_1 = $cmp368 ? $i357_0599 : $bestIndex_0597;
              var $bestValue_1 = $cmp368 ? $add_i120 : $bestValue_0598;
              var $inc372 = $i357_0599 + 1 | 0;
              if (($inc372 | 0) >= ($362 | 0)) {
                var $bestIndex_0_lcssa = $bestIndex_1;
                break $for_body362_lr_ph$$for_end373$110;
              }
              var $bestIndex_0597 = $bestIndex_1;
              var $bestValue_0598 = $bestValue_1;
              var $i357_0599 = $inc372;
            }
          } else {
            var $bestIndex_0_lcssa = 0;
          }
        } while (0);
        var $bestIndex_0_lcssa;
        var $add374 = $bestIndex_0_lcssa + 1 | 0;
        var $cond = ($add374 | 0) < ($362 | 0) ? $add374 : 0;
        var $369 = ($bestIndex_0_lcssa << 3) + $this | 0;
        var $370 = $ie;
        var $st$7$0 = $369 | 0, $st$7$0$s2 = $st$7$0 >> 2;
        var $371$0 = HEAP32[$st$7$0$s2];
        var $st$7$1 = $369 + 4 | 0, $st$7$1$s2 = $st$7$1 >> 2;
        var $371$1 = HEAP32[$st$7$1$s2];
        HEAP32[$370 >> 2] = $371$0;
        HEAP32[$370 + 4 >> 2] = $371$1;
        var $id = $ie + 8 | 0;
        var $cf = $id;
        HEAP8[$id] = 0;
        var $conv = $bestIndex_0_lcssa & 255;
        HEAP8[$cf + 1 | 0] = $conv;
        HEAP8[$cf + 2 | 0] = 1;
        HEAP8[$cf + 3 | 0] = 0;
        var $372 = ($cond << 3) + $this | 0;
        var $373 = $ie + 12 | 0;
        var $374$0 = HEAP32[$372 >> 2];
        var $374$1 = HEAP32[$372 + 4 >> 2];
        HEAP32[$373 >> 2] = $374$0;
        HEAP32[$373 + 4 >> 2] = $374$1;
        var $id399 = $ie + 20 | 0;
        var $cf400 = $id399;
        HEAP8[$id399] = 0;
        HEAP8[$cf400 + 1 | 0] = $cond & 255;
        HEAP8[$cf400 + 2 | 0] = 1;
        HEAP8[$cf400 + 3 | 0] = 0;
        var $tobool416 = (HEAP8[$m_front_i] & 1) << 24 >> 24 == 0;
        var $378 = (tempDoubleI32[0] = $371$0, tempDoubleF32[0]);
        var $381 = (tempDoubleI32[0] = $371$1, tempDoubleF32[0]);
        var $383 = (tempDoubleI32[0] = $374$0, tempDoubleF32[0]);
        var $386 = (tempDoubleI32[0] = $374$1, tempDoubleF32[0]);
        if ($tobool416) {
          var $st$0$0 = $38 | 0;
          var $st$0$1 = $38 + 4 | 0;
          var $398 = HEAP32[$st$0$0 >> 2];
          var $399 = HEAP32[$st$0$1 >> 2];
          var $st$10$0 = $35 | 0;
          var $st$10$1 = $35 + 4 | 0;
          var $401 = HEAP32[$st$10$0 >> 2];
          var $402 = HEAP32[$st$10$1 >> 2];
          var $sub2_i111 = -HEAPF32[$y_i437$s2];
          var $405 = (tempDoubleF32[0] = -HEAPF32[$x_i436$s2], tempDoubleI32[0]);
          var $406 = (tempDoubleF32[0] = $sub2_i111, tempDoubleI32[0]);
          var $440 = 1;
          var $439 = 0;
          var $_in593 = $398;
          var $_in592 = $399;
          var $_in591 = $401;
          var $_in590 = $402;
          var $_in589 = $405;
          var $_in = $406;
          var $438 = $383;
          var $437 = $378;
          var $436 = $386;
          var $435 = $381;
          var $434 = $conv;
          var $primaryAxis_0_0623 = 1;
        } else {
          var $st$0$0 = $35 | 0;
          var $st$0$1 = $35 + 4 | 0;
          var $st$10$0 = $38 | 0;
          var $st$10$1 = $38 + 4 | 0;
          var $393 = $m_normal1;
          var $440 = 0;
          var $439 = 1;
          var $_in593 = HEAP32[$st$0$0 >> 2];
          var $_in592 = HEAP32[$st$0$1 >> 2];
          var $_in591 = HEAP32[$st$10$0 >> 2];
          var $_in590 = HEAP32[$st$10$1 >> 2];
          var $_in589 = HEAP32[$393 >> 2];
          var $_in = HEAP32[$393 + 4 >> 2];
          var $438 = $383;
          var $437 = $378;
          var $436 = $386;
          var $435 = $381;
          var $434 = $conv;
          var $primaryAxis_0_0623 = 1;
        }
      }
      var $primaryAxis_0_0623;
      var $434;
      var $435;
      var $436;
      var $437;
      var $438;
      var $_in;
      var $_in589;
      var $_in590;
      var $_in591;
      var $_in592;
      var $_in593;
      var $439;
      var $440;
      var $441 = (tempDoubleI32[0] = $_in593, tempDoubleF32[0]);
      var $442 = (tempDoubleI32[0] = $_in592, tempDoubleF32[0]);
      var $443 = (tempDoubleI32[0] = $_in590, tempDoubleF32[0]);
      var $444 = (tempDoubleI32[0] = $_in589, tempDoubleF32[0]);
      var $445 = (tempDoubleI32[0] = $_in, tempDoubleF32[0]);
      var $sub511 = -$444;
      var $add_i100 = $445 * $441 + $442 * $sub511;
      var $mul3_i92 = $444 * $443;
      var $446 = (tempDoubleI32[0] = $_in591, tempDoubleF32[0]);
      var $sub_i102 = -$445;
      var $add_i93 = $446 * $sub_i102 + $mul3_i92;
      var $sub_i44 = $445 * $437 + $435 * $sub511 - $add_i100;
      var $arrayidx1_i45 = $ie + 12 | 0;
      var $sub4_i51 = $445 * $438 + $436 * $sub511 - $add_i100;
      if ($sub_i44 > 0) {
        var $numOut_0_i54 = 0;
      } else {
        var $447$s2 = $clipPoints1 >> 2;
        var $448$s2 = $ie >> 2;
        HEAP32[$447$s2] = HEAP32[$448$s2];
        HEAP32[$447$s2 + 1] = HEAP32[$448$s2 + 1];
        HEAP32[$447$s2 + 2] = HEAP32[$448$s2 + 2];
        var $numOut_0_i54 = 1;
      }
      var $numOut_0_i54;
      if ($sub4_i51 > 0) {
        var $numOut_1_i60 = $numOut_0_i54;
      } else {
        var $449$s2 = ($clipPoints1 + $numOut_0_i54 * 12 | 0) >> 2;
        var $450$s2 = $arrayidx1_i45 >> 2;
        HEAP32[$449$s2] = HEAP32[$450$s2];
        HEAP32[$449$s2 + 1] = HEAP32[$450$s2 + 1];
        HEAP32[$449$s2 + 2] = HEAP32[$450$s2 + 2];
        var $numOut_1_i60 = $numOut_0_i54 + 1 | 0;
      }
      var $numOut_1_i60;
      if ($sub_i44 * $sub4_i51 < 0) {
        var $div_i65 = $sub_i44 / ($sub_i44 - $sub4_i51);
        var $add_i3_i71 = $437 + ($438 - $437) * $div_i65;
        var $add3_i_i72 = $435 + ($436 - $435) * $div_i65;
        var $451 = $clipPoints1 + $numOut_1_i60 * 12 | 0;
        var $452 = (tempDoubleF32[0] = $add_i3_i71, tempDoubleI32[0]);
        var $453$0 = $452;
        var $454 = (tempDoubleF32[0] = $add3_i_i72, tempDoubleI32[0]);
        var $457$1 = $454 | 0;
        var $st$20$0 = $451 | 0, $st$20$0$s2 = $st$20$0 >> 2;
        HEAP32[$st$20$0$s2] = 0 | $453$0;
        var $st$20$1 = $451 + 4 | 0, $st$20$1$s2 = $st$20$1 >> 2;
        HEAP32[$st$20$1$s2] = $457$1;
        var $id_i74 = $clipPoints1 + $numOut_1_i60 * 12 + 8 | 0;
        var $cf_i75 = $id_i74;
        HEAP8[$id_i74] = $440 & 255;
        HEAP8[$cf_i75 + 1 | 0] = $434;
        HEAP8[$cf_i75 + 2 | 0] = 0;
        HEAP8[$cf_i75 + 3 | 0] = 1;
        var $numOut_2_i85 = $numOut_1_i60 + 1 | 0;
      } else {
        var $numOut_2_i85 = $numOut_1_i60;
      }
      var $numOut_2_i85;
      if (($numOut_2_i85 | 0) < 2) {
        break;
      }
      var $458 = HEAPF32[$clipPoints1$s2];
      var $459 = HEAPF32[$clipPoints1$s2 + 1];
      var $sub_i31 = $458 * $sub_i102 + $444 * $459 - $add_i93;
      var $arrayidx1_i = $clipPoints1 + 12 | 0;
      var $460 = HEAPF32[$arrayidx1_i >> 2];
      var $461 = HEAPF32[$clipPoints1$s2 + 4];
      var $sub4_i32 = $460 * $sub_i102 + $444 * $461 - $add_i93;
      if ($sub_i31 > 0) {
        var $numOut_0_i = 0;
      } else {
        var $462$s2 = $clipPoints2 >> 2;
        var $463$s2 = $clipPoints1 >> 2;
        HEAP32[$462$s2] = HEAP32[$463$s2];
        HEAP32[$462$s2 + 1] = HEAP32[$463$s2 + 1];
        HEAP32[$462$s2 + 2] = HEAP32[$463$s2 + 2];
        var $numOut_0_i = 1;
      }
      var $numOut_0_i;
      if ($sub4_i32 > 0) {
        var $numOut_1_i = $numOut_0_i;
      } else {
        var $464$s2 = ($clipPoints2 + $numOut_0_i * 12 | 0) >> 2;
        var $465$s2 = $arrayidx1_i >> 2;
        HEAP32[$464$s2] = HEAP32[$465$s2];
        HEAP32[$464$s2 + 1] = HEAP32[$465$s2 + 1];
        HEAP32[$464$s2 + 2] = HEAP32[$465$s2 + 2];
        var $numOut_1_i = $numOut_0_i + 1 | 0;
      }
      var $numOut_1_i;
      if ($sub_i31 * $sub4_i32 < 0) {
        var $div_i = $sub_i31 / ($sub_i31 - $sub4_i32);
        var $add_i3_i = $458 + ($460 - $458) * $div_i;
        var $add3_i_i = $459 + ($461 - $459) * $div_i;
        var $466 = $clipPoints2 + $numOut_1_i * 12 | 0;
        var $467 = (tempDoubleF32[0] = $add_i3_i, tempDoubleI32[0]);
        var $468$0 = $467;
        var $469 = (tempDoubleF32[0] = $add3_i_i, tempDoubleI32[0]);
        var $472$1 = $469 | 0;
        var $st$20$0 = $466 | 0, $st$20$0$s2 = $st$20$0 >> 2;
        HEAP32[$st$20$0$s2] = 0 | $468$0;
        var $st$20$1 = $466 + 4 | 0, $st$20$1$s2 = $st$20$1 >> 2;
        HEAP32[$st$20$1$s2] = $472$1;
        var $id_i = $clipPoints2 + $numOut_1_i * 12 + 8 | 0;
        var $cf_i = $id_i;
        HEAP8[$id_i] = $439;
        var $473 = HEAP8[$clipPoints1 + 9 | 0];
        HEAP8[$cf_i + 1 | 0] = $473;
        HEAP8[$cf_i + 2 | 0] = 0;
        HEAP8[$cf_i + 3 | 0] = 1;
        var $numOut_2_i = $numOut_1_i + 1 | 0;
      } else {
        var $numOut_2_i = $numOut_1_i;
      }
      var $numOut_2_i;
      if (($numOut_2_i | 0) < 2) {
        break;
      }
      var $localNormal = $manifold + 40 | 0;
      if ($primaryAxis_0_0623) {
        var $474 = $localNormal;
        HEAP32[$474 >> 2] = 0 | $_in589;
        HEAP32[$474 + 4 >> 2] = $_in | 0;
        var $479 = $manifold + 48 | 0;
        var $st$23$0 = $479 | 0, $st$23$0$s2 = $st$23$0 >> 2;
        HEAP32[$st$23$0$s2] = 0 | $_in593;
        var $st$23$1 = $479 + 4 | 0, $st$23$1$s2 = $st$23$1 >> 2;
        HEAP32[$st$23$1$s2] = $_in592 | 0;
      } else {
        var $484 = ($440 << 3) + $polygonB + 84 | 0;
        var $485 = $localNormal;
        var $st$3$0 = $484 | 0, $st$3$0$s2 = $st$3$0 >> 2;
        var $486$0 = HEAP32[$st$3$0$s2];
        var $st$3$1 = $484 + 4 | 0, $st$3$1$s2 = $st$3$1 >> 2;
        var $486$1 = HEAP32[$st$3$1$s2];
        var $st$7$0 = $485 | 0, $st$7$0$s2 = $st$7$0 >> 2;
        HEAP32[$st$7$0$s2] = $486$0;
        var $st$7$1 = $485 + 4 | 0, $st$7$1$s2 = $st$7$1 >> 2;
        HEAP32[$st$7$1$s2] = $486$1;
        var $487 = ($440 << 3) + $polygonB + 20 | 0;
        var $488 = $manifold + 48 | 0;
        var $st$15$0 = $487 | 0, $st$15$0$s2 = $st$15$0 >> 2;
        var $489$0 = HEAP32[$st$15$0$s2];
        var $st$15$1 = $487 + 4 | 0, $st$15$1$s2 = $st$15$1 >> 2;
        var $489$1 = HEAP32[$st$15$1$s2];
        var $st$19$0 = $488 | 0, $st$19$0$s2 = $st$19$0 >> 2;
        HEAP32[$st$19$0$s2] = $489$0;
        var $st$19$1 = $488 + 4 | 0, $st$19$1$s2 = $st$19$1 >> 2;
        HEAP32[$st$19$1$s2] = $489$1;
      }
      var $490 = HEAPF32[$clipPoints2$s2];
      var $491 = HEAPF32[$clipPoints2$s2 + 1];
      var $492 = HEAPF32[$m_radius$s2];
      if ($444 * ($490 - $441) + $445 * ($491 - $442) > $492) {
        var $pointCount566_1 = 0;
        var $514 = $492;
      } else {
        if ($primaryAxis_0_0623) {
          var $sub_i = $490 - HEAPF32[$x4_i$s2];
          var $sub4_i = $491 - HEAPF32[$y16_i$s2];
          var $495 = HEAPF32[$c_i128$s2];
          var $496 = HEAPF32[$s_i131$s2];
          var $add16_i = $sub_i * -$496 + $495 * $sub4_i;
          var $497 = $manifold;
          var $498 = (tempDoubleF32[0] = $495 * $sub_i + $496 * $sub4_i, tempDoubleI32[0]);
          var $499$0 = $498;
          var $500 = (tempDoubleF32[0] = $add16_i, tempDoubleI32[0]);
          var $503$1 = $500 | 0;
          var $st$24$0 = $497 | 0, $st$24$0$s2 = $st$24$0 >> 2;
          HEAP32[$st$24$0$s2] = 0 | $499$0;
          var $st$24$1 = $497 + 4 | 0, $st$24$1$s2 = $st$24$1 >> 2;
          HEAP32[$st$24$1$s2] = $503$1;
          var $505 = HEAP32[$clipPoints2$s2 + 2];
          HEAP32[$manifold + 16 >> 2] = $505;
        } else {
          var $507 = $clipPoints2;
          var $508 = $manifold;
          var $st$2$0 = $507 | 0, $st$2$0$s2 = $st$2$0 >> 2;
          var $509$0 = HEAP32[$st$2$0$s2];
          var $st$2$1 = $507 + 4 | 0, $st$2$1$s2 = $st$2$1 >> 2;
          var $509$1 = HEAP32[$st$2$1$s2];
          var $st$6$0 = $508 | 0, $st$6$0$s2 = $st$6$0 >> 2;
          HEAP32[$st$6$0$s2] = $509$0;
          var $st$6$1 = $508 + 4 | 0, $st$6$1$s2 = $st$6$1 >> 2;
          HEAP32[$st$6$1$s2] = $509$1;
          var $id598 = $clipPoints2 + 8 | 0;
          var $cf599 = $id598;
          var $510 = HEAP8[$cf599 + 3 | 0];
          var $id601 = $manifold + 16 | 0;
          var $cf602 = $id601;
          HEAP8[$cf602 + 2 | 0] = $510;
          var $511 = HEAP8[$cf599 + 2 | 0];
          HEAP8[$cf602 + 3 | 0] = $511;
          var $512 = HEAP8[$cf599 + 1 | 0];
          HEAP8[$id601] = $512;
          var $513 = HEAP8[$id598];
          HEAP8[$cf602 + 1 | 0] = $513;
        }
        var $pointCount566_1 = 1;
        var $514 = HEAPF32[$m_radius$s2];
      }
      var $514;
      var $pointCount566_1;
      var $arrayidx574_1 = $clipPoints2 + 12 | 0;
      var $515 = HEAPF32[$arrayidx574_1 >> 2];
      var $516 = HEAPF32[$clipPoints2$s2 + 4];
      if ($444 * ($515 - $441) + $445 * ($516 - $442) > $514) {
        var $pointCount566_1_1 = $pointCount566_1;
      } else {
        var $add_ptr_1 = $manifold + $pointCount566_1 * 20 | 0;
        if ($primaryAxis_0_0623) {
          var $sub_i_1 = $515 - HEAPF32[$x4_i$s2];
          var $sub4_i_1 = $516 - HEAPF32[$y16_i$s2];
          var $526 = HEAPF32[$c_i128$s2];
          var $527 = HEAPF32[$s_i131$s2];
          var $add16_i_1 = $sub_i_1 * -$527 + $526 * $sub4_i_1;
          var $528 = $add_ptr_1;
          var $529 = (tempDoubleF32[0] = $526 * $sub_i_1 + $527 * $sub4_i_1, tempDoubleI32[0]);
          var $530$0 = $529;
          var $531 = (tempDoubleF32[0] = $add16_i_1, tempDoubleI32[0]);
          var $534$1 = $531 | 0;
          var $st$24$0 = $528 | 0, $st$24$0$s2 = $st$24$0 >> 2;
          HEAP32[$st$24$0$s2] = 0 | $530$0;
          var $st$24$1 = $528 + 4 | 0, $st$24$1$s2 = $st$24$1 >> 2;
          HEAP32[$st$24$1$s2] = $534$1;
          var $536 = HEAP32[$clipPoints2$s2 + 5];
          HEAP32[($manifold + 16 >> 2) + ($pointCount566_1 * 5 | 0)] = $536;
        } else {
          var $517 = $arrayidx574_1;
          var $518 = $add_ptr_1;
          var $st$2$0 = $517 | 0, $st$2$0$s2 = $st$2$0 >> 2;
          var $519$0 = HEAP32[$st$2$0$s2];
          var $st$2$1 = $517 + 4 | 0, $st$2$1$s2 = $st$2$1 >> 2;
          var $519$1 = HEAP32[$st$2$1$s2];
          var $st$6$0 = $518 | 0, $st$6$0$s2 = $st$6$0 >> 2;
          HEAP32[$st$6$0$s2] = $519$0;
          var $st$6$1 = $518 + 4 | 0, $st$6$1$s2 = $st$6$1 >> 2;
          HEAP32[$st$6$1$s2] = $519$1;
          var $id598_1 = $clipPoints2 + 20 | 0;
          var $cf599_1 = $id598_1;
          var $520 = HEAP8[$cf599_1 + 3 | 0];
          var $id601_1 = $manifold + $pointCount566_1 * 20 + 16 | 0;
          var $cf602_1 = $id601_1;
          HEAP8[$cf602_1 + 2 | 0] = $520;
          var $521 = HEAP8[$cf599_1 + 2 | 0];
          HEAP8[$cf602_1 + 3 | 0] = $521;
          var $522 = HEAP8[$cf599_1 + 1 | 0];
          HEAP8[$id601_1] = $522;
          var $523 = HEAP8[$id598_1];
          HEAP8[$cf602_1 + 1 | 0] = $523;
        }
        var $pointCount566_1_1 = $pointCount566_1 + 1 | 0;
      }
      var $pointCount566_1_1;
      HEAP32[$pointCount >> 2] = $pointCount566_1_1;
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN12b2EPCollider21ComputeEdgeSeparationEv($agg_result, $this) {
  var $this$s2 = $this >> 2;
  HEAP32[$agg_result >> 2] = 1;
  HEAP32[$agg_result + 4 >> 2] = (HEAP8[$this + 248 | 0] & 1 ^ 1) & 255;
  var $separation = $agg_result + 8 | 0;
  HEAPF32[$separation >> 2] = 3.4028234663852886e+38;
  var $3 = HEAPU32[$this$s2 + 32];
  var $cmp5 = ($3 | 0) > 0;
  $for_body_lr_ph$$for_end$2 : do {
    if ($cmp5) {
      var $4 = HEAPF32[$this$s2 + 41];
      var $5 = HEAPF32[$this$s2 + 42];
      var $6 = HEAPF32[$this$s2 + 53];
      var $7 = HEAPF32[$this$s2 + 54];
      var $i_06 = 0;
      var $8 = 3.4028234663852886e+38;
      while (1) {
        var $8;
        var $i_06;
        var $add_i = $6 * (HEAPF32[($i_06 << 3 >> 2) + $this$s2] - $4) + $7 * (HEAPF32[(($i_06 << 3) + 4 >> 2) + $this$s2] - $5);
        if ($add_i < $8) {
          HEAPF32[$separation >> 2] = $add_i;
          var $11 = $add_i;
        } else {
          var $11 = $8;
        }
        var $11;
        var $inc = $i_06 + 1 | 0;
        if (($inc | 0) >= ($3 | 0)) {
          break $for_body_lr_ph$$for_end$2;
        }
        var $i_06 = $inc;
        var $8 = $11;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN12b2EPCollider24ComputePolygonSeparationEv($agg_result, $this) {
  var $separation$s2;
  var $index$s2;
  var $type$s2;
  var $this$s2 = $this >> 2;
  var __label__;
  var $type$s2 = ($agg_result | 0) >> 2;
  HEAP32[$type$s2] = 0;
  var $index$s2 = ($agg_result + 4 | 0) >> 2;
  HEAP32[$index$s2] = -1;
  var $separation$s2 = ($agg_result + 8 | 0) >> 2;
  HEAPF32[$separation$s2] = -3.4028234663852886e+38;
  var $0 = HEAPF32[$this$s2 + 54];
  var $1 = HEAPF32[$this$s2 + 53];
  var $2 = HEAP32[$this$s2 + 32];
  var $x1_i50 = $this + 164 | 0;
  var $y2_i53 = $this + 168 | 0;
  var $x1_i35 = $this + 172 | 0;
  var $y2_i38 = $this + 176 | 0;
  var $m_radius = $this + 244 | 0;
  var $x1_i2 = $this + 228 | 0;
  var $y2_i4 = $this + 232 | 0;
  var $x1_i13 = $this + 236 | 0;
  var $y2_i16 = $this + 240 | 0;
  var $i_0 = 0;
  var $3 = -3.4028234663852886e+38;
  while (1) {
    var $3;
    var $i_0;
    if (($i_0 | 0) >= ($2 | 0)) {
      break;
    }
    var $4 = HEAPF32[(($i_0 << 3) + 64 >> 2) + $this$s2];
    var $sub_i58 = -$4;
    var $sub2_i = -HEAPF32[(($i_0 << 3) + 68 >> 2) + $this$s2];
    var $6 = HEAPF32[($i_0 << 3 >> 2) + $this$s2];
    var $8 = HEAPF32[(($i_0 << 3) + 4 >> 2) + $this$s2];
    var $add_i48 = ($6 - HEAPF32[$x1_i50 >> 2]) * $sub_i58 + ($8 - HEAPF32[$y2_i53 >> 2]) * $sub2_i;
    var $add_i33 = ($6 - HEAPF32[$x1_i35 >> 2]) * $sub_i58 + ($8 - HEAPF32[$y2_i38 >> 2]) * $sub2_i;
    var $cond_i = $add_i48 < $add_i33 ? $add_i48 : $add_i33;
    if ($cond_i > HEAPF32[$m_radius >> 2]) {
      HEAP32[$type$s2] = 2;
      HEAP32[$index$s2] = $i_0;
      HEAPF32[$separation$s2] = $cond_i;
      break;
    }
    var $cmp17 = $4 * $0 + $1 * $sub2_i < 0;
    do {
      if ($cmp17) {
        if (($sub_i58 - HEAPF32[$x1_i2 >> 2]) * $1 + ($sub2_i - HEAPF32[$y2_i4 >> 2]) * $0 >= -.03490658849477768 & $cond_i > $3) {
          __label__ = 7;
          break;
        }
        var $17 = $3;
        __label__ = 8;
        break;
      } else {
        if (($sub_i58 - HEAPF32[$x1_i13 >> 2]) * $1 + ($sub2_i - HEAPF32[$y2_i16 >> 2]) * $0 >= -.03490658849477768 & $cond_i > $3) {
          __label__ = 7;
          break;
        }
        var $17 = $3;
        __label__ = 8;
        break;
      }
    } while (0);
    if (__label__ == 7) {
      HEAP32[$type$s2] = 2;
      HEAP32[$index$s2] = $i_0;
      HEAPF32[$separation$s2] = $cond_i;
      var $17 = $cond_i;
    }
    var $17;
    var $i_0 = $i_0 + 1 | 0;
    var $3 = $17;
  }
  return;
  return;
}

function __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($manifold, $edgeA, $xfA, $polygonB, $xfB) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 252;
  var $collider = __stackBase__;
  __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($collider, $manifold, $edgeA, $xfA, $polygonB, $xfB);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($manifold, $polyA, $xfA, $polyB, $xfB) {
  var $69$s2;
  var $68$s2;
  var $67$s2;
  var $66$s2;
  var $st$20$1$s2;
  var $st$20$0$s2;
  var $54$s2;
  var $53$s2;
  var $52$s2;
  var $51$s2;
  var $poly1_0$s2;
  var $poly2_0$s2;
  var $clipPoints2$s2;
  var $clipPoints1$s2;
  var $xfB$s2 = $xfB >> 2;
  var $xfA$s2 = $xfA >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 80;
  var __label__;
  var $edgeA = __stackBase__;
  var $edgeB = __stackBase__ + 4;
  var $incidentEdge = __stackBase__ + 8;
  var $clipPoints1 = __stackBase__ + 32, $clipPoints1$s2 = $clipPoints1 >> 2;
  var $clipPoints2 = __stackBase__ + 56, $clipPoints2$s2 = $clipPoints2 >> 2;
  var $pointCount = $manifold + 60 | 0;
  HEAP32[$pointCount >> 2] = 0;
  var $add = HEAPF32[$polyA + 8 >> 2] + HEAPF32[$polyB + 8 >> 2];
  HEAP32[$edgeA >> 2] = 0;
  var $call = __ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeA, $polyA, $xfA, $polyB, $xfB);
  var $cmp = $call > $add;
  do {
    if (!$cmp) {
      HEAP32[$edgeB >> 2] = 0;
      var $call2 = __ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeB, $polyB, $xfB, $polyA, $xfA);
      if ($call2 > $add) {
        break;
      }
      if ($call2 > $call * .9800000190734863 + .0010000000474974513) {
        var $tmp222 = HEAPF32[$xfB$s2];
        var $tmp223 = HEAPF32[$xfB$s2 + 1];
        var $tmp217 = HEAPF32[$xfB$s2 + 2];
        var $tmp218 = HEAPF32[$xfB$s2 + 3];
        var $tmp205 = HEAPF32[$xfA$s2];
        var $tmp206 = HEAPF32[$xfA$s2 + 1];
        var $tmp200 = HEAPF32[$xfA$s2 + 2];
        var $tmp201 = HEAPF32[$xfA$s2 + 3];
        var $2 = HEAP32[$edgeB >> 2];
        HEAP32[$manifold + 56 >> 2] = 2;
        var $flip_0 = 1;
        var $edge1_0 = $2;
        var $poly2_0 = $polyA, $poly2_0$s2 = $poly2_0 >> 2;
        var $poly1_0 = $polyB, $poly1_0$s2 = $poly1_0 >> 2;
        var $11 = $tmp222;
        var $10 = $tmp223;
        var $9 = $tmp217;
        var $8 = $tmp218;
        var $7 = $tmp205;
        var $6 = $tmp206;
        var $5 = $tmp200;
        var $4 = $tmp201;
      } else {
        var $tmp225 = HEAPF32[$xfA$s2];
        var $tmp226 = HEAPF32[$xfA$s2 + 1];
        var $tmp219 = HEAPF32[$xfA$s2 + 2];
        var $tmp220 = HEAPF32[$xfA$s2 + 3];
        var $tmp208 = HEAPF32[$xfB$s2];
        var $tmp209 = HEAPF32[$xfB$s2 + 1];
        var $tmp202 = HEAPF32[$xfB$s2 + 2];
        var $tmp203 = HEAPF32[$xfB$s2 + 3];
        var $3 = HEAP32[$edgeA >> 2];
        HEAP32[$manifold + 56 >> 2] = 1;
        var $flip_0 = 0;
        var $edge1_0 = $3;
        var $poly2_0 = $polyB, $poly2_0$s2 = $poly2_0 >> 2;
        var $poly1_0 = $polyA, $poly1_0$s2 = $poly1_0 >> 2;
        var $11 = $tmp225;
        var $10 = $tmp226;
        var $9 = $tmp219;
        var $8 = $tmp220;
        var $7 = $tmp208;
        var $6 = $tmp209;
        var $5 = $tmp202;
        var $4 = $tmp203;
      }
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $11;
      var $poly1_0;
      var $poly2_0;
      var $edge1_0;
      var $flip_0;
      var $12 = HEAP32[$poly2_0$s2 + 37];
      var $cmp_i165 = ($edge1_0 | 0) > -1;
      do {
        if ($cmp_i165) {
          if ((HEAP32[$poly1_0$s2 + 37] | 0) > ($edge1_0 | 0)) {
            __label__ = 8;
            break;
          }
          __label__ = 7;
          break;
        } else {
          __label__ = 7;
        }
      } while (0);
      if (__label__ == 7) {
        ___assert_func(STRING_TABLE.__str2 | 0, 151, STRING_TABLE.___PRETTY_FUNCTION____ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_ | 0, STRING_TABLE.__str13 | 0);
      }
      var $14 = HEAPF32[(($edge1_0 << 3) + 84 >> 2) + $poly1_0$s2];
      var $15 = HEAPF32[(($edge1_0 << 3) + 88 >> 2) + $poly1_0$s2];
      var $sub_i_i170 = $8 * $14 - $9 * $15;
      var $add_i_i172 = $9 * $14 + $8 * $15;
      var $add_i37_i = $4 * $sub_i_i170 + $5 * $add_i_i172;
      var $sub_i38_i = -$5;
      var $add8_i_i = $sub_i_i170 * $sub_i38_i + $4 * $add_i_i172;
      var $cmp746_i = ($12 | 0) > 0;
      $for_body_i$$_ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6__exit$38 : do {
        if ($cmp746_i) {
          var $index_047_i = 0;
          var $minDot_048_i = 3.4028234663852886e+38;
          var $i_049_i = 0;
          while (1) {
            var $i_049_i;
            var $minDot_048_i;
            var $index_047_i;
            var $add_i30_i = $add_i37_i * HEAPF32[(($i_049_i << 3) + 84 >> 2) + $poly2_0$s2] + $add8_i_i * HEAPF32[(($i_049_i << 3) + 88 >> 2) + $poly2_0$s2];
            var $cmp9_i = $add_i30_i < $minDot_048_i;
            var $index_1_i = $cmp9_i ? $i_049_i : $index_047_i;
            var $minDot_1_i = $cmp9_i ? $add_i30_i : $minDot_048_i;
            var $inc_i = $i_049_i + 1 | 0;
            if (($inc_i | 0) == ($12 | 0)) {
              var $index_0_lcssa_i = $index_1_i;
              break $for_body_i$$_ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6__exit$38;
            }
            var $index_047_i = $index_1_i;
            var $minDot_048_i = $minDot_1_i;
            var $i_049_i = $inc_i;
          }
        } else {
          var $index_0_lcssa_i = 0;
        }
      } while (0);
      var $index_0_lcssa_i;
      var $add_i174 = $index_0_lcssa_i + 1 | 0;
      var $cond_i = ($add_i174 | 0) < ($12 | 0) ? $add_i174 : 0;
      var $18 = HEAPF32[(($index_0_lcssa_i << 3) + 20 >> 2) + $poly2_0$s2];
      var $19 = HEAPF32[(($index_0_lcssa_i << 3) + 24 >> 2) + $poly2_0$s2];
      var $add_i17_i = $4 * $18 - $5 * $19 + $7;
      var $add17_i22_i = $5 * $18 + $4 * $19 + $6;
      var $20 = $incidentEdge;
      var $21 = (tempDoubleF32[0] = $add_i17_i, tempDoubleI32[0]);
      var $22$0 = $21;
      var $23 = (tempDoubleF32[0] = $add17_i22_i, tempDoubleI32[0]);
      var $26$1 = $23 | 0;
      HEAP32[$20 >> 2] = 0 | $22$0;
      HEAP32[$20 + 4 >> 2] = $26$1;
      var $conv_i175 = $edge1_0 & 255;
      var $id_i176 = $incidentEdge + 8 | 0;
      var $cf_i177 = $id_i176;
      HEAP8[$id_i176] = $conv_i175;
      var $conv19_i = $index_0_lcssa_i & 255;
      HEAP8[$cf_i177 + 1 | 0] = $conv19_i;
      HEAP8[$cf_i177 + 2 | 0] = 1;
      HEAP8[$cf_i177 + 3 | 0] = 0;
      var $arrayidx29_i = $incidentEdge + 12 | 0;
      var $27 = HEAPF32[(($cond_i << 3) + 20 >> 2) + $poly2_0$s2];
      var $28 = HEAPF32[(($cond_i << 3) + 24 >> 2) + $poly2_0$s2];
      var $add_i6_i = $4 * $27 - $5 * $28 + $7;
      var $add17_i_i = $5 * $27 + $4 * $28 + $6;
      var $29 = $arrayidx29_i;
      var $30 = (tempDoubleF32[0] = $add_i6_i, tempDoubleI32[0]);
      var $31$0 = $30;
      var $32 = (tempDoubleF32[0] = $add17_i_i, tempDoubleI32[0]);
      var $35$0 = 0 | $31$0;
      var $35$1 = $32 | 0;
      HEAP32[$29 >> 2] = $35$0;
      HEAP32[$29 + 4 >> 2] = $35$1;
      var $id35_i = $incidentEdge + 20 | 0;
      var $cf36_i = $id35_i;
      HEAP8[$id35_i] = $conv_i175;
      HEAP8[$cf36_i + 1 | 0] = $cond_i & 255;
      HEAP8[$cf36_i + 2 | 0] = 1;
      HEAP8[$cf36_i + 3 | 0] = 0;
      var $add12 = $edge1_0 + 1 | 0;
      var $cond = ($add12 | 0) < (HEAP32[$poly1_0$s2 + 37] | 0) ? $add12 : 0;
      var $37 = ($edge1_0 << 3) + $poly1_0 + 20 | 0;
      var $38$1 = HEAP32[$37 + 4 >> 2];
      var $40 = (tempDoubleI32[0] = HEAP32[$37 >> 2], tempDoubleF32[0]);
      var $42 = (tempDoubleI32[0] = $38$1, tempDoubleF32[0]);
      var $43 = ($cond << 3) + $poly1_0 + 20 | 0;
      var $44$1 = HEAP32[$43 + 4 >> 2];
      var $46 = (tempDoubleI32[0] = HEAP32[$43 >> 2], tempDoubleF32[0]);
      var $48 = (tempDoubleI32[0] = $44$1, tempDoubleF32[0]);
      var $sub_i160 = $46 - $40;
      var $sub3_i = $48 - $42;
      var $add_i_i153 = $sub_i160 * $sub_i160 + $sub3_i * $sub3_i;
      var $call_i_i_i = _sqrtf($add_i_i153);
      if ($call_i_i_i < 1.1920928955078125e-7) {
        var $50 = $sub_i160;
        var $49 = $sub3_i;
      } else {
        var $div_i155 = 1 / $call_i_i_i;
        var $50 = $sub_i160 * $div_i155;
        var $49 = $sub3_i * $div_i155;
      }
      var $49;
      var $50;
      var $mul_i132 = ($40 + $46) * .5;
      var $sub_i126 = $8 * $50 - $9 * $49;
      var $add_i128 = $9 * $50 + $8 * $49;
      var $mul1_i = $sub_i126 * -1;
      var $add_i107 = $8 * $40 - $9 * $42 + $11;
      var $add17_i112 = $9 * $40 + $8 * $42 + $10;
      var $mul1_i134 = ($42 + $48) * .5;
      var $add_i88 = $add_i128 * $add_i107 + $mul1_i * $add17_i112;
      var $add21 = $add - ($sub_i126 * $add_i107 + $add_i128 * $add17_i112);
      var $add23 = $sub_i126 * ($8 * $46 - $9 * $48 + $11) + $add_i128 * ($9 * $46 + $8 * $48 + $10) + $add;
      var $sub_i64 = -$sub_i126;
      var $sub2_i = -$add_i128;
      var $sub_i20 = $add_i17_i * $sub_i64 + $add17_i22_i * $sub2_i - $add21;
      var $sub4_i27 = $add_i6_i * $sub_i64 + $add17_i_i * $sub2_i - $add21;
      if ($sub_i20 > 0) {
        var $numOut_0_i30 = 0;
      } else {
        var $51$s2 = $clipPoints1 >> 2;
        var $52$s2 = $incidentEdge >> 2;
        HEAP32[$51$s2] = HEAP32[$52$s2];
        HEAP32[$51$s2 + 1] = HEAP32[$52$s2 + 1];
        HEAP32[$51$s2 + 2] = HEAP32[$52$s2 + 2];
        var $numOut_0_i30 = 1;
      }
      var $numOut_0_i30;
      if ($sub4_i27 > 0) {
        var $numOut_1_i36 = $numOut_0_i30;
      } else {
        var $53$s2 = ($clipPoints1 + $numOut_0_i30 * 12 | 0) >> 2;
        var $54$s2 = $arrayidx29_i >> 2;
        HEAP32[$53$s2] = HEAP32[$54$s2];
        HEAP32[$53$s2 + 1] = HEAP32[$54$s2 + 1];
        HEAP32[$53$s2 + 2] = HEAP32[$54$s2 + 2];
        var $numOut_1_i36 = $numOut_0_i30 + 1 | 0;
      }
      var $numOut_1_i36;
      if ($sub_i20 * $sub4_i27 < 0) {
        var $div_i41 = $sub_i20 / ($sub_i20 - $sub4_i27);
        var $add_i3_i47 = $add_i17_i + ($add_i6_i - $add_i17_i) * $div_i41;
        var $add3_i_i48 = $add17_i22_i + ($add17_i_i - $add17_i22_i) * $div_i41;
        var $55 = $clipPoints1 + $numOut_1_i36 * 12 | 0;
        var $56 = (tempDoubleF32[0] = $add_i3_i47, tempDoubleI32[0]);
        var $57$0 = $56;
        var $58 = (tempDoubleF32[0] = $add3_i_i48, tempDoubleI32[0]);
        var $61$0 = 0 | $57$0;
        var $61$1 = $58 | 0;
        var $st$20$0 = $55 | 0, $st$20$0$s2 = $st$20$0 >> 2;
        HEAP32[$st$20$0$s2] = $61$0;
        var $st$20$1 = $55 + 4 | 0, $st$20$1$s2 = $st$20$1 >> 2;
        HEAP32[$st$20$1$s2] = $61$1;
        var $id_i50 = $clipPoints1 + $numOut_1_i36 * 12 + 8 | 0;
        var $cf_i51 = $id_i50;
        HEAP8[$id_i50] = $conv_i175;
        HEAP8[$cf_i51 + 1 | 0] = $conv19_i;
        HEAP8[$cf_i51 + 2 | 0] = 0;
        HEAP8[$cf_i51 + 3 | 0] = 1;
        var $numOut_2_i61 = $numOut_1_i36 + 1 | 0;
      } else {
        var $numOut_2_i61 = $numOut_1_i36;
      }
      var $numOut_2_i61;
      if (($numOut_2_i61 | 0) < 2) {
        break;
      }
      var $62 = HEAPF32[$clipPoints1$s2];
      var $63 = HEAPF32[$clipPoints1$s2 + 1];
      var $sub_i10 = $sub_i126 * $62 + $add_i128 * $63 - $add23;
      var $arrayidx1_i = $clipPoints1 + 12 | 0;
      var $64 = HEAPF32[$arrayidx1_i >> 2];
      var $65 = HEAPF32[$clipPoints1$s2 + 4];
      var $sub4_i11 = $sub_i126 * $64 + $add_i128 * $65 - $add23;
      if ($sub_i10 > 0) {
        var $numOut_0_i = 0;
      } else {
        var $66$s2 = $clipPoints2 >> 2;
        var $67$s2 = $clipPoints1 >> 2;
        HEAP32[$66$s2] = HEAP32[$67$s2];
        HEAP32[$66$s2 + 1] = HEAP32[$67$s2 + 1];
        HEAP32[$66$s2 + 2] = HEAP32[$67$s2 + 2];
        var $numOut_0_i = 1;
      }
      var $numOut_0_i;
      if ($sub4_i11 > 0) {
        var $numOut_1_i = $numOut_0_i;
      } else {
        var $68$s2 = ($clipPoints2 + $numOut_0_i * 12 | 0) >> 2;
        var $69$s2 = $arrayidx1_i >> 2;
        HEAP32[$68$s2] = HEAP32[$69$s2];
        HEAP32[$68$s2 + 1] = HEAP32[$69$s2 + 1];
        HEAP32[$68$s2 + 2] = HEAP32[$69$s2 + 2];
        var $numOut_1_i = $numOut_0_i + 1 | 0;
      }
      var $numOut_1_i;
      if ($sub_i10 * $sub4_i11 < 0) {
        var $div_i = $sub_i10 / ($sub_i10 - $sub4_i11);
        var $add_i3_i = $62 + ($64 - $62) * $div_i;
        var $add3_i_i = $63 + ($65 - $63) * $div_i;
        var $70 = $clipPoints2 + $numOut_1_i * 12 | 0;
        var $71 = (tempDoubleF32[0] = $add_i3_i, tempDoubleI32[0]);
        var $72$0 = $71;
        var $73 = (tempDoubleF32[0] = $add3_i_i, tempDoubleI32[0]);
        var $76$0 = 0 | $72$0;
        var $76$1 = $73 | 0;
        var $st$20$0 = $70 | 0, $st$20$0$s2 = $st$20$0 >> 2;
        HEAP32[$st$20$0$s2] = $76$0;
        var $st$20$1 = $70 + 4 | 0, $st$20$1$s2 = $st$20$1 >> 2;
        HEAP32[$st$20$1$s2] = $76$1;
        var $id_i = $clipPoints2 + $numOut_1_i * 12 + 8 | 0;
        var $cf_i = $id_i;
        HEAP8[$id_i] = $cond & 255;
        var $77 = HEAP8[$clipPoints1 + 9 | 0];
        HEAP8[$cf_i + 1 | 0] = $77;
        HEAP8[$cf_i + 2 | 0] = 0;
        HEAP8[$cf_i + 3 | 0] = 1;
        var $numOut_2_i = $numOut_1_i + 1 | 0;
      } else {
        var $numOut_2_i = $numOut_1_i;
      }
      var $numOut_2_i;
      if (($numOut_2_i | 0) < 2) {
        break;
      }
      var $78 = $manifold + 40 | 0;
      var $79 = (tempDoubleF32[0] = $49, tempDoubleI32[0]);
      var $80$0 = $79;
      var $81 = (tempDoubleF32[0] = $50 * -1, tempDoubleI32[0]);
      var $84$1 = $81 | 0;
      HEAP32[$78 >> 2] = 0 | $80$0;
      HEAP32[$78 + 4 >> 2] = $84$1;
      var $85 = $manifold + 48 | 0;
      var $86 = (tempDoubleF32[0] = $mul_i132, tempDoubleI32[0]);
      var $87$0 = $86;
      var $88 = (tempDoubleF32[0] = $mul1_i134, tempDoubleI32[0]);
      var $91$0 = 0 | $87$0;
      var $91$1 = $88 | 0;
      HEAP32[$85 >> 2] = $91$0;
      HEAP32[$85 + 4 >> 2] = $91$1;
      var $tobool = $flip_0 << 24 >> 24 == 0;
      var $92 = HEAPF32[$clipPoints2$s2];
      var $93 = HEAPF32[$clipPoints2$s2 + 1];
      var $cmp57_us = $add_i128 * $92 + $mul1_i * $93 - $add_i88 > $add;
      do {
        if ($tobool) {
          if ($cmp57_us) {
            var $pointCount52_1_us = 0;
          } else {
            var $sub_i_us = $92 - $7;
            var $sub4_i_us = $93 - $6;
            var $add16_i_us = $sub_i_us * $sub_i38_i + $4 * $sub4_i_us;
            var $96 = $manifold;
            var $97 = (tempDoubleF32[0] = $4 * $sub_i_us + $5 * $sub4_i_us, tempDoubleI32[0]);
            var $98$0 = $97;
            var $99 = (tempDoubleF32[0] = $add16_i_us, tempDoubleI32[0]);
            var $102$1 = $99 | 0;
            var $st$19$0 = $96 | 0;
            HEAP32[$st$19$0 >> 2] = 0 | $98$0;
            var $st$19$1 = $96 + 4 | 0;
            HEAP32[$st$19$1 >> 2] = $102$1;
            var $104 = HEAP32[$clipPoints2$s2 + 2];
            HEAP32[$manifold + 16 >> 2] = $104;
            var $pointCount52_1_us = 1;
          }
          var $pointCount52_1_us;
          var $94 = HEAPF32[$clipPoints2$s2 + 3];
          var $95 = HEAPF32[$clipPoints2$s2 + 4];
          if ($add_i128 * $94 + $mul1_i * $95 - $add_i88 > $add) {
            var $pointCount52_0_lcssa = $pointCount52_1_us;
            break;
          }
          var $sub_i_us_1 = $94 - $7;
          var $sub4_i_us_1 = $95 - $6;
          var $add16_i_us_1 = $sub_i_us_1 * $sub_i38_i + $4 * $sub4_i_us_1;
          var $125 = $manifold + $pointCount52_1_us * 20 | 0;
          var $126 = (tempDoubleF32[0] = $4 * $sub_i_us_1 + $5 * $sub4_i_us_1, tempDoubleI32[0]);
          var $127$0 = $126;
          var $128 = (tempDoubleF32[0] = $add16_i_us_1, tempDoubleI32[0]);
          var $131$1 = $128 | 0;
          var $st$20$0 = $125 | 0, $st$20$0$s2 = $st$20$0 >> 2;
          HEAP32[$st$20$0$s2] = 0 | $127$0;
          var $st$20$1 = $125 + 4 | 0, $st$20$1$s2 = $st$20$1 >> 2;
          HEAP32[$st$20$1$s2] = $131$1;
          var $133 = HEAP32[$clipPoints2$s2 + 5];
          HEAP32[($manifold + 16 >> 2) + ($pointCount52_1_us * 5 | 0)] = $133;
          var $pointCount52_0_lcssa = $pointCount52_1_us + 1 | 0;
        } else {
          if ($cmp57_us) {
            var $pointCount52_1 = 0;
          } else {
            var $sub_i = $92 - $7;
            var $sub4_i = $93 - $6;
            var $add16_i = $sub_i * $sub_i38_i + $4 * $sub4_i;
            var $106 = $manifold;
            var $107 = (tempDoubleF32[0] = $4 * $sub_i + $5 * $sub4_i, tempDoubleI32[0]);
            var $108$0 = $107;
            var $109 = (tempDoubleF32[0] = $add16_i, tempDoubleI32[0]);
            var $112$1 = $109 | 0;
            var $st$19$0 = $106 | 0;
            HEAP32[$st$19$0 >> 2] = 0 | $108$0;
            var $st$19$1 = $106 + 4 | 0;
            HEAP32[$st$19$1 >> 2] = $112$1;
            var $id = $manifold + 16 | 0;
            var $114 = HEAPU32[$clipPoints2$s2 + 2];
            HEAP32[$id >> 2] = $114;
            var $119 = $114 >>> 24 & 255;
            var $120 = $114 >>> 16 & 255;
            var $122 = $114 & 255;
            var $id671 = $id;
            var $id671_1 = $id671 + 1 | 0;
            var $id671_2 = $id671 + 2 | 0;
            var $id671_3 = $id671 + 3 | 0;
            HEAP8[$id] = $114 >>> 8 & 255;
            HEAP8[$id671_1] = $122;
            HEAP8[$id671_2] = $119;
            HEAP8[$id671_3] = $120;
            var $pointCount52_1 = 1;
          }
          var $pointCount52_1;
          var $123 = HEAPF32[$clipPoints2$s2 + 3];
          var $124 = HEAPF32[$clipPoints2$s2 + 4];
          if ($add_i128 * $123 + $mul1_i * $124 - $add_i88 > $add) {
            var $pointCount52_0_lcssa = $pointCount52_1;
            break;
          }
          var $sub_i_1 = $123 - $7;
          var $sub4_i_1 = $124 - $6;
          var $add16_i_1 = $sub_i_1 * $sub_i38_i + $4 * $sub4_i_1;
          var $135 = $manifold + $pointCount52_1 * 20 | 0;
          var $136 = (tempDoubleF32[0] = $4 * $sub_i_1 + $5 * $sub4_i_1, tempDoubleI32[0]);
          var $137$0 = $136;
          var $138 = (tempDoubleF32[0] = $add16_i_1, tempDoubleI32[0]);
          var $141$1 = $138 | 0;
          var $st$20$0 = $135 | 0, $st$20$0$s2 = $st$20$0 >> 2;
          HEAP32[$st$20$0$s2] = 0 | $137$0;
          var $st$20$1 = $135 + 4 | 0, $st$20$1$s2 = $st$20$1 >> 2;
          HEAP32[$st$20$1$s2] = $141$1;
          var $id_1 = $manifold + $pointCount52_1 * 20 + 16 | 0;
          var $143 = HEAPU32[$clipPoints2$s2 + 5];
          HEAP32[$id_1 >> 2] = $143;
          var $148 = $143 >>> 24 & 255;
          var $149 = $143 >>> 16 & 255;
          var $151 = $143 & 255;
          var $id671_1229 = $id_1;
          var $id671_1_1 = $id671_1229 + 1 | 0;
          var $id671_2_1 = $id671_1229 + 2 | 0;
          var $id671_3_1 = $id671_1229 + 3 | 0;
          HEAP8[$id_1] = $143 >>> 8 & 255;
          HEAP8[$id671_1_1] = $151;
          HEAP8[$id671_2_1] = $148;
          HEAP8[$id671_3_1] = $149;
          var $pointCount52_0_lcssa = $pointCount52_1 + 1 | 0;
        }
      } while (0);
      var $pointCount52_0_lcssa;
      HEAP32[$pointCount >> 2] = $pointCount52_0_lcssa;
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeIndex, $poly1, $xf1, $poly2, $xf2) {
  var $poly1$s2 = $poly1 >> 2;
  var $0 = HEAP32[$poly1$s2 + 37];
  var $1 = HEAPF32[$xf2 + 12 >> 2];
  var $2 = HEAPF32[$poly2 + 12 >> 2];
  var $3 = HEAPF32[$xf2 + 8 >> 2];
  var $4 = HEAPF32[$poly2 + 16 >> 2];
  var $7 = HEAPF32[$xf1 + 12 >> 2];
  var $8 = HEAPF32[$poly1$s2 + 3];
  var $9 = HEAPF32[$xf1 + 8 >> 2];
  var $10 = HEAPF32[$poly1$s2 + 4];
  var $sub_i18 = $1 * $2 - $3 * $4 + HEAPF32[$xf2 >> 2] - ($7 * $8 - $9 * $10 + HEAPF32[$xf1 >> 2]);
  var $sub3_i = $3 * $2 + $1 * $4 + HEAPF32[$xf2 + 4 >> 2] - ($9 * $8 + $7 * $10 + HEAPF32[$xf1 + 4 >> 2]);
  var $add_i27 = $7 * $sub_i18 + $9 * $sub3_i;
  var $add8_i = $sub_i18 * -$9 + $7 * $sub3_i;
  var $cmp38 = ($0 | 0) > 0;
  $for_body$$for_end$79 : do {
    if ($cmp38) {
      var $edge_039 = 0;
      var $maxDot_040 = -3.4028234663852886e+38;
      var $i_041 = 0;
      while (1) {
        var $i_041;
        var $maxDot_040;
        var $edge_039;
        var $add_i37 = HEAPF32[(($i_041 << 3) + 84 >> 2) + $poly1$s2] * $add_i27 + HEAPF32[(($i_041 << 3) + 88 >> 2) + $poly1$s2] * $add8_i;
        var $cmp3 = $add_i37 > $maxDot_040;
        var $edge_1 = $cmp3 ? $i_041 : $edge_039;
        var $maxDot_1 = $cmp3 ? $add_i37 : $maxDot_040;
        var $inc = $i_041 + 1 | 0;
        if (($inc | 0) == ($0 | 0)) {
          var $edge_0_lcssa = $edge_1;
          break $for_body$$for_end$79;
        }
        var $edge_039 = $edge_1;
        var $maxDot_040 = $maxDot_1;
        var $i_041 = $inc;
      }
    } else {
      var $edge_0_lcssa = 0;
    }
  } while (0);
  var $edge_0_lcssa;
  var $call4 = __ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1, $xf1, $edge_0_lcssa, $poly2, $xf2);
  var $edge_0_ = ($edge_0_lcssa | 0) > 0 ? $edge_0_lcssa : $0;
  var $cond = $edge_0_ - 1 | 0;
  var $call8 = __ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1, $xf1, $cond, $poly2, $xf2);
  var $add = $edge_0_lcssa + 1 | 0;
  var $cond14 = ($add | 0) < ($0 | 0) ? $add : 0;
  var $call15 = __ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1, $xf1, $cond14, $poly2, $xf2);
  var $or_cond = $call8 > $call4 & $call8 > $call15;
  $if_end43_us$$if_else$83 : do {
    if ($or_cond) {
      var $bestSeparation_0_us = $call8;
      var $bestEdge_0_us = $cond;
      while (1) {
        var $bestEdge_0_us;
        var $bestSeparation_0_us;
        var $bestEdge_0__us = ($bestEdge_0_us | 0) > 0 ? $bestEdge_0_us : $0;
        var $cond34_us = $bestEdge_0__us - 1 | 0;
        var $call44_us = __ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1, $xf1, $cond34_us, $poly2, $xf2);
        if ($call44_us <= $bestSeparation_0_us) {
          var $retval_0 = $bestSeparation_0_us;
          var $storemerge = $bestEdge_0_us;
          break $if_end43_us$$if_else$83;
        }
        var $bestSeparation_0_us = $call44_us;
        var $bestEdge_0_us = $cond34_us;
      }
    } else {
      if ($call15 <= $call4) {
        var $retval_0 = $call4;
        var $storemerge = $edge_0_lcssa;
        break;
      }
      var $bestSeparation_0 = $call15;
      var $bestEdge_0 = $cond14;
      while (1) {
        var $bestEdge_0;
        var $bestSeparation_0;
        var $add36 = $bestEdge_0 + 1 | 0;
        var $cond42 = ($add36 | 0) < ($0 | 0) ? $add36 : 0;
        var $call44 = __ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1, $xf1, $cond42, $poly2, $xf2);
        if ($call44 <= $bestSeparation_0) {
          var $retval_0 = $bestSeparation_0;
          var $storemerge = $bestEdge_0;
          break $if_end43_us$$if_else$83;
        }
        var $bestSeparation_0 = $call44;
        var $bestEdge_0 = $cond42;
      }
    }
  } while (0);
  var $storemerge;
  var $retval_0;
  HEAP32[$edgeIndex >> 2] = $storemerge;
  return $retval_0;
  return null;
}

function __Z16b2GetPointStatesP12b2PointStateS0_PK10b2ManifoldS3_($state1, $state2, $manifold1, $manifold2) {
  var $pointCount10$s2;
  var $pointCount$s2;
  HEAP32[$state1 >> 2] = 0;
  HEAP32[$state2 >> 2] = 0;
  HEAP32[$state1 + 4 >> 2] = 0;
  HEAP32[$state2 + 4 >> 2] = 0;
  var $pointCount$s2 = ($manifold1 + 60 | 0) >> 2;
  var $cmp46 = (HEAP32[$pointCount$s2] | 0) > 0;
  var $pointCount10$s2 = ($manifold2 + 60 | 0) >> 2;
  $for_body5$$for_cond26_preheader$33 : do {
    if ($cmp46) {
      var $i2_07 = 0;
      while (1) {
        var $i2_07;
        var $tmp2 = HEAP32[($manifold1 + 16 >> 2) + ($i2_07 * 5 | 0)];
        var $arrayidx8 = ($i2_07 << 2) + $state1 | 0;
        HEAP32[$arrayidx8 >> 2] = 3;
        var $2 = HEAP32[$pointCount10$s2];
        var $j_0 = 0;
        while (1) {
          var $j_0;
          if (($j_0 | 0) >= ($2 | 0)) {
            break;
          }
          if ((HEAP32[($manifold2 + 16 >> 2) + ($j_0 * 5 | 0)] | 0) == ($tmp2 | 0)) {
            HEAP32[$arrayidx8 >> 2] = 2;
            break;
          }
          var $j_0 = $j_0 + 1 | 0;
        }
        var $inc23 = $i2_07 + 1 | 0;
        if (($inc23 | 0) >= (HEAP32[$pointCount$s2] | 0)) {
          break $for_body5$$for_cond26_preheader$33;
        }
        var $i2_07 = $inc23;
      }
    }
  } while (0);
  var $cmp283 = (HEAP32[$pointCount10$s2] | 0) > 0;
  $for_body29$$for_end54$44 : do {
    if ($cmp283) {
      var $i25_04 = 0;
      while (1) {
        var $i25_04;
        var $tmp = HEAP32[($manifold2 + 16 >> 2) + ($i25_04 * 5 | 0)];
        var $arrayidx34 = ($i25_04 << 2) + $state2 | 0;
        HEAP32[$arrayidx34 >> 2] = 1;
        var $5 = HEAP32[$pointCount$s2];
        var $j35_0 = 0;
        while (1) {
          var $j35_0;
          if (($j35_0 | 0) >= ($5 | 0)) {
            break;
          }
          if ((HEAP32[($manifold1 + 16 >> 2) + ($j35_0 * 5 | 0)] | 0) == ($tmp | 0)) {
            HEAP32[$arrayidx34 >> 2] = 2;
            break;
          }
          var $j35_0 = $j35_0 + 1 | 0;
        }
        var $inc53 = $i25_04 + 1 | 0;
        if (($inc53 | 0) >= (HEAP32[$pointCount10$s2] | 0)) {
          break $for_body29$$for_end54$44;
        }
        var $i25_04 = $inc53;
      }
    }
  } while (0);
  return;
  return;
}

function __ZNK6b2AABB7RayCastEP15b2RayCastOutputRK14b2RayCastInput($this, $output, $input) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 32;
  var $p = __stackBase__;
  var $d = __stackBase__ + 8;
  var $absD = __stackBase__ + 16;
  var $normal = __stackBase__ + 24;
  var $0 = $input;
  var $1 = $p;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  var $3 = HEAPF32[$input + 8 >> 2];
  var $bitcast = (tempDoubleI32[0] = $2$0, tempDoubleF32[0]);
  var $sub_i = $3 - $bitcast;
  var $sub3_i = HEAPF32[$input + 12 >> 2] - HEAPF32[$input + 4 >> 2];
  var $x2_i_i_i = $d | 0;
  HEAPF32[$x2_i_i_i >> 2] = $sub_i;
  HEAPF32[$d + 4 >> 2] = $sub3_i;
  if ($sub_i > 0) {
    var $cond_i_i = $sub_i;
  } else {
    var $cond_i_i = -$sub_i;
  }
  var $cond_i_i;
  if ($sub3_i > 0) {
    var $cond_i4_i = $sub3_i;
  } else {
    var $cond_i4_i = -$sub3_i;
  }
  var $cond_i4_i;
  var $x2_i_i_i26 = $absD | 0;
  HEAPF32[$x2_i_i_i26 >> 2] = $cond_i_i;
  HEAPF32[$absD + 4 >> 2] = $cond_i4_i;
  var $x_i20 = $p | 0;
  var $x_i18 = $this | 0;
  var $x_i16 = $this + 8 | 0;
  var $x_i2 = $normal | 0;
  var $y_i3 = $normal + 4 | 0;
  var $i_0 = 0;
  var $tmax_0 = 3.4028234663852886e+38;
  var $tmin_0 = -3.4028234663852886e+38;
  while (1) {
    var $tmin_0;
    var $tmax_0;
    var $i_0;
    if (($i_0 | 0) >= 2) {
      if ($tmin_0 < 0) {
        var $retval_0 = 0;
        break;
      }
      if (HEAPF32[$input + 16 >> 2] < $tmin_0) {
        var $retval_0 = 0;
        break;
      }
      HEAPF32[$output + 8 >> 2] = $tmin_0;
      var $16 = $normal;
      var $17 = $output;
      var $18$0 = HEAP32[$16 >> 2];
      var $18$1 = HEAP32[$16 + 4 >> 2];
      HEAP32[$17 >> 2] = $18$0;
      HEAP32[$17 + 4 >> 2] = $18$1;
      var $retval_0 = 1;
      break;
    }
    if (HEAPF32[$x2_i_i_i26 + ($i_0 << 2) >> 2] < 1.1920928955078125e-7) {
      var $7 = HEAPF32[$x_i20 + ($i_0 << 2) >> 2];
      if ($7 < HEAPF32[$x_i18 + ($i_0 << 2) >> 2]) {
        var $retval_0 = 0;
        break;
      }
      if (HEAPF32[$x_i16 + ($i_0 << 2) >> 2] < $7) {
        var $retval_0 = 0;
        break;
      }
      var $tmax_1 = $tmax_0;
      var $tmin_2 = $tmin_0;
    } else {
      var $div = 1 / HEAPF32[$x2_i_i_i + ($i_0 << 2) >> 2];
      var $12 = HEAPF32[$x_i20 + ($i_0 << 2) >> 2];
      var $mul = (HEAPF32[$x_i18 + ($i_0 << 2) >> 2] - $12) * $div;
      var $mul19 = (HEAPF32[$x_i16 + ($i_0 << 2) >> 2] - $12) * $div;
      var $cmp20 = $mul > $mul19;
      var $mul28 = $cmp20 ? $mul : $mul19;
      var $14 = $cmp20 ? $mul19 : $mul;
      if ($14 > $tmin_0) {
        var $s_0 = $cmp20 ? 1 : -1;
        HEAPF32[$x_i2 >> 2] = 0;
        HEAPF32[$y_i3 >> 2] = 0;
        HEAPF32[$x_i2 + ($i_0 << 2) >> 2] = $s_0;
        var $tmin_1 = $14;
      } else {
        var $tmin_1 = $tmin_0;
      }
      var $tmin_1;
      var $cond_i = $tmax_0 < $mul28 ? $tmax_0 : $mul28;
      if ($tmin_1 > $cond_i) {
        var $retval_0 = 0;
        break;
      }
      var $tmax_1 = $cond_i;
      var $tmin_2 = $tmin_1;
    }
    var $tmin_2;
    var $tmax_1;
    var $i_0 = $i_0 + 1 | 0;
    var $tmax_0 = $tmax_1;
    var $tmin_0 = $tmin_2;
  }
  var $retval_0;
  STACKTOP = __stackBase__;
  return $retval_0;
  return null;
}

function __ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1, $xf1, $edge1, $poly2, $xf2) {
  var $poly2$s2 = $poly2 >> 2;
  var $poly1$s2 = $poly1 >> 2;
  var __label__;
  var $0 = HEAP32[$poly2$s2 + 37];
  var $cmp = ($edge1 | 0) > -1;
  do {
    if ($cmp) {
      if ((HEAP32[$poly1$s2 + 37] | 0) > ($edge1 | 0)) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str2 | 0, 32, STRING_TABLE.___PRETTY_FUNCTION____ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_ | 0, STRING_TABLE.__str13 | 0);
  }
  var $2 = HEAPF32[$xf1 + 12 >> 2];
  var $3 = HEAPF32[(($edge1 << 3) + 84 >> 2) + $poly1$s2];
  var $4 = HEAPF32[$xf1 + 8 >> 2];
  var $5 = HEAPF32[(($edge1 << 3) + 88 >> 2) + $poly1$s2];
  var $sub_i = $2 * $3 - $4 * $5;
  var $add_i = $4 * $3 + $2 * $5;
  var $6 = HEAPF32[$xf2 + 12 >> 2];
  var $7 = HEAPF32[$xf2 + 8 >> 2];
  var $add_i51 = $6 * $sub_i + $7 * $add_i;
  var $add8_i = $sub_i * -$7 + $6 * $add_i;
  var $cmp757 = ($0 | 0) > 0;
  $for_body$$for_end$7 : do {
    if ($cmp757) {
      var $index_058 = 0;
      var $minDot_059 = 3.4028234663852886e+38;
      var $i_060 = 0;
      while (1) {
        var $i_060;
        var $minDot_059;
        var $index_058;
        var $add_i44 = HEAPF32[(($i_060 << 3) + 20 >> 2) + $poly2$s2] * $add_i51 + HEAPF32[(($i_060 << 3) + 24 >> 2) + $poly2$s2] * $add8_i;
        var $cmp9 = $add_i44 < $minDot_059;
        var $index_1 = $cmp9 ? $i_060 : $index_058;
        var $minDot_1 = $cmp9 ? $add_i44 : $minDot_059;
        var $inc = $i_060 + 1 | 0;
        if (($inc | 0) == ($0 | 0)) {
          var $index_0_lcssa = $index_1;
          break $for_body$$for_end$7;
        }
        var $index_058 = $index_1;
        var $minDot_059 = $minDot_1;
        var $i_060 = $inc;
      }
    } else {
      var $index_0_lcssa = 0;
    }
  } while (0);
  var $index_0_lcssa;
  var $10 = HEAPF32[(($edge1 << 3) + 20 >> 2) + $poly1$s2];
  var $11 = HEAPF32[(($edge1 << 3) + 24 >> 2) + $poly1$s2];
  var $14 = HEAPF32[(($index_0_lcssa << 3) + 20 >> 2) + $poly2$s2];
  var $15 = HEAPF32[(($index_0_lcssa << 3) + 24 >> 2) + $poly2$s2];
  return ($6 * $14 - $7 * $15 + HEAPF32[$xf2 >> 2] - ($2 * $10 - $4 * $11 + HEAPF32[$xf1 >> 2])) * $sub_i + ($7 * $14 + $6 * $15 + HEAPF32[$xf2 + 4 >> 2] - ($4 * $10 + $2 * $11 + HEAPF32[$xf1 + 4 >> 2])) * $add_i;
  return null;
}

function __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($this, $manifold, $xfA, $radiusA, $xfB, $radiusB) {
  var $pointCount$s2;
  var $xfB$s2 = $xfB >> 2;
  var $xfA$s2 = $xfA >> 2;
  var $manifold$s2 = $manifold >> 2;
  var $pointCount$s2 = ($manifold + 60 | 0) >> 2;
  var $cmp = (HEAP32[$pointCount$s2] | 0) == 0;
  $sw_epilog$$if_end$12 : do {
    if (!$cmp) {
      var $1 = HEAP32[$manifold$s2 + 14];
      if ($1 == 0) {
        var $x_i = $this | 0;
        HEAPF32[$x_i >> 2] = 1;
        var $y_i = $this + 4 | 0;
        HEAPF32[$y_i >> 2] = 0;
        var $2 = HEAPF32[$xfA$s2 + 3];
        var $3 = HEAPF32[$manifold$s2 + 12];
        var $4 = HEAPF32[$xfA$s2 + 2];
        var $5 = HEAPF32[$manifold$s2 + 13];
        var $add_i238 = $2 * $3 - $4 * $5 + HEAPF32[$xfA$s2];
        var $add17_i243 = $4 * $3 + $2 * $5 + HEAPF32[$xfA$s2 + 1];
        var $8 = HEAPF32[$xfB$s2 + 3];
        var $9 = HEAPF32[$manifold$s2];
        var $10 = HEAPF32[$xfB$s2 + 2];
        var $11 = HEAPF32[$manifold$s2 + 1];
        var $add_i266 = $8 * $9 - $10 * $11 + HEAPF32[$xfB$s2];
        var $add17_i271 = $10 * $9 + $8 * $11 + HEAPF32[$xfB$s2 + 1];
        var $sub_i_i = $add_i238 - $add_i266;
        var $sub3_i_i = $add17_i243 - $add17_i271;
        var $cmp3 = $sub_i_i * $sub_i_i + $sub3_i_i * $sub3_i_i > 1.4210854715202004e-14;
        do {
          if ($cmp3) {
            var $sub_i248 = $add_i266 - $add_i238;
            var $sub3_i251 = $add17_i271 - $add17_i243;
            var $14 = $this;
            var $15 = (tempDoubleF32[0] = $sub_i248, tempDoubleI32[0]);
            var $16$0 = $15;
            var $17 = (tempDoubleF32[0] = $sub3_i251, tempDoubleI32[0]);
            var $20$1 = $17 | 0;
            HEAP32[$14 >> 2] = 0 | $16$0;
            HEAP32[$14 + 4 >> 2] = $20$1;
            var $add_i_i = $sub_i248 * $sub_i248 + $sub3_i251 * $sub3_i251;
            var $call_i_i_i = _sqrtf($add_i_i);
            if ($call_i_i_i < 1.1920928955078125e-7) {
              var $22 = $sub_i248;
              var $21 = $sub3_i251;
              break;
            }
            var $div_i = 1 / $call_i_i_i;
            var $mul_i229 = $sub_i248 * $div_i;
            HEAPF32[$x_i >> 2] = $mul_i229;
            var $mul2_i = $sub3_i251 * $div_i;
            HEAPF32[$y_i >> 2] = $mul2_i;
            var $22 = $mul_i229;
            var $21 = $mul2_i;
          } else {
            var $22 = 1;
            var $21 = 0;
          }
        } while (0);
        var $21;
        var $22;
        var $mul1_i188 = ($add17_i243 + $21 * $radiusA + ($add17_i271 - $21 * $radiusB)) * .5;
        var $23 = $this + 8 | 0;
        var $24 = (tempDoubleF32[0] = ($add_i238 + $22 * $radiusA + ($add_i266 - $22 * $radiusB)) * .5, tempDoubleI32[0]);
        var $25$0 = $24;
        var $26 = (tempDoubleF32[0] = $mul1_i188, tempDoubleI32[0]);
        var $29$1 = $26 | 0;
        HEAP32[$23 >> 2] = 0 | $25$0;
        HEAP32[$23 + 4 >> 2] = $29$1;
      } else if ($1 == 1) {
        var $c_i173 = $xfA + 12 | 0;
        var $30 = HEAPF32[$c_i173 >> 2];
        var $31 = HEAPF32[$manifold$s2 + 10];
        var $s_i176 = $xfA + 8 | 0;
        var $32 = HEAPF32[$s_i176 >> 2];
        var $33 = HEAPF32[$manifold$s2 + 11];
        var $sub_i179 = $30 * $31 - $32 * $33;
        var $add_i182 = $32 * $31 + $30 * $33;
        var $34 = $this;
        var $35 = (tempDoubleF32[0] = $sub_i179, tempDoubleI32[0]);
        var $36$0 = $35;
        var $37 = (tempDoubleF32[0] = $add_i182, tempDoubleI32[0]);
        var $40$1 = $37 | 0;
        var $st$25$0 = $34 | 0;
        HEAP32[$st$25$0 >> 2] = 0 | $36$0;
        var $st$25$1 = $34 + 4 | 0;
        HEAP32[$st$25$1 >> 2] = $40$1;
        var $41 = HEAPF32[$c_i173 >> 2];
        var $42 = HEAPF32[$manifold$s2 + 12];
        var $43 = HEAPF32[$s_i176 >> 2];
        var $44 = HEAPF32[$manifold$s2 + 13];
        var $add_i165 = $41 * $42 - $43 * $44 + HEAPF32[$xfA$s2];
        var $add17_i170 = $43 * $42 + $41 * $44 + HEAPF32[$xfA$s2 + 1];
        if ((HEAP32[$pointCount$s2] | 0) <= 0) {
          break;
        }
        var $c_i141 = $xfB + 12 | 0;
        var $s_i144 = $xfB + 8 | 0;
        var $x4_i148 = $xfB | 0;
        var $y16_i153 = $xfB + 4 | 0;
        var $x1_i127 = $this | 0;
        var $y2_i130 = $this + 4 | 0;
        var $i_0290 = 0;
        var $49 = $sub_i179;
        var $48 = $add_i182;
        while (1) {
          var $48;
          var $49;
          var $i_0290;
          var $50 = HEAPF32[$c_i141 >> 2];
          var $51 = HEAPF32[$manifold$s2 + ($i_0290 * 5 | 0)];
          var $52 = HEAPF32[$s_i144 >> 2];
          var $53 = HEAPF32[$manifold$s2 + ($i_0290 * 5 | 0) + 1];
          var $add_i149 = $50 * $51 - $52 * $53 + HEAPF32[$x4_i148 >> 2];
          var $add17_i154 = $52 * $51 + $50 * $53 + HEAPF32[$y16_i153 >> 2];
          var $sub = $radiusA - (($add_i149 - $add_i165) * $49 + ($add17_i154 - $add17_i170) * $48);
          var $mul1_i87 = ($add17_i154 + $48 * $sub + ($add17_i154 - $48 * $radiusB)) * .5;
          var $56 = ($i_0290 << 3) + $this + 8 | 0;
          var $57 = (tempDoubleF32[0] = ($add_i149 + $49 * $sub + ($add_i149 - $49 * $radiusB)) * .5, tempDoubleI32[0]);
          var $58$0 = $57;
          var $59 = (tempDoubleF32[0] = $mul1_i87, tempDoubleI32[0]);
          var $62$1 = $59 | 0;
          var $st$49$0 = $56 | 0;
          HEAP32[$st$49$0 >> 2] = 0 | $58$0;
          var $st$49$1 = $56 + 4 | 0;
          HEAP32[$st$49$1 >> 2] = $62$1;
          var $inc = $i_0290 + 1 | 0;
          if (($inc | 0) >= (HEAP32[$pointCount$s2] | 0)) {
            break $sw_epilog$$if_end$12;
          }
          var $i_0290 = $inc;
          var $49 = HEAPF32[$x1_i127 >> 2];
          var $48 = HEAPF32[$y2_i130 >> 2];
        }
      } else if ($1 == 2) {
        var $c_i74 = $xfB + 12 | 0;
        var $64 = HEAPF32[$c_i74 >> 2];
        var $65 = HEAPF32[$manifold$s2 + 10];
        var $s_i77 = $xfB + 8 | 0;
        var $66 = HEAPF32[$s_i77 >> 2];
        var $67 = HEAPF32[$manifold$s2 + 11];
        var $sub_i80 = $64 * $65 - $66 * $67;
        var $add_i81 = $66 * $65 + $64 * $67;
        var $68 = $this;
        var $69 = (tempDoubleF32[0] = $sub_i80, tempDoubleI32[0]);
        var $70$0 = $69;
        var $71 = (tempDoubleF32[0] = $add_i81, tempDoubleI32[0]);
        var $74$1 = $71 | 0;
        var $st$25$0 = $68 | 0;
        HEAP32[$st$25$0 >> 2] = 0 | $70$0;
        var $st$25$1 = $68 + 4 | 0;
        HEAP32[$st$25$1 >> 2] = $74$1;
        var $75 = HEAPF32[$c_i74 >> 2];
        var $76 = HEAPF32[$manifold$s2 + 12];
        var $77 = HEAPF32[$s_i77 >> 2];
        var $78 = HEAPF32[$manifold$s2 + 13];
        var $add_i66 = $75 * $76 - $77 * $78 + HEAPF32[$xfB$s2];
        var $add17_i71 = $77 * $76 + $75 * $78 + HEAPF32[$xfB$s2 + 1];
        var $cmp49287 = (HEAP32[$pointCount$s2] | 0) > 0;
        $for_body50_lr_ph$$for_end71$26 : do {
          if ($cmp49287) {
            var $c_i = $xfA + 12 | 0;
            var $s_i = $xfA + 8 | 0;
            var $x4_i = $xfA | 0;
            var $y16_i = $xfA + 4 | 0;
            var $x1_i37 = $this | 0;
            var $y2_i40 = $this + 4 | 0;
            var $i46_0288 = 0;
            var $83 = $sub_i80;
            var $82 = $add_i81;
            while (1) {
              var $82;
              var $83;
              var $i46_0288;
              var $84 = HEAPF32[$c_i >> 2];
              var $85 = HEAPF32[$manifold$s2 + ($i46_0288 * 5 | 0)];
              var $86 = HEAPF32[$s_i >> 2];
              var $87 = HEAPF32[$manifold$s2 + ($i46_0288 * 5 | 0) + 1];
              var $add_i55 = $84 * $85 - $86 * $87 + HEAPF32[$x4_i >> 2];
              var $add17_i = $86 * $85 + $84 * $87 + HEAPF32[$y16_i >> 2];
              var $sub60 = $radiusB - (($add_i55 - $add_i66) * $83 + ($add17_i - $add17_i71) * $82);
              var $mul1_i = ($add17_i - $82 * $radiusA + $add17_i + $82 * $sub60) * .5;
              var $90 = ($i46_0288 << 3) + $this + 8 | 0;
              var $91 = (tempDoubleF32[0] = ($add_i55 - $83 * $radiusA + $add_i55 + $83 * $sub60) * .5, tempDoubleI32[0]);
              var $92$0 = $91;
              var $93 = (tempDoubleF32[0] = $mul1_i, tempDoubleI32[0]);
              var $96$1 = $93 | 0;
              var $st$49$0 = $90 | 0;
              HEAP32[$st$49$0 >> 2] = 0 | $92$0;
              var $st$49$1 = $90 + 4 | 0;
              HEAP32[$st$49$1 >> 2] = $96$1;
              var $inc70 = $i46_0288 + 1 | 0;
              var $_pre294 = HEAPF32[$x1_i37 >> 2];
              var $_pre295 = HEAPF32[$y2_i40 >> 2];
              if (($inc70 | 0) >= (HEAP32[$pointCount$s2] | 0)) {
                var $99 = $_pre294;
                var $98 = $_pre295;
                break $for_body50_lr_ph$$for_end71$26;
              }
              var $i46_0288 = $inc70;
              var $83 = $_pre294;
              var $82 = $_pre295;
            }
          } else {
            var $99 = $sub_i80;
            var $98 = $add_i81;
          }
        } while (0);
        var $98;
        var $99;
        var $100 = (tempDoubleF32[0] = -$99, tempDoubleI32[0]);
        var $101$0 = $100;
        var $102 = (tempDoubleF32[0] = -$98, tempDoubleI32[0]);
        var $105$1 = $102 | 0;
        HEAP32[$68 >> 2] = 0 | $101$0;
        HEAP32[$68 + 4 >> 2] = $105$1;
      } else {
        break;
      }
    }
  } while (0);
  return;
  return;
}

function __Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($vOut, $vIn, $normal, $offset, $vertexIndexA) {
  var $9$s2;
  var $8$s2;
  var $7$s2;
  var $6$s2;
  var $0 = HEAPF32[$normal >> 2];
  var $x1_i = $vIn | 0;
  var $2 = HEAPF32[$normal + 4 >> 2];
  var $y2_i = $vIn + 4 | 0;
  var $sub = $0 * HEAPF32[$x1_i >> 2] + $2 * HEAPF32[$y2_i >> 2] - $offset;
  var $arrayidx1 = $vIn + 12 | 0;
  var $x1_i18 = $arrayidx1 | 0;
  var $y2_i21 = $vIn + 16 | 0;
  var $sub4 = $0 * HEAPF32[$x1_i18 >> 2] + $2 * HEAPF32[$y2_i21 >> 2] - $offset;
  if ($sub > 0) {
    var $numOut_0 = 0;
  } else {
    var $6$s2 = $vOut >> 2;
    var $7$s2 = $vIn >> 2;
    HEAP32[$6$s2] = HEAP32[$7$s2];
    HEAP32[$6$s2 + 1] = HEAP32[$7$s2 + 1];
    HEAP32[$6$s2 + 2] = HEAP32[$7$s2 + 2];
    var $numOut_0 = 1;
  }
  var $numOut_0;
  if ($sub4 > 0) {
    var $numOut_1 = $numOut_0;
  } else {
    var $8$s2 = ($vOut + $numOut_0 * 12 | 0) >> 2;
    var $9$s2 = $arrayidx1 >> 2;
    HEAP32[$8$s2] = HEAP32[$9$s2];
    HEAP32[$8$s2 + 1] = HEAP32[$9$s2 + 1];
    HEAP32[$8$s2 + 2] = HEAP32[$9$s2 + 2];
    var $numOut_1 = $numOut_0 + 1 | 0;
  }
  var $numOut_1;
  if ($sub * $sub4 < 0) {
    var $div = $sub / ($sub - $sub4);
    var $11 = HEAPF32[$x1_i >> 2];
    var $13 = HEAPF32[$y2_i >> 2];
    var $add3_i = $13 + (HEAPF32[$y2_i21 >> 2] - $13) * $div;
    var $14 = $vOut + $numOut_1 * 12 | 0;
    var $15 = (tempDoubleF32[0] = $11 + (HEAPF32[$x1_i18 >> 2] - $11) * $div, tempDoubleI32[0]);
    var $16$0 = $15;
    var $17 = (tempDoubleF32[0] = $add3_i, tempDoubleI32[0]);
    var $20$1 = $17 | 0;
    HEAP32[$14 >> 2] = 0 | $16$0;
    HEAP32[$14 + 4 >> 2] = $20$1;
    var $id = $vOut + $numOut_1 * 12 + 8 | 0;
    var $cf = $id;
    HEAP8[$id] = $vertexIndexA & 255;
    var $21 = HEAP8[$vIn + 9 | 0];
    HEAP8[$cf + 1 | 0] = $21;
    HEAP8[$cf + 2 | 0] = 0;
    HEAP8[$cf + 3 | 0] = 1;
    var $numOut_2 = $numOut_1 + 1 | 0;
  } else {
    var $numOut_2 = $numOut_1;
  }
  var $numOut_2;
  return $numOut_2;
  return null;
}

function __Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_($shapeA, $indexA, $shapeB, $indexB, $xfA, $xfB) {
  var $3$s2;
  var $2$s2;
  var $1$s2;
  var $0$s2;
  var $input$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 128;
  var $input = __stackBase__, $input$s2 = $input >> 2;
  var $cache = __stackBase__ + 92;
  var $output = __stackBase__ + 104;
  HEAP32[$input$s2 + 4] = 0;
  HEAP32[$input$s2 + 5] = 0;
  HEAPF32[$input$s2 + 6] = 0;
  HEAP32[$input$s2 + 11] = 0;
  HEAP32[$input$s2 + 12] = 0;
  HEAPF32[$input$s2 + 13] = 0;
  var $proxyA = $input | 0;
  __ZN15b2DistanceProxy3SetEPK7b2Shapei($proxyA, $shapeA, $indexA);
  var $proxyB = $input + 28 | 0;
  __ZN15b2DistanceProxy3SetEPK7b2Shapei($proxyB, $shapeB, $indexB);
  var $0$s2 = ($input + 56 | 0) >> 2;
  var $1$s2 = $xfA >> 2;
  HEAP32[$0$s2] = HEAP32[$1$s2];
  HEAP32[$0$s2 + 1] = HEAP32[$1$s2 + 1];
  HEAP32[$0$s2 + 2] = HEAP32[$1$s2 + 2];
  HEAP32[$0$s2 + 3] = HEAP32[$1$s2 + 3];
  var $2$s2 = ($input + 72 | 0) >> 2;
  var $3$s2 = $xfB >> 2;
  HEAP32[$2$s2] = HEAP32[$3$s2];
  HEAP32[$2$s2 + 1] = HEAP32[$3$s2 + 1];
  HEAP32[$2$s2 + 2] = HEAP32[$3$s2 + 2];
  HEAP32[$2$s2 + 3] = HEAP32[$3$s2 + 3];
  HEAP8[$input + 88 | 0] = 1;
  HEAP16[$cache + 4 >> 1] = 0;
  __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output, $cache, $input);
  var $cmp = HEAPF32[$output + 16 >> 2] < 11920928955078125e-22;
  STACKTOP = __stackBase__;
  return $cmp;
  return null;
}

function __ZN15b2DistanceProxy3SetEPK7b2Shapei($this, $shape, $index) {
  var $shape$s2 = $shape >> 2;
  var $this$s2 = $this >> 2;
  var __label__;
  var $0 = HEAP32[$shape$s2 + 1];
  if ($0 == 0) {
    HEAP32[$this$s2 + 4] = $shape + 12 | 0;
    HEAP32[$this$s2 + 5] = 1;
    var $2 = HEAPF32[$shape$s2 + 2];
    HEAPF32[$this$s2 + 6] = $2;
  } else if ($0 == 2) {
    HEAP32[$this$s2 + 4] = $shape + 20 | 0;
    var $4 = HEAP32[$shape$s2 + 37];
    HEAP32[$this$s2 + 5] = $4;
    var $5 = HEAPF32[$shape$s2 + 2];
    HEAPF32[$this$s2 + 6] = $5;
  } else if ($0 == 3) {
    var $cmp = ($index | 0) > -1;
    var $6 = $shape + 16 | 0;
    do {
      if ($cmp) {
        if ((HEAP32[$6 >> 2] | 0) > ($index | 0)) {
          __label__ = 6;
          break;
        }
        __label__ = 5;
        break;
      } else {
        __label__ = 5;
      }
    } while (0);
    if (__label__ == 5) {
      ___assert_func(STRING_TABLE.__str6 | 0, 53, STRING_TABLE.___PRETTY_FUNCTION____ZN15b2DistanceProxy3SetEPK7b2Shapei | 0, STRING_TABLE.__str17 | 0);
    }
    var $arrayidx = $this | 0;
    var $8 = $shape + 12 | 0;
    var $10 = ($index << 3) + HEAP32[$8 >> 2] | 0;
    var $11 = $this;
    var $st$7$0 = $10 | 0;
    var $12$0 = HEAP32[$st$7$0 >> 2];
    var $st$7$1 = $10 + 4 | 0;
    var $12$1 = HEAP32[$st$7$1 >> 2];
    HEAP32[$11 >> 2] = $12$0;
    HEAP32[$11 + 4 >> 2] = $12$1;
    var $add = $index + 1 | 0;
    var $arrayidx17 = $this + 8 | 0;
    var $14 = HEAP32[$8 >> 2];
    if (($add | 0) < (HEAP32[$6 >> 2] | 0)) {
      var $15 = ($add << 3) + $14 | 0;
      var $16 = $arrayidx17;
      var $17$0 = HEAP32[$15 >> 2];
      var $17$1 = HEAP32[$15 + 4 >> 2];
      var $st$7$0 = $16 | 0;
      HEAP32[$st$7$0 >> 2] = $17$0;
      var $st$7$1 = $16 + 4 | 0;
      HEAP32[$st$7$1 >> 2] = $17$1;
    } else {
      var $18 = $14;
      var $19 = $arrayidx17;
      var $20$0 = HEAP32[$18 >> 2];
      var $20$1 = HEAP32[$18 + 4 >> 2];
      HEAP32[$19 >> 2] = $20$0;
      HEAP32[$19 + 4 >> 2] = $20$1;
    }
    HEAP32[$this$s2 + 4] = $arrayidx;
    HEAP32[$this$s2 + 5] = 2;
    var $21 = HEAPF32[$shape$s2 + 2];
    HEAPF32[$this$s2 + 6] = $21;
  } else if ($0 == 1) {
    HEAP32[$this$s2 + 4] = $shape + 12 | 0;
    HEAP32[$this$s2 + 5] = 2;
    var $23 = HEAPF32[$shape$s2 + 2];
    HEAPF32[$this$s2 + 6] = $23;
  } else {
    ___assert_func(STRING_TABLE.__str6 | 0, 81, STRING_TABLE.___PRETTY_FUNCTION____ZN15b2DistanceProxy3SetEPK7b2Shapei | 0, STRING_TABLE.__str1316 | 0);
  }
  return;
  return;
}

function __ZN9b2Simplex6Solve2Ev($this) {
  var $this$s2 = $this >> 2;
  var $0 = $this + 16 | 0;
  var $1$1 = HEAP32[$0 + 4 >> 2];
  var $3 = (tempDoubleI32[0] = HEAP32[$0 >> 2], tempDoubleF32[0]);
  var $5 = (tempDoubleI32[0] = $1$1, tempDoubleF32[0]);
  var $m_v2 = $this + 36 | 0;
  var $6 = $this + 52 | 0;
  var $7$1 = HEAP32[$6 + 4 >> 2];
  var $9 = (tempDoubleI32[0] = HEAP32[$6 >> 2], tempDoubleF32[0]);
  var $11 = (tempDoubleI32[0] = $7$1, tempDoubleF32[0]);
  var $sub_i = $9 - $3;
  var $sub3_i = $11 - $5;
  var $add_i11 = $3 * $sub_i + $5 * $sub3_i;
  var $sub = -$add_i11;
  if ($add_i11 < 0) {
    var $add_i = $9 * $sub_i + $11 * $sub3_i;
    if ($add_i > 0) {
      var $div = 1 / ($add_i - $add_i11);
      HEAPF32[$this$s2 + 6] = $add_i * $div;
      HEAPF32[$this$s2 + 15] = $div * $sub;
      HEAP32[$this$s2 + 27] = 2;
    } else {
      HEAPF32[$this$s2 + 15] = 1;
      HEAP32[$this$s2 + 27] = 1;
      var $12 = $this;
      var $13 = $m_v2;
      for (var $$src = $13 >> 2, $$dest = $12 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src];
      }
    }
  } else {
    HEAPF32[$this$s2 + 6] = 1;
    HEAP32[$this$s2 + 27] = 1;
  }
  return;
  return;
}

function __ZN9b2Simplex6Solve3Ev($this) {
  var $this$s2 = $this >> 2;
  var $0 = $this + 16 | 0;
  var $1$1 = HEAP32[$0 + 4 >> 2];
  var $3 = (tempDoubleI32[0] = HEAP32[$0 >> 2], tempDoubleF32[0]);
  var $5 = (tempDoubleI32[0] = $1$1, tempDoubleF32[0]);
  var $m_v2 = $this + 36 | 0;
  var $6 = $this + 52 | 0;
  var $7$1 = HEAP32[$6 + 4 >> 2];
  var $9 = (tempDoubleI32[0] = HEAP32[$6 >> 2], tempDoubleF32[0]);
  var $11 = (tempDoubleI32[0] = $7$1, tempDoubleF32[0]);
  var $m_v3 = $this + 72 | 0;
  var $12 = $this + 88 | 0;
  var $13$1 = HEAP32[$12 + 4 >> 2];
  var $15 = (tempDoubleI32[0] = HEAP32[$12 >> 2], tempDoubleF32[0]);
  var $17 = (tempDoubleI32[0] = $13$1, tempDoubleF32[0]);
  var $sub_i = $9 - $3;
  var $sub3_i = $11 - $5;
  var $add_i89 = $3 * $sub_i + $5 * $sub3_i;
  var $add_i82 = $9 * $sub_i + $11 * $sub3_i;
  var $sub = -$add_i89;
  var $sub_i70 = $15 - $3;
  var $sub3_i73 = $17 - $5;
  var $add_i67 = $3 * $sub_i70 + $5 * $sub3_i73;
  var $add_i60 = $15 * $sub_i70 + $17 * $sub3_i73;
  var $sub9 = -$add_i67;
  var $sub_i48 = $15 - $9;
  var $sub3_i51 = $17 - $11;
  var $add_i45 = $9 * $sub_i48 + $11 * $sub3_i51;
  var $add_i = $15 * $sub_i48 + $17 * $sub3_i51;
  var $sub12 = -$add_i45;
  var $sub_i32 = $sub_i * $sub3_i73 - $sub3_i * $sub_i70;
  var $mul = $sub_i32 * ($9 * $17 - $11 * $15);
  var $mul16 = $sub_i32 * ($15 * $5 - $17 * $3);
  var $mul18 = $sub_i32 * ($3 * $11 - $5 * $9);
  if ($add_i89 < 0 | $add_i67 < 0) {
    if ($add_i89 >= 0 | $add_i82 <= 0 | $mul18 > 0) {
      if ($add_i67 >= 0 | $add_i60 <= 0 | $mul16 > 0) {
        if ($add_i82 > 0 | $add_i45 < 0) {
          if ($add_i60 > 0 | $add_i > 0) {
            if ($add_i45 >= 0 | $add_i <= 0 | $mul > 0) {
              var $div93 = 1 / ($mul + $mul16 + $mul18);
              HEAPF32[$this$s2 + 6] = $mul * $div93;
              HEAPF32[$this$s2 + 15] = $mul16 * $div93;
              HEAPF32[$this$s2 + 24] = $mul18 * $div93;
              HEAP32[$this$s2 + 27] = 3;
            } else {
              var $div80 = 1 / ($add_i - $add_i45);
              HEAPF32[$this$s2 + 15] = $add_i * $div80;
              HEAPF32[$this$s2 + 24] = $div80 * $sub12;
              HEAP32[$this$s2 + 27] = 2;
              var $24 = $this;
              var $25 = $m_v3;
              for (var $$src = $25 >> 2, $$dest = $24 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
                HEAP32[$$dest] = HEAP32[$$src];
              }
            }
          } else {
            HEAPF32[$this$s2 + 24] = 1;
            HEAP32[$this$s2 + 27] = 1;
            var $22 = $this;
            var $23 = $m_v3;
            for (var $$src = $23 >> 2, $$dest = $22 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
              HEAP32[$$dest] = HEAP32[$$src];
            }
          }
        } else {
          HEAPF32[$this$s2 + 15] = 1;
          HEAP32[$this$s2 + 27] = 1;
          var $20 = $this;
          var $21 = $m_v2;
          for (var $$src = $21 >> 2, $$dest = $20 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
            HEAP32[$$dest] = HEAP32[$$src];
          }
        }
      } else {
        var $div42 = 1 / ($add_i60 - $add_i67);
        HEAPF32[$this$s2 + 6] = $add_i60 * $div42;
        HEAPF32[$this$s2 + 24] = $div42 * $sub9;
        HEAP32[$this$s2 + 27] = 2;
        var $18 = $m_v2;
        var $19 = $m_v3;
        for (var $$src = $19 >> 2, $$dest = $18 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
          HEAP32[$$dest] = HEAP32[$$src];
        }
      }
    } else {
      var $div = 1 / ($add_i82 - $add_i89);
      HEAPF32[$this$s2 + 6] = $add_i82 * $div;
      HEAPF32[$this$s2 + 15] = $div * $sub;
      HEAP32[$this$s2 + 27] = 2;
    }
  } else {
    HEAPF32[$this$s2 + 6] = 1;
    HEAP32[$this$s2 + 27] = 1;
  }
  return;
  return;
}

function __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output, $cache, $input) {
  var $distance$s2;
  var $y2_i_i106$s2;
  var $y_i_i105$s2;
  var $x1_i_i103$s2;
  var $x_i_i102$s2;
  var $58$s2;
  var $38$s2;
  var $y_i21_i$s2;
  var $x_i19_i$s2;
  var $y_i_i73$s2;
  var $x_i_i71$s2;
  var $m_count_i$s2;
  var $m_v1$s2;
  var $4$s2;
  var $3$s2;
  var $2$s2;
  var $1$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 168;
  var __label__;
  var $transformA = __stackBase__;
  var $transformB = __stackBase__ + 16;
  var $simplex = __stackBase__ + 32;
  var $saveA = __stackBase__ + 144;
  var $saveB = __stackBase__ + 156;
  var $inc = HEAP32[_b2_gjkCalls >> 2] + 1 | 0;
  HEAP32[_b2_gjkCalls >> 2] = $inc;
  var $proxyA1 = $input | 0;
  var $proxyB2 = $input + 28 | 0;
  var $1$s2 = $transformA >> 2;
  var $2$s2 = ($input + 56 | 0) >> 2;
  HEAP32[$1$s2] = HEAP32[$2$s2];
  HEAP32[$1$s2 + 1] = HEAP32[$2$s2 + 1];
  HEAP32[$1$s2 + 2] = HEAP32[$2$s2 + 2];
  HEAP32[$1$s2 + 3] = HEAP32[$2$s2 + 3];
  var $3$s2 = $transformB >> 2;
  var $4$s2 = ($input + 72 | 0) >> 2;
  HEAP32[$3$s2] = HEAP32[$4$s2];
  HEAP32[$3$s2 + 1] = HEAP32[$4$s2 + 1];
  HEAP32[$3$s2 + 2] = HEAP32[$4$s2 + 2];
  HEAP32[$3$s2 + 3] = HEAP32[$4$s2 + 3];
  __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($simplex, $cache, $proxyA1, $transformA, $proxyB2, $transformB);
  var $m_v1 = $simplex | 0, $m_v1$s2 = $m_v1 >> 2;
  var $m_count_i$s2 = ($simplex + 108 | 0) >> 2;
  var $5 = HEAP32[$m_count_i$s2];
  if ($5 == 0) {
    ___assert_func(STRING_TABLE.__str6 | 0, 194, STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex15GetClosestPointEv | 0, STRING_TABLE.__str1316 | 0);
  } else if (!($5 == 1 || $5 == 2 || $5 == 3)) {
    ___assert_func(STRING_TABLE.__str6 | 0, 207, STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex15GetClosestPointEv | 0, STRING_TABLE.__str1316 | 0);
  }
  var $c_i = $transformA + 12 | 0;
  var $s_i = $transformA + 8 | 0;
  var $m_vertices_i = $input + 16 | 0;
  var $m_count_i112 = $input + 20 | 0;
  var $x4_i = $transformA | 0;
  var $y16_i = $transformA + 4 | 0;
  var $c_i195 = $transformB + 12 | 0;
  var $s_i198 = $transformB + 8 | 0;
  var $m_vertices_i168 = $input + 44 | 0;
  var $m_count_i169 = $input + 48 | 0;
  var $x4_i151 = $transformB | 0;
  var $y16_i156 = $transformB + 4 | 0;
  var $x_i_i71$s2 = ($simplex + 16 | 0) >> 2;
  var $y_i_i73$s2 = ($simplex + 20 | 0) >> 2;
  var $x_i19_i$s2 = ($simplex + 52 | 0) >> 2;
  var $y_i21_i$s2 = ($simplex + 56 | 0) >> 2;
  var $6 = $simplex + 16 | 0;
  var $7 = $simplex + 52 | 0;
  var $a15_i = $simplex + 24 | 0;
  var $a18_i = $simplex + 60 | 0;
  var $8 = $simplex;
  var $9 = $simplex + 36 | 0;
  var $iter_0 = 0;
  $while_cond$34 : while (1) {
    var $iter_0;
    if (($iter_0 | 0) >= 20) {
      var $iter_1 = $iter_0;
      break;
    }
    var $10 = HEAPU32[$m_count_i$s2];
    var $cmp5253 = ($10 | 0) > 0;
    $for_body$$for_end$37 : do {
      if ($cmp5253) {
        var $i_0254 = 0;
        while (1) {
          var $i_0254;
          var $11 = HEAP32[$m_v1$s2 + ($i_0254 * 9 | 0) + 7];
          HEAP32[$saveA + ($i_0254 << 2) >> 2] = $11;
          var $12 = HEAP32[$m_v1$s2 + ($i_0254 * 9 | 0) + 8];
          HEAP32[$saveB + ($i_0254 << 2) >> 2] = $12;
          var $inc9 = $i_0254 + 1 | 0;
          if (($inc9 | 0) == ($10 | 0)) {
            break $for_body$$for_end$37;
          }
          var $i_0254 = $inc9;
        }
      } else {
        __label__ = 7;
      }
    } while (0);
    do {
      if ($10 == 1) {
        __label__ = 18;
      } else if ($10 == 2) {
        var $13$1 = HEAP32[$6 + 4 >> 2];
        var $15 = (tempDoubleI32[0] = HEAP32[$6 >> 2], tempDoubleF32[0]);
        var $17 = (tempDoubleI32[0] = $13$1, tempDoubleF32[0]);
        var $18$1 = HEAP32[$7 + 4 >> 2];
        var $20 = (tempDoubleI32[0] = HEAP32[$7 >> 2], tempDoubleF32[0]);
        var $22 = (tempDoubleI32[0] = $18$1, tempDoubleF32[0]);
        var $sub_i_i = $20 - $15;
        var $sub3_i_i = $22 - $17;
        var $add_i11_i = $15 * $sub_i_i + $17 * $sub3_i_i;
        var $sub_i30 = -$add_i11_i;
        if ($add_i11_i >= 0) {
          HEAPF32[$a15_i >> 2] = 1;
          HEAP32[$m_count_i$s2] = 1;
          var $24 = $15;
          __label__ = 22;
          break;
        }
        var $add_i_i35 = $20 * $sub_i_i + $22 * $sub3_i_i;
        if ($add_i_i35 > 0) {
          var $div_i38 = 1 / ($add_i_i35 - $add_i11_i);
          HEAPF32[$a15_i >> 2] = $add_i_i35 * $div_i38;
          HEAPF32[$a18_i >> 2] = $div_i38 * $sub_i30;
          HEAP32[$m_count_i$s2] = 2;
          var $27 = $20;
          var $26 = $15;
          __label__ = 23;
          break;
        }
        HEAPF32[$a18_i >> 2] = 1;
        HEAP32[$m_count_i$s2] = 1;
        for (var $$src = $9 >> 2, $$dest = $8 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
          HEAP32[$$dest] = HEAP32[$$src];
        }
        __label__ = 15;
        break;
      } else if ($10 == 3) {
        __ZN9b2Simplex6Solve3Ev($simplex);
        __label__ = 15;
        break;
      } else {
        ___assert_func(STRING_TABLE.__str6 | 0, 498, STRING_TABLE.___PRETTY_FUNCTION____Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput | 0, STRING_TABLE.__str1316 | 0);
        __label__ = 15;
        break;
      }
    } while (0);
    do {
      if (__label__ == 15) {
        var $_pr = HEAP32[$m_count_i$s2];
        if ($_pr == 3) {
          var $iter_1 = $iter_0;
          break $while_cond$34;
        } else if ($_pr == 0) {
          ___assert_func(STRING_TABLE.__str6 | 0, 194, STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex15GetClosestPointEv | 0, STRING_TABLE.__str1316 | 0);
          __label__ = 18;
          break;
        } else if ($_pr == 1 || $_pr == 2) {
          var $23 = $_pr;
          __label__ = 19;
          break;
        } else {
          ___assert_func(STRING_TABLE.__str6 | 0, 207, STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex15GetClosestPointEv | 0, STRING_TABLE.__str1316 | 0);
          __label__ = 18;
          break;
        }
      }
    } while (0);
    do {
      if (__label__ == 18) {
        var $23 = HEAP32[$m_count_i$s2];
        __label__ = 19;
        break;
      }
    } while (0);
    do {
      if (__label__ == 19) {
        var $23;
        if ($23 == 1) {
          var $24 = HEAPF32[$x_i_i71$s2];
          __label__ = 22;
          break;
        } else if ($23 == 2) {
          var $27 = HEAPF32[$x_i19_i$s2];
          var $26 = HEAPF32[$x_i_i71$s2];
          __label__ = 23;
          break;
        } else {
          ___assert_func(STRING_TABLE.__str6 | 0, 184, STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex18GetSearchDirectionEv | 0, STRING_TABLE.__str1316 | 0);
          var $$emscripten$temp$0 = _b2Vec2_zero;
          var $30$1 = HEAP32[$$emscripten$temp$0 + 4 >> 2];
          var $32 = (tempDoubleI32[0] = HEAP32[$$emscripten$temp$0 >> 2], tempDoubleF32[0]);
          var $34 = (tempDoubleI32[0] = $30$1, tempDoubleF32[0]);
          var $sub_i_i72225 = $32;
          var $sub2_i_i226 = $34;
          __label__ = 27;
          break;
        }
      }
    } while (0);
    if (__label__ == 22) {
      var $24;
      var $sub_i_i72225 = -$24;
      var $sub2_i_i226 = -HEAPF32[$y_i_i73$s2];
    } else if (__label__ == 23) {
      var $26;
      var $27;
      var $sub_i20_i = $27 - $26;
      var $29 = HEAPF32[$y_i_i73$s2];
      var $sub3_i_i77 = HEAPF32[$y_i21_i$s2] - $29;
      if ($sub_i20_i * -$29 - $sub3_i_i77 * -$26 > 0) {
        var $sub_i_i72225 = $sub3_i_i77 * -1;
        var $sub2_i_i226 = $sub_i20_i;
      } else {
        var $sub_i_i72225 = $sub3_i_i77;
        var $sub2_i_i226 = $sub_i20_i * -1;
      }
    }
    var $sub2_i_i226;
    var $sub_i_i72225;
    if ($sub_i_i72225 * $sub_i_i72225 + $sub2_i_i226 * $sub2_i_i226 < 1.4210854715202004e-14) {
      var $iter_1 = $iter_0;
      break;
    }
    var $35 = HEAPU32[$m_count_i$s2];
    var $add_ptr = $m_v1 + $35 * 36 | 0;
    var $sub2_i = -$sub2_i_i226;
    var $36 = HEAPF32[$c_i >> 2];
    var $37 = HEAPF32[$s_i >> 2];
    var $add_i97 = $36 * -$sub_i_i72225 + $37 * $sub2_i;
    var $add8_i = $sub_i_i72225 * $37 + $36 * $sub2_i;
    var $38 = HEAP32[$m_vertices_i >> 2], $38$s2 = $38 >> 2;
    var $39 = HEAP32[$m_count_i112 >> 2];
    var $cmp8_i = ($39 | 0) > 1;
    do {
      if (!$cmp8_i) {
        var $indexA25228 = $m_v1 + $35 * 36 + 28 | 0;
        HEAP32[$indexA25228 >> 2] = 0;
        var $bestIndex_0_lcssa_i231 = 0;
        var $indexA25236 = $indexA25228;
        var $wA239 = $add_ptr | 0;
        __label__ = 33;
        break;
      }
      var $bestIndex_09_i = 0;
      var $bestValue_010_i = HEAPF32[$38$s2] * $add_i97 + HEAPF32[$38$s2 + 1] * $add8_i;
      var $i_011_i = 1;
      while (1) {
        var $i_011_i;
        var $bestValue_010_i;
        var $bestIndex_09_i;
        var $add_i7_i = HEAPF32[($i_011_i << 3 >> 2) + $38$s2] * $add_i97 + HEAPF32[(($i_011_i << 3) + 4 >> 2) + $38$s2] * $add8_i;
        var $cmp5_i = $add_i7_i > $bestValue_010_i;
        var $bestIndex_1_i = $cmp5_i ? $i_011_i : $bestIndex_09_i;
        var $bestValue_1_i = $cmp5_i ? $add_i7_i : $bestValue_010_i;
        var $inc_i120 = $i_011_i + 1 | 0;
        if (($inc_i120 | 0) == ($39 | 0)) {
          break;
        }
        var $bestIndex_09_i = $bestIndex_1_i;
        var $bestValue_010_i = $bestValue_1_i;
        var $i_011_i = $inc_i120;
      }
      var $indexA25 = $m_v1 + $35 * 36 + 28 | 0;
      HEAP32[$indexA25 >> 2] = $bestIndex_1_i;
      var $wA = $add_ptr | 0;
      if (($bestIndex_1_i | 0) > -1) {
        var $bestIndex_0_lcssa_i231 = $bestIndex_1_i;
        var $indexA25236 = $indexA25;
        var $wA239 = $wA;
        __label__ = 33;
        break;
      }
      var $bestIndex_0_lcssa_i232 = $bestIndex_1_i;
      var $indexA25235 = $indexA25;
      var $wA238 = $wA;
      __label__ = 34;
      break;
    } while (0);
    do {
      if (__label__ == 33) {
        var $wA239;
        var $indexA25236;
        var $bestIndex_0_lcssa_i231;
        if (($39 | 0) > ($bestIndex_0_lcssa_i231 | 0)) {
          var $bestIndex_0_lcssa_i233 = $bestIndex_0_lcssa_i231;
          var $indexA25234 = $indexA25236;
          var $wA237 = $wA239;
          var $44 = $38;
          __label__ = 35;
          break;
        }
        var $bestIndex_0_lcssa_i232 = $bestIndex_0_lcssa_i231;
        var $indexA25235 = $indexA25236;
        var $wA238 = $wA239;
        __label__ = 34;
        break;
      }
    } while (0);
    if (__label__ == 34) {
      var $wA238;
      var $indexA25235;
      var $bestIndex_0_lcssa_i232;
      ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
      var $bestIndex_0_lcssa_i233 = $bestIndex_0_lcssa_i232;
      var $indexA25234 = $indexA25235;
      var $wA237 = $wA238;
      var $44 = HEAP32[$m_vertices_i >> 2];
    }
    var $44;
    var $wA237;
    var $indexA25234;
    var $bestIndex_0_lcssa_i233;
    var $45 = HEAPF32[$44 + ($bestIndex_0_lcssa_i233 << 3) >> 2];
    var $46 = HEAPF32[$44 + ($bestIndex_0_lcssa_i233 << 3) + 4 >> 2];
    var $add17_i = $37 * $45 + $36 * $46 + HEAPF32[$y16_i >> 2];
    var $49 = $add_ptr;
    var $50 = (tempDoubleF32[0] = $36 * $45 - $37 * $46 + HEAPF32[$x4_i >> 2], tempDoubleI32[0]);
    var $51$0 = $50;
    var $52 = (tempDoubleF32[0] = $add17_i, tempDoubleI32[0]);
    var $55$1 = $52 | 0;
    var $st$29$0 = $49 | 0;
    HEAP32[$st$29$0 >> 2] = 0 | $51$0;
    var $st$29$1 = $49 + 4 | 0;
    HEAP32[$st$29$1 >> 2] = $55$1;
    var $56 = HEAPF32[$c_i195 >> 2];
    var $57 = HEAPF32[$s_i198 >> 2];
    var $add_i201 = $56 * $sub_i_i72225 + $57 * $sub2_i_i226;
    var $add8_i205 = $sub_i_i72225 * -$57 + $56 * $sub2_i_i226;
    var $58 = HEAP32[$m_vertices_i168 >> 2], $58$s2 = $58 >> 2;
    var $59 = HEAP32[$m_count_i169 >> 2];
    var $cmp8_i170 = ($59 | 0) > 1;
    do {
      if (!$cmp8_i170) {
        var $indexB32240 = $m_v1 + $35 * 36 + 32 | 0;
        HEAP32[$indexB32240 >> 2] = 0;
        var $bestIndex_0_lcssa_i193245 = 0;
        var $indexB32248 = $indexB32240;
        var $wB251 = $m_v1 + $35 * 36 + 8 | 0;
        __label__ = 40;
        break;
      }
      var $bestIndex_09_i181 = 0;
      var $bestValue_010_i180 = HEAPF32[$58$s2] * $add_i201 + HEAPF32[$58$s2 + 1] * $add8_i205;
      var $i_011_i179 = 1;
      while (1) {
        var $i_011_i179;
        var $bestValue_010_i180;
        var $bestIndex_09_i181;
        var $add_i7_i186 = HEAPF32[($i_011_i179 << 3 >> 2) + $58$s2] * $add_i201 + HEAPF32[(($i_011_i179 << 3) + 4 >> 2) + $58$s2] * $add8_i205;
        var $cmp5_i187 = $add_i7_i186 > $bestValue_010_i180;
        var $bestIndex_1_i188 = $cmp5_i187 ? $i_011_i179 : $bestIndex_09_i181;
        var $bestValue_1_i189 = $cmp5_i187 ? $add_i7_i186 : $bestValue_010_i180;
        var $inc_i190 = $i_011_i179 + 1 | 0;
        if (($inc_i190 | 0) == ($59 | 0)) {
          break;
        }
        var $bestIndex_09_i181 = $bestIndex_1_i188;
        var $bestValue_010_i180 = $bestValue_1_i189;
        var $i_011_i179 = $inc_i190;
      }
      var $indexB32 = $m_v1 + $35 * 36 + 32 | 0;
      HEAP32[$indexB32 >> 2] = $bestIndex_1_i188;
      var $wB = $m_v1 + $35 * 36 + 8 | 0;
      if (($bestIndex_1_i188 | 0) > -1) {
        var $bestIndex_0_lcssa_i193245 = $bestIndex_1_i188;
        var $indexB32248 = $indexB32;
        var $wB251 = $wB;
        __label__ = 40;
        break;
      }
      var $bestIndex_0_lcssa_i193244 = $bestIndex_1_i188;
      var $indexB32247 = $indexB32;
      var $wB250 = $wB;
      __label__ = 41;
      break;
    } while (0);
    do {
      if (__label__ == 40) {
        var $wB251;
        var $indexB32248;
        var $bestIndex_0_lcssa_i193245;
        if (($59 | 0) > ($bestIndex_0_lcssa_i193245 | 0)) {
          var $bestIndex_0_lcssa_i193243 = $bestIndex_0_lcssa_i193245;
          var $indexB32246 = $indexB32248;
          var $wB249 = $wB251;
          var $64 = $58;
          __label__ = 42;
          break;
        }
        var $bestIndex_0_lcssa_i193244 = $bestIndex_0_lcssa_i193245;
        var $indexB32247 = $indexB32248;
        var $wB250 = $wB251;
        __label__ = 41;
        break;
      }
    } while (0);
    if (__label__ == 41) {
      var $wB250;
      var $indexB32247;
      var $bestIndex_0_lcssa_i193244;
      ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
      var $bestIndex_0_lcssa_i193243 = $bestIndex_0_lcssa_i193244;
      var $indexB32246 = $indexB32247;
      var $wB249 = $wB250;
      var $64 = HEAP32[$m_vertices_i168 >> 2];
    }
    var $64;
    var $wB249;
    var $indexB32246;
    var $bestIndex_0_lcssa_i193243;
    var $65 = HEAPF32[$64 + ($bestIndex_0_lcssa_i193243 << 3) >> 2];
    var $66 = HEAPF32[$64 + ($bestIndex_0_lcssa_i193243 << 3) + 4 >> 2];
    var $add_i152 = $56 * $65 - $57 * $66 + HEAPF32[$x4_i151 >> 2];
    var $add17_i157 = $57 * $65 + $56 * $66 + HEAPF32[$y16_i156 >> 2];
    var $69 = $wB249;
    var $70 = (tempDoubleF32[0] = $add_i152, tempDoubleI32[0]);
    var $71$0 = $70;
    var $72 = (tempDoubleF32[0] = $add17_i157, tempDoubleI32[0]);
    var $75$1 = $72 | 0;
    var $st$29$0 = $69 | 0;
    HEAP32[$st$29$0 >> 2] = 0 | $71$0;
    var $st$29$1 = $69 + 4 | 0;
    HEAP32[$st$29$1 >> 2] = $75$1;
    var $sub3_i141 = $add17_i157 - HEAPF32[$wA237 + 4 >> 2];
    var $78 = $m_v1 + $35 * 36 + 16 | 0;
    var $79 = (tempDoubleF32[0] = $add_i152 - HEAPF32[$wA237 >> 2], tempDoubleI32[0]);
    var $80$0 = $79;
    var $81 = (tempDoubleF32[0] = $sub3_i141, tempDoubleI32[0]);
    var $84$1 = $81 | 0;
    HEAP32[$78 >> 2] = 0 | $80$0;
    HEAP32[$78 + 4 >> 2] = $84$1;
    var $inc39 = $iter_0 + 1 | 0;
    var $inc40 = HEAP32[_b2_gjkIters >> 2] + 1 | 0;
    HEAP32[_b2_gjkIters >> 2] = $inc40;
    var $i41_0 = 0;
    while (1) {
      var $i41_0;
      if (($i41_0 | 0) >= ($10 | 0)) {
        break;
      }
      if ((HEAP32[$indexA25234 >> 2] | 0) == (HEAP32[$saveA + ($i41_0 << 2) >> 2] | 0)) {
        if ((HEAP32[$indexB32246 >> 2] | 0) == (HEAP32[$saveB + ($i41_0 << 2) >> 2] | 0)) {
          var $iter_1 = $inc39;
          break $while_cond$34;
        }
      }
      var $i41_0 = $i41_0 + 1 | 0;
    }
    var $inc59 = HEAP32[$m_count_i$s2] + 1 | 0;
    HEAP32[$m_count_i$s2] = $inc59;
    var $iter_0 = $inc39;
  }
  var $iter_1;
  var $91 = HEAP32[_b2_gjkMaxIters >> 2];
  var $cond_i = ($91 | 0) > ($iter_1 | 0) ? $91 : $iter_1;
  HEAP32[_b2_gjkMaxIters >> 2] = $cond_i;
  var $pointA = $output | 0;
  var $pointB = $output + 8 | 0;
  __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($simplex, $pointA, $pointB);
  var $x_i_i102$s2 = ($output | 0) >> 2;
  var $x1_i_i103$s2 = ($pointB | 0) >> 2;
  var $sub_i_i104 = HEAPF32[$x_i_i102$s2] - HEAPF32[$x1_i_i103$s2];
  var $y_i_i105$s2 = ($output + 4 | 0) >> 2;
  var $y2_i_i106$s2 = ($output + 12 | 0) >> 2;
  var $sub3_i_i107 = HEAPF32[$y_i_i105$s2] - HEAPF32[$y2_i_i106$s2];
  var $add_i_i110 = $sub_i_i104 * $sub_i_i104 + $sub3_i_i107 * $sub3_i_i107;
  var $call_i_i_i111 = _sqrtf($add_i_i110);
  var $distance$s2 = ($output + 16 | 0) >> 2;
  HEAPF32[$distance$s2] = $call_i_i_i111;
  HEAP32[$output + 20 >> 2] = $iter_1;
  var $96 = HEAP32[$m_count_i$s2];
  if ($96 == 0) {
    ___assert_func(STRING_TABLE.__str6 | 0, 246, STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex9GetMetricEv | 0, STRING_TABLE.__str1316 | 0);
    var $retval_0_i_i = 0;
  } else if ($96 == 1) {
    var $retval_0_i_i = 0;
  } else if ($96 == 2) {
    var $sub_i_i_i_i = HEAPF32[$x_i_i71$s2] - HEAPF32[$x_i19_i$s2];
    var $sub3_i_i_i_i = HEAPF32[$y_i_i73$s2] - HEAPF32[$y_i21_i$s2];
    var $add_i_i_i_i = $sub_i_i_i_i * $sub_i_i_i_i + $sub3_i_i_i_i * $sub3_i_i_i_i;
    var $call_i_i_i_i_i = _sqrtf($add_i_i_i_i);
    var $retval_0_i_i = $call_i_i_i_i_i;
  } else if ($96 == 3) {
    var $102 = HEAPF32[$x_i_i71$s2];
    var $104 = HEAPF32[$y_i_i73$s2];
    var $retval_0_i_i = (HEAPF32[$x_i19_i$s2] - $102) * (HEAPF32[$simplex + 92 >> 2] - $104) - (HEAPF32[$y_i21_i$s2] - $104) * (HEAPF32[$simplex + 88 >> 2] - $102);
  } else {
    ___assert_func(STRING_TABLE.__str6 | 0, 259, STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex9GetMetricEv | 0, STRING_TABLE.__str1316 | 0);
    var $retval_0_i_i = 0;
  }
  var $retval_0_i_i;
  HEAPF32[$cache >> 2] = $retval_0_i_i;
  var $107 = HEAP32[$m_count_i$s2];
  HEAP16[$cache + 4 >> 1] = $107 & 65535;
  var $cmp1_i = ($107 | 0) > 0;
  $for_body_i$$_ZNK9b2Simplex10WriteCacheEP14b2SimplexCache_exit$108 : do {
    if ($cmp1_i) {
      var $i_02_i = 0;
      while (1) {
        var $i_02_i;
        HEAP8[$cache + ($i_02_i + 6) | 0] = HEAP32[$m_v1$s2 + ($i_02_i * 9 | 0) + 7] & 255;
        HEAP8[$cache + ($i_02_i + 9) | 0] = HEAP32[$m_v1$s2 + ($i_02_i * 9 | 0) + 8] & 255;
        var $inc_i = $i_02_i + 1 | 0;
        if (($inc_i | 0) >= ($107 | 0)) {
          break $for_body_i$$_ZNK9b2Simplex10WriteCacheEP14b2SimplexCache_exit$108;
        }
        var $i_02_i = $inc_i;
      }
    }
  } while (0);
  if ((HEAP8[$input + 88 | 0] & 1) << 24 >> 24 != 0) {
    var $112 = HEAPF32[$input + 24 >> 2];
    var $113 = HEAPF32[$input + 52 >> 2];
    var $114 = HEAPF32[$distance$s2];
    var $add = $112 + $113;
    if ($114 > $add & $114 > 1.1920928955078125e-7) {
      var $sub = $114 - $add;
      HEAPF32[$distance$s2] = $sub;
      var $115 = HEAPF32[$x1_i_i103$s2];
      var $116 = HEAPF32[$x_i_i102$s2];
      var $sub_i42 = $115 - $116;
      var $117 = HEAPF32[$y2_i_i106$s2];
      var $118 = HEAPF32[$y_i_i105$s2];
      var $sub3_i = $117 - $118;
      var $add_i_i = $sub_i42 * $sub_i42 + $sub3_i * $sub3_i;
      var $call_i_i_i = _sqrtf($add_i_i);
      if ($call_i_i_i < 1.1920928955078125e-7) {
        var $120 = $sub_i42;
        var $119 = $sub3_i;
      } else {
        var $div_i = 1 / $call_i_i_i;
        var $120 = $sub_i42 * $div_i;
        var $119 = $sub3_i * $div_i;
      }
      var $119;
      var $120;
      var $mul1_i21 = $119 * $112;
      var $add_i15 = $116 + $120 * $112;
      HEAPF32[$x_i_i102$s2] = $add_i15;
      var $add4_i = $118 + $mul1_i21;
      HEAPF32[$y_i_i105$s2] = $add4_i;
      var $mul1_i10 = $119 * $113;
      var $sub_i = $115 - $120 * $113;
      HEAPF32[$x1_i_i103$s2] = $sub_i;
      var $sub4_i = $117 - $mul1_i10;
      HEAPF32[$y2_i_i106$s2] = $sub4_i;
    } else {
      var $mul1_i = (HEAPF32[$y_i_i105$s2] + HEAPF32[$y2_i_i106$s2]) * .5;
      var $125 = $output;
      var $126 = (tempDoubleF32[0] = (HEAPF32[$x_i_i102$s2] + HEAPF32[$x1_i_i103$s2]) * .5, tempDoubleI32[0]);
      var $127$0 = $126;
      var $128 = (tempDoubleF32[0] = $mul1_i, tempDoubleI32[0]);
      var $131$0 = 0 | $127$0;
      var $131$1 = $128 | 0;
      HEAP32[$125 >> 2] = $131$0;
      HEAP32[$125 + 4 >> 2] = $131$1;
      var $132 = $pointB;
      HEAP32[$132 >> 2] = $131$0;
      HEAP32[$132 + 4 >> 2] = $131$1;
      HEAPF32[$distance$s2] = 0;
    }
  }
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($this, $cache, $proxyA, $transformA, $proxyB, $transformB) {
  var $st$3$1$s2;
  var $st$3$0$s2;
  var $m_v1$s2;
  var $m_count$s2;
  var $this$s2 = $this >> 2;
  var __label__;
  var $count = $cache + 4 | 0;
  var $0 = HEAPU16[$count >> 1];
  if (($0 & 65535) < 4) {
    var $1 = $0;
  } else {
    ___assert_func(STRING_TABLE.__str6 | 0, 102, STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_ | 0, STRING_TABLE.__str5 | 0);
    var $1 = HEAP16[$count >> 1];
  }
  var $1;
  var $conv3 = $1 & 65535;
  var $m_count$s2 = ($this + 108 | 0) >> 2;
  HEAP32[$m_count$s2] = $conv3;
  var $m_v1 = $this | 0, $m_v1$s2 = $m_v1 >> 2;
  var $cmp5101 = $1 << 16 >> 16 == 0;
  $for_end$$for_body_lr_ph$5 : do {
    if ($cmp5101) {
      var $_lcssa = $conv3;
    } else {
      var $m_count_i = $proxyA + 20 | 0;
      var $m_vertices_i = $proxyA + 16 | 0;
      var $m_count_i2 = $proxyB + 20 | 0;
      var $m_vertices_i6 = $proxyB + 16 | 0;
      var $c_i = $transformA + 12 | 0;
      var $s_i = $transformA + 8 | 0;
      var $x4_i = $transformA | 0;
      var $y16_i = $transformA + 4 | 0;
      var $c_i53 = $transformB + 12 | 0;
      var $s_i56 = $transformB + 8 | 0;
      var $x4_i60 = $transformB | 0;
      var $y16_i65 = $transformB + 4 | 0;
      var $i_0102 = 0;
      while (1) {
        var $i_0102;
        var $add_ptr = $m_v1 + $i_0102 * 36 | 0;
        var $conv6 = HEAPU8[$cache + ($i_0102 + 6) | 0] & 255;
        HEAP32[$m_v1$s2 + ($i_0102 * 9 | 0) + 7] = $conv6;
        var $conv9 = HEAPU8[$cache + ($i_0102 + 9) | 0] & 255;
        var $indexB10 = $m_v1 + $i_0102 * 36 + 32 | 0;
        HEAP32[$indexB10 >> 2] = $conv9;
        if ((HEAP32[$m_count_i >> 2] | 0) > ($conv6 | 0)) {
          var $5 = $conv9;
        } else {
          ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
          var $5 = HEAP32[$indexB10 >> 2];
        }
        var $5;
        var $7 = ($conv6 << 3) + HEAP32[$m_vertices_i >> 2] | 0;
        var $8$1 = HEAP32[$7 + 4 >> 2];
        var $10 = (tempDoubleI32[0] = HEAP32[$7 >> 2], tempDoubleF32[0]);
        var $12 = (tempDoubleI32[0] = $8$1, tempDoubleF32[0]);
        var $cmp_i1 = ($5 | 0) > -1;
        do {
          if ($cmp_i1) {
            if ((HEAP32[$m_count_i2 >> 2] | 0) > ($5 | 0)) {
              __label__ = 9;
              break;
            }
            __label__ = 8;
            break;
          } else {
            __label__ = 8;
          }
        } while (0);
        if (__label__ == 8) {
          ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
        }
        var $15 = ($5 << 3) + HEAP32[$m_vertices_i6 >> 2] | 0;
        var $st$3$0 = $15 | 0, $st$3$0$s2 = $st$3$0 >> 2;
        var $st$3$1 = $15 + 4 | 0, $st$3$1$s2 = $st$3$1 >> 2;
        var $16$1 = HEAP32[$st$3$1$s2];
        var $18 = (tempDoubleI32[0] = HEAP32[$st$3$0$s2], tempDoubleF32[0]);
        var $20 = (tempDoubleI32[0] = $16$1, tempDoubleF32[0]);
        var $21 = HEAPF32[$c_i >> 2];
        var $22 = HEAPF32[$s_i >> 2];
        var $add_i = $21 * $10 - $22 * $12 + HEAPF32[$x4_i >> 2];
        var $add17_i = $22 * $10 + $21 * $12 + HEAPF32[$y16_i >> 2];
        var $25 = $add_ptr;
        var $26 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
        var $27$0 = $26;
        var $28 = (tempDoubleF32[0] = $add17_i, tempDoubleI32[0]);
        var $31$0 = 0 | $27$0;
        var $31$1 = $28 | 0;
        HEAP32[$25 >> 2] = $31$0;
        HEAP32[$25 + 4 >> 2] = $31$1;
        var $32 = HEAPF32[$c_i53 >> 2];
        var $33 = HEAPF32[$s_i56 >> 2];
        var $add_i61 = $32 * $18 - $33 * $20 + HEAPF32[$x4_i60 >> 2];
        var $add17_i66 = $33 * $18 + $32 * $20 + HEAPF32[$y16_i65 >> 2];
        var $36 = $m_v1 + $i_0102 * 36 + 8 | 0;
        var $37 = (tempDoubleF32[0] = $add_i61, tempDoubleI32[0]);
        var $38$0 = $37;
        var $39 = (tempDoubleF32[0] = $add17_i66, tempDoubleI32[0]);
        var $42$0 = 0 | $38$0;
        var $42$1 = $39 | 0;
        HEAP32[$36 >> 2] = $42$0;
        HEAP32[$36 + 4 >> 2] = $42$1;
        var $sub_i78 = $add_i61 - $add_i;
        var $sub3_i81 = HEAPF32[$m_v1$s2 + ($i_0102 * 9 | 0) + 3] - HEAPF32[$m_v1$s2 + ($i_0102 * 9 | 0) + 1];
        var $45 = $m_v1 + $i_0102 * 36 + 16 | 0;
        var $46 = (tempDoubleF32[0] = $sub_i78, tempDoubleI32[0]);
        var $47$0 = $46;
        var $48 = (tempDoubleF32[0] = $sub3_i81, tempDoubleI32[0]);
        var $51$0 = 0 | $47$0;
        var $51$1 = $48 | 0;
        HEAP32[$45 >> 2] = $51$0;
        HEAP32[$45 + 4 >> 2] = $51$1;
        HEAPF32[$m_v1$s2 + ($i_0102 * 9 | 0) + 6] = 0;
        var $inc = $i_0102 + 1 | 0;
        var $_pr = HEAP32[$m_count$s2];
        if (($inc | 0) >= ($_pr | 0)) {
          var $_lcssa = $_pr;
          break $for_end$$for_body_lr_ph$5;
        }
        var $i_0102 = $inc;
      }
    }
  } while (0);
  var $_lcssa;
  var $cmp19 = ($_lcssa | 0) > 1;
  $if_then$$if_end28$18 : do {
    if ($cmp19) {
      var $52 = HEAPF32[$cache >> 2];
      if ($_lcssa == 0) {
        ___assert_func(STRING_TABLE.__str6 | 0, 246, STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex9GetMetricEv | 0, STRING_TABLE.__str1316 | 0);
        var $retval_0_i = 0;
      } else if ($_lcssa == 1) {
        var $retval_0_i = 0;
      } else if ($_lcssa == 2) {
        var $sub_i_i_i = HEAPF32[$this$s2 + 4] - HEAPF32[$this$s2 + 13];
        var $sub3_i_i_i = HEAPF32[$this$s2 + 5] - HEAPF32[$this$s2 + 14];
        var $add_i_i_i = $sub_i_i_i * $sub_i_i_i + $sub3_i_i_i * $sub3_i_i_i;
        var $call_i_i_i_i = _sqrtf($add_i_i_i);
        var $retval_0_i = $call_i_i_i_i;
      } else if ($_lcssa == 3) {
        var $58 = HEAPF32[$this$s2 + 4];
        var $60 = HEAPF32[$this$s2 + 5];
        var $retval_0_i = (HEAPF32[$this$s2 + 13] - $58) * (HEAPF32[$this$s2 + 23] - $60) - (HEAPF32[$this$s2 + 14] - $60) * (HEAPF32[$this$s2 + 22] - $58);
      } else {
        ___assert_func(STRING_TABLE.__str6 | 0, 259, STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex9GetMetricEv | 0, STRING_TABLE.__str1316 | 0);
        var $retval_0_i = 0;
      }
      var $retval_0_i;
      var $cmp21 = $retval_0_i < $52 * .5;
      do {
        if (!$cmp21) {
          if ($52 * 2 < $retval_0_i | $retval_0_i < 1.1920928955078125e-7) {
            break;
          }
          var $_pr99 = HEAP32[$m_count$s2];
          __label__ = 20;
          break $if_then$$if_end28$18;
        }
      } while (0);
      HEAP32[$m_count$s2] = 0;
      __label__ = 21;
      break;
    }
    var $_pr99 = $_lcssa;
    __label__ = 20;
  } while (0);
  do {
    if (__label__ == 20) {
      var $_pr99;
      if (($_pr99 | 0) == 0) {
        __label__ = 21;
        break;
      }
      __label__ = 26;
      break;
    }
  } while (0);
  if (__label__ == 21) {
    HEAP32[$this$s2 + 7] = 0;
    HEAP32[$this$s2 + 8] = 0;
    if ((HEAP32[$proxyA + 20 >> 2] | 0) <= 0) {
      ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
    }
    var $65 = HEAP32[$proxyA + 16 >> 2];
    var $st$3$0 = $65 | 0, $st$3$0$s2 = $st$3$0 >> 2;
    var $st$3$1 = $65 + 4 | 0, $st$3$1$s2 = $st$3$1 >> 2;
    var $66$1 = HEAP32[$st$3$1$s2];
    var $68 = (tempDoubleI32[0] = HEAP32[$st$3$0$s2], tempDoubleF32[0]);
    var $70 = (tempDoubleI32[0] = $66$1, tempDoubleF32[0]);
    if ((HEAP32[$proxyB + 20 >> 2] | 0) <= 0) {
      ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
    }
    var $73 = HEAP32[$proxyB + 16 >> 2];
    var $st$3$0 = $73 | 0, $st$3$0$s2 = $st$3$0 >> 2;
    var $st$3$1 = $73 + 4 | 0, $st$3$1$s2 = $st$3$1 >> 2;
    var $74$1 = HEAP32[$st$3$1$s2];
    var $76 = (tempDoubleI32[0] = HEAP32[$st$3$0$s2], tempDoubleF32[0]);
    var $78 = (tempDoubleI32[0] = $74$1, tempDoubleF32[0]);
    var $79 = HEAPF32[$transformA + 12 >> 2];
    var $80 = HEAPF32[$transformA + 8 >> 2];
    var $add_i38 = $79 * $68 - $80 * $70 + HEAPF32[$transformA >> 2];
    var $add17_i43 = $80 * $68 + $79 * $70 + HEAPF32[$transformA + 4 >> 2];
    var $83 = $this;
    var $84 = (tempDoubleF32[0] = $add_i38, tempDoubleI32[0]);
    var $85$0 = $84;
    var $86 = (tempDoubleF32[0] = $add17_i43, tempDoubleI32[0]);
    var $89$0 = 0 | $85$0;
    var $89$1 = $86 | 0;
    HEAP32[$83 >> 2] = $89$0;
    HEAP32[$83 + 4 >> 2] = $89$1;
    var $90 = HEAPF32[$transformB + 12 >> 2];
    var $91 = HEAPF32[$transformB + 8 >> 2];
    var $add_i22 = $90 * $76 - $91 * $78 + HEAPF32[$transformB >> 2];
    var $add17_i27 = $91 * $76 + $90 * $78 + HEAPF32[$transformB + 4 >> 2];
    var $94 = $this + 8 | 0;
    var $95 = (tempDoubleF32[0] = $add_i22, tempDoubleI32[0]);
    var $96$0 = $95;
    var $97 = (tempDoubleF32[0] = $add17_i27, tempDoubleI32[0]);
    var $100$0 = 0 | $96$0;
    var $100$1 = $97 | 0;
    HEAP32[$94 >> 2] = $100$0;
    HEAP32[$94 + 4 >> 2] = $100$1;
    var $sub_i10 = $add_i22 - $add_i38;
    var $sub3_i = $add17_i27 - $add17_i43;
    var $101 = $this + 16 | 0;
    var $102 = (tempDoubleF32[0] = $sub_i10, tempDoubleI32[0]);
    var $103$0 = $102;
    var $104 = (tempDoubleF32[0] = $sub3_i, tempDoubleI32[0]);
    var $107$0 = 0 | $103$0;
    var $107$1 = $104 | 0;
    HEAP32[$101 >> 2] = $107$0;
    HEAP32[$101 + 4 >> 2] = $107$1;
    HEAP32[$m_count$s2] = 1;
  }
  return;
  return;
}

function __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($this, $pA, $pB) {
  var $this$s2 = $this >> 2;
  var $0 = HEAP32[$this$s2 + 27];
  if ($0 == 0) {
    ___assert_func(STRING_TABLE.__str6 | 0, 217, STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_ | 0, STRING_TABLE.__str1316 | 0);
  } else if ($0 == 1) {
    var $1 = $this;
    var $2 = $pA;
    var $3$0 = HEAP32[$1 >> 2];
    var $3$1 = HEAP32[$1 + 4 >> 2];
    HEAP32[$2 >> 2] = $3$0;
    HEAP32[$2 + 4 >> 2] = $3$1;
    var $4 = $this + 8 | 0;
    var $5 = $pB;
    var $6$0 = HEAP32[$4 >> 2];
    var $6$1 = HEAP32[$4 + 4 >> 2];
    HEAP32[$5 >> 2] = $6$0;
    HEAP32[$5 + 4 >> 2] = $6$1;
  } else if ($0 == 2) {
    var $a = $this + 24 | 0;
    var $7 = HEAPF32[$a >> 2];
    var $a10 = $this + 60 | 0;
    var $10 = HEAPF32[$a10 >> 2];
    var $add3_i56 = HEAPF32[$this$s2 + 1] * $7 + HEAPF32[$this$s2 + 10] * $10;
    var $13 = $pA;
    var $14 = (tempDoubleF32[0] = HEAPF32[$this$s2] * $7 + HEAPF32[$this$s2 + 9] * $10, tempDoubleI32[0]);
    var $15$0 = $14;
    var $16 = (tempDoubleF32[0] = $add3_i56, tempDoubleI32[0]);
    var $19$1 = $16 | 0;
    HEAP32[$13 >> 2] = 0 | $15$0;
    HEAP32[$13 + 4 >> 2] = $19$1;
    var $20 = HEAPF32[$a >> 2];
    var $23 = HEAPF32[$a10 >> 2];
    var $add3_i36 = HEAPF32[$this$s2 + 3] * $20 + HEAPF32[$this$s2 + 12] * $23;
    var $26 = $pB;
    var $27 = (tempDoubleF32[0] = HEAPF32[$this$s2 + 2] * $20 + HEAPF32[$this$s2 + 11] * $23, tempDoubleI32[0]);
    var $28$0 = $27;
    var $29 = (tempDoubleF32[0] = $add3_i36, tempDoubleI32[0]);
    var $32$1 = $29 | 0;
    HEAP32[$26 >> 2] = 0 | $28$0;
    HEAP32[$26 + 4 >> 2] = $32$1;
  } else if ($0 == 3) {
    var $33 = HEAPF32[$this$s2 + 6];
    var $36 = HEAPF32[$this$s2 + 15];
    var $39 = HEAPF32[$this$s2 + 24];
    var $add3_i = HEAPF32[$this$s2 + 1] * $33 + HEAPF32[$this$s2 + 10] * $36 + HEAPF32[$this$s2 + 19] * $39;
    var $42 = $pA;
    var $43 = (tempDoubleF32[0] = HEAPF32[$this$s2] * $33 + HEAPF32[$this$s2 + 9] * $36 + HEAPF32[$this$s2 + 18] * $39, tempDoubleI32[0]);
    var $44$0 = $43;
    var $45 = (tempDoubleF32[0] = $add3_i, tempDoubleI32[0]);
    var $48$0 = 0 | $44$0;
    var $48$1 = $45 | 0;
    HEAP32[$42 >> 2] = $48$0;
    HEAP32[$42 + 4 >> 2] = $48$1;
    var $49 = $pB;
    HEAP32[$49 >> 2] = $48$0;
    HEAP32[$49 + 4 >> 2] = $48$1;
  } else {
    ___assert_func(STRING_TABLE.__str6 | 0, 236, STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_ | 0, STRING_TABLE.__str1316 | 0);
  }
  return;
  return;
}

function __ZN13b2DynamicTreeC2Ev($this) {
  var $m_nodes$s2;
  var $m_nodeCapacity$s2;
  var $this$s2 = $this >> 2;
  HEAP32[$this$s2] = -1;
  var $m_nodeCapacity$s2 = ($this + 12 | 0) >> 2;
  HEAP32[$m_nodeCapacity$s2] = 16;
  HEAP32[$this$s2 + 2] = 0;
  var $call_i = _malloc(576);
  var $m_nodes$s2 = ($this + 4 | 0) >> 2;
  HEAP32[$m_nodes$s2] = $call_i;
  var $mul5 = HEAP32[$m_nodeCapacity$s2] * 36 | 0;
  _memset($call_i, 0, $mul5, 1);
  var $sub1 = HEAP32[$m_nodeCapacity$s2] - 1 | 0;
  var $cmp2 = ($sub1 | 0) > 0;
  $for_body$$for_end$50 : do {
    if ($cmp2) {
      var $i_03 = 0;
      while (1) {
        var $i_03;
        var $add = $i_03 + 1 | 0;
        var $next = HEAP32[$m_nodes$s2] + $i_03 * 36 + 20 | 0;
        HEAP32[$next >> 2] = $add;
        var $height = HEAP32[$m_nodes$s2] + $i_03 * 36 + 32 | 0;
        HEAP32[$height >> 2] = -1;
        var $sub = HEAP32[$m_nodeCapacity$s2] - 1 | 0;
        if (($add | 0) >= ($sub | 0)) {
          var $sub_lcssa = $sub;
          break $for_body$$for_end$50;
        }
        var $i_03 = $add;
      }
    } else {
      var $sub_lcssa = $sub1;
    }
  } while (0);
  var $sub_lcssa;
  var $next14 = HEAP32[$m_nodes$s2] + $sub_lcssa * 36 + 20 | 0;
  HEAP32[$next14 >> 2] = -1;
  var $height19 = HEAP32[$m_nodes$s2] + (HEAP32[$m_nodeCapacity$s2] - 1) * 36 + 32 | 0;
  HEAP32[$height19 >> 2] = -1;
  HEAP32[$this$s2 + 4] = 0;
  HEAP32[$this$s2 + 5] = 0;
  HEAP32[$this$s2 + 6] = 0;
  return;
  return;
}

function __ZN13b2DynamicTreeD2Ev($this) {
  var $1 = HEAP32[$this + 4 >> 2];
  _free($1);
  return;
  return;
}

function __ZN13b2DynamicTree12AllocateNodeEv($this) {
  var $m_nodes29_pre_phi$s2;
  var $m_nodes$s2;
  var $m_nodeCapacity$s2;
  var $m_nodeCount$s2;
  var $m_freeList$s2;
  var $m_freeList$s2 = ($this + 16 | 0) >> 2;
  var $0 = HEAP32[$m_freeList$s2];
  if (($0 | 0) == -1) {
    var $m_nodeCount = $this + 8 | 0, $m_nodeCount$s2 = $m_nodeCount >> 2;
    var $m_nodeCapacity$s2 = ($this + 12 | 0) >> 2;
    var $2 = HEAP32[$m_nodeCapacity$s2];
    if ((HEAP32[$m_nodeCount$s2] | 0) == ($2 | 0)) {
      var $3 = $2;
    } else {
      ___assert_func(STRING_TABLE.__str14 | 0, 61, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree12AllocateNodeEv | 0, STRING_TABLE.__str115 | 0);
      var $3 = HEAP32[$m_nodeCapacity$s2];
    }
    var $3;
    var $m_nodes = $this + 4 | 0, $m_nodes$s2 = $m_nodes >> 2;
    var $4 = HEAP32[$m_nodes$s2];
    HEAP32[$m_nodeCapacity$s2] = $3 << 1;
    var $call_i = _malloc($3 * 72 | 0);
    HEAP32[$m_nodes$s2] = $call_i;
    var $6 = $4;
    var $mul9 = HEAP32[$m_nodeCount$s2] * 36 | 0;
    _memcpy($call_i, $6, $mul9, 1);
    _free($6);
    var $8 = HEAP32[$m_nodeCount$s2];
    var $sub1 = HEAP32[$m_nodeCapacity$s2] - 1 | 0;
    var $cmp122 = ($8 | 0) < ($sub1 | 0);
    $for_body$$for_end$61 : do {
      if ($cmp122) {
        var $i_03 = $8;
        while (1) {
          var $i_03;
          var $add = $i_03 + 1 | 0;
          var $next = HEAP32[$m_nodes$s2] + $i_03 * 36 + 20 | 0;
          HEAP32[$next >> 2] = $add;
          var $height = HEAP32[$m_nodes$s2] + $i_03 * 36 + 32 | 0;
          HEAP32[$height >> 2] = -1;
          var $sub = HEAP32[$m_nodeCapacity$s2] - 1 | 0;
          if (($add | 0) >= ($sub | 0)) {
            var $sub_lcssa = $sub;
            break $for_body$$for_end$61;
          }
          var $i_03 = $add;
        }
      } else {
        var $sub_lcssa = $sub1;
      }
    } while (0);
    var $sub_lcssa;
    var $next20 = HEAP32[$m_nodes$s2] + $sub_lcssa * 36 + 20 | 0;
    HEAP32[$next20 >> 2] = -1;
    var $height25 = HEAP32[$m_nodes$s2] + (HEAP32[$m_nodeCapacity$s2] - 1) * 36 + 32 | 0;
    HEAP32[$height25 >> 2] = -1;
    var $16 = HEAP32[$m_nodeCount$s2];
    HEAP32[$m_freeList$s2] = $16;
    var $17 = $16;
    var $m_nodes29_pre_phi = $m_nodes, $m_nodes29_pre_phi$s2 = $m_nodes29_pre_phi >> 2;
    var $m_nodeCount44_pre_phi = $m_nodeCount;
  } else {
    var $17 = $0;
    var $m_nodes29_pre_phi = $this + 4 | 0, $m_nodes29_pre_phi$s2 = $m_nodes29_pre_phi >> 2;
    var $m_nodeCount44_pre_phi = $this + 8 | 0;
  }
  var $m_nodeCount44_pre_phi;
  var $m_nodes29_pre_phi;
  var $17;
  var $next31 = HEAP32[$m_nodes29_pre_phi$s2] + $17 * 36 + 20 | 0;
  var $19 = HEAP32[$next31 >> 2];
  HEAP32[$m_freeList$s2] = $19;
  HEAP32[$next31 >> 2] = -1;
  var $child1 = HEAP32[$m_nodes29_pre_phi$s2] + $17 * 36 + 24 | 0;
  HEAP32[$child1 >> 2] = -1;
  var $child2 = HEAP32[$m_nodes29_pre_phi$s2] + $17 * 36 + 28 | 0;
  HEAP32[$child2 >> 2] = -1;
  var $height41 = HEAP32[$m_nodes29_pre_phi$s2] + $17 * 36 + 32 | 0;
  HEAP32[$height41 >> 2] = 0;
  var $userData = HEAP32[$m_nodes29_pre_phi$s2] + $17 * 36 + 16 | 0;
  HEAP32[$userData >> 2] = 0;
  var $inc45 = HEAP32[$m_nodeCount44_pre_phi >> 2] + 1 | 0;
  HEAP32[$m_nodeCount44_pre_phi >> 2] = $inc45;
  return $17;
  return null;
}

function __ZN13b2DynamicTree8FreeNodeEi($this, $nodeId) {
  var $m_nodeCount$s2;
  var __label__;
  var $cmp = ($nodeId | 0) > -1;
  do {
    if ($cmp) {
      if ((HEAP32[$this + 12 >> 2] | 0) > ($nodeId | 0)) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str14 | 0, 97, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi | 0, STRING_TABLE.__str216 | 0);
  }
  var $m_nodeCount$s2 = ($this + 8 | 0) >> 2;
  if ((HEAP32[$m_nodeCount$s2] | 0) <= 0) {
    ___assert_func(STRING_TABLE.__str14 | 0, 98, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi | 0, STRING_TABLE.__str317 | 0);
  }
  var $m_freeList = $this + 16 | 0;
  var $2 = HEAP32[$m_freeList >> 2];
  var $m_nodes = $this + 4 | 0;
  var $next = HEAP32[$m_nodes >> 2] + $nodeId * 36 + 20 | 0;
  HEAP32[$next >> 2] = $2;
  var $height = HEAP32[$m_nodes >> 2] + $nodeId * 36 + 32 | 0;
  HEAP32[$height >> 2] = -1;
  HEAP32[$m_freeList >> 2] = $nodeId;
  var $dec = HEAP32[$m_nodeCount$s2] - 1 | 0;
  HEAP32[$m_nodeCount$s2] = $dec;
  return;
  return;
}

function __ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($this, $aabb, $userData) {
  var $m_nodes$s2;
  var $call = __ZN13b2DynamicTree12AllocateNodeEv($this);
  var $m_nodes$s2 = ($this + 4 | 0) >> 2;
  var $sub3_i = HEAPF32[$aabb + 4 >> 2] - .10000000149011612;
  var $4 = HEAP32[$m_nodes$s2] + $call * 36 | 0;
  var $5 = (tempDoubleF32[0] = HEAPF32[$aabb >> 2] - .10000000149011612, tempDoubleI32[0]);
  var $6$0 = $5;
  var $7 = (tempDoubleF32[0] = $sub3_i, tempDoubleI32[0]);
  var $10$1 = $7 | 0;
  var $st$21$0 = $4 | 0;
  HEAP32[$st$21$0 >> 2] = 0 | $6$0;
  var $st$21$1 = $4 + 4 | 0;
  HEAP32[$st$21$1 >> 2] = $10$1;
  var $add3_i = HEAPF32[$aabb + 12 >> 2] + .10000000149011612;
  var $15 = HEAP32[$m_nodes$s2] + $call * 36 + 8 | 0;
  var $16 = (tempDoubleF32[0] = HEAPF32[$aabb + 8 >> 2] + .10000000149011612, tempDoubleI32[0]);
  var $17$0 = $16;
  var $18 = (tempDoubleF32[0] = $add3_i, tempDoubleI32[0]);
  var $21$1 = $18 | 0;
  var $st$44$0 = $15 | 0;
  HEAP32[$st$44$0 >> 2] = 0 | $17$0;
  var $st$44$1 = $15 + 4 | 0;
  HEAP32[$st$44$1 >> 2] = $21$1;
  var $userData11 = HEAP32[$m_nodes$s2] + $call * 36 + 16 | 0;
  HEAP32[$userData11 >> 2] = $userData;
  var $height = HEAP32[$m_nodes$s2] + $call * 36 + 32 | 0;
  HEAP32[$height >> 2] = 0;
  __ZN13b2DynamicTree10InsertLeafEi($this, $call);
  return $call;
  return null;
}

function __ZN13b2DynamicTree10InsertLeafEi($this, $leaf) {
  var $60$s2;
  var $23$s2;
  var $3$s2;
  var $m_nodes4$s2;
  var $m_root$s2;
  var $m_insertionCount = $this + 24 | 0;
  var $inc = HEAP32[$m_insertionCount >> 2] + 1 | 0;
  HEAP32[$m_insertionCount >> 2] = $inc;
  var $m_root$s2 = ($this | 0) >> 2;
  var $1 = HEAP32[$m_root$s2];
  var $cmp = ($1 | 0) == -1;
  $if_then$$if_end$2 : do {
    if ($cmp) {
      HEAP32[$m_root$s2] = $leaf;
      var $parent = HEAP32[$this + 4 >> 2] + $leaf * 36 + 20 | 0;
      HEAP32[$parent >> 2] = -1;
    } else {
      var $m_nodes4$s2 = ($this + 4 | 0) >> 2;
      var $3$s2 = HEAP32[$m_nodes4$s2] >> 2;
      var $tmp197 = HEAPF32[$3$s2 + ($leaf * 9 | 0)];
      var $tmp198 = HEAPF32[$3$s2 + ($leaf * 9 | 0) + 1];
      var $tmp = HEAPF32[$3$s2 + ($leaf * 9 | 0) + 2];
      var $tmp195 = HEAPF32[$3$s2 + ($leaf * 9 | 0) + 3];
      var $index_0 = $1;
      while (1) {
        var $index_0;
        var $4 = HEAP32[$3$s2 + ($index_0 * 9 | 0) + 6];
        if (($4 | 0) == -1) {
          break;
        }
        var $5 = HEAP32[$3$s2 + ($index_0 * 9 | 0) + 7];
        var $6 = HEAPF32[$3$s2 + ($index_0 * 9 | 0) + 2];
        var $7 = HEAPF32[$3$s2 + ($index_0 * 9 | 0)];
        var $8 = HEAPF32[$3$s2 + ($index_0 * 9 | 0) + 3];
        var $9 = HEAPF32[$3$s2 + ($index_0 * 9 | 0) + 1];
        var $cond_i_i_i150 = $7 < $tmp197 ? $7 : $tmp197;
        var $cond_i2_i_i154 = $9 < $tmp198 ? $9 : $tmp198;
        var $cond_i_i4_i159 = $6 > $tmp ? $6 : $tmp;
        var $cond_i2_i8_i163 = $8 > $tmp195 ? $8 : $tmp195;
        var $mul_i146 = ($cond_i_i4_i159 - $cond_i_i_i150 + ($cond_i2_i8_i163 - $cond_i2_i_i154)) * 2;
        var $mul = $mul_i146 * 2;
        var $mul24 = ($mul_i146 - ($6 - $7 + ($8 - $9)) * 2) * 2;
        var $11 = HEAPF32[$3$s2 + ($4 * 9 | 0)];
        var $cond_i_i_i123 = $tmp197 < $11 ? $tmp197 : $11;
        var $12 = HEAPF32[$3$s2 + ($4 * 9 | 0) + 1];
        var $cond_i2_i_i127 = $tmp198 < $12 ? $tmp198 : $12;
        var $13 = HEAPF32[$3$s2 + ($4 * 9 | 0) + 2];
        var $cond_i_i4_i132 = $tmp > $13 ? $tmp : $13;
        var $14 = HEAPF32[$3$s2 + ($4 * 9 | 0) + 3];
        var $cond_i2_i8_i136 = $tmp195 > $14 ? $tmp195 : $14;
        if ((HEAP32[$3$s2 + ($4 * 9 | 0) + 6] | 0) == -1) {
          var $call33_pn = ($cond_i_i4_i132 - $cond_i_i_i123 + ($cond_i2_i8_i136 - $cond_i2_i_i127)) * 2;
        } else {
          var $call33_pn = ($cond_i_i4_i132 - $cond_i_i_i123 + ($cond_i2_i8_i136 - $cond_i2_i_i127)) * 2 - ($13 - $11 + ($14 - $12)) * 2;
        }
        var $call33_pn;
        var $cost1_0 = $call33_pn + $mul24;
        var $16 = HEAPF32[$3$s2 + ($5 * 9 | 0)];
        var $cond_i_i_i63 = $tmp197 < $16 ? $tmp197 : $16;
        var $17 = HEAPF32[$3$s2 + ($5 * 9 | 0) + 1];
        var $cond_i2_i_i67 = $tmp198 < $17 ? $tmp198 : $17;
        var $18 = HEAPF32[$3$s2 + ($5 * 9 | 0) + 2];
        var $cond_i_i4_i72 = $tmp > $18 ? $tmp : $18;
        var $19 = HEAPF32[$3$s2 + ($5 * 9 | 0) + 3];
        var $cond_i2_i8_i76 = $tmp195 > $19 ? $tmp195 : $19;
        if ((HEAP32[$3$s2 + ($5 * 9 | 0) + 6] | 0) == -1) {
          var $call54_pn = ($cond_i_i4_i72 - $cond_i_i_i63 + ($cond_i2_i8_i76 - $cond_i2_i_i67)) * 2;
        } else {
          var $call54_pn = ($cond_i_i4_i72 - $cond_i_i_i63 + ($cond_i2_i8_i76 - $cond_i2_i_i67)) * 2 - ($18 - $16 + ($19 - $17)) * 2;
        }
        var $call54_pn;
        var $cost2_0 = $call54_pn + $mul24;
        if ($mul < $cost1_0 & $mul < $cost2_0) {
          break;
        }
        var $_ = $cost1_0 < $cost2_0 ? $4 : $5;
        var $index_0 = $_;
      }
      var $20 = HEAP32[$3$s2 + ($index_0 * 9 | 0) + 5];
      var $call82 = __ZN13b2DynamicTree12AllocateNodeEv($this);
      var $parent85 = HEAP32[$m_nodes4$s2] + $call82 * 36 + 20 | 0;
      HEAP32[$parent85 >> 2] = $20;
      var $userData = HEAP32[$m_nodes4$s2] + $call82 * 36 + 16 | 0;
      HEAP32[$userData >> 2] = 0;
      var $23 = HEAP32[$m_nodes4$s2], $23$s2 = $23 >> 2;
      var $24 = HEAPF32[$23$s2 + ($index_0 * 9 | 0)];
      var $cond_i_i_i5 = $tmp197 < $24 ? $tmp197 : $24;
      var $25 = HEAPF32[$23$s2 + ($index_0 * 9 | 0) + 1];
      var $cond_i2_i_i9 = $tmp198 < $25 ? $tmp198 : $25;
      var $26 = $23 + $call82 * 36 | 0;
      var $27 = (tempDoubleF32[0] = $cond_i_i_i5, tempDoubleI32[0]);
      var $28$0 = $27;
      var $29 = (tempDoubleF32[0] = $cond_i2_i_i9, tempDoubleI32[0]);
      var $32$1 = $29 | 0;
      var $st$30$0 = $26 | 0;
      HEAP32[$st$30$0 >> 2] = 0 | $28$0;
      var $st$30$1 = $26 + 4 | 0;
      HEAP32[$st$30$1 >> 2] = $32$1;
      var $33 = HEAPF32[$23$s2 + ($index_0 * 9 | 0) + 2];
      var $cond_i_i4_i14 = $tmp > $33 ? $tmp : $33;
      var $34 = HEAPF32[$23$s2 + ($index_0 * 9 | 0) + 3];
      var $cond_i2_i8_i18 = $tmp195 > $34 ? $tmp195 : $34;
      var $35 = $23 + $call82 * 36 + 8 | 0;
      var $36 = (tempDoubleF32[0] = $cond_i_i4_i14, tempDoubleI32[0]);
      var $37$0 = $36;
      var $38 = (tempDoubleF32[0] = $cond_i2_i8_i18, tempDoubleI32[0]);
      var $41$1 = $38 | 0;
      var $st$54$0 = $35 | 0;
      HEAP32[$st$54$0 >> 2] = 0 | $37$0;
      var $st$54$1 = $35 + 4 | 0;
      HEAP32[$st$54$1 >> 2] = $41$1;
      var $42 = HEAP32[$m_nodes4$s2];
      var $add96 = HEAP32[($42 + 32 >> 2) + ($index_0 * 9 | 0)] + 1 | 0;
      var $height99 = $42 + $call82 * 36 + 32 | 0;
      HEAP32[$height99 >> 2] = $add96;
      var $44 = HEAP32[$m_nodes4$s2];
      if (($20 | 0) == -1) {
        var $child1130 = $44 + $call82 * 36 + 24 | 0;
        HEAP32[$child1130 >> 2] = $index_0;
        var $child2133 = HEAP32[$m_nodes4$s2] + $call82 * 36 + 28 | 0;
        HEAP32[$child2133 >> 2] = $leaf;
        var $parent136 = HEAP32[$m_nodes4$s2] + $index_0 * 36 + 20 | 0;
        HEAP32[$parent136 >> 2] = $call82;
        var $parent139 = HEAP32[$m_nodes4$s2] + $leaf * 36 + 20 | 0;
        HEAP32[$parent139 >> 2] = $call82;
        HEAP32[$m_root$s2] = $call82;
      } else {
        var $child1104 = $44 + $20 * 36 + 24 | 0;
        if ((HEAP32[$child1104 >> 2] | 0) == ($index_0 | 0)) {
          HEAP32[$child1104 >> 2] = $call82;
        } else {
          var $child2113 = $44 + $20 * 36 + 28 | 0;
          HEAP32[$child2113 >> 2] = $call82;
        }
        var $child1117 = HEAP32[$m_nodes4$s2] + $call82 * 36 + 24 | 0;
        HEAP32[$child1117 >> 2] = $index_0;
        var $child2120 = HEAP32[$m_nodes4$s2] + $call82 * 36 + 28 | 0;
        HEAP32[$child2120 >> 2] = $leaf;
        var $parent123 = HEAP32[$m_nodes4$s2] + $index_0 * 36 + 20 | 0;
        HEAP32[$parent123 >> 2] = $call82;
        var $parent126 = HEAP32[$m_nodes4$s2] + $leaf * 36 + 20 | 0;
        HEAP32[$parent126 >> 2] = $call82;
      }
      var $index_1199 = HEAP32[(HEAP32[$m_nodes4$s2] + 20 >> 2) + ($leaf * 9 | 0)];
      if (($index_1199 | 0) == -1) {
        break;
      }
      var $index_1201 = $index_1199;
      while (1) {
        var $index_1201;
        var $call148 = __ZN13b2DynamicTree7BalanceEi($this, $index_1201);
        var $54 = HEAP32[$m_nodes4$s2];
        var $55 = HEAP32[($54 + 24 >> 2) + ($call148 * 9 | 0)];
        var $56 = HEAP32[($54 + 28 >> 2) + ($call148 * 9 | 0)];
        if (($55 | 0) == -1) {
          ___assert_func(STRING_TABLE.__str14 | 0, 307, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree10InsertLeafEi | 0, STRING_TABLE.__str620 | 0);
        }
        if (($56 | 0) == -1) {
          ___assert_func(STRING_TABLE.__str14 | 0, 308, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree10InsertLeafEi | 0, STRING_TABLE.__str7 | 0);
        }
        var $57 = HEAP32[$m_nodes4$s2];
        var $58 = HEAP32[($57 + 32 >> 2) + ($55 * 9 | 0)];
        var $59 = HEAP32[($57 + 32 >> 2) + ($56 * 9 | 0)];
        var $cond_i = ($58 | 0) > ($59 | 0) ? $58 : $59;
        var $add169 = $cond_i + 1 | 0;
        var $height172 = $57 + $call148 * 36 + 32 | 0;
        HEAP32[$height172 >> 2] = $add169;
        var $60 = HEAP32[$m_nodes4$s2], $60$s2 = $60 >> 2;
        var $61 = HEAPF32[$60$s2 + ($55 * 9 | 0)];
        var $62 = HEAPF32[$60$s2 + ($56 * 9 | 0)];
        var $cond_i_i_i = $61 < $62 ? $61 : $62;
        var $63 = HEAPF32[$60$s2 + ($55 * 9 | 0) + 1];
        var $64 = HEAPF32[$60$s2 + ($56 * 9 | 0) + 1];
        var $cond_i2_i_i = $63 < $64 ? $63 : $64;
        var $65 = $60 + $call148 * 36 | 0;
        var $66 = (tempDoubleF32[0] = $cond_i_i_i, tempDoubleI32[0]);
        var $67$0 = $66;
        var $68 = (tempDoubleF32[0] = $cond_i2_i_i, tempDoubleI32[0]);
        var $71$0 = 0 | $67$0;
        var $71$1 = $68 | 0;
        var $st$35$0 = $65 | 0;
        HEAP32[$st$35$0 >> 2] = $71$0;
        var $st$35$1 = $65 + 4 | 0;
        HEAP32[$st$35$1 >> 2] = $71$1;
        var $72 = HEAPF32[$60$s2 + ($55 * 9 | 0) + 2];
        var $73 = HEAPF32[$60$s2 + ($56 * 9 | 0) + 2];
        var $cond_i_i4_i = $72 > $73 ? $72 : $73;
        var $74 = HEAPF32[$60$s2 + ($55 * 9 | 0) + 3];
        var $75 = HEAPF32[$60$s2 + ($56 * 9 | 0) + 3];
        var $cond_i2_i8_i = $74 > $75 ? $74 : $75;
        var $76 = $60 + $call148 * 36 + 8 | 0;
        var $77 = (tempDoubleF32[0] = $cond_i_i4_i, tempDoubleI32[0]);
        var $78$0 = $77;
        var $79 = (tempDoubleF32[0] = $cond_i2_i8_i, tempDoubleI32[0]);
        var $82$0 = 0 | $78$0;
        var $82$1 = $79 | 0;
        var $st$63$0 = $76 | 0;
        HEAP32[$st$63$0 >> 2] = $82$0;
        var $st$63$1 = $76 + 4 | 0;
        HEAP32[$st$63$1 >> 2] = $82$1;
        var $index_1 = HEAP32[(HEAP32[$m_nodes4$s2] + 20 >> 2) + ($call148 * 9 | 0)];
        if (($index_1 | 0) == -1) {
          break $if_then$$if_end$2;
        }
        var $index_1201 = $index_1;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN13b2DynamicTree12DestroyProxyEi($this, $proxyId) {
  var $m_nodeCount_i$s2;
  var $m_nodes$s2;
  var __label__;
  var $cmp = ($proxyId | 0) > -1;
  do {
    if ($cmp) {
      if ((HEAP32[$this + 12 >> 2] | 0) > ($proxyId | 0)) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str14 | 0, 126, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree12DestroyProxyEi | 0, STRING_TABLE.__str2111 | 0);
  }
  var $m_nodes$s2 = ($this + 4 | 0) >> 2;
  if ((HEAP32[(HEAP32[$m_nodes$s2] + 24 >> 2) + ($proxyId * 9 | 0)] | 0) != -1) {
    ___assert_func(STRING_TABLE.__str14 | 0, 127, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree12DestroyProxyEi | 0, STRING_TABLE.__str519 | 0);
  }
  __ZN13b2DynamicTree10RemoveLeafEi($this, $proxyId);
  do {
    if ($cmp) {
      if ((HEAP32[$this + 12 >> 2] | 0) > ($proxyId | 0)) {
        __label__ = 8;
        break;
      }
      __label__ = 7;
      break;
    } else {
      __label__ = 7;
    }
  } while (0);
  if (__label__ == 7) {
    ___assert_func(STRING_TABLE.__str14 | 0, 97, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi | 0, STRING_TABLE.__str216 | 0);
  }
  var $m_nodeCount_i$s2 = ($this + 8 | 0) >> 2;
  if ((HEAP32[$m_nodeCount_i$s2] | 0) <= 0) {
    ___assert_func(STRING_TABLE.__str14 | 0, 98, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi | 0, STRING_TABLE.__str317 | 0);
  }
  var $m_freeList_i = $this + 16 | 0;
  var $5 = HEAP32[$m_freeList_i >> 2];
  var $next_i = HEAP32[$m_nodes$s2] + $proxyId * 36 + 20 | 0;
  HEAP32[$next_i >> 2] = $5;
  var $height_i = HEAP32[$m_nodes$s2] + $proxyId * 36 + 32 | 0;
  HEAP32[$height_i >> 2] = -1;
  HEAP32[$m_freeList_i >> 2] = $proxyId;
  var $dec_i = HEAP32[$m_nodeCount_i$s2] - 1 | 0;
  HEAP32[$m_nodeCount_i$s2] = $dec_i;
  return;
  return;
}

function __ZN13b2DynamicTree10RemoveLeafEi($this, $leaf) {
  var $14$s2;
  var $m_nodeCount_i$s2;
  var $m_nodeCount_i7$s2;
  var $1$s2;
  var $m_nodes$s2;
  var $m_root$s2;
  var __label__;
  var $m_root$s2 = ($this | 0) >> 2;
  var $cmp = (HEAP32[$m_root$s2] | 0) == ($leaf | 0);
  $if_then$$if_end$53 : do {
    if ($cmp) {
      HEAP32[$m_root$s2] = -1;
    } else {
      var $m_nodes$s2 = ($this + 4 | 0) >> 2;
      var $1 = HEAP32[$m_nodes$s2], $1$s2 = $1 >> 2;
      var $2 = HEAP32[$1$s2 + ($leaf * 9 | 0) + 5];
      var $3 = HEAP32[$1$s2 + ($2 * 9 | 0) + 5];
      var $4 = HEAP32[$1$s2 + ($2 * 9 | 0) + 6];
      if (($4 | 0) == ($leaf | 0)) {
        var $sibling_0 = HEAP32[$1$s2 + ($2 * 9 | 0) + 7];
      } else {
        var $sibling_0 = $4;
      }
      var $sibling_0;
      if (($3 | 0) == -1) {
        HEAP32[$m_root$s2] = $sibling_0;
        var $parent68 = $1 + $sibling_0 * 36 + 20 | 0;
        HEAP32[$parent68 >> 2] = -1;
        var $cmp_i2 = ($2 | 0) > -1;
        do {
          if ($cmp_i2) {
            if ((HEAP32[$this + 12 >> 2] | 0) > ($2 | 0)) {
              __label__ = 18;
              break;
            }
            __label__ = 17;
            break;
          } else {
            __label__ = 17;
          }
        } while (0);
        if (__label__ == 17) {
          ___assert_func(STRING_TABLE.__str14 | 0, 97, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi | 0, STRING_TABLE.__str216 | 0);
        }
        var $m_nodeCount_i7$s2 = ($this + 8 | 0) >> 2;
        if ((HEAP32[$m_nodeCount_i7$s2] | 0) <= 0) {
          ___assert_func(STRING_TABLE.__str14 | 0, 98, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi | 0, STRING_TABLE.__str317 | 0);
        }
        var $m_freeList_i11 = $this + 16 | 0;
        var $46 = HEAP32[$m_freeList_i11 >> 2];
        var $next_i13 = HEAP32[$m_nodes$s2] + $2 * 36 + 20 | 0;
        HEAP32[$next_i13 >> 2] = $46;
        var $height_i14 = HEAP32[$m_nodes$s2] + $2 * 36 + 32 | 0;
        HEAP32[$height_i14 >> 2] = -1;
        HEAP32[$m_freeList_i11 >> 2] = $2;
        var $dec_i15 = HEAP32[$m_nodeCount_i7$s2] - 1 | 0;
        HEAP32[$m_nodeCount_i7$s2] = $dec_i15;
      } else {
        var $child121 = $1 + $3 * 36 + 24 | 0;
        if ((HEAP32[$child121 >> 2] | 0) == ($2 | 0)) {
          HEAP32[$child121 >> 2] = $sibling_0;
        } else {
          var $child230 = $1 + $3 * 36 + 28 | 0;
          HEAP32[$child230 >> 2] = $sibling_0;
        }
        var $parent34 = HEAP32[$m_nodes$s2] + $sibling_0 * 36 + 20 | 0;
        HEAP32[$parent34 >> 2] = $3;
        var $cmp_i = ($2 | 0) > -1;
        do {
          if ($cmp_i) {
            if ((HEAP32[$this + 12 >> 2] | 0) > ($2 | 0)) {
              __label__ = 11;
              break;
            }
            __label__ = 10;
            break;
          } else {
            __label__ = 10;
          }
        } while (0);
        if (__label__ == 10) {
          ___assert_func(STRING_TABLE.__str14 | 0, 97, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi | 0, STRING_TABLE.__str216 | 0);
        }
        var $m_nodeCount_i$s2 = ($this + 8 | 0) >> 2;
        if ((HEAP32[$m_nodeCount_i$s2] | 0) <= 0) {
          ___assert_func(STRING_TABLE.__str14 | 0, 98, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi | 0, STRING_TABLE.__str317 | 0);
        }
        var $m_freeList_i = $this + 16 | 0;
        var $10 = HEAP32[$m_freeList_i >> 2];
        var $next_i = HEAP32[$m_nodes$s2] + $2 * 36 + 20 | 0;
        HEAP32[$next_i >> 2] = $10;
        var $height_i = HEAP32[$m_nodes$s2] + $2 * 36 + 32 | 0;
        HEAP32[$height_i >> 2] = -1;
        HEAP32[$m_freeList_i >> 2] = $2;
        var $dec_i = HEAP32[$m_nodeCount_i$s2] - 1 | 0;
        HEAP32[$m_nodeCount_i$s2] = $dec_i;
        var $index_018 = $3;
        while (1) {
          var $index_018;
          var $call = __ZN13b2DynamicTree7BalanceEi($this, $index_018);
          var $14 = HEAP32[$m_nodes$s2], $14$s2 = $14 >> 2;
          var $15 = HEAP32[$14$s2 + ($call * 9 | 0) + 6];
          var $16 = HEAP32[$14$s2 + ($call * 9 | 0) + 7];
          var $17 = HEAPF32[$14$s2 + ($15 * 9 | 0)];
          var $18 = HEAPF32[$14$s2 + ($16 * 9 | 0)];
          var $cond_i_i_i = $17 < $18 ? $17 : $18;
          var $19 = HEAPF32[$14$s2 + ($15 * 9 | 0) + 1];
          var $20 = HEAPF32[$14$s2 + ($16 * 9 | 0) + 1];
          var $cond_i2_i_i = $19 < $20 ? $19 : $20;
          var $21 = $14 + $call * 36 | 0;
          var $22 = (tempDoubleF32[0] = $cond_i_i_i, tempDoubleI32[0]);
          var $23$0 = $22;
          var $24 = (tempDoubleF32[0] = $cond_i2_i_i, tempDoubleI32[0]);
          var $27$0 = 0 | $23$0;
          var $27$1 = $24 | 0;
          var $st$31$0 = $21 | 0;
          HEAP32[$st$31$0 >> 2] = $27$0;
          var $st$31$1 = $21 + 4 | 0;
          HEAP32[$st$31$1 >> 2] = $27$1;
          var $28 = HEAPF32[$14$s2 + ($15 * 9 | 0) + 2];
          var $29 = HEAPF32[$14$s2 + ($16 * 9 | 0) + 2];
          var $cond_i_i4_i = $28 > $29 ? $28 : $29;
          var $30 = HEAPF32[$14$s2 + ($15 * 9 | 0) + 3];
          var $31 = HEAPF32[$14$s2 + ($16 * 9 | 0) + 3];
          var $cond_i2_i8_i = $30 > $31 ? $30 : $31;
          var $32 = $14 + $call * 36 + 8 | 0;
          var $33 = (tempDoubleF32[0] = $cond_i_i4_i, tempDoubleI32[0]);
          var $34$0 = $33;
          var $35 = (tempDoubleF32[0] = $cond_i2_i8_i, tempDoubleI32[0]);
          var $38$0 = 0 | $34$0;
          var $38$1 = $35 | 0;
          var $st$59$0 = $32 | 0;
          HEAP32[$st$59$0 >> 2] = $38$0;
          var $st$59$1 = $32 + 4 | 0;
          HEAP32[$st$59$1 >> 2] = $38$1;
          var $39 = HEAP32[$m_nodes$s2];
          var $40 = HEAP32[($39 + 32 >> 2) + ($15 * 9 | 0)];
          var $41 = HEAP32[($39 + 32 >> 2) + ($16 * 9 | 0)];
          var $cond_i = ($40 | 0) > ($41 | 0) ? $40 : $41;
          var $add = $cond_i + 1 | 0;
          var $height60 = $39 + $call * 36 + 32 | 0;
          HEAP32[$height60 >> 2] = $add;
          var $43 = HEAP32[(HEAP32[$m_nodes$s2] + 20 >> 2) + ($call * 9 | 0)];
          if (($43 | 0) == -1) {
            break $if_then$$if_end$53;
          }
          var $index_018 = $43;
        }
      }
    }
  } while (0);
  return;
  return;
}

function __ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($this, $proxyId, $aabb, $displacement) {
  var $17$s2;
  var $3$s2;
  var $m_nodes$s2;
  var __label__;
  var $cmp = ($proxyId | 0) > -1;
  do {
    if ($cmp) {
      if ((HEAP32[$this + 12 >> 2] | 0) > ($proxyId | 0)) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str14 | 0, 135, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2 | 0, STRING_TABLE.__str2111 | 0);
  }
  var $m_nodes$s2 = ($this + 4 | 0) >> 2;
  var $1 = HEAP32[$m_nodes$s2];
  if ((HEAP32[($1 + 24 >> 2) + ($proxyId * 9 | 0)] | 0) == -1) {
    var $3 = $1, $3$s2 = $3 >> 2;
  } else {
    ___assert_func(STRING_TABLE.__str14 | 0, 137, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2 | 0, STRING_TABLE.__str519 | 0);
    var $3 = HEAP32[$m_nodes$s2], $3$s2 = $3 >> 2;
  }
  var $3;
  var $x3_i = $aabb | 0;
  var $cmp_i1 = HEAPF32[$3$s2 + ($proxyId * 9 | 0)] > HEAPF32[$x3_i >> 2];
  do {
    if ($cmp_i1) {
      var $aabb20_1_pre_phi = $aabb + 4 | 0;
      __label__ = 10;
      break;
    }
    var $y8_i = $aabb + 4 | 0;
    if (HEAPF32[$3$s2 + ($proxyId * 9 | 0) + 1] > HEAPF32[$y8_i >> 2]) {
      var $aabb20_1_pre_phi = $y8_i;
      __label__ = 10;
      break;
    }
    if (HEAPF32[$aabb + 8 >> 2] > HEAPF32[$3$s2 + ($proxyId * 9 | 0) + 2]) {
      var $aabb20_1_pre_phi = $y8_i;
      __label__ = 10;
      break;
    }
    if (HEAPF32[$aabb + 12 >> 2] > HEAPF32[$3$s2 + ($proxyId * 9 | 0) + 3]) {
      var $aabb20_1_pre_phi = $y8_i;
      __label__ = 10;
      break;
    }
    var $retval_0 = 0;
    __label__ = 17;
    break;
  } while (0);
  if (__label__ == 10) {
    var $aabb20_1_pre_phi;
    __ZN13b2DynamicTree10RemoveLeafEi($this, $proxyId);
    var $sub_i = HEAPF32[$x3_i >> 2] - .10000000149011612;
    var $sub3_i = HEAPF32[$aabb20_1_pre_phi >> 2] - .10000000149011612;
    var $add_i = HEAPF32[$aabb + 8 >> 2] + .10000000149011612;
    var $add3_i = HEAPF32[$aabb + 12 >> 2] + .10000000149011612;
    var $mul_i = HEAPF32[$displacement >> 2] * 2;
    var $mul1_i = HEAPF32[$displacement + 4 >> 2] * 2;
    if ($mul_i < 0) {
      var $_in27 = $sub_i + $mul_i;
      var $_in = $add_i;
    } else {
      var $_in27 = $sub_i;
      var $_in = $add_i + $mul_i;
    }
    var $_in;
    var $_in27;
    if ($mul1_i < 0) {
      var $16 = $sub3_i + $mul1_i;
      var $15 = $add3_i;
    } else {
      var $16 = $sub3_i;
      var $15 = $add3_i + $mul1_i;
    }
    var $15;
    var $16;
    var $17$s2 = HEAP32[$m_nodes$s2] >> 2;
    HEAPF32[$17$s2 + ($proxyId * 9 | 0)] = $_in27;
    HEAPF32[$17$s2 + ($proxyId * 9 | 0) + 1] = $16;
    HEAPF32[$17$s2 + ($proxyId * 9 | 0) + 2] = $_in;
    HEAPF32[$17$s2 + ($proxyId * 9 | 0) + 3] = $15;
    __ZN13b2DynamicTree10InsertLeafEi($this, $proxyId);
    var $retval_0 = 1;
  }
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZNK13b2DynamicTree9GetHeightEv($this) {
  var $0 = HEAP32[$this >> 2];
  if (($0 | 0) == -1) {
    var $retval_0 = 0;
  } else {
    var $retval_0 = HEAP32[(HEAP32[$this + 4 >> 2] + 32 >> 2) + ($0 * 9 | 0)];
  }
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZNK13b2DynamicTree12GetAreaRatioEv($this) {
  var $1$s2;
  var $0 = HEAP32[$this >> 2];
  if (($0 | 0) == -1) {
    var $retval_0 = 0;
  } else {
    var $1$s2 = HEAP32[$this + 4 >> 2] >> 2;
    var $mul_i = (HEAPF32[$1$s2 + ($0 * 9 | 0) + 2] - HEAPF32[$1$s2 + ($0 * 9 | 0)] + (HEAPF32[$1$s2 + ($0 * 9 | 0) + 3] - HEAPF32[$1$s2 + ($0 * 9 | 0) + 1])) * 2;
    var $6 = HEAP32[$this + 12 >> 2];
    var $cmp39 = ($6 | 0) > 0;
    $for_body$$for_end$78 : do {
      if ($cmp39) {
        var $totalArea_010 = 0;
        var $i_011 = 0;
        while (1) {
          var $i_011;
          var $totalArea_010;
          if ((HEAP32[$1$s2 + ($i_011 * 9 | 0) + 8] | 0) < 0) {
            var $totalArea_1 = $totalArea_010;
          } else {
            var $totalArea_1 = $totalArea_010 + (HEAPF32[$1$s2 + ($i_011 * 9 | 0) + 2] - HEAPF32[$1$s2 + ($i_011 * 9 | 0)] + (HEAPF32[$1$s2 + ($i_011 * 9 | 0) + 3] - HEAPF32[$1$s2 + ($i_011 * 9 | 0) + 1])) * 2;
          }
          var $totalArea_1;
          var $inc = $i_011 + 1 | 0;
          if (($inc | 0) >= ($6 | 0)) {
            var $totalArea_0_lcssa = $totalArea_1;
            break $for_body$$for_end$78;
          }
          var $totalArea_010 = $totalArea_1;
          var $i_011 = $inc;
        }
      } else {
        var $totalArea_0_lcssa = 0;
      }
    } while (0);
    var $totalArea_0_lcssa;
    var $retval_0 = $totalArea_0_lcssa / $mul_i;
  }
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN13b2DynamicTree7BalanceEi($this, $iA) {
  var $height173$s2;
  var $height172$s2;
  var $parent140$s2;
  var $child2119$s2;
  var $st$108$1$s2;
  var $st$108$0$s2;
  var $st$80$1$s2;
  var $st$80$0$s2;
  var $st$55$1$s2;
  var $st$55$0$s2;
  var $st$27$1$s2;
  var $st$27$0$s2;
  var $height74$s2;
  var $height73$s2;
  var $parent44$s2;
  var $child224$s2;
  var $height20$s2;
  var $height19$s2;
  var $6$s2;
  var $child2$s2;
  var $height$s2;
  var $child1_i$s2;
  var $0$s2;
  var $m_nodes$s2;
  var $this$s2 = $this >> 2;
  var __label__;
  if (($iA | 0) == -1) {
    ___assert_func(STRING_TABLE.__str14 | 0, 382, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi | 0, STRING_TABLE.__str8 | 0);
  }
  var $m_nodes$s2 = ($this + 4 | 0) >> 2;
  var $0 = HEAP32[$m_nodes$s2], $0$s2 = $0 >> 2;
  var $add_ptr = $0 + $iA * 36 | 0;
  var $child1_i$s2 = ($0 + $iA * 36 + 24 | 0) >> 2;
  var $1 = HEAP32[$child1_i$s2];
  var $cmp_i = ($1 | 0) == -1;
  do {
    if ($cmp_i) {
      var $retval_0 = $iA;
    } else {
      var $height$s2 = ($0 + $iA * 36 + 32 | 0) >> 2;
      if ((HEAP32[$height$s2] | 0) < 2) {
        var $retval_0 = $iA;
        break;
      }
      var $child2$s2 = ($0 + $iA * 36 + 28 | 0) >> 2;
      var $3 = HEAP32[$child2$s2];
      var $cmp3 = ($1 | 0) > -1;
      do {
        if ($cmp3) {
          if (($1 | 0) < (HEAP32[$this$s2 + 3] | 0)) {
            __label__ = 7;
            break;
          }
          __label__ = 6;
          break;
        } else {
          __label__ = 6;
        }
      } while (0);
      if (__label__ == 6) {
        ___assert_func(STRING_TABLE.__str14 | 0, 392, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi | 0, STRING_TABLE.__str9 | 0);
      }
      var $cmp8 = ($3 | 0) > -1;
      do {
        if ($cmp8) {
          if (($3 | 0) < (HEAP32[$this$s2 + 3] | 0)) {
            __label__ = 10;
            break;
          }
          __label__ = 9;
          break;
        } else {
          __label__ = 9;
        }
      } while (0);
      if (__label__ == 9) {
        ___assert_func(STRING_TABLE.__str14 | 0, 393, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi | 0, STRING_TABLE.__str10 | 0);
      }
      var $6 = HEAP32[$m_nodes$s2], $6$s2 = $6 >> 2;
      var $add_ptr16 = $6 + $1 * 36 | 0;
      var $add_ptr18 = $6 + $3 * 36 | 0;
      var $height19$s2 = ($6 + $3 * 36 + 32 | 0) >> 2;
      var $height20$s2 = ($6 + $1 * 36 + 32 | 0) >> 2;
      var $sub = HEAP32[$height19$s2] - HEAP32[$height20$s2] | 0;
      if (($sub | 0) > 1) {
        var $child123 = $6 + $3 * 36 + 24 | 0;
        var $9 = HEAP32[$child123 >> 2];
        var $child224$s2 = ($6 + $3 * 36 + 28 | 0) >> 2;
        var $10 = HEAP32[$child224$s2];
        var $add_ptr26 = $6 + $9 * 36 | 0;
        var $add_ptr28 = $6 + $10 * 36 | 0;
        var $cmp29 = ($9 | 0) > -1;
        do {
          if ($cmp29) {
            if (($9 | 0) < (HEAP32[$this$s2 + 3] | 0)) {
              __label__ = 14;
              break;
            }
            __label__ = 13;
            break;
          } else {
            __label__ = 13;
          }
        } while (0);
        if (__label__ == 13) {
          ___assert_func(STRING_TABLE.__str14 | 0, 407, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi | 0, STRING_TABLE.__str11 | 0);
        }
        var $cmp36 = ($10 | 0) > -1;
        do {
          if ($cmp36) {
            if (($10 | 0) < (HEAP32[$this$s2 + 3] | 0)) {
              __label__ = 17;
              break;
            }
            __label__ = 16;
            break;
          } else {
            __label__ = 16;
          }
        } while (0);
        if (__label__ == 16) {
          ___assert_func(STRING_TABLE.__str14 | 0, 408, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi | 0, STRING_TABLE.__str12 | 0);
        }
        HEAP32[$child123 >> 2] = $iA;
        var $parent = $0 + $iA * 36 + 20 | 0;
        var $13 = HEAP32[$parent >> 2];
        var $parent44$s2 = ($6 + $3 * 36 + 20 | 0) >> 2;
        HEAP32[$parent44$s2] = $13;
        HEAP32[$parent >> 2] = $3;
        var $14 = HEAP32[$parent44$s2];
        if (($14 | 0) == -1) {
          HEAP32[$this$s2] = $3;
        } else {
          var $15 = HEAP32[$m_nodes$s2];
          var $child151 = $15 + $14 * 36 + 24 | 0;
          if ((HEAP32[$child151 >> 2] | 0) == ($iA | 0)) {
            HEAP32[$child151 >> 2] = $3;
          } else {
            if ((HEAP32[($15 + 28 >> 2) + ($14 * 9 | 0)] | 0) == ($iA | 0)) {
              var $19 = $14;
              var $18 = $15;
            } else {
              ___assert_func(STRING_TABLE.__str14 | 0, 424, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi | 0, STRING_TABLE.__str1321 | 0);
              var $19 = HEAP32[$parent44$s2];
              var $18 = HEAP32[$m_nodes$s2];
            }
            var $18;
            var $19;
            HEAP32[($18 + 28 >> 2) + ($19 * 9 | 0)] = $3;
          }
        }
        var $height73$s2 = ($6 + $9 * 36 + 32 | 0) >> 2;
        var $height74$s2 = ($6 + $10 * 36 + 32 | 0) >> 2;
        if ((HEAP32[$height73$s2] | 0) > (HEAP32[$height74$s2] | 0)) {
          HEAP32[$child224$s2] = $9;
          HEAP32[$child2$s2] = $10;
          var $parent79 = $6 + $10 * 36 + 20 | 0;
          HEAP32[$parent79 >> 2] = $iA;
          var $22 = HEAPF32[$add_ptr16 >> 2];
          var $23 = HEAPF32[$add_ptr28 >> 2];
          var $cond_i_i_i122 = $22 < $23 ? $22 : $23;
          var $24 = HEAPF32[$6$s2 + ($1 * 9 | 0) + 1];
          var $25 = HEAPF32[$6$s2 + ($10 * 9 | 0) + 1];
          var $cond_i2_i_i126 = $24 < $25 ? $24 : $25;
          var $26 = $add_ptr;
          var $27 = (tempDoubleF32[0] = $cond_i_i_i122, tempDoubleI32[0]);
          var $28$0 = $27;
          var $29 = (tempDoubleF32[0] = $cond_i2_i_i126, tempDoubleI32[0]);
          var $32$0 = 0 | $28$0;
          var $32$1 = $29 | 0;
          var $st$27$0 = $26 | 0, $st$27$0$s2 = $st$27$0 >> 2;
          HEAP32[$st$27$0$s2] = $32$0;
          var $st$27$1 = $26 + 4 | 0, $st$27$1$s2 = $st$27$1 >> 2;
          HEAP32[$st$27$1$s2] = $32$1;
          var $33 = HEAPF32[$6$s2 + ($1 * 9 | 0) + 2];
          var $34 = HEAPF32[$6$s2 + ($10 * 9 | 0) + 2];
          var $cond_i_i4_i131 = $33 > $34 ? $33 : $34;
          var $35 = HEAPF32[$6$s2 + ($1 * 9 | 0) + 3];
          var $36 = HEAPF32[$6$s2 + ($10 * 9 | 0) + 3];
          var $cond_i2_i8_i135 = $35 > $36 ? $35 : $36;
          var $37 = $0 + $iA * 36 + 8 | 0;
          var $38 = (tempDoubleF32[0] = $cond_i_i4_i131, tempDoubleI32[0]);
          var $39$0 = $38;
          var $40 = (tempDoubleF32[0] = $cond_i2_i8_i135, tempDoubleI32[0]);
          var $43$0 = 0 | $39$0;
          var $43$1 = $40 | 0;
          var $st$55$0 = $37 | 0, $st$55$0$s2 = $st$55$0 >> 2;
          HEAP32[$st$55$0$s2] = $43$0;
          var $st$55$1 = $37 + 4 | 0, $st$55$1$s2 = $st$55$1 >> 2;
          HEAP32[$st$55$1$s2] = $43$1;
          var $44 = HEAPF32[$add_ptr26 >> 2];
          var $cond_i_i_i105 = $cond_i_i_i122 < $44 ? $cond_i_i_i122 : $44;
          var $45 = HEAPF32[$0$s2 + ($iA * 9 | 0) + 1];
          var $46 = HEAPF32[$6$s2 + ($9 * 9 | 0) + 1];
          var $cond_i2_i_i109 = $45 < $46 ? $45 : $46;
          var $47 = $add_ptr18;
          var $48 = (tempDoubleF32[0] = $cond_i_i_i105, tempDoubleI32[0]);
          var $49$0 = $48;
          var $50 = (tempDoubleF32[0] = $cond_i2_i_i109, tempDoubleI32[0]);
          var $53$0 = 0 | $49$0;
          var $53$1 = $50 | 0;
          var $st$80$0 = $47 | 0, $st$80$0$s2 = $st$80$0 >> 2;
          HEAP32[$st$80$0$s2] = $53$0;
          var $st$80$1 = $47 + 4 | 0, $st$80$1$s2 = $st$80$1 >> 2;
          HEAP32[$st$80$1$s2] = $53$1;
          var $54 = HEAPF32[$0$s2 + ($iA * 9 | 0) + 2];
          var $55 = HEAPF32[$6$s2 + ($9 * 9 | 0) + 2];
          var $cond_i_i4_i114 = $54 > $55 ? $54 : $55;
          var $56 = HEAPF32[$0$s2 + ($iA * 9 | 0) + 3];
          var $57 = HEAPF32[$6$s2 + ($9 * 9 | 0) + 3];
          var $cond_i2_i8_i118 = $56 > $57 ? $56 : $57;
          var $58 = $6 + $3 * 36 + 8 | 0;
          var $59 = (tempDoubleF32[0] = $cond_i_i4_i114, tempDoubleI32[0]);
          var $60$0 = $59;
          var $61 = (tempDoubleF32[0] = $cond_i2_i8_i118, tempDoubleI32[0]);
          var $64$0 = 0 | $60$0;
          var $64$1 = $61 | 0;
          var $st$108$0 = $58 | 0, $st$108$0$s2 = $st$108$0 >> 2;
          HEAP32[$st$108$0$s2] = $64$0;
          var $st$108$1 = $58 + 4 | 0, $st$108$1$s2 = $st$108$1 >> 2;
          HEAP32[$st$108$1$s2] = $64$1;
          var $65 = HEAP32[$height20$s2];
          var $66 = HEAP32[$height74$s2];
          var $cond_i101 = ($65 | 0) > ($66 | 0) ? $65 : $66;
          var $add = $cond_i101 + 1 | 0;
          HEAP32[$height$s2] = $add;
          var $67 = HEAP32[$height73$s2];
          var $cond_i99 = ($add | 0) > ($67 | 0) ? $add : $67;
          var $storemerge1_in = $cond_i99;
        } else {
          HEAP32[$child224$s2] = $10;
          HEAP32[$child2$s2] = $9;
          var $parent97 = $6 + $9 * 36 + 20 | 0;
          HEAP32[$parent97 >> 2] = $iA;
          var $68 = HEAPF32[$add_ptr16 >> 2];
          var $69 = HEAPF32[$add_ptr26 >> 2];
          var $cond_i_i_i84 = $68 < $69 ? $68 : $69;
          var $70 = HEAPF32[$6$s2 + ($1 * 9 | 0) + 1];
          var $71 = HEAPF32[$6$s2 + ($9 * 9 | 0) + 1];
          var $cond_i2_i_i88 = $70 < $71 ? $70 : $71;
          var $72 = $add_ptr;
          var $73 = (tempDoubleF32[0] = $cond_i_i_i84, tempDoubleI32[0]);
          var $74$0 = $73;
          var $75 = (tempDoubleF32[0] = $cond_i2_i_i88, tempDoubleI32[0]);
          var $78$0 = 0 | $74$0;
          var $78$1 = $75 | 0;
          var $st$27$0 = $72 | 0, $st$27$0$s2 = $st$27$0 >> 2;
          HEAP32[$st$27$0$s2] = $78$0;
          var $st$27$1 = $72 + 4 | 0, $st$27$1$s2 = $st$27$1 >> 2;
          HEAP32[$st$27$1$s2] = $78$1;
          var $79 = HEAPF32[$6$s2 + ($1 * 9 | 0) + 2];
          var $80 = HEAPF32[$6$s2 + ($9 * 9 | 0) + 2];
          var $cond_i_i4_i93 = $79 > $80 ? $79 : $80;
          var $81 = HEAPF32[$6$s2 + ($1 * 9 | 0) + 3];
          var $82 = HEAPF32[$6$s2 + ($9 * 9 | 0) + 3];
          var $cond_i2_i8_i97 = $81 > $82 ? $81 : $82;
          var $83 = $0 + $iA * 36 + 8 | 0;
          var $84 = (tempDoubleF32[0] = $cond_i_i4_i93, tempDoubleI32[0]);
          var $85$0 = $84;
          var $86 = (tempDoubleF32[0] = $cond_i2_i8_i97, tempDoubleI32[0]);
          var $89$0 = 0 | $85$0;
          var $89$1 = $86 | 0;
          var $st$55$0 = $83 | 0, $st$55$0$s2 = $st$55$0 >> 2;
          HEAP32[$st$55$0$s2] = $89$0;
          var $st$55$1 = $83 + 4 | 0, $st$55$1$s2 = $st$55$1 >> 2;
          HEAP32[$st$55$1$s2] = $89$1;
          var $90 = HEAPF32[$add_ptr28 >> 2];
          var $cond_i_i_i67 = $cond_i_i_i84 < $90 ? $cond_i_i_i84 : $90;
          var $91 = HEAPF32[$0$s2 + ($iA * 9 | 0) + 1];
          var $92 = HEAPF32[$6$s2 + ($10 * 9 | 0) + 1];
          var $cond_i2_i_i71 = $91 < $92 ? $91 : $92;
          var $93 = $add_ptr18;
          var $94 = (tempDoubleF32[0] = $cond_i_i_i67, tempDoubleI32[0]);
          var $95$0 = $94;
          var $96 = (tempDoubleF32[0] = $cond_i2_i_i71, tempDoubleI32[0]);
          var $99$0 = 0 | $95$0;
          var $99$1 = $96 | 0;
          var $st$80$0 = $93 | 0, $st$80$0$s2 = $st$80$0 >> 2;
          HEAP32[$st$80$0$s2] = $99$0;
          var $st$80$1 = $93 + 4 | 0, $st$80$1$s2 = $st$80$1 >> 2;
          HEAP32[$st$80$1$s2] = $99$1;
          var $100 = HEAPF32[$0$s2 + ($iA * 9 | 0) + 2];
          var $101 = HEAPF32[$6$s2 + ($10 * 9 | 0) + 2];
          var $cond_i_i4_i76 = $100 > $101 ? $100 : $101;
          var $102 = HEAPF32[$0$s2 + ($iA * 9 | 0) + 3];
          var $103 = HEAPF32[$6$s2 + ($10 * 9 | 0) + 3];
          var $cond_i2_i8_i80 = $102 > $103 ? $102 : $103;
          var $104 = $6 + $3 * 36 + 8 | 0;
          var $105 = (tempDoubleF32[0] = $cond_i_i4_i76, tempDoubleI32[0]);
          var $106$0 = $105;
          var $107 = (tempDoubleF32[0] = $cond_i2_i8_i80, tempDoubleI32[0]);
          var $110$0 = 0 | $106$0;
          var $110$1 = $107 | 0;
          var $st$108$0 = $104 | 0, $st$108$0$s2 = $st$108$0 >> 2;
          HEAP32[$st$108$0$s2] = $110$0;
          var $st$108$1 = $104 + 4 | 0, $st$108$1$s2 = $st$108$1 >> 2;
          HEAP32[$st$108$1$s2] = $110$1;
          var $111 = HEAP32[$height20$s2];
          var $112 = HEAP32[$height73$s2];
          var $cond_i63 = ($111 | 0) > ($112 | 0) ? $111 : $112;
          var $add107 = $cond_i63 + 1 | 0;
          HEAP32[$height$s2] = $add107;
          var $113 = HEAP32[$height74$s2];
          var $cond_i61 = ($add107 | 0) > ($113 | 0) ? $add107 : $113;
          var $storemerge1_in = $cond_i61;
        }
        var $storemerge1_in;
        HEAP32[$height19$s2] = $storemerge1_in + 1 | 0;
        var $retval_0 = $3;
      } else {
        if (($sub | 0) >= -1) {
          var $retval_0 = $iA;
          break;
        }
        var $child1118 = $6 + $1 * 36 + 24 | 0;
        var $114 = HEAP32[$child1118 >> 2];
        var $child2119$s2 = ($6 + $1 * 36 + 28 | 0) >> 2;
        var $115 = HEAP32[$child2119$s2];
        var $add_ptr121 = $6 + $114 * 36 | 0;
        var $add_ptr123 = $6 + $115 * 36 | 0;
        var $cmp124 = ($114 | 0) > -1;
        do {
          if ($cmp124) {
            if (($114 | 0) < (HEAP32[$this$s2 + 3] | 0)) {
              __label__ = 32;
              break;
            }
            __label__ = 31;
            break;
          } else {
            __label__ = 31;
          }
        } while (0);
        if (__label__ == 31) {
          ___assert_func(STRING_TABLE.__str14 | 0, 467, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi | 0, STRING_TABLE.__str1422 | 0);
        }
        var $cmp131 = ($115 | 0) > -1;
        do {
          if ($cmp131) {
            if (($115 | 0) < (HEAP32[$this$s2 + 3] | 0)) {
              __label__ = 35;
              break;
            }
            __label__ = 34;
            break;
          } else {
            __label__ = 34;
          }
        } while (0);
        if (__label__ == 34) {
          ___assert_func(STRING_TABLE.__str14 | 0, 468, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi | 0, STRING_TABLE.__str15 | 0);
        }
        HEAP32[$child1118 >> 2] = $iA;
        var $parent139 = $0 + $iA * 36 + 20 | 0;
        var $118 = HEAP32[$parent139 >> 2];
        var $parent140$s2 = ($6 + $1 * 36 + 20 | 0) >> 2;
        HEAP32[$parent140$s2] = $118;
        HEAP32[$parent139 >> 2] = $1;
        var $119 = HEAP32[$parent140$s2];
        if (($119 | 0) == -1) {
          HEAP32[$this$s2] = $1;
        } else {
          var $120 = HEAP32[$m_nodes$s2];
          var $child1148 = $120 + $119 * 36 + 24 | 0;
          if ((HEAP32[$child1148 >> 2] | 0) == ($iA | 0)) {
            HEAP32[$child1148 >> 2] = $1;
          } else {
            if ((HEAP32[($120 + 28 >> 2) + ($119 * 9 | 0)] | 0) == ($iA | 0)) {
              var $124 = $119;
              var $123 = $120;
            } else {
              ___assert_func(STRING_TABLE.__str14 | 0, 484, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi | 0, STRING_TABLE.__str16 | 0);
              var $124 = HEAP32[$parent140$s2];
              var $123 = HEAP32[$m_nodes$s2];
            }
            var $123;
            var $124;
            HEAP32[($123 + 28 >> 2) + ($124 * 9 | 0)] = $1;
          }
        }
        var $height172$s2 = ($6 + $114 * 36 + 32 | 0) >> 2;
        var $height173$s2 = ($6 + $115 * 36 + 32 | 0) >> 2;
        if ((HEAP32[$height172$s2] | 0) > (HEAP32[$height173$s2] | 0)) {
          HEAP32[$child2119$s2] = $114;
          HEAP32[$child1_i$s2] = $115;
          var $parent178 = $6 + $115 * 36 + 20 | 0;
          HEAP32[$parent178 >> 2] = $iA;
          var $127 = HEAPF32[$add_ptr18 >> 2];
          var $128 = HEAPF32[$add_ptr123 >> 2];
          var $cond_i_i_i46 = $127 < $128 ? $127 : $128;
          var $129 = HEAPF32[$6$s2 + ($3 * 9 | 0) + 1];
          var $130 = HEAPF32[$6$s2 + ($115 * 9 | 0) + 1];
          var $cond_i2_i_i50 = $129 < $130 ? $129 : $130;
          var $131 = $add_ptr;
          var $132 = (tempDoubleF32[0] = $cond_i_i_i46, tempDoubleI32[0]);
          var $133$0 = $132;
          var $134 = (tempDoubleF32[0] = $cond_i2_i_i50, tempDoubleI32[0]);
          var $137$0 = 0 | $133$0;
          var $137$1 = $134 | 0;
          var $st$27$0 = $131 | 0, $st$27$0$s2 = $st$27$0 >> 2;
          HEAP32[$st$27$0$s2] = $137$0;
          var $st$27$1 = $131 + 4 | 0, $st$27$1$s2 = $st$27$1 >> 2;
          HEAP32[$st$27$1$s2] = $137$1;
          var $138 = HEAPF32[$6$s2 + ($3 * 9 | 0) + 2];
          var $139 = HEAPF32[$6$s2 + ($115 * 9 | 0) + 2];
          var $cond_i_i4_i55 = $138 > $139 ? $138 : $139;
          var $140 = HEAPF32[$6$s2 + ($3 * 9 | 0) + 3];
          var $141 = HEAPF32[$6$s2 + ($115 * 9 | 0) + 3];
          var $cond_i2_i8_i59 = $140 > $141 ? $140 : $141;
          var $142 = $0 + $iA * 36 + 8 | 0;
          var $143 = (tempDoubleF32[0] = $cond_i_i4_i55, tempDoubleI32[0]);
          var $144$0 = $143;
          var $145 = (tempDoubleF32[0] = $cond_i2_i8_i59, tempDoubleI32[0]);
          var $148$0 = 0 | $144$0;
          var $148$1 = $145 | 0;
          var $st$55$0 = $142 | 0, $st$55$0$s2 = $st$55$0 >> 2;
          HEAP32[$st$55$0$s2] = $148$0;
          var $st$55$1 = $142 + 4 | 0, $st$55$1$s2 = $st$55$1 >> 2;
          HEAP32[$st$55$1$s2] = $148$1;
          var $149 = HEAPF32[$add_ptr121 >> 2];
          var $cond_i_i_i29 = $cond_i_i_i46 < $149 ? $cond_i_i_i46 : $149;
          var $150 = HEAPF32[$0$s2 + ($iA * 9 | 0) + 1];
          var $151 = HEAPF32[$6$s2 + ($114 * 9 | 0) + 1];
          var $cond_i2_i_i33 = $150 < $151 ? $150 : $151;
          var $152 = $add_ptr16;
          var $153 = (tempDoubleF32[0] = $cond_i_i_i29, tempDoubleI32[0]);
          var $154$0 = $153;
          var $155 = (tempDoubleF32[0] = $cond_i2_i_i33, tempDoubleI32[0]);
          var $158$0 = 0 | $154$0;
          var $158$1 = $155 | 0;
          var $st$80$0 = $152 | 0, $st$80$0$s2 = $st$80$0 >> 2;
          HEAP32[$st$80$0$s2] = $158$0;
          var $st$80$1 = $152 + 4 | 0, $st$80$1$s2 = $st$80$1 >> 2;
          HEAP32[$st$80$1$s2] = $158$1;
          var $159 = HEAPF32[$0$s2 + ($iA * 9 | 0) + 2];
          var $160 = HEAPF32[$6$s2 + ($114 * 9 | 0) + 2];
          var $cond_i_i4_i38 = $159 > $160 ? $159 : $160;
          var $161 = HEAPF32[$0$s2 + ($iA * 9 | 0) + 3];
          var $162 = HEAPF32[$6$s2 + ($114 * 9 | 0) + 3];
          var $cond_i2_i8_i42 = $161 > $162 ? $161 : $162;
          var $163 = $6 + $1 * 36 + 8 | 0;
          var $164 = (tempDoubleF32[0] = $cond_i_i4_i38, tempDoubleI32[0]);
          var $165$0 = $164;
          var $166 = (tempDoubleF32[0] = $cond_i2_i8_i42, tempDoubleI32[0]);
          var $169$0 = 0 | $165$0;
          var $169$1 = $166 | 0;
          var $st$108$0 = $163 | 0, $st$108$0$s2 = $st$108$0 >> 2;
          HEAP32[$st$108$0$s2] = $169$0;
          var $st$108$1 = $163 + 4 | 0, $st$108$1$s2 = $st$108$1 >> 2;
          HEAP32[$st$108$1$s2] = $169$1;
          var $170 = HEAP32[$height19$s2];
          var $171 = HEAP32[$height173$s2];
          var $cond_i25 = ($170 | 0) > ($171 | 0) ? $170 : $171;
          var $add188 = $cond_i25 + 1 | 0;
          HEAP32[$height$s2] = $add188;
          var $172 = HEAP32[$height172$s2];
          var $cond_i23 = ($add188 | 0) > ($172 | 0) ? $add188 : $172;
          var $storemerge_in = $cond_i23;
        } else {
          HEAP32[$child2119$s2] = $115;
          HEAP32[$child1_i$s2] = $114;
          var $parent198 = $6 + $114 * 36 + 20 | 0;
          HEAP32[$parent198 >> 2] = $iA;
          var $173 = HEAPF32[$add_ptr18 >> 2];
          var $174 = HEAPF32[$add_ptr121 >> 2];
          var $cond_i_i_i8 = $173 < $174 ? $173 : $174;
          var $175 = HEAPF32[$6$s2 + ($3 * 9 | 0) + 1];
          var $176 = HEAPF32[$6$s2 + ($114 * 9 | 0) + 1];
          var $cond_i2_i_i12 = $175 < $176 ? $175 : $176;
          var $177 = $add_ptr;
          var $178 = (tempDoubleF32[0] = $cond_i_i_i8, tempDoubleI32[0]);
          var $179$0 = $178;
          var $180 = (tempDoubleF32[0] = $cond_i2_i_i12, tempDoubleI32[0]);
          var $183$0 = 0 | $179$0;
          var $183$1 = $180 | 0;
          var $st$27$0 = $177 | 0, $st$27$0$s2 = $st$27$0 >> 2;
          HEAP32[$st$27$0$s2] = $183$0;
          var $st$27$1 = $177 + 4 | 0, $st$27$1$s2 = $st$27$1 >> 2;
          HEAP32[$st$27$1$s2] = $183$1;
          var $184 = HEAPF32[$6$s2 + ($3 * 9 | 0) + 2];
          var $185 = HEAPF32[$6$s2 + ($114 * 9 | 0) + 2];
          var $cond_i_i4_i17 = $184 > $185 ? $184 : $185;
          var $186 = HEAPF32[$6$s2 + ($3 * 9 | 0) + 3];
          var $187 = HEAPF32[$6$s2 + ($114 * 9 | 0) + 3];
          var $cond_i2_i8_i21 = $186 > $187 ? $186 : $187;
          var $188 = $0 + $iA * 36 + 8 | 0;
          var $189 = (tempDoubleF32[0] = $cond_i_i4_i17, tempDoubleI32[0]);
          var $190$0 = $189;
          var $191 = (tempDoubleF32[0] = $cond_i2_i8_i21, tempDoubleI32[0]);
          var $194$0 = 0 | $190$0;
          var $194$1 = $191 | 0;
          var $st$55$0 = $188 | 0, $st$55$0$s2 = $st$55$0 >> 2;
          HEAP32[$st$55$0$s2] = $194$0;
          var $st$55$1 = $188 + 4 | 0, $st$55$1$s2 = $st$55$1 >> 2;
          HEAP32[$st$55$1$s2] = $194$1;
          var $195 = HEAPF32[$add_ptr123 >> 2];
          var $cond_i_i_i = $cond_i_i_i8 < $195 ? $cond_i_i_i8 : $195;
          var $196 = HEAPF32[$0$s2 + ($iA * 9 | 0) + 1];
          var $197 = HEAPF32[$6$s2 + ($115 * 9 | 0) + 1];
          var $cond_i2_i_i = $196 < $197 ? $196 : $197;
          var $198 = $add_ptr16;
          var $199 = (tempDoubleF32[0] = $cond_i_i_i, tempDoubleI32[0]);
          var $200$0 = $199;
          var $201 = (tempDoubleF32[0] = $cond_i2_i_i, tempDoubleI32[0]);
          var $204$0 = 0 | $200$0;
          var $204$1 = $201 | 0;
          var $st$80$0 = $198 | 0, $st$80$0$s2 = $st$80$0 >> 2;
          HEAP32[$st$80$0$s2] = $204$0;
          var $st$80$1 = $198 + 4 | 0, $st$80$1$s2 = $st$80$1 >> 2;
          HEAP32[$st$80$1$s2] = $204$1;
          var $205 = HEAPF32[$0$s2 + ($iA * 9 | 0) + 2];
          var $206 = HEAPF32[$6$s2 + ($115 * 9 | 0) + 2];
          var $cond_i_i4_i = $205 > $206 ? $205 : $206;
          var $207 = HEAPF32[$0$s2 + ($iA * 9 | 0) + 3];
          var $208 = HEAPF32[$6$s2 + ($115 * 9 | 0) + 3];
          var $cond_i2_i8_i = $207 > $208 ? $207 : $208;
          var $209 = $6 + $1 * 36 + 8 | 0;
          var $210 = (tempDoubleF32[0] = $cond_i_i4_i, tempDoubleI32[0]);
          var $211$0 = $210;
          var $212 = (tempDoubleF32[0] = $cond_i2_i8_i, tempDoubleI32[0]);
          var $215$0 = 0 | $211$0;
          var $215$1 = $212 | 0;
          var $st$108$0 = $209 | 0, $st$108$0$s2 = $st$108$0 >> 2;
          HEAP32[$st$108$0$s2] = $215$0;
          var $st$108$1 = $209 + 4 | 0, $st$108$1$s2 = $st$108$1 >> 2;
          HEAP32[$st$108$1$s2] = $215$1;
          var $216 = HEAP32[$height19$s2];
          var $217 = HEAP32[$height172$s2];
          var $cond_i4 = ($216 | 0) > ($217 | 0) ? $216 : $217;
          var $add208 = $cond_i4 + 1 | 0;
          HEAP32[$height$s2] = $add208;
          var $218 = HEAP32[$height173$s2];
          var $cond_i = ($add208 | 0) > ($218 | 0) ? $add208 : $218;
          var $storemerge_in = $cond_i;
        }
        var $storemerge_in;
        HEAP32[$height20$s2] = $storemerge_in + 1 | 0;
        var $retval_0 = $1;
      }
    }
  } while (0);
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZNK13b2DynamicTree13ComputeHeightEi($this, $nodeId) {
  var __label__;
  var $cmp = ($nodeId | 0) > -1;
  do {
    if ($cmp) {
      if ((HEAP32[$this + 12 >> 2] | 0) > ($nodeId | 0)) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str14 | 0, 563, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree13ComputeHeightEi | 0, STRING_TABLE.__str216 | 0);
  }
  var $1 = HEAP32[$this + 4 >> 2];
  var $2 = HEAP32[($1 + 24 >> 2) + ($nodeId * 9 | 0)];
  if (($2 | 0) == -1) {
    return 0;
  } else {
    var $call3 = __ZNK13b2DynamicTree13ComputeHeightEi($this, $2);
    var $3 = HEAP32[($1 + 28 >> 2) + ($nodeId * 9 | 0)];
    var $call4 = __ZNK13b2DynamicTree13ComputeHeightEi($this, $3);
    var $cond_i = ($call3 | 0) > ($call4 | 0) ? $call3 : $call4;
    return $cond_i + 1 | 0;
  }
  return null;
}

function __ZNK13b2DynamicTree13ComputeHeightEv($this) {
  var $0 = HEAP32[$this >> 2];
  var $call = __ZNK13b2DynamicTree13ComputeHeightEi($this, $0);
  return $call;
  return null;
}

function __ZNK13b2DynamicTree17ValidateStructureEi($this, $index) {
  var $3$s2;
  var $m_nodes$s2;
  var __label__;
  var $m_root = $this | 0;
  var $m_nodes$s2 = ($this + 4 | 0) >> 2;
  var $m_nodeCapacity = $this + 12 | 0;
  var $index_tr = $index;
  while (1) {
    var $index_tr;
    if (($index_tr | 0) == -1) {
      break;
    }
    var $cmp2 = (HEAP32[$m_root >> 2] | 0) == ($index_tr | 0);
    do {
      if ($cmp2) {
        if ((HEAP32[(HEAP32[$m_nodes$s2] + 20 >> 2) + ($index_tr * 9 | 0)] | 0) == -1) {
          break;
        }
        ___assert_func(STRING_TABLE.__str14 | 0, 591, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi | 0, STRING_TABLE.__str1723 | 0);
      }
    } while (0);
    var $3$s2 = HEAP32[$m_nodes$s2] >> 2;
    var $4 = HEAP32[$3$s2 + ($index_tr * 9 | 0) + 6];
    var $5 = HEAP32[$3$s2 + ($index_tr * 9 | 0) + 7];
    if (($4 | 0) == -1) {
      if (($5 | 0) != -1) {
        ___assert_func(STRING_TABLE.__str14 | 0, 602, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi | 0, STRING_TABLE.__str19 | 0);
      }
      if ((HEAP32[$3$s2 + ($index_tr * 9 | 0) + 8] | 0) == 0) {
        break;
      }
      ___assert_func(STRING_TABLE.__str14 | 0, 603, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi | 0, STRING_TABLE.__str20 | 0);
      break;
    }
    var $cmp23 = ($4 | 0) > -1;
    do {
      if ($cmp23) {
        if (($4 | 0) < (HEAP32[$m_nodeCapacity >> 2] | 0)) {
          __label__ = 13;
          break;
        }
        __label__ = 12;
        break;
      } else {
        __label__ = 12;
      }
    } while (0);
    if (__label__ == 12) {
      ___assert_func(STRING_TABLE.__str14 | 0, 607, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi | 0, STRING_TABLE.__str21 | 0);
    }
    var $cmp28 = ($5 | 0) > -1;
    do {
      if ($cmp28) {
        if (($5 | 0) < (HEAP32[$m_nodeCapacity >> 2] | 0)) {
          __label__ = 16;
          break;
        }
        __label__ = 15;
        break;
      } else {
        __label__ = 15;
      }
    } while (0);
    if (__label__ == 15) {
      ___assert_func(STRING_TABLE.__str14 | 0, 608, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi | 0, STRING_TABLE.__str22 | 0);
    }
    var $9 = HEAP32[$m_nodes$s2];
    if ((HEAP32[($9 + 20 >> 2) + ($4 * 9 | 0)] | 0) == ($index_tr | 0)) {
      var $11 = $9;
    } else {
      ___assert_func(STRING_TABLE.__str14 | 0, 610, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi | 0, STRING_TABLE.__str23 | 0);
      var $11 = HEAP32[$m_nodes$s2];
    }
    var $11;
    if ((HEAP32[($11 + 20 >> 2) + ($5 * 9 | 0)] | 0) != ($index_tr | 0)) {
      ___assert_func(STRING_TABLE.__str14 | 0, 611, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi | 0, STRING_TABLE.__str24 | 0);
    }
    __ZNK13b2DynamicTree17ValidateStructureEi($this, $4);
    var $index_tr = $5;
  }
  return;
  return;
}

function __ZNK13b2DynamicTree15ValidateMetricsEi($this, $index) {
  var $10$s2;
  var $0$s2;
  var $m_nodes$s2;
  var __label__;
  var $m_nodes$s2 = ($this + 4 | 0) >> 2;
  var $m_nodeCapacity = $this + 12 | 0;
  var $index_tr = $index;
  while (1) {
    var $index_tr;
    if (($index_tr | 0) == -1) {
      break;
    }
    var $0$s2 = HEAP32[$m_nodes$s2] >> 2;
    var $1 = HEAP32[$0$s2 + ($index_tr * 9 | 0) + 6];
    var $2 = HEAP32[$0$s2 + ($index_tr * 9 | 0) + 7];
    if (($1 | 0) == -1) {
      if (($2 | 0) != -1) {
        ___assert_func(STRING_TABLE.__str14 | 0, 632, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi | 0, STRING_TABLE.__str19 | 0);
      }
      if ((HEAP32[$0$s2 + ($index_tr * 9 | 0) + 8] | 0) == 0) {
        break;
      }
      ___assert_func(STRING_TABLE.__str14 | 0, 633, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi | 0, STRING_TABLE.__str20 | 0);
      break;
    }
    var $cmp15 = ($1 | 0) > -1;
    do {
      if ($cmp15) {
        if (($1 | 0) < (HEAP32[$m_nodeCapacity >> 2] | 0)) {
          __label__ = 10;
          break;
        }
        __label__ = 9;
        break;
      } else {
        __label__ = 9;
      }
    } while (0);
    if (__label__ == 9) {
      ___assert_func(STRING_TABLE.__str14 | 0, 637, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi | 0, STRING_TABLE.__str21 | 0);
    }
    var $cmp20 = ($2 | 0) > -1;
    do {
      if ($cmp20) {
        if (($2 | 0) < (HEAP32[$m_nodeCapacity >> 2] | 0)) {
          __label__ = 13;
          break;
        }
        __label__ = 12;
        break;
      } else {
        __label__ = 12;
      }
    } while (0);
    if (__label__ == 12) {
      ___assert_func(STRING_TABLE.__str14 | 0, 638, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi | 0, STRING_TABLE.__str22 | 0);
    }
    var $6 = HEAP32[$m_nodes$s2];
    var $7 = HEAP32[($6 + 32 >> 2) + ($1 * 9 | 0)];
    var $8 = HEAP32[($6 + 32 >> 2) + ($2 * 9 | 0)];
    var $cond_i = ($7 | 0) > ($8 | 0) ? $7 : $8;
    if ((HEAP32[$0$s2 + ($index_tr * 9 | 0) + 8] | 0) == ($cond_i + 1 | 0)) {
      var $10 = $6, $10$s2 = $10 >> 2;
    } else {
      ___assert_func(STRING_TABLE.__str14 | 0, 644, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi | 0, STRING_TABLE.__str25 | 0);
      var $10 = HEAP32[$m_nodes$s2], $10$s2 = $10 >> 2;
    }
    var $10;
    var $11 = HEAPF32[$10$s2 + ($1 * 9 | 0)];
    var $12 = HEAPF32[$10$s2 + ($2 * 9 | 0)];
    var $cond_i_i_i = $11 < $12 ? $11 : $12;
    var $13 = HEAPF32[$10$s2 + ($1 * 9 | 0) + 1];
    var $14 = HEAPF32[$10$s2 + ($2 * 9 | 0) + 1];
    var $15 = HEAPF32[$10$s2 + ($1 * 9 | 0) + 2];
    var $16 = HEAPF32[$10$s2 + ($2 * 9 | 0) + 2];
    var $cond_i_i4_i = $15 > $16 ? $15 : $16;
    var $17 = HEAPF32[$10$s2 + ($1 * 9 | 0) + 3];
    var $18 = HEAPF32[$10$s2 + ($2 * 9 | 0) + 3];
    var $cond_i2_i8_i = $17 > $18 ? $17 : $18;
    var $cmp_i5 = $cond_i_i_i == HEAPF32[$0$s2 + ($index_tr * 9 | 0)];
    do {
      if ($cmp_i5) {
        var $cond_i2_i_i = $13 < $14 ? $13 : $14;
        if ($cond_i2_i_i == HEAPF32[$0$s2 + ($index_tr * 9 | 0) + 1]) {
          __label__ = 18;
          break;
        }
        __label__ = 17;
        break;
      } else {
        __label__ = 17;
      }
    } while (0);
    if (__label__ == 17) {
      ___assert_func(STRING_TABLE.__str14 | 0, 649, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi | 0, STRING_TABLE.__str26 | 0);
    }
    var $cmp_i2 = $cond_i_i4_i == HEAPF32[$0$s2 + ($index_tr * 9 | 0) + 2];
    do {
      if ($cmp_i2) {
        if ($cond_i2_i8_i == HEAPF32[$0$s2 + ($index_tr * 9 | 0) + 3]) {
          __label__ = 21;
          break;
        }
        __label__ = 20;
        break;
      } else {
        __label__ = 20;
      }
    } while (0);
    if (__label__ == 20) {
      ___assert_func(STRING_TABLE.__str14 | 0, 650, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi | 0, STRING_TABLE.__str27 | 0);
    }
    __ZNK13b2DynamicTree15ValidateMetricsEi($this, $1);
    var $index_tr = $2;
  }
  return;
  return;
}

function __ZNK13b2DynamicTree8ValidateEv($this) {
  var $m_root$s2;
  var __label__;
  var $m_root$s2 = ($this | 0) >> 2;
  var $0 = HEAP32[$m_root$s2];
  __ZNK13b2DynamicTree17ValidateStructureEi($this, $0);
  var $1 = HEAP32[$m_root$s2];
  __ZNK13b2DynamicTree15ValidateMetricsEi($this, $1);
  var $freeIndex_02 = HEAP32[$this + 16 >> 2];
  var $cmp5 = ($freeIndex_02 | 0) == -1;
  $while_end$$while_body_lr_ph$37 : do {
    if ($cmp5) {
      var $freeCount_0_lcssa = 0;
    } else {
      var $m_nodeCapacity = $this + 12 | 0;
      var $m_nodes = $this + 4 | 0;
      var $freeCount_06 = 0;
      var $freeIndex_07 = $freeIndex_02;
      while (1) {
        var $freeIndex_07;
        var $freeCount_06;
        var $cmp3 = ($freeIndex_07 | 0) > -1;
        do {
          if ($cmp3) {
            if (($freeIndex_07 | 0) < (HEAP32[$m_nodeCapacity >> 2] | 0)) {
              __label__ = 5;
              break;
            }
            __label__ = 4;
            break;
          } else {
            __label__ = 4;
          }
        } while (0);
        if (__label__ == 4) {
          ___assert_func(STRING_TABLE.__str14 | 0, 665, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree8ValidateEv | 0, STRING_TABLE.__str2824 | 0);
        }
        var $inc = $freeCount_06 + 1 | 0;
        var $freeIndex_0 = HEAP32[(HEAP32[$m_nodes >> 2] + 20 >> 2) + ($freeIndex_07 * 9 | 0)];
        if (($freeIndex_0 | 0) == -1) {
          var $freeCount_0_lcssa = $inc;
          break $while_end$$while_body_lr_ph$37;
        }
        var $freeCount_06 = $inc;
        var $freeIndex_07 = $freeIndex_0;
      }
    }
  } while (0);
  var $freeCount_0_lcssa;
  var $4 = HEAP32[$m_root$s2];
  if (($4 | 0) == -1) {
    var $retval_0_i = 0;
  } else {
    var $retval_0_i = HEAP32[(HEAP32[$this + 4 >> 2] + 32 >> 2) + ($4 * 9 | 0)];
  }
  var $retval_0_i;
  var $call_i = __ZNK13b2DynamicTree13ComputeHeightEi($this, $4);
  if (($retval_0_i | 0) != ($call_i | 0)) {
    ___assert_func(STRING_TABLE.__str14 | 0, 670, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree8ValidateEv | 0, STRING_TABLE.__str29 | 0);
  }
  if ((HEAP32[$this + 8 >> 2] + $freeCount_0_lcssa | 0) != (HEAP32[$this + 12 >> 2] | 0)) {
    ___assert_func(STRING_TABLE.__str14 | 0, 672, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree8ValidateEv | 0, STRING_TABLE.__str30 | 0);
  }
  return;
  return;
}

function __ZNK13b2DynamicTree13GetMaxBalanceEv($this) {
  var $m_nodeCapacity = $this + 12 | 0;
  var $0 = HEAP32[$m_nodeCapacity >> 2];
  var $cmp4 = ($0 | 0) > 0;
  $for_body_lr_ph$$for_end$57 : do {
    if ($cmp4) {
      var $m_nodes = $this + 4 | 0;
      var $maxBalance_05 = 0;
      var $i_06 = 0;
      var $2 = HEAP32[$m_nodes >> 2];
      var $1 = $0;
      while (1) {
        var $1;
        var $2;
        var $i_06;
        var $maxBalance_05;
        if ((HEAP32[($2 + 32 >> 2) + ($i_06 * 9 | 0)] | 0) < 2) {
          var $maxBalance_1 = $maxBalance_05;
          var $11 = $2;
          var $10 = $1;
        } else {
          var $child1_i = $2 + $i_06 * 36 + 24 | 0;
          var $4 = HEAP32[$child1_i >> 2];
          if (($4 | 0) == -1) {
            ___assert_func(STRING_TABLE.__str14 | 0, 686, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree13GetMaxBalanceEv | 0, STRING_TABLE.__str31 | 0);
            var $6 = HEAP32[$child1_i >> 2];
            var $5 = HEAP32[$m_nodes >> 2];
            var $_pre7 = HEAP32[$m_nodeCapacity >> 2];
          } else {
            var $6 = $4;
            var $5 = $2;
            var $_pre7 = $1;
          }
          var $_pre7;
          var $5;
          var $6;
          var $sub = HEAP32[($5 + 32 >> 2) + (HEAP32[($2 + 28 >> 2) + ($i_06 * 9 | 0)] * 9 | 0)] - HEAP32[($5 + 32 >> 2) + ($6 * 9 | 0)] | 0;
          var $cond_i3 = ($sub | 0) > 0 ? $sub : -$sub | 0;
          var $cond_i = ($maxBalance_05 | 0) > ($cond_i3 | 0) ? $maxBalance_05 : $cond_i3;
          var $maxBalance_1 = $cond_i;
          var $11 = $5;
          var $10 = $_pre7;
        }
        var $10;
        var $11;
        var $maxBalance_1;
        var $inc = $i_06 + 1 | 0;
        if (($inc | 0) >= ($10 | 0)) {
          var $maxBalance_0_lcssa = $maxBalance_1;
          break $for_body_lr_ph$$for_end$57;
        }
        var $maxBalance_05 = $maxBalance_1;
        var $i_06 = $inc;
        var $2 = $11;
        var $1 = $10;
      }
    } else {
      var $maxBalance_0_lcssa = 0;
    }
  } while (0);
  var $maxBalance_0_lcssa;
  return $maxBalance_0_lcssa;
  return null;
}

function __ZN13b2DynamicTree15RebuildBottomUpEv($this) {
  var $13$s2;
  var $m_nodes$s2;
  var $1$s2;
  var $m_nodeCount$s2;
  var $m_nodeCount$s2 = ($this + 8 | 0) >> 2;
  var $mul = HEAP32[$m_nodeCount$s2] << 2;
  var $call_i = _malloc($mul);
  var $1 = $call_i, $1$s2 = $1 >> 2;
  var $m_nodeCapacity = $this + 12 | 0;
  var $2 = HEAP32[$m_nodeCapacity >> 2];
  var $cmp53 = ($2 | 0) > 0;
  $for_body_lr_ph$$while_end$69 : do {
    if ($cmp53) {
      var $m_nodes$s2 = ($this + 4 | 0) >> 2;
      var $m_freeList_i = $this + 16 | 0;
      var $i_054 = 0;
      var $count_055 = 0;
      var $3 = $2;
      while (1) {
        var $3;
        var $count_055;
        var $i_054;
        var $4 = HEAP32[$m_nodes$s2];
        if ((HEAP32[($4 + 32 >> 2) + ($i_054 * 9 | 0)] | 0) < 0) {
          var $count_1 = $count_055;
        } else {
          if ((HEAP32[($4 + 24 >> 2) + ($i_054 * 9 | 0)] | 0) == -1) {
            var $parent = $4 + $i_054 * 36 + 20 | 0;
            HEAP32[$parent >> 2] = -1;
            var $arrayidx9 = ($count_055 << 2) + $1 | 0;
            HEAP32[$arrayidx9 >> 2] = $i_054;
            var $count_1 = $count_055 + 1 | 0;
          } else {
            if (($3 | 0) <= ($i_054 | 0)) {
              ___assert_func(STRING_TABLE.__str14 | 0, 97, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi | 0, STRING_TABLE.__str216 | 0);
            }
            if ((HEAP32[$m_nodeCount$s2] | 0) <= 0) {
              ___assert_func(STRING_TABLE.__str14 | 0, 98, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi | 0, STRING_TABLE.__str317 | 0);
            }
            var $8 = HEAP32[$m_freeList_i >> 2];
            var $next_i = HEAP32[$m_nodes$s2] + $i_054 * 36 + 20 | 0;
            HEAP32[$next_i >> 2] = $8;
            var $height_i = HEAP32[$m_nodes$s2] + $i_054 * 36 + 32 | 0;
            HEAP32[$height_i >> 2] = -1;
            HEAP32[$m_freeList_i >> 2] = $i_054;
            var $dec_i = HEAP32[$m_nodeCount$s2] - 1 | 0;
            HEAP32[$m_nodeCount$s2] = $dec_i;
            var $count_1 = $count_055;
          }
        }
        var $count_1;
        var $inc11 = $i_054 + 1 | 0;
        var $12 = HEAP32[$m_nodeCapacity >> 2];
        if (($inc11 | 0) >= ($12 | 0)) {
          break;
        }
        var $i_054 = $inc11;
        var $count_055 = $count_1;
        var $3 = $12;
      }
      if (($count_1 | 0) <= 1) {
        break;
      }
      var $indvars_iv57 = $count_1;
      while (1) {
        var $indvars_iv57;
        var $13 = HEAP32[$m_nodes$s2], $13$s2 = $13 >> 2;
        var $jMin_044 = -1;
        var $iMin_045 = -1;
        var $minCost_046 = 3.4028234663852886e+38;
        var $i13_047 = 0;
        while (1) {
          var $i13_047;
          var $minCost_046;
          var $iMin_045;
          var $jMin_044;
          var $14 = HEAP32[($i13_047 << 2 >> 2) + $1$s2];
          var $tmp34 = HEAPF32[$13$s2 + ($14 * 9 | 0)];
          var $tmp35 = HEAPF32[$13$s2 + ($14 * 9 | 0) + 1];
          var $tmp31 = HEAPF32[$13$s2 + ($14 * 9 | 0) + 2];
          var $tmp32 = HEAPF32[$13$s2 + ($14 * 9 | 0) + 3];
          var $add = $i13_047 + 1 | 0;
          var $cmp2136 = ($add | 0) < ($indvars_iv57 | 0);
          $for_body22$$for_cond14_loopexit$90 : do {
            if ($cmp2136) {
              var $jMin_137 = $jMin_044;
              var $iMin_138 = $iMin_045;
              var $minCost_139 = $minCost_046;
              var $j_040 = $add;
              while (1) {
                var $j_040;
                var $minCost_139;
                var $iMin_138;
                var $jMin_137;
                var $15 = HEAP32[($j_040 << 2 >> 2) + $1$s2];
                var $tmp27 = HEAPF32[$13$s2 + ($15 * 9 | 0)];
                var $tmp28 = HEAPF32[$13$s2 + ($15 * 9 | 0) + 1];
                var $tmp = HEAPF32[$13$s2 + ($15 * 9 | 0) + 2];
                var $tmp25 = HEAPF32[$13$s2 + ($15 * 9 | 0) + 3];
                var $cond_i_i_i = $tmp34 < $tmp27 ? $tmp34 : $tmp27;
                var $cond_i2_i_i = $tmp35 < $tmp28 ? $tmp35 : $tmp28;
                var $cond_i_i4_i = $tmp31 > $tmp ? $tmp31 : $tmp;
                var $cond_i2_i8_i = $tmp32 > $tmp25 ? $tmp32 : $tmp25;
                var $mul_i = ($cond_i_i4_i - $cond_i_i_i + ($cond_i2_i8_i - $cond_i2_i_i)) * 2;
                var $cmp28 = $mul_i < $minCost_139;
                var $jMin_2 = $cmp28 ? $j_040 : $jMin_137;
                var $iMin_2 = $cmp28 ? $i13_047 : $iMin_138;
                var $minCost_2 = $cmp28 ? $mul_i : $minCost_139;
                var $inc32 = $j_040 + 1 | 0;
                if (($inc32 | 0) == ($indvars_iv57 | 0)) {
                  var $jMin_1_lcssa = $jMin_2;
                  var $iMin_1_lcssa = $iMin_2;
                  var $minCost_1_lcssa = $minCost_2;
                  break $for_body22$$for_cond14_loopexit$90;
                }
                var $jMin_137 = $jMin_2;
                var $iMin_138 = $iMin_2;
                var $minCost_139 = $minCost_2;
                var $j_040 = $inc32;
              }
            } else {
              var $jMin_1_lcssa = $jMin_044;
              var $iMin_1_lcssa = $iMin_045;
              var $minCost_1_lcssa = $minCost_046;
            }
          } while (0);
          var $minCost_1_lcssa;
          var $iMin_1_lcssa;
          var $jMin_1_lcssa;
          if (($add | 0) == ($indvars_iv57 | 0)) {
            break;
          }
          var $jMin_044 = $jMin_1_lcssa;
          var $iMin_045 = $iMin_1_lcssa;
          var $minCost_046 = $minCost_1_lcssa;
          var $i13_047 = $add;
        }
        var $arrayidx37 = ($iMin_1_lcssa << 2) + $1 | 0;
        var $16 = HEAP32[$arrayidx37 >> 2];
        var $arrayidx38 = ($jMin_1_lcssa << 2) + $1 | 0;
        var $17 = HEAP32[$arrayidx38 >> 2];
        var $call42 = __ZN13b2DynamicTree12AllocateNodeEv($this);
        var $18 = HEAP32[$m_nodes$s2];
        var $child146 = $18 + $call42 * 36 + 24 | 0;
        HEAP32[$child146 >> 2] = $16;
        var $child247 = $18 + $call42 * 36 + 28 | 0;
        HEAP32[$child247 >> 2] = $17;
        var $19 = HEAP32[$13$s2 + ($16 * 9 | 0) + 8];
        var $20 = HEAP32[$13$s2 + ($17 * 9 | 0) + 8];
        var $cond_i = ($19 | 0) > ($20 | 0) ? $19 : $20;
        var $add51 = $cond_i + 1 | 0;
        var $height52 = $18 + $call42 * 36 + 32 | 0;
        HEAP32[$height52 >> 2] = $add51;
        var $21 = HEAPF32[$13$s2 + ($16 * 9 | 0)];
        var $22 = HEAPF32[$13$s2 + ($17 * 9 | 0)];
        var $cond_i_i_i5 = $21 < $22 ? $21 : $22;
        var $23 = HEAPF32[$13$s2 + ($16 * 9 | 0) + 1];
        var $24 = HEAPF32[$13$s2 + ($17 * 9 | 0) + 1];
        var $cond_i2_i_i9 = $23 < $24 ? $23 : $24;
        var $25 = $18 + $call42 * 36 | 0;
        var $26 = (tempDoubleF32[0] = $cond_i_i_i5, tempDoubleI32[0]);
        var $27$0 = $26;
        var $28 = (tempDoubleF32[0] = $cond_i2_i_i9, tempDoubleI32[0]);
        var $31$0 = 0 | $27$0;
        var $31$1 = $28 | 0;
        var $st$43$0 = $25 | 0;
        HEAP32[$st$43$0 >> 2] = $31$0;
        var $st$43$1 = $25 + 4 | 0;
        HEAP32[$st$43$1 >> 2] = $31$1;
        var $32 = HEAPF32[$13$s2 + ($16 * 9 | 0) + 2];
        var $33 = HEAPF32[$13$s2 + ($17 * 9 | 0) + 2];
        var $cond_i_i4_i14 = $32 > $33 ? $32 : $33;
        var $34 = HEAPF32[$13$s2 + ($16 * 9 | 0) + 3];
        var $35 = HEAPF32[$13$s2 + ($17 * 9 | 0) + 3];
        var $cond_i2_i8_i18 = $34 > $35 ? $34 : $35;
        var $36 = $18 + $call42 * 36 + 8 | 0;
        var $37 = (tempDoubleF32[0] = $cond_i_i4_i14, tempDoubleI32[0]);
        var $38$0 = $37;
        var $39 = (tempDoubleF32[0] = $cond_i2_i8_i18, tempDoubleI32[0]);
        var $42$0 = 0 | $38$0;
        var $42$1 = $39 | 0;
        var $st$71$0 = $36 | 0;
        HEAP32[$st$71$0 >> 2] = $42$0;
        var $st$71$1 = $36 + 4 | 0;
        HEAP32[$st$71$1 >> 2] = $42$1;
        var $parent56 = $18 + $call42 * 36 + 20 | 0;
        HEAP32[$parent56 >> 2] = -1;
        var $parent57 = $13 + $16 * 36 + 20 | 0;
        HEAP32[$parent57 >> 2] = $call42;
        var $parent58 = $13 + $17 * 36 + 20 | 0;
        HEAP32[$parent58 >> 2] = $call42;
        var $indvars_iv_next58 = $indvars_iv57 - 1 | 0;
        var $43 = HEAP32[($indvars_iv_next58 << 2 >> 2) + $1$s2];
        HEAP32[$arrayidx38 >> 2] = $43;
        HEAP32[$arrayidx37 >> 2] = $call42;
        if (($indvars_iv_next58 | 0) <= 1) {
          break $for_body_lr_ph$$while_end$69;
        }
        var $indvars_iv57 = $indvars_iv_next58;
      }
    }
  } while (0);
  var $44 = HEAP32[$1$s2];
  HEAP32[$this >> 2] = $44;
  _free($call_i);
  __ZNK13b2DynamicTree8ValidateEv($this);
  return;
  return;
}

function __Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput($output, $input) {
  var $16$s2;
  var $15$s2;
  var $14$s2;
  var $13$s2;
  var $a_i6$s2;
  var $a0_i1$s2;
  var $a_i$s2;
  var $a0_i$s2;
  var $t$s2;
  var $state$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 308;
  var __label__;
  var $sweepA = __stackBase__;
  var $sweepB = __stackBase__ + 36;
  var $cache = __stackBase__ + 72;
  var $distanceInput = __stackBase__ + 84;
  var $distanceOutput = __stackBase__ + 176;
  var $fcn = __stackBase__ + 200;
  var $indexA = __stackBase__ + 300;
  var $indexB = __stackBase__ + 304;
  var $inc = HEAP32[_b2_toiCalls >> 2] + 1 | 0;
  HEAP32[_b2_toiCalls >> 2] = $inc;
  var $state$s2 = ($output | 0) >> 2;
  HEAP32[$state$s2] = 0;
  var $tMax = $input + 128 | 0;
  var $1 = HEAPF32[$tMax >> 2];
  var $t$s2 = ($output + 4 | 0) >> 2;
  HEAPF32[$t$s2] = $1;
  var $proxyA1 = $input | 0;
  var $proxyB2 = $input + 28 | 0;
  var $2 = $sweepA;
  var $3 = $input + 56 | 0;
  for (var $$src = $3 >> 2, $$dest = $2 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  var $4 = $sweepB;
  var $5 = $input + 92 | 0;
  for (var $$src = $5 >> 2, $$dest = $4 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  var $a0_i$s2 = ($sweepA + 24 | 0) >> 2;
  var $6 = HEAPF32[$a0_i$s2];
  var $div_i = $6 / 6.2831854820251465;
  var $call_i = _floorf($div_i);
  var $mul_i = $call_i * 6.2831854820251465;
  var $sub_i = $6 - $mul_i;
  HEAPF32[$a0_i$s2] = $sub_i;
  var $a_i$s2 = ($sweepA + 28 | 0) >> 2;
  var $sub3_i = HEAPF32[$a_i$s2] - $mul_i;
  HEAPF32[$a_i$s2] = $sub3_i;
  var $a0_i1$s2 = ($sweepB + 24 | 0) >> 2;
  var $8 = HEAPF32[$a0_i1$s2];
  var $div_i2 = $8 / 6.2831854820251465;
  var $call_i3 = _floorf($div_i2);
  var $mul_i4 = $call_i3 * 6.2831854820251465;
  var $sub_i5 = $8 - $mul_i4;
  HEAPF32[$a0_i1$s2] = $sub_i5;
  var $a_i6$s2 = ($sweepB + 28 | 0) >> 2;
  var $sub3_i7 = HEAPF32[$a_i6$s2] - $mul_i4;
  HEAPF32[$a_i6$s2] = $sub3_i7;
  var $10 = HEAPF32[$tMax >> 2];
  var $sub = HEAPF32[$input + 24 >> 2] + HEAPF32[$input + 52 >> 2] - .014999999664723873;
  var $cond_i = $sub < .004999999888241291 ? .004999999888241291 : $sub;
  if ($cond_i <= .0012499999720603228) {
    ___assert_func(STRING_TABLE.__str35 | 0, 280, STRING_TABLE.___PRETTY_FUNCTION____Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput | 0, STRING_TABLE.__str136 | 0);
  }
  HEAP16[$cache + 4 >> 1] = 0;
  var $13$s2 = $distanceInput >> 2;
  var $14$s2 = $input >> 2;
  HEAP32[$13$s2] = HEAP32[$14$s2];
  HEAP32[$13$s2 + 1] = HEAP32[$14$s2 + 1];
  HEAP32[$13$s2 + 2] = HEAP32[$14$s2 + 2];
  HEAP32[$13$s2 + 3] = HEAP32[$14$s2 + 3];
  HEAP32[$13$s2 + 4] = HEAP32[$14$s2 + 4];
  HEAP32[$13$s2 + 5] = HEAP32[$14$s2 + 5];
  HEAP32[$13$s2 + 6] = HEAP32[$14$s2 + 6];
  var $15$s2 = ($distanceInput + 28 | 0) >> 2;
  var $16$s2 = $proxyB2 >> 2;
  HEAP32[$15$s2] = HEAP32[$16$s2];
  HEAP32[$15$s2 + 1] = HEAP32[$16$s2 + 1];
  HEAP32[$15$s2 + 2] = HEAP32[$16$s2 + 2];
  HEAP32[$15$s2 + 3] = HEAP32[$16$s2 + 3];
  HEAP32[$15$s2 + 4] = HEAP32[$16$s2 + 4];
  HEAP32[$15$s2 + 5] = HEAP32[$16$s2 + 5];
  HEAP32[$15$s2 + 6] = HEAP32[$16$s2 + 6];
  HEAP8[$distanceInput + 88 | 0] = 0;
  var $x_i_i = $sweepA + 8 | 0;
  var $y_i_i = $sweepA + 12 | 0;
  var $x_i12_i = $sweepA + 16 | 0;
  var $y_i14_i = $sweepA + 20 | 0;
  var $x_i3_i = $sweepA | 0;
  var $y_i5_i = $sweepA + 4 | 0;
  var $x_i_i20 = $sweepB + 8 | 0;
  var $y_i_i22 = $sweepB + 12 | 0;
  var $x_i12_i24 = $sweepB + 16 | 0;
  var $y_i14_i26 = $sweepB + 20 | 0;
  var $x_i3_i39 = $sweepB | 0;
  var $y_i5_i41 = $sweepB + 4 | 0;
  var $transformA61_0 = $distanceInput + 56 | 0;
  var $transformA61_1 = $distanceInput + 60 | 0;
  var $transformA_1_0 = $distanceInput + 64 | 0;
  var $transformA_1_1 = $distanceInput + 68 | 0;
  var $transformB54_0 = $distanceInput + 72 | 0;
  var $transformB54_1 = $distanceInput + 76 | 0;
  var $transformB_1_0 = $distanceInput + 80 | 0;
  var $transformB_1_1 = $distanceInput + 84 | 0;
  var $distance = $distanceOutput + 16 | 0;
  var $add16 = $cond_i + .0012499999720603228;
  var $sub31 = $cond_i - .0012499999720603228;
  var $t1_0 = 0;
  var $iter_0 = 0;
  var $20 = $sub_i;
  var $19 = $sub3_i;
  var $18 = $sub_i5;
  var $17 = $sub3_i7;
  $for_cond$100 : while (1) {
    var $17;
    var $18;
    var $19;
    var $20;
    var $iter_0;
    var $t1_0;
    var $sub_i15 = 1 - $t1_0;
    var $add_i19_i = HEAPF32[$x_i_i >> 2] * $sub_i15 + HEAPF32[$x_i12_i >> 2] * $t1_0;
    var $add3_i_i = HEAPF32[$y_i_i >> 2] * $sub_i15 + HEAPF32[$y_i14_i >> 2] * $t1_0;
    var $add_i = $sub_i15 * $20 + $19 * $t1_0;
    var $call_i_i = _sinf($add_i);
    var $call2_i_i = _cosf($add_i);
    var $25 = HEAPF32[$x_i3_i >> 2];
    var $26 = HEAPF32[$y_i5_i >> 2];
    var $sub_i_i = $add_i19_i - ($call2_i_i * $25 - $call_i_i * $26);
    var $sub4_i_i = $add3_i_i - ($call_i_i * $25 + $call2_i_i * $26);
    var $add_i19_i28 = HEAPF32[$x_i_i20 >> 2] * $sub_i15 + HEAPF32[$x_i12_i24 >> 2] * $t1_0;
    var $add3_i_i29 = HEAPF32[$y_i_i22 >> 2] * $sub_i15 + HEAPF32[$y_i14_i26 >> 2] * $t1_0;
    var $add_i34 = $sub_i15 * $18 + $17 * $t1_0;
    var $call_i_i35 = _sinf($add_i34);
    var $call2_i_i37 = _cosf($add_i34);
    var $31 = HEAPF32[$x_i3_i39 >> 2];
    var $32 = HEAPF32[$y_i5_i41 >> 2];
    var $sub_i_i48 = $add_i19_i28 - ($call2_i_i37 * $31 - $call_i_i35 * $32);
    var $sub4_i_i50 = $add3_i_i29 - ($call_i_i35 * $31 + $call2_i_i37 * $32);
    HEAPF32[$transformA61_0 >> 2] = $sub_i_i;
    HEAPF32[$transformA61_1 >> 2] = $sub4_i_i;
    HEAPF32[$transformA_1_0 >> 2] = $call_i_i;
    HEAPF32[$transformA_1_1 >> 2] = $call2_i_i;
    HEAPF32[$transformB54_0 >> 2] = $sub_i_i48;
    HEAPF32[$transformB54_1 >> 2] = $sub4_i_i50;
    HEAPF32[$transformB_1_0 >> 2] = $call_i_i35;
    HEAPF32[$transformB_1_1 >> 2] = $call2_i_i37;
    __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($distanceOutput, $cache, $distanceInput);
    var $33 = HEAPF32[$distance >> 2];
    if ($33 <= 0) {
      HEAP32[$state$s2] = 2;
      HEAPF32[$t$s2] = 0;
      var $iter_1 = $iter_0;
      __label__ = 27;
      break;
    }
    if ($33 < $add16) {
      HEAP32[$state$s2] = 3;
      HEAPF32[$t$s2] = $t1_0;
      var $iter_1 = $iter_0;
      __label__ = 27;
      break;
    }
    var $call22 = __ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($fcn, $cache, $proxyA1, $sweepA, $proxyB2, $sweepB, $t1_0);
    var $pushBackIter_0 = 0;
    var $t2_0 = $10;
    while (1) {
      var $t2_0;
      var $pushBackIter_0;
      var $call24 = __ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($fcn, $indexA, $indexB, $t2_0);
      if ($call24 > $add16) {
        HEAP32[$state$s2] = 4;
        HEAPF32[$t$s2] = $10;
        __label__ = 23;
        break $for_cond$100;
      }
      if ($call24 > $sub31) {
        var $t1_1 = $t2_0;
      } else {
        var $34 = HEAPU32[$indexA >> 2];
        var $35 = HEAPU32[$indexB >> 2];
        var $call35 = __ZNK20b2SeparationFunction8EvaluateEiif($fcn, $34, $35, $t1_0);
        if ($call35 < $sub31) {
          HEAP32[$state$s2] = 1;
          HEAPF32[$t$s2] = $t1_0;
          __label__ = 23;
          break $for_cond$100;
        }
        if ($call35 <= $add16) {
          HEAP32[$state$s2] = 3;
          HEAPF32[$t$s2] = $t1_0;
          __label__ = 23;
          break $for_cond$100;
        }
        var $a2_0 = $t2_0;
        var $a1_0 = $t1_0;
        var $rootIterCount_0 = 0;
        var $s1_0 = $call35;
        var $s2_0 = $call24;
        while (1) {
          var $s2_0;
          var $s1_0;
          var $rootIterCount_0;
          var $a1_0;
          var $a2_0;
          if (($rootIterCount_0 & 1 | 0) == 0) {
            var $t49_0 = ($a1_0 + $a2_0) * .5;
          } else {
            var $t49_0 = $a1_0 + ($cond_i - $s1_0) * ($a2_0 - $a1_0) / ($s2_0 - $s1_0);
          }
          var $t49_0;
          var $call58 = __ZNK20b2SeparationFunction8EvaluateEiif($fcn, $34, $35, $t49_0);
          var $sub59 = $call58 - $cond_i;
          if ($sub59 > 0) {
            var $cond_i14 = $sub59;
          } else {
            var $cond_i14 = -$sub59;
          }
          var $cond_i14;
          if ($cond_i14 < .0012499999720603228) {
            var $rootIterCount_1 = $rootIterCount_0;
            var $t2_1 = $t49_0;
            break;
          }
          var $cmp64 = $call58 > $cond_i;
          var $s2_0_call58 = $cmp64 ? $s2_0 : $call58;
          var $call58_s1_0 = $cmp64 ? $call58 : $s1_0;
          var $t49_0_a1_0 = $cmp64 ? $t49_0 : $a1_0;
          var $a2_0_t49_0 = $cmp64 ? $a2_0 : $t49_0;
          var $inc68 = $rootIterCount_0 + 1 | 0;
          var $inc69 = HEAP32[_b2_toiRootIters >> 2] + 1 | 0;
          HEAP32[_b2_toiRootIters >> 2] = $inc69;
          if (($inc68 | 0) == 50) {
            var $rootIterCount_1 = 50;
            var $t2_1 = $t2_0;
            break;
          }
          var $a2_0 = $a2_0_t49_0;
          var $a1_0 = $t49_0_a1_0;
          var $rootIterCount_0 = $inc68;
          var $s1_0 = $call58_s1_0;
          var $s2_0 = $s2_0_call58;
        }
        var $t2_1;
        var $rootIterCount_1;
        var $37 = HEAP32[_b2_toiMaxRootIters >> 2];
        var $cond_i11 = ($37 | 0) > ($rootIterCount_1 | 0) ? $37 : $rootIterCount_1;
        HEAP32[_b2_toiMaxRootIters >> 2] = $cond_i11;
        var $inc74 = $pushBackIter_0 + 1 | 0;
        if (($inc74 | 0) != 8) {
          var $pushBackIter_0 = $inc74;
          var $t2_0 = $t2_1;
          continue;
        }
        var $t1_1 = $t1_0;
      }
      var $t1_1;
      var $inc79 = $iter_0 + 1 | 0;
      var $inc80 = HEAP32[_b2_toiIters >> 2] + 1 | 0;
      HEAP32[_b2_toiIters >> 2] = $inc80;
      if (($inc79 | 0) == 20) {
        HEAP32[$state$s2] = 1;
        HEAPF32[$t$s2] = $t1_1;
        var $iter_1 = 20;
        __label__ = 27;
        break $for_cond$100;
      }
      var $t1_0 = $t1_1;
      var $iter_0 = $inc79;
      var $20 = HEAPF32[$a0_i$s2];
      var $19 = HEAPF32[$a_i$s2];
      var $18 = HEAPF32[$a0_i1$s2];
      var $17 = HEAPF32[$a_i6$s2];
      continue $for_cond$100;
    }
  }
  if (__label__ == 23) {
    var $inc8066 = HEAP32[_b2_toiIters >> 2] + 1 | 0;
    HEAP32[_b2_toiIters >> 2] = $inc8066;
    var $iter_1 = $iter_0 + 1 | 0;
  }
  var $iter_1;
  var $40 = HEAP32[_b2_toiMaxIters >> 2];
  var $cond_i9 = ($40 | 0) > ($iter_1 | 0) ? $40 : $iter_1;
  HEAP32[_b2_toiMaxIters >> 2] = $cond_i9;
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($this, $cache, $proxyA, $sweepA, $proxyB, $sweepB, $t1) {
  var $st$4$1$s2;
  var $st$4$0$s2;
  var $m_proxyB$s2;
  var $m_proxyA$s2;
  var $this$s2 = $this >> 2;
  var $m_proxyA$s2 = ($this | 0) >> 2;
  HEAP32[$m_proxyA$s2] = $proxyA;
  var $m_proxyB$s2 = ($this + 4 | 0) >> 2;
  HEAP32[$m_proxyB$s2] = $proxyB;
  var $0 = HEAPU16[$cache + 4 >> 1];
  if (!($0 << 16 >> 16 != 0 & ($0 & 65535) < 3)) {
    ___assert_func(STRING_TABLE.__str35 | 0, 50, STRING_TABLE.___PRETTY_FUNCTION____ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f | 0, STRING_TABLE.__str541 | 0);
  }
  var $m_sweepA = $this + 8 | 0;
  var $1 = $m_sweepA;
  var $2 = $sweepA;
  for (var $$src = $2 >> 2, $$dest = $1 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  var $m_sweepB = $this + 44 | 0;
  var $3 = $m_sweepB;
  var $4 = $sweepB;
  for (var $$src = $4 >> 2, $$dest = $3 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  var $sub_i58 = 1 - $t1;
  var $add_i19_i = HEAPF32[$this$s2 + 4] * $sub_i58 + HEAPF32[$this$s2 + 6] * $t1;
  var $add3_i_i = HEAPF32[$this$s2 + 5] * $sub_i58 + HEAPF32[$this$s2 + 7] * $t1;
  var $add_i63 = $sub_i58 * HEAPF32[$this$s2 + 8] + HEAPF32[$this$s2 + 9] * $t1;
  var $call_i_i = _sinf($add_i63);
  var $call2_i_i = _cosf($add_i63);
  var $11 = HEAPF32[$m_sweepA >> 2];
  var $12 = HEAPF32[$this$s2 + 3];
  var $sub_i_i = $add_i19_i - ($call2_i_i * $11 - $call_i_i * $12);
  var $sub4_i_i = $add3_i_i - ($call_i_i * $11 + $call2_i_i * $12);
  var $add_i19_i75 = HEAPF32[$this$s2 + 13] * $sub_i58 + HEAPF32[$this$s2 + 15] * $t1;
  var $add3_i_i76 = HEAPF32[$this$s2 + 14] * $sub_i58 + HEAPF32[$this$s2 + 16] * $t1;
  var $add_i81 = $sub_i58 * HEAPF32[$this$s2 + 17] + HEAPF32[$this$s2 + 18] * $t1;
  var $call_i_i82 = _sinf($add_i81);
  var $call2_i_i84 = _cosf($add_i81);
  var $19 = HEAPF32[$m_sweepB >> 2];
  var $20 = HEAPF32[$this$s2 + 12];
  var $sub_i_i95 = $add_i19_i75 - ($call2_i_i84 * $19 - $call_i_i82 * $20);
  var $sub4_i_i97 = $add3_i_i76 - ($call_i_i82 * $19 + $call2_i_i84 * $20);
  var $cmp6 = $0 << 16 >> 16 == 1;
  do {
    if ($cmp6) {
      HEAP32[$this$s2 + 20] = 0;
      var $21 = HEAP32[$m_proxyA$s2];
      var $conv8 = HEAPU8[$cache + 6 | 0] & 255;
      if ((HEAP32[$21 + 20 >> 2] | 0) <= ($conv8 | 0)) {
        ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
      }
      var $25 = ($conv8 << 3) + HEAP32[$21 + 16 >> 2] | 0;
      var $st$4$0 = $25 | 0, $st$4$0$s2 = $st$4$0 >> 2;
      var $st$4$1 = $25 + 4 | 0, $st$4$1$s2 = $st$4$1 >> 2;
      var $26$1 = HEAP32[$st$4$1$s2];
      var $28 = (tempDoubleI32[0] = HEAP32[$st$4$0$s2], tempDoubleF32[0]);
      var $30 = (tempDoubleI32[0] = $26$1, tempDoubleF32[0]);
      var $31 = HEAP32[$m_proxyB$s2];
      var $conv11 = HEAPU8[$cache + 9 | 0] & 255;
      if ((HEAP32[$31 + 20 >> 2] | 0) <= ($conv11 | 0)) {
        ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
      }
      var $35 = ($conv11 << 3) + HEAP32[$31 + 16 >> 2] | 0;
      var $st$4$0 = $35 | 0, $st$4$0$s2 = $st$4$0 >> 2;
      var $st$4$1 = $35 + 4 | 0, $st$4$1$s2 = $st$4$1 >> 2;
      var $36$1 = HEAP32[$st$4$1$s2];
      var $38 = (tempDoubleI32[0] = HEAP32[$st$4$0$s2], tempDoubleF32[0]);
      var $40 = (tempDoubleI32[0] = $36$1, tempDoubleF32[0]);
      var $m_axis = $this + 92 | 0;
      var $sub_i148 = $call2_i_i84 * $38 - $call_i_i82 * $40 + $sub_i_i95 - ($call2_i_i * $28 - $call_i_i * $30 + $sub_i_i);
      var $sub3_i151 = $call_i_i82 * $38 + $call2_i_i84 * $40 + $sub4_i_i97 - ($call_i_i * $28 + $call2_i_i * $30 + $sub4_i_i);
      var $41 = $m_axis;
      var $42 = (tempDoubleF32[0] = $sub_i148, tempDoubleI32[0]);
      var $43$0 = $42;
      var $44 = (tempDoubleF32[0] = $sub3_i151, tempDoubleI32[0]);
      var $47$0 = 0 | $43$0;
      var $47$1 = $44 | 0;
      HEAP32[$41 >> 2] = $47$0;
      HEAP32[$41 + 4 >> 2] = $47$1;
      var $add_i_i180 = $sub_i148 * $sub_i148 + $sub3_i151 * $sub3_i151;
      var $call_i_i_i181 = _sqrtf($add_i_i180);
      if ($call_i_i_i181 < 1.1920928955078125e-7) {
        var $retval_0 = 0;
        break;
      }
      var $y_i_i178 = $this + 96 | 0;
      var $div_i183 = 1 / $call_i_i_i181;
      var $mul_i184 = $sub_i148 * $div_i183;
      HEAPF32[$m_axis >> 2] = $mul_i184;
      var $mul2_i185 = $sub3_i151 * $div_i183;
      HEAPF32[$y_i_i178 >> 2] = $mul2_i185;
      var $retval_0 = $call_i_i_i181;
    } else {
      var $arrayidx16 = $cache + 6 | 0;
      var $arrayidx19 = $cache + 7 | 0;
      var $m_type23 = $this + 80 | 0;
      if (HEAP8[$arrayidx16] << 24 >> 24 == HEAP8[$arrayidx19] << 24 >> 24) {
        HEAP32[$m_type23 >> 2] = 2;
        var $conv26 = HEAPU8[$cache + 9 | 0] & 255;
        var $m_count_i190 = $proxyB + 20 | 0;
        var $51 = HEAPU32[$m_count_i190 >> 2];
        if (($51 | 0) > ($conv26 | 0)) {
          var $52 = $51;
        } else {
          ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
          var $52 = HEAP32[$m_count_i190 >> 2];
        }
        var $52;
        var $m_vertices_i194 = $proxyB + 16 | 0;
        var $53 = HEAPU32[$m_vertices_i194 >> 2];
        var $54 = ($conv26 << 3) + $53 | 0;
        var $55$1 = HEAP32[$54 + 4 >> 2];
        var $57 = (tempDoubleI32[0] = HEAP32[$54 >> 2], tempDoubleF32[0]);
        var $59 = (tempDoubleI32[0] = $55$1, tempDoubleF32[0]);
        var $conv30 = HEAPU8[$cache + 10 | 0] & 255;
        if (($52 | 0) > ($conv30 | 0)) {
          var $61 = $53;
        } else {
          ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
          var $61 = HEAP32[$m_vertices_i194 >> 2];
        }
        var $61;
        var $62 = ($conv30 << 3) + $61 | 0;
        var $63$1 = HEAP32[$62 + 4 >> 2];
        var $65 = (tempDoubleI32[0] = HEAP32[$62 >> 2], tempDoubleF32[0]);
        var $67 = (tempDoubleI32[0] = $63$1, tempDoubleF32[0]);
        var $m_axis32 = $this + 92 | 0;
        var $sub3_i210 = $67 - $59;
        var $mul1_i224 = ($65 - $57) * -1;
        var $68 = $m_axis32;
        var $69 = (tempDoubleF32[0] = $sub3_i210, tempDoubleI32[0]);
        var $70$0 = $69;
        var $71 = (tempDoubleF32[0] = $mul1_i224, tempDoubleI32[0]);
        var $74$0 = 0 | $70$0;
        var $74$1 = $71 | 0;
        HEAP32[$68 >> 2] = $74$0;
        HEAP32[$68 + 4 >> 2] = $74$1;
        var $x_i_i272 = $m_axis32 | 0;
        var $y_i_i274 = $this + 96 | 0;
        var $add_i_i276 = $sub3_i210 * $sub3_i210 + $mul1_i224 * $mul1_i224;
        var $call_i_i_i277 = _sqrtf($add_i_i276);
        if ($call_i_i_i277 < 1.1920928955078125e-7) {
          var $76 = $sub3_i210;
          var $75 = $mul1_i224;
        } else {
          var $div_i279 = 1 / $call_i_i_i277;
          var $mul_i280 = $sub3_i210 * $div_i279;
          HEAPF32[$x_i_i272 >> 2] = $mul_i280;
          var $mul2_i281 = $mul1_i224 * $div_i279;
          HEAPF32[$y_i_i274 >> 2] = $mul2_i281;
          var $76 = $mul_i280;
          var $75 = $mul2_i281;
        }
        var $75;
        var $76;
        var $sub_i291 = $call2_i_i84 * $76 - $call_i_i82 * $75;
        var $add_i294 = $call_i_i82 * $76 + $call2_i_i84 * $75;
        var $mul_i314 = ($57 + $65) * .5;
        var $mul1_i316 = ($59 + $67) * .5;
        var $77 = $this + 84 | 0;
        var $78 = (tempDoubleF32[0] = $mul_i314, tempDoubleI32[0]);
        var $79$0 = $78;
        var $80 = (tempDoubleF32[0] = $mul1_i316, tempDoubleI32[0]);
        var $83$0 = 0 | $79$0;
        var $83$1 = $80 | 0;
        var $st$24$0 = $77 | 0;
        HEAP32[$st$24$0 >> 2] = $83$0;
        var $st$24$1 = $77 + 4 | 0;
        HEAP32[$st$24$1 >> 2] = $83$1;
        var $add_i305 = $call2_i_i84 * $mul_i314 - $call_i_i82 * $mul1_i316 + $sub_i_i95;
        var $add17_i310 = $call_i_i82 * $mul_i314 + $call2_i_i84 * $mul1_i316 + $sub4_i_i97;
        var $conv45 = HEAPU8[$arrayidx16] & 255;
        if ((HEAP32[$proxyA + 20 >> 2] | 0) <= ($conv45 | 0)) {
          ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
        }
        var $87 = ($conv45 << 3) + HEAP32[$proxyA + 16 >> 2] | 0;
        var $st$4$0 = $87 | 0, $st$4$0$s2 = $st$4$0 >> 2;
        var $st$4$1 = $87 + 4 | 0, $st$4$1$s2 = $st$4$1 >> 2;
        var $88$1 = HEAP32[$st$4$1$s2];
        var $90 = (tempDoubleI32[0] = HEAP32[$st$4$0$s2], tempDoubleF32[0]);
        var $92 = (tempDoubleI32[0] = $88$1, tempDoubleF32[0]);
        var $add_i239 = ($call2_i_i * $90 - $call_i_i * $92 + $sub_i_i - $add_i305) * $sub_i291 + ($call_i_i * $90 + $call2_i_i * $92 + $sub4_i_i - $add17_i310) * $add_i294;
        if ($add_i239 >= 0) {
          var $retval_0 = $add_i239;
          break;
        }
        var $sub2_i230 = -HEAPF32[$y_i_i274 >> 2];
        var $95 = (tempDoubleF32[0] = -HEAPF32[$x_i_i272 >> 2], tempDoubleI32[0]);
        var $96$0 = $95;
        var $97 = (tempDoubleF32[0] = $sub2_i230, tempDoubleI32[0]);
        var $100$1 = $97 | 0;
        var $st$14$0 = $68 | 0;
        HEAP32[$st$14$0 >> 2] = 0 | $96$0;
        var $st$14$1 = $68 + 4 | 0;
        HEAP32[$st$14$1 >> 2] = $100$1;
        var $retval_0 = -$add_i239;
      } else {
        HEAP32[$m_type23 >> 2] = 1;
        var $101 = HEAP32[$m_proxyA$s2];
        var $conv61 = HEAPU8[$arrayidx16] & 255;
        var $103 = HEAPU32[$101 + 20 >> 2];
        if (($103 | 0) > ($conv61 | 0)) {
          var $105 = $101;
          var $104 = $103;
        } else {
          ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
          var $_pre370 = HEAP32[$m_proxyA$s2];
          var $105 = $_pre370;
          var $104 = HEAP32[$_pre370 + 20 >> 2];
        }
        var $104;
        var $105;
        var $107 = ($conv61 << 3) + HEAP32[$101 + 16 >> 2] | 0;
        var $108$1 = HEAP32[$107 + 4 >> 2];
        var $110 = (tempDoubleI32[0] = HEAP32[$107 >> 2], tempDoubleF32[0]);
        var $112 = (tempDoubleI32[0] = $108$1, tempDoubleF32[0]);
        var $conv66 = HEAPU8[$arrayidx19] & 255;
        if (($104 | 0) <= ($conv66 | 0)) {
          ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
        }
        var $115 = ($conv66 << 3) + HEAP32[$105 + 16 >> 2] | 0;
        var $st$4$0 = $115 | 0, $st$4$0$s2 = $st$4$0 >> 2;
        var $st$4$1 = $115 + 4 | 0, $st$4$1$s2 = $st$4$1 >> 2;
        var $116$1 = HEAP32[$st$4$1$s2];
        var $118 = (tempDoubleI32[0] = HEAP32[$st$4$0$s2], tempDoubleF32[0]);
        var $120 = (tempDoubleI32[0] = $116$1, tempDoubleF32[0]);
        var $m_axis68 = $this + 92 | 0;
        var $sub3_i165 = $120 - $112;
        var $mul1_i157 = ($118 - $110) * -1;
        var $121 = $m_axis68;
        var $122 = (tempDoubleF32[0] = $sub3_i165, tempDoubleI32[0]);
        var $123$0 = $122;
        var $124 = (tempDoubleF32[0] = $mul1_i157, tempDoubleI32[0]);
        var $127$0 = 0 | $123$0;
        var $127$1 = $124 | 0;
        HEAP32[$121 >> 2] = $127$0;
        HEAP32[$121 + 4 >> 2] = $127$1;
        var $x_i_i54 = $m_axis68 | 0;
        var $y_i_i55 = $this + 96 | 0;
        var $add_i_i = $sub3_i165 * $sub3_i165 + $mul1_i157 * $mul1_i157;
        var $call_i_i_i = _sqrtf($add_i_i);
        if ($call_i_i_i < 1.1920928955078125e-7) {
          var $129 = $sub3_i165;
          var $128 = $mul1_i157;
        } else {
          var $div_i = 1 / $call_i_i_i;
          var $mul_i57 = $sub3_i165 * $div_i;
          HEAPF32[$x_i_i54 >> 2] = $mul_i57;
          var $mul2_i = $mul1_i157 * $div_i;
          HEAPF32[$y_i_i55 >> 2] = $mul2_i;
          var $129 = $mul_i57;
          var $128 = $mul2_i;
        }
        var $128;
        var $129;
        var $sub_i50 = $call2_i_i * $129 - $call_i_i * $128;
        var $add_i51 = $call_i_i * $129 + $call2_i_i * $128;
        var $mul_i33 = ($110 + $118) * .5;
        var $mul1_i = ($112 + $120) * .5;
        var $130 = $this + 84 | 0;
        var $131 = (tempDoubleF32[0] = $mul_i33, tempDoubleI32[0]);
        var $132$0 = $131;
        var $133 = (tempDoubleF32[0] = $mul1_i, tempDoubleI32[0]);
        var $136$0 = 0 | $132$0;
        var $136$1 = $133 | 0;
        var $st$24$0 = $130 | 0;
        HEAP32[$st$24$0 >> 2] = $136$0;
        var $st$24$1 = $130 + 4 | 0;
        HEAP32[$st$24$1 >> 2] = $136$1;
        var $add_i24 = $call2_i_i * $mul_i33 - $call_i_i * $mul1_i + $sub_i_i;
        var $add17_i29 = $call_i_i * $mul_i33 + $call2_i_i * $mul1_i + $sub4_i_i;
        var $137 = HEAP32[$m_proxyB$s2];
        var $conv85 = HEAPU8[$cache + 9 | 0] & 255;
        if ((HEAP32[$137 + 20 >> 2] | 0) <= ($conv85 | 0)) {
          ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
        }
        var $141 = ($conv85 << 3) + HEAP32[$137 + 16 >> 2] | 0;
        var $st$4$0 = $141 | 0, $st$4$0$s2 = $st$4$0 >> 2;
        var $st$4$1 = $141 + 4 | 0, $st$4$1$s2 = $st$4$1 >> 2;
        var $142$1 = HEAP32[$st$4$1$s2];
        var $144 = (tempDoubleI32[0] = HEAP32[$st$4$0$s2], tempDoubleF32[0]);
        var $146 = (tempDoubleI32[0] = $142$1, tempDoubleF32[0]);
        var $add_i = ($call2_i_i84 * $144 - $call_i_i82 * $146 + $sub_i_i95 - $add_i24) * $sub_i50 + ($call_i_i82 * $144 + $call2_i_i84 * $146 + $sub4_i_i97 - $add17_i29) * $add_i51;
        if ($add_i >= 0) {
          var $retval_0 = $add_i;
          break;
        }
        var $sub2_i = -HEAPF32[$y_i_i55 >> 2];
        var $149 = (tempDoubleF32[0] = -HEAPF32[$x_i_i54 >> 2], tempDoubleI32[0]);
        var $150$0 = $149;
        var $151 = (tempDoubleF32[0] = $sub2_i, tempDoubleI32[0]);
        var $154$1 = $151 | 0;
        var $st$14$0 = $121 | 0;
        HEAP32[$st$14$0 >> 2] = 0 | $150$0;
        var $st$14$1 = $121 + 4 | 0;
        HEAP32[$st$14$1 >> 2] = $154$1;
        var $retval_0 = -$add_i;
      }
    }
  } while (0);
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN12b2ChainShape13SetPrevVertexERK6b2Vec2($this, $prevVertex) {
  var $0 = $prevVertex;
  var $1 = $this + 20 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  HEAP8[$this + 36 | 0] = 1;
  return;
  return;
}

function __ZN12b2ChainShape13SetNextVertexERK6b2Vec2($this, $nextVertex) {
  var $0 = $nextVertex;
  var $1 = $this + 28 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  HEAP8[$this + 37 | 0] = 1;
  return;
  return;
}

function __ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($this, $indexA, $indexB, $t) {
  var $84$s2;
  var $m_proxyA37$s2;
  var $60$s2;
  var $m_proxyB19$s2;
  var $27$s2;
  var $20$s2;
  var $indexB$s2 = $indexB >> 2;
  var $indexA$s2 = $indexA >> 2;
  var $this$s2 = $this >> 2;
  var __label__;
  var $sub_i97 = 1 - $t;
  var $add_i19_i = HEAPF32[$this$s2 + 4] * $sub_i97 + HEAPF32[$this$s2 + 6] * $t;
  var $add3_i_i = HEAPF32[$this$s2 + 5] * $sub_i97 + HEAPF32[$this$s2 + 7] * $t;
  var $add_i102 = $sub_i97 * HEAPF32[$this$s2 + 8] + HEAPF32[$this$s2 + 9] * $t;
  var $call_i_i = _sinf($add_i102);
  var $call2_i_i = _cosf($add_i102);
  var $6 = HEAPF32[$this$s2 + 2];
  var $7 = HEAPF32[$this$s2 + 3];
  var $sub_i_i = $add_i19_i - ($call2_i_i * $6 - $call_i_i * $7);
  var $sub4_i_i = $add3_i_i - ($call_i_i * $6 + $call2_i_i * $7);
  var $add_i19_i113 = HEAPF32[$this$s2 + 13] * $sub_i97 + HEAPF32[$this$s2 + 15] * $t;
  var $add3_i_i114 = HEAPF32[$this$s2 + 14] * $sub_i97 + HEAPF32[$this$s2 + 16] * $t;
  var $add_i119 = $sub_i97 * HEAPF32[$this$s2 + 17] + HEAPF32[$this$s2 + 18] * $t;
  var $call_i_i120 = _sinf($add_i119);
  var $call2_i_i122 = _cosf($add_i119);
  var $14 = HEAPF32[$this$s2 + 11];
  var $15 = HEAPF32[$this$s2 + 12];
  var $sub_i_i133 = $add_i19_i113 - ($call2_i_i122 * $14 - $call_i_i120 * $15);
  var $sub4_i_i135 = $add3_i_i114 - ($call_i_i120 * $14 + $call2_i_i122 * $15);
  var $16 = HEAP32[$this$s2 + 20];
  if ($16 == 0) {
    var $x_i137 = $this + 92 | 0;
    var $17 = HEAPF32[$x_i137 >> 2];
    var $y_i140 = $this + 96 | 0;
    var $18 = HEAPF32[$y_i140 >> 2];
    var $add_i142 = $call2_i_i * $17 + $call_i_i * $18;
    var $add8_i146 = $17 * -$call_i_i + $call2_i_i * $18;
    var $sub2_i152 = -$18;
    var $add_i161 = $call2_i_i122 * -$17 + $call_i_i120 * $sub2_i152;
    var $add8_i165 = $17 * $call_i_i120 + $call2_i_i122 * $sub2_i152;
    var $m_proxyA = $this | 0;
    var $19 = HEAP32[$m_proxyA >> 2];
    var $20$s2 = HEAP32[$19 + 16 >> 2] >> 2;
    var $21 = HEAP32[$19 + 20 >> 2];
    var $cmp8_i299 = ($21 | 0) > 1;
    $for_body_lr_ph_i307$$_ZNK15b2DistanceProxy10GetSupportERK6b2Vec2_exit323$5 : do {
      if ($cmp8_i299) {
        var $bestIndex_09_i310 = 0;
        var $bestValue_010_i309 = HEAPF32[$20$s2] * $add_i142 + HEAPF32[$20$s2 + 1] * $add8_i146;
        var $i_011_i308 = 1;
        while (1) {
          var $i_011_i308;
          var $bestValue_010_i309;
          var $bestIndex_09_i310;
          var $add_i7_i315 = HEAPF32[($i_011_i308 << 3 >> 2) + $20$s2] * $add_i142 + HEAPF32[(($i_011_i308 << 3) + 4 >> 2) + $20$s2] * $add8_i146;
          var $cmp5_i316 = $add_i7_i315 > $bestValue_010_i309;
          var $bestIndex_1_i317 = $cmp5_i316 ? $i_011_i308 : $bestIndex_09_i310;
          var $bestValue_1_i318 = $cmp5_i316 ? $add_i7_i315 : $bestValue_010_i309;
          var $inc_i319 = $i_011_i308 + 1 | 0;
          if (($inc_i319 | 0) == ($21 | 0)) {
            var $bestIndex_0_lcssa_i322 = $bestIndex_1_i317;
            break $for_body_lr_ph_i307$$_ZNK15b2DistanceProxy10GetSupportERK6b2Vec2_exit323$5;
          }
          var $bestIndex_09_i310 = $bestIndex_1_i317;
          var $bestValue_010_i309 = $bestValue_1_i318;
          var $i_011_i308 = $inc_i319;
        }
      } else {
        var $bestIndex_0_lcssa_i322 = 0;
      }
    } while (0);
    var $bestIndex_0_lcssa_i322;
    HEAP32[$indexA$s2] = $bestIndex_0_lcssa_i322;
    var $m_proxyB = $this + 4 | 0;
    var $26 = HEAP32[$m_proxyB >> 2];
    var $27$s2 = HEAP32[$26 + 16 >> 2] >> 2;
    var $28 = HEAP32[$26 + 20 >> 2];
    var $cmp8_i334 = ($28 | 0) > 1;
    $for_body_lr_ph_i342$$_ZNK15b2DistanceProxy10GetSupportERK6b2Vec2_exit358$10 : do {
      if ($cmp8_i334) {
        var $bestIndex_09_i345 = 0;
        var $bestValue_010_i344 = HEAPF32[$27$s2] * $add_i161 + HEAPF32[$27$s2 + 1] * $add8_i165;
        var $i_011_i343 = 1;
        while (1) {
          var $i_011_i343;
          var $bestValue_010_i344;
          var $bestIndex_09_i345;
          var $add_i7_i350 = HEAPF32[($i_011_i343 << 3 >> 2) + $27$s2] * $add_i161 + HEAPF32[(($i_011_i343 << 3) + 4 >> 2) + $27$s2] * $add8_i165;
          var $cmp5_i351 = $add_i7_i350 > $bestValue_010_i344;
          var $bestIndex_1_i352 = $cmp5_i351 ? $i_011_i343 : $bestIndex_09_i345;
          var $bestValue_1_i353 = $cmp5_i351 ? $add_i7_i350 : $bestValue_010_i344;
          var $inc_i354 = $i_011_i343 + 1 | 0;
          if (($inc_i354 | 0) == ($28 | 0)) {
            var $bestIndex_0_lcssa_i357 = $bestIndex_1_i352;
            break $for_body_lr_ph_i342$$_ZNK15b2DistanceProxy10GetSupportERK6b2Vec2_exit358$10;
          }
          var $bestIndex_09_i345 = $bestIndex_1_i352;
          var $bestValue_010_i344 = $bestValue_1_i353;
          var $i_011_i343 = $inc_i354;
        }
      } else {
        var $bestIndex_0_lcssa_i357 = 0;
      }
    } while (0);
    var $bestIndex_0_lcssa_i357;
    HEAP32[$indexB$s2] = $bestIndex_0_lcssa_i357;
    var $33 = HEAP32[$m_proxyA >> 2];
    var $34 = HEAP32[$indexA$s2];
    var $cmp_i324 = ($34 | 0) > -1;
    do {
      if ($cmp_i324) {
        if ((HEAP32[$33 + 20 >> 2] | 0) > ($34 | 0)) {
          var $36 = $bestIndex_0_lcssa_i357;
          __label__ = 10;
          break;
        }
        __label__ = 9;
        break;
      } else {
        __label__ = 9;
      }
    } while (0);
    if (__label__ == 9) {
      ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
      var $36 = HEAP32[$indexB$s2];
    }
    var $36;
    var $38 = ($34 << 3) + HEAP32[$33 + 16 >> 2] | 0;
    var $39$1 = HEAP32[$38 + 4 >> 2];
    var $41 = (tempDoubleI32[0] = HEAP32[$38 >> 2], tempDoubleF32[0]);
    var $43 = (tempDoubleI32[0] = $39$1, tempDoubleF32[0]);
    var $44 = HEAP32[$m_proxyB >> 2];
    var $cmp_i289 = ($36 | 0) > -1;
    do {
      if ($cmp_i289) {
        if ((HEAP32[$44 + 20 >> 2] | 0) > ($36 | 0)) {
          __label__ = 13;
          break;
        }
        __label__ = 12;
        break;
      } else {
        __label__ = 12;
      }
    } while (0);
    if (__label__ == 12) {
      ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
    }
    var $47 = ($36 << 3) + HEAP32[$44 + 16 >> 2] | 0;
    var $48$1 = HEAP32[$47 + 4 >> 2];
    var $50 = (tempDoubleI32[0] = HEAP32[$47 >> 2], tempDoubleF32[0]);
    var $52 = (tempDoubleI32[0] = $48$1, tempDoubleF32[0]);
    var $retval_0 = ($call2_i_i122 * $50 - $call_i_i120 * $52 + $sub_i_i133 - ($call2_i_i * $41 - $call_i_i * $43 + $sub_i_i)) * HEAPF32[$x_i137 >> 2] + ($call_i_i120 * $50 + $call2_i_i122 * $52 + $sub4_i_i135 - ($call_i_i * $41 + $call2_i_i * $43 + $sub4_i_i)) * HEAPF32[$y_i140 >> 2];
  } else if ($16 == 1) {
    var $55 = HEAPF32[$this$s2 + 23];
    var $56 = HEAPF32[$this$s2 + 24];
    var $sub_i236 = $call2_i_i * $55 - $call_i_i * $56;
    var $add_i239 = $call_i_i * $55 + $call2_i_i * $56;
    var $57 = HEAPF32[$this$s2 + 21];
    var $58 = HEAPF32[$this$s2 + 22];
    var $add_i222 = $call2_i_i * $57 - $call_i_i * $58 + $sub_i_i;
    var $add17_i227 = $call_i_i * $57 + $call2_i_i * $58 + $sub4_i_i;
    var $sub2_i211 = -$add_i239;
    var $add_i201 = $call2_i_i122 * -$sub_i236 + $call_i_i120 * $sub2_i211;
    var $add8_i205 = $sub_i236 * $call_i_i120 + $call2_i_i122 * $sub2_i211;
    HEAP32[$indexA$s2] = -1;
    var $m_proxyB19$s2 = ($this + 4 | 0) >> 2;
    var $59 = HEAP32[$m_proxyB19$s2];
    var $60$s2 = HEAP32[$59 + 16 >> 2] >> 2;
    var $61 = HEAP32[$59 + 20 >> 2];
    var $cmp8_i170 = ($61 | 0) > 1;
    do {
      if (!$cmp8_i170) {
        HEAP32[$indexB$s2] = 0;
        var $bestIndex_0_lcssa_i193383 = 0;
        var $68 = HEAP32[$m_proxyB19$s2];
        __label__ = 19;
        break;
      }
      var $bestIndex_09_i181 = 0;
      var $bestValue_010_i180 = HEAPF32[$60$s2] * $add_i201 + HEAPF32[$60$s2 + 1] * $add8_i205;
      var $i_011_i179 = 1;
      while (1) {
        var $i_011_i179;
        var $bestValue_010_i180;
        var $bestIndex_09_i181;
        var $add_i7_i186 = HEAPF32[($i_011_i179 << 3 >> 2) + $60$s2] * $add_i201 + HEAPF32[(($i_011_i179 << 3) + 4 >> 2) + $60$s2] * $add8_i205;
        var $cmp5_i187 = $add_i7_i186 > $bestValue_010_i180;
        var $bestIndex_1_i188 = $cmp5_i187 ? $i_011_i179 : $bestIndex_09_i181;
        var $bestValue_1_i189 = $cmp5_i187 ? $add_i7_i186 : $bestValue_010_i180;
        var $inc_i190 = $i_011_i179 + 1 | 0;
        if (($inc_i190 | 0) == ($61 | 0)) {
          break;
        }
        var $bestIndex_09_i181 = $bestIndex_1_i188;
        var $bestValue_010_i180 = $bestValue_1_i189;
        var $i_011_i179 = $inc_i190;
      }
      HEAP32[$indexB$s2] = $bestIndex_1_i188;
      var $67 = HEAP32[$m_proxyB19$s2];
      if (($bestIndex_1_i188 | 0) > -1) {
        var $bestIndex_0_lcssa_i193383 = $bestIndex_1_i188;
        var $68 = $67;
        __label__ = 19;
        break;
      }
      var $bestIndex_0_lcssa_i193382 = $bestIndex_1_i188;
      var $70 = $67;
      __label__ = 20;
      break;
    } while (0);
    do {
      if (__label__ == 19) {
        var $68;
        var $bestIndex_0_lcssa_i193383;
        if ((HEAP32[$68 + 20 >> 2] | 0) > ($bestIndex_0_lcssa_i193383 | 0)) {
          var $bestIndex_0_lcssa_i193381 = $bestIndex_0_lcssa_i193383;
          var $71 = $68;
          __label__ = 21;
          break;
        }
        var $bestIndex_0_lcssa_i193382 = $bestIndex_0_lcssa_i193383;
        var $70 = $68;
        __label__ = 20;
        break;
      }
    } while (0);
    if (__label__ == 20) {
      var $70;
      var $bestIndex_0_lcssa_i193382;
      ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
      var $bestIndex_0_lcssa_i193381 = $bestIndex_0_lcssa_i193382;
      var $71 = $70;
    }
    var $71;
    var $bestIndex_0_lcssa_i193381;
    var $73 = ($bestIndex_0_lcssa_i193381 << 3) + HEAP32[$71 + 16 >> 2] | 0;
    var $st$6$0 = $73 | 0;
    var $st$6$1 = $73 + 4 | 0;
    var $74$1 = HEAP32[$st$6$1 >> 2];
    var $76 = (tempDoubleI32[0] = HEAP32[$st$6$0 >> 2], tempDoubleF32[0]);
    var $78 = (tempDoubleI32[0] = $74$1, tempDoubleF32[0]);
    var $retval_0 = ($call2_i_i122 * $76 - $call_i_i120 * $78 + $sub_i_i133 - $add_i222) * $sub_i236 + ($call_i_i120 * $76 + $call2_i_i122 * $78 + $sub4_i_i135 - $add17_i227) * $add_i239;
  } else if ($16 == 2) {
    var $79 = HEAPF32[$this$s2 + 23];
    var $80 = HEAPF32[$this$s2 + 24];
    var $sub_i52 = $call2_i_i122 * $79 - $call_i_i120 * $80;
    var $add_i55 = $call_i_i120 * $79 + $call2_i_i122 * $80;
    var $81 = HEAPF32[$this$s2 + 21];
    var $82 = HEAPF32[$this$s2 + 22];
    var $add_i38 = $call2_i_i122 * $81 - $call_i_i120 * $82 + $sub_i_i133;
    var $add17_i43 = $call_i_i120 * $81 + $call2_i_i122 * $82 + $sub4_i_i135;
    var $sub2_i = -$add_i55;
    var $add_i21 = $call2_i_i * -$sub_i52 + $call_i_i * $sub2_i;
    var $add8_i = $sub_i52 * $call_i_i + $call2_i_i * $sub2_i;
    HEAP32[$indexB$s2] = -1;
    var $m_proxyA37$s2 = ($this | 0) >> 2;
    var $83 = HEAP32[$m_proxyA37$s2];
    var $84$s2 = HEAP32[$83 + 16 >> 2] >> 2;
    var $85 = HEAP32[$83 + 20 >> 2];
    var $cmp8_i = ($85 | 0) > 1;
    do {
      if (!$cmp8_i) {
        HEAP32[$indexA$s2] = 0;
        var $bestIndex_0_lcssa_i387 = 0;
        var $92 = HEAP32[$m_proxyA37$s2];
        __label__ = 27;
        break;
      }
      var $bestIndex_09_i = 0;
      var $bestValue_010_i = HEAPF32[$84$s2] * $add_i21 + HEAPF32[$84$s2 + 1] * $add8_i;
      var $i_011_i = 1;
      while (1) {
        var $i_011_i;
        var $bestValue_010_i;
        var $bestIndex_09_i;
        var $add_i7_i = HEAPF32[($i_011_i << 3 >> 2) + $84$s2] * $add_i21 + HEAPF32[(($i_011_i << 3) + 4 >> 2) + $84$s2] * $add8_i;
        var $cmp5_i = $add_i7_i > $bestValue_010_i;
        var $bestIndex_1_i = $cmp5_i ? $i_011_i : $bestIndex_09_i;
        var $bestValue_1_i = $cmp5_i ? $add_i7_i : $bestValue_010_i;
        var $inc_i = $i_011_i + 1 | 0;
        if (($inc_i | 0) == ($85 | 0)) {
          break;
        }
        var $bestIndex_09_i = $bestIndex_1_i;
        var $bestValue_010_i = $bestValue_1_i;
        var $i_011_i = $inc_i;
      }
      HEAP32[$indexA$s2] = $bestIndex_1_i;
      var $91 = HEAP32[$m_proxyA37$s2];
      if (($bestIndex_1_i | 0) > -1) {
        var $bestIndex_0_lcssa_i387 = $bestIndex_1_i;
        var $92 = $91;
        __label__ = 27;
        break;
      }
      var $bestIndex_0_lcssa_i386 = $bestIndex_1_i;
      var $94 = $91;
      __label__ = 28;
      break;
    } while (0);
    do {
      if (__label__ == 27) {
        var $92;
        var $bestIndex_0_lcssa_i387;
        if ((HEAP32[$92 + 20 >> 2] | 0) > ($bestIndex_0_lcssa_i387 | 0)) {
          var $bestIndex_0_lcssa_i385 = $bestIndex_0_lcssa_i387;
          var $95 = $92;
          __label__ = 29;
          break;
        }
        var $bestIndex_0_lcssa_i386 = $bestIndex_0_lcssa_i387;
        var $94 = $92;
        __label__ = 28;
        break;
      }
    } while (0);
    if (__label__ == 28) {
      var $94;
      var $bestIndex_0_lcssa_i386;
      ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
      var $bestIndex_0_lcssa_i385 = $bestIndex_0_lcssa_i386;
      var $95 = $94;
    }
    var $95;
    var $bestIndex_0_lcssa_i385;
    var $97 = ($bestIndex_0_lcssa_i385 << 3) + HEAP32[$95 + 16 >> 2] | 0;
    var $st$6$0 = $97 | 0;
    var $st$6$1 = $97 + 4 | 0;
    var $98$1 = HEAP32[$st$6$1 >> 2];
    var $100 = (tempDoubleI32[0] = HEAP32[$st$6$0 >> 2], tempDoubleF32[0]);
    var $102 = (tempDoubleI32[0] = $98$1, tempDoubleF32[0]);
    var $retval_0 = ($call2_i_i * $100 - $call_i_i * $102 + $sub_i_i - $add_i38) * $sub_i52 + ($call_i_i * $100 + $call2_i_i * $102 + $sub4_i_i - $add17_i43) * $add_i55;
  } else {
    ___assert_func(STRING_TABLE.__str35 | 0, 183, STRING_TABLE.___PRETTY_FUNCTION____ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f | 0, STRING_TABLE.__str1316 | 0);
    HEAP32[$indexA$s2] = -1;
    HEAP32[$indexB$s2] = -1;
    var $retval_0 = 0;
  }
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZNK20b2SeparationFunction8EvaluateEiif($this, $indexA, $indexB, $t) {
  var $st$4$1$s2;
  var $st$4$0$s2;
  var $this$s2 = $this >> 2;
  var __label__;
  var $sub_i92 = 1 - $t;
  var $add_i19_i = HEAPF32[$this$s2 + 4] * $sub_i92 + HEAPF32[$this$s2 + 6] * $t;
  var $add3_i_i = HEAPF32[$this$s2 + 5] * $sub_i92 + HEAPF32[$this$s2 + 7] * $t;
  var $add_i96 = $sub_i92 * HEAPF32[$this$s2 + 8] + HEAPF32[$this$s2 + 9] * $t;
  var $call_i_i = _sinf($add_i96);
  var $call2_i_i = _cosf($add_i96);
  var $6 = HEAPF32[$this$s2 + 2];
  var $7 = HEAPF32[$this$s2 + 3];
  var $sub_i_i = $add_i19_i - ($call2_i_i * $6 - $call_i_i * $7);
  var $sub4_i_i = $add3_i_i - ($call_i_i * $6 + $call2_i_i * $7);
  var $add_i19_i106 = HEAPF32[$this$s2 + 13] * $sub_i92 + HEAPF32[$this$s2 + 15] * $t;
  var $add3_i_i107 = HEAPF32[$this$s2 + 14] * $sub_i92 + HEAPF32[$this$s2 + 16] * $t;
  var $add_i112 = $sub_i92 * HEAPF32[$this$s2 + 17] + HEAPF32[$this$s2 + 18] * $t;
  var $call_i_i113 = _sinf($add_i112);
  var $call2_i_i115 = _cosf($add_i112);
  var $14 = HEAPF32[$this$s2 + 11];
  var $15 = HEAPF32[$this$s2 + 12];
  var $sub_i_i126 = $add_i19_i106 - ($call2_i_i115 * $14 - $call_i_i113 * $15);
  var $sub4_i_i128 = $add3_i_i107 - ($call_i_i113 * $14 + $call2_i_i115 * $15);
  var $16 = HEAP32[$this$s2 + 20];
  if ($16 == 0) {
    var $x_i130 = $this + 92 | 0;
    var $y_i133 = $this + 96 | 0;
    var $17 = HEAP32[$this$s2];
    var $cmp_i263 = ($indexA | 0) > -1;
    do {
      if ($cmp_i263) {
        if ((HEAP32[$17 + 20 >> 2] | 0) > ($indexA | 0)) {
          __label__ = 4;
          break;
        }
        __label__ = 3;
        break;
      } else {
        __label__ = 3;
      }
    } while (0);
    if (__label__ == 3) {
      ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
    }
    var $20 = ($indexA << 3) + HEAP32[$17 + 16 >> 2] | 0;
    var $st$4$0 = $20 | 0, $st$4$0$s2 = $st$4$0 >> 2;
    var $st$4$1 = $20 + 4 | 0, $st$4$1$s2 = $st$4$1 >> 2;
    var $21$1 = HEAP32[$st$4$1$s2];
    var $23 = (tempDoubleI32[0] = HEAP32[$st$4$0$s2], tempDoubleF32[0]);
    var $25 = (tempDoubleI32[0] = $21$1, tempDoubleF32[0]);
    var $26 = HEAP32[$this$s2 + 1];
    var $cmp_i255 = ($indexB | 0) > -1;
    do {
      if ($cmp_i255) {
        if ((HEAP32[$26 + 20 >> 2] | 0) > ($indexB | 0)) {
          __label__ = 7;
          break;
        }
        __label__ = 6;
        break;
      } else {
        __label__ = 6;
      }
    } while (0);
    if (__label__ == 6) {
      ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
    }
    var $29 = ($indexB << 3) + HEAP32[$26 + 16 >> 2] | 0;
    var $st$4$0 = $29 | 0, $st$4$0$s2 = $st$4$0 >> 2;
    var $st$4$1 = $29 + 4 | 0, $st$4$1$s2 = $st$4$1 >> 2;
    var $30$1 = HEAP32[$st$4$1$s2];
    var $32 = (tempDoubleI32[0] = HEAP32[$st$4$0$s2], tempDoubleF32[0]);
    var $34 = (tempDoubleI32[0] = $30$1, tempDoubleF32[0]);
    var $retval_0 = ($call2_i_i115 * $32 - $call_i_i113 * $34 + $sub_i_i126 - ($call2_i_i * $23 - $call_i_i * $25 + $sub_i_i)) * HEAPF32[$x_i130 >> 2] + ($call_i_i113 * $32 + $call2_i_i115 * $34 + $sub4_i_i128 - ($call_i_i * $23 + $call2_i_i * $25 + $sub4_i_i)) * HEAPF32[$y_i133 >> 2];
  } else if ($16 == 1) {
    var $37 = HEAPF32[$this$s2 + 23];
    var $38 = HEAPF32[$this$s2 + 24];
    var $sub_i202 = $call2_i_i * $37 - $call_i_i * $38;
    var $add_i205 = $call_i_i * $37 + $call2_i_i * $38;
    var $39 = HEAPF32[$this$s2 + 21];
    var $40 = HEAPF32[$this$s2 + 22];
    var $add_i188 = $call2_i_i * $39 - $call_i_i * $40 + $sub_i_i;
    var $add17_i193 = $call_i_i * $39 + $call2_i_i * $40 + $sub4_i_i;
    var $41 = HEAP32[$this$s2 + 1];
    var $cmp_i84 = ($indexB | 0) > -1;
    do {
      if ($cmp_i84) {
        if ((HEAP32[$41 + 20 >> 2] | 0) > ($indexB | 0)) {
          __label__ = 11;
          break;
        }
        __label__ = 10;
        break;
      } else {
        __label__ = 10;
      }
    } while (0);
    if (__label__ == 10) {
      ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
    }
    var $44 = ($indexB << 3) + HEAP32[$41 + 16 >> 2] | 0;
    var $st$4$0 = $44 | 0, $st$4$0$s2 = $st$4$0 >> 2;
    var $st$4$1 = $44 + 4 | 0, $st$4$1$s2 = $st$4$1 >> 2;
    var $45$1 = HEAP32[$st$4$1$s2];
    var $47 = (tempDoubleI32[0] = HEAP32[$st$4$0$s2], tempDoubleF32[0]);
    var $49 = (tempDoubleI32[0] = $45$1, tempDoubleF32[0]);
    var $retval_0 = ($call2_i_i115 * $47 - $call_i_i113 * $49 + $sub_i_i126 - $add_i188) * $sub_i202 + ($call_i_i113 * $47 + $call2_i_i115 * $49 + $sub4_i_i128 - $add17_i193) * $add_i205;
  } else if ($16 == 2) {
    var $50 = HEAPF32[$this$s2 + 23];
    var $51 = HEAPF32[$this$s2 + 24];
    var $sub_i47 = $call2_i_i115 * $50 - $call_i_i113 * $51;
    var $add_i50 = $call_i_i113 * $50 + $call2_i_i115 * $51;
    var $52 = HEAPF32[$this$s2 + 21];
    var $53 = HEAPF32[$this$s2 + 22];
    var $add_i33 = $call2_i_i115 * $52 - $call_i_i113 * $53 + $sub_i_i126;
    var $add17_i38 = $call_i_i113 * $52 + $call2_i_i115 * $53 + $sub4_i_i128;
    var $54 = HEAP32[$this$s2];
    var $cmp_i = ($indexA | 0) > -1;
    do {
      if ($cmp_i) {
        if ((HEAP32[$54 + 20 >> 2] | 0) > ($indexA | 0)) {
          __label__ = 15;
          break;
        }
        __label__ = 14;
        break;
      } else {
        __label__ = 14;
      }
    } while (0);
    if (__label__ == 14) {
      ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
    }
    var $57 = ($indexA << 3) + HEAP32[$54 + 16 >> 2] | 0;
    var $st$4$0 = $57 | 0, $st$4$0$s2 = $st$4$0 >> 2;
    var $st$4$1 = $57 + 4 | 0, $st$4$1$s2 = $st$4$1 >> 2;
    var $58$1 = HEAP32[$st$4$1$s2];
    var $60 = (tempDoubleI32[0] = HEAP32[$st$4$0$s2], tempDoubleF32[0]);
    var $62 = (tempDoubleI32[0] = $58$1, tempDoubleF32[0]);
    var $retval_0 = ($call2_i_i * $60 - $call_i_i * $62 + $sub_i_i - $add_i33) * $sub_i47 + ($call_i_i * $60 + $call2_i_i * $62 + $sub4_i_i - $add17_i38) * $add_i50;
  } else {
    ___assert_func(STRING_TABLE.__str35 | 0, 242, STRING_TABLE.___PRETTY_FUNCTION____ZNK20b2SeparationFunction8EvaluateEiif | 0, STRING_TABLE.__str1316 | 0);
    var $retval_0 = 0;
  }
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN12b2ChainShapeD0Ev($this) {
  HEAP32[$this >> 2] = __ZTV12b2ChainShape + 8 | 0;
  var $m_vertices_i = $this + 12 | 0;
  var $2 = HEAP32[$m_vertices_i >> 2];
  _free($2);
  HEAP32[$m_vertices_i >> 2] = 0;
  HEAP32[$this + 16 >> 2] = 0;
  var $3 = $this;
  __ZdlPv($3);
  return;
  return;
}

function __ZN12b2ChainShapeD2Ev($this) {
  HEAP32[$this >> 2] = __ZTV12b2ChainShape + 8 | 0;
  var $m_vertices = $this + 12 | 0;
  var $2 = HEAP32[$m_vertices >> 2];
  _free($2);
  HEAP32[$m_vertices >> 2] = 0;
  HEAP32[$this + 16 >> 2] = 0;
  return;
  return;
}

function __ZN12b2ChainShape10CreateLoopEPK6b2Vec2i($this, $vertices, $count) {
  var $m_vertices$s2;
  var __label__;
  var $m_vertices$s2 = ($this + 12 | 0) >> 2;
  var $cmp = (HEAP32[$m_vertices$s2] | 0) == 0;
  do {
    if ($cmp) {
      if ((HEAP32[$this + 16 >> 2] | 0) == 0) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str42 | 0, 34, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape10CreateLoopEPK6b2Vec2i | 0, STRING_TABLE.__str143 | 0);
  }
  if (($count | 0) <= 2) {
    ___assert_func(STRING_TABLE.__str42 | 0, 35, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape10CreateLoopEPK6b2Vec2i | 0, STRING_TABLE.__str658 | 0);
  }
  var $add = $count + 1 | 0;
  var $m_count7 = $this + 16 | 0;
  HEAP32[$m_count7 >> 2] = $add;
  var $mul = $add << 3;
  var $call_i = _malloc($mul);
  HEAP32[$m_vertices$s2] = $call_i;
  var $3 = $vertices;
  var $mul11 = $count << 3;
  _memcpy($call_i, $3, $mul11, 1);
  var $4 = HEAP32[$m_vertices$s2];
  var $5 = $4;
  var $6 = ($count << 3) + $4 | 0;
  var $7$0 = HEAP32[$5 >> 2];
  var $7$1 = HEAP32[$5 + 4 >> 2];
  var $st$18$0 = $6 | 0;
  HEAP32[$st$18$0 >> 2] = $7$0;
  var $st$18$1 = $6 + 4 | 0;
  HEAP32[$st$18$1 >> 2] = $7$1;
  var $9 = HEAP32[$m_vertices$s2];
  var $10 = (HEAP32[$m_count7 >> 2] - 2 << 3) + $9 | 0;
  var $11 = $this + 20 | 0;
  var $12$0 = HEAP32[$10 >> 2];
  var $12$1 = HEAP32[$10 + 4 >> 2];
  HEAP32[$11 >> 2] = $12$0;
  HEAP32[$11 + 4 >> 2] = $12$1;
  var $13 = $9 + 8 | 0;
  var $14 = $this + 28 | 0;
  var $15$0 = HEAP32[$13 >> 2];
  var $15$1 = HEAP32[$13 + 4 >> 2];
  HEAP32[$14 >> 2] = $15$0;
  HEAP32[$14 + 4 >> 2] = $15$1;
  HEAP8[$this + 36 | 0] = 1;
  HEAP8[$this + 37 | 0] = 1;
  return;
  return;
}

function __ZN12b2ChainShape11CreateChainEPK6b2Vec2i($this, $vertices, $count) {
  var __label__;
  var $m_vertices = $this + 12 | 0;
  var $cmp = (HEAP32[$m_vertices >> 2] | 0) == 0;
  do {
    if ($cmp) {
      if ((HEAP32[$this + 16 >> 2] | 0) == 0) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str42 | 0, 48, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape11CreateChainEPK6b2Vec2i | 0, STRING_TABLE.__str143 | 0);
  }
  if (($count | 0) <= 1) {
    ___assert_func(STRING_TABLE.__str42 | 0, 49, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape11CreateChainEPK6b2Vec2i | 0, STRING_TABLE.__str345 | 0);
  }
  var $m_count7 = $this + 16 | 0;
  HEAP32[$m_count7 >> 2] = $count;
  var $mul = $count << 3;
  var $call_i = _malloc($mul);
  HEAP32[$m_vertices >> 2] = $call_i;
  var $3 = $vertices;
  var $mul11 = HEAP32[$m_count7 >> 2] << 3;
  _memcpy($call_i, $3, $mul11, 1);
  HEAP8[$this + 36 | 0] = 0;
  HEAP8[$this + 37 | 0] = 0;
  return;
  return;
}

function __ZNK12b2ChainShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
  return 0;
  return null;
}

function __ZN11b2EdgeShapeD1Ev($this) {
  return;
  return;
}

function __ZNK13b2CircleShape13GetChildCountEv($this) {
  return 1;
  return null;
}

function __ZN13b2CircleShapeD1Ev($this) {
  return;
  return;
}

function __ZNK11b2EdgeShape13GetChildCountEv($this) {
  return 1;
  return null;
}

function __ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
  return 0;
  return null;
}

function __ZNK12b2ChainShape13GetChildCountEv($this) {
  return HEAP32[$this + 16 >> 2] - 1 | 0;
  return null;
}

function __ZNK12b2ChainShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
  HEAPF32[$massData >> 2] = 0;
  HEAPF32[$massData + 4 >> 2] = 0;
  HEAPF32[$massData + 8 >> 2] = 0;
  HEAPF32[$massData + 12 >> 2] = 0;
  return;
  return;
}

function __ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2($this, $transform, $p) {
  var $0 = HEAPF32[$transform + 12 >> 2];
  var $1 = HEAPF32[$this + 12 >> 2];
  var $2 = HEAPF32[$transform + 8 >> 2];
  var $3 = HEAPF32[$this + 16 >> 2];
  var $sub_i7 = HEAPF32[$p >> 2] - (HEAPF32[$transform >> 2] + ($0 * $1 - $2 * $3));
  var $sub3_i = HEAPF32[$p + 4 >> 2] - (HEAPF32[$transform + 4 >> 2] + $2 * $1 + $0 * $3);
  var $8 = HEAPF32[$this + 8 >> 2];
  return $sub_i7 * $sub_i7 + $sub3_i * $sub3_i <= $8 * $8;
  return null;
}

function __ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $transform, $childIndex) {
  var $0 = HEAPF32[$transform + 12 >> 2];
  var $1 = HEAPF32[$this + 12 >> 2];
  var $2 = HEAPF32[$transform + 8 >> 2];
  var $3 = HEAPF32[$this + 16 >> 2];
  var $add_i6 = HEAPF32[$transform >> 2] + ($0 * $1 - $2 * $3);
  var $add3_i = HEAPF32[$transform + 4 >> 2] + $2 * $1 + $0 * $3;
  var $m_radius = $this + 8 | 0;
  var $6 = HEAPF32[$m_radius >> 2];
  var $sub = $add_i6 - $6;
  var $sub4 = $add3_i - $6;
  HEAPF32[$aabb >> 2] = $sub;
  HEAPF32[$aabb + 4 >> 2] = $sub4;
  var $7 = HEAPF32[$m_radius >> 2];
  var $add = $add_i6 + $7;
  var $add9 = $add3_i + $7;
  HEAPF32[$aabb + 8 >> 2] = $add;
  HEAPF32[$aabb + 12 >> 2] = $add9;
  return;
  return;
}

function __ZNK13b2CircleShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
  var $m_radius = $this + 8 | 0;
  var $0 = HEAPF32[$m_radius >> 2];
  var $mul4 = $density * 3.1415927410125732 * $0 * $0;
  HEAPF32[$massData >> 2] = $mul4;
  var $m_p = $this + 12 | 0;
  var $1 = $m_p;
  var $2 = $massData + 4 | 0;
  var $3$0 = HEAP32[$1 >> 2];
  var $3$1 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = $3$0;
  HEAP32[$2 + 4 >> 2] = $3$1;
  var $4 = HEAPF32[$m_radius >> 2];
  var $5 = HEAPF32[$m_p >> 2];
  var $6 = HEAPF32[$this + 16 >> 2];
  var $mul12 = $mul4 * ($4 * .5 * $4 + $5 * $5 + $6 * $6);
  HEAPF32[$massData + 12 >> 2] = $mul12;
  return;
  return;
}

function __ZN11b2EdgeShape3SetERK6b2Vec2S2_($this, $v1, $v2) {
  var $0 = $v1;
  var $1 = $this + 12 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  var $3 = $v2;
  var $4 = $this + 20 | 0;
  var $5$0 = HEAP32[$3 >> 2];
  var $5$1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 >> 2] = $5$0;
  HEAP32[$4 + 4 >> 2] = $5$1;
  HEAP8[$this + 44 | 0] = 0;
  HEAP8[$this + 45 | 0] = 0;
  return;
  return;
}

function __ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
  var $this$s2 = $this >> 2;
  var $0 = HEAPF32[$xf + 12 >> 2];
  var $1 = HEAPF32[$this$s2 + 3];
  var $2 = HEAPF32[$xf + 8 >> 2];
  var $3 = HEAPF32[$this$s2 + 4];
  var $4 = HEAPF32[$xf >> 2];
  var $add_i = $0 * $1 - $2 * $3 + $4;
  var $5 = HEAPF32[$xf + 4 >> 2];
  var $add17_i = $2 * $1 + $0 * $3 + $5;
  var $6 = HEAPF32[$this$s2 + 5];
  var $7 = HEAPF32[$this$s2 + 6];
  var $add_i35 = $0 * $6 - $2 * $7 + $4;
  var $add17_i40 = $2 * $6 + $0 * $7 + $5;
  var $cond_i_i21 = $add_i < $add_i35 ? $add_i : $add_i35;
  var $cond_i2_i25 = $add17_i < $add17_i40 ? $add17_i : $add17_i40;
  var $cond_i_i = $add_i > $add_i35 ? $add_i : $add_i35;
  var $cond_i2_i = $add17_i > $add17_i40 ? $add17_i : $add17_i40;
  var $8 = HEAPF32[$this$s2 + 2];
  var $sub3_i = $cond_i2_i25 - $8;
  var $9 = $aabb;
  var $10 = (tempDoubleF32[0] = $cond_i_i21 - $8, tempDoubleI32[0]);
  var $11$0 = $10;
  var $12 = (tempDoubleF32[0] = $sub3_i, tempDoubleI32[0]);
  var $15$1 = $12 | 0;
  HEAP32[$9 >> 2] = 0 | $11$0;
  HEAP32[$9 + 4 >> 2] = $15$1;
  var $add3_i = $cond_i2_i + $8;
  var $16 = $aabb + 8 | 0;
  var $17 = (tempDoubleF32[0] = $cond_i_i + $8, tempDoubleI32[0]);
  var $18$0 = $17;
  var $19 = (tempDoubleF32[0] = $add3_i, tempDoubleI32[0]);
  var $22$1 = $19 | 0;
  HEAP32[$16 >> 2] = 0 | $18$0;
  HEAP32[$16 + 4 >> 2] = $22$1;
  return;
  return;
}

function __ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
  HEAPF32[$massData >> 2] = 0;
  var $mul1_i = (HEAPF32[$this + 16 >> 2] + HEAPF32[$this + 24 >> 2]) * .5;
  var $4 = $massData + 4 | 0;
  var $5 = (tempDoubleF32[0] = (HEAPF32[$this + 12 >> 2] + HEAPF32[$this + 20 >> 2]) * .5, tempDoubleI32[0]);
  var $6$0 = $5;
  var $7 = (tempDoubleF32[0] = $mul1_i, tempDoubleI32[0]);
  var $10$1 = $7 | 0;
  HEAP32[$4 >> 2] = 0 | $6$0;
  HEAP32[$4 + 4 >> 2] = $10$1;
  HEAPF32[$massData + 12 >> 2] = 0;
  return;
  return;
}

function __ZNK12b2ChainShape5CloneEP16b2BlockAllocator($this, $allocator) {
  var $call$s2;
  var __label__;
  var $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 40), $call$s2 = $call >> 2;
  if (($call | 0) == 0) {
    var $8 = 0;
  } else {
    var $0 = $call;
    HEAP32[$call$s2] = __ZTV12b2ChainShape + 8 | 0;
    HEAP32[$call$s2 + 1] = 3;
    HEAPF32[$call$s2 + 2] = .009999999776482582;
    HEAP32[$call$s2 + 3] = 0;
    HEAP32[$call$s2 + 4] = 0;
    HEAP8[$call + 36 | 0] = 0;
    HEAP8[$call + 37 | 0] = 0;
    var $8 = $0;
  }
  var $8;
  var $9 = HEAP32[$this + 12 >> 2];
  var $10 = HEAP32[$this + 16 >> 2];
  var $m_vertices_i = $8 + 12 | 0;
  var $cmp_i = (HEAP32[$m_vertices_i >> 2] | 0) == 0;
  do {
    if ($cmp_i) {
      if ((HEAP32[$8 + 16 >> 2] | 0) == 0) {
        __label__ = 5;
        break;
      }
      __label__ = 4;
      break;
    } else {
      __label__ = 4;
    }
  } while (0);
  if (__label__ == 4) {
    ___assert_func(STRING_TABLE.__str42 | 0, 48, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape11CreateChainEPK6b2Vec2i | 0, STRING_TABLE.__str143 | 0);
  }
  if (($10 | 0) <= 1) {
    ___assert_func(STRING_TABLE.__str42 | 0, 49, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape11CreateChainEPK6b2Vec2i | 0, STRING_TABLE.__str345 | 0);
  }
  var $m_count7_i = $8 + 16 | 0;
  HEAP32[$m_count7_i >> 2] = $10;
  var $mul_i = $10 << 3;
  var $call_i_i = _malloc($mul_i);
  var $13 = $call_i_i;
  HEAP32[$m_vertices_i >> 2] = $13;
  var $14 = $9;
  var $mul11_i = HEAP32[$m_count7_i >> 2] << 3;
  _memcpy($call_i_i, $14, $mul11_i, 1);
  var $m_hasPrevVertex_i = $8 + 36 | 0;
  HEAP8[$m_hasPrevVertex_i] = 0;
  var $m_hasNextVertex_i = $8 + 37 | 0;
  HEAP8[$m_hasNextVertex_i] = 0;
  var $16 = $this + 20 | 0;
  var $17 = $8 + 20 | 0;
  var $18$0 = HEAP32[$16 >> 2];
  var $18$1 = HEAP32[$16 + 4 >> 2];
  HEAP32[$17 >> 2] = $18$0;
  HEAP32[$17 + 4 >> 2] = $18$1;
  var $19 = $this + 28 | 0;
  var $20 = $8 + 28 | 0;
  var $21$0 = HEAP32[$19 >> 2];
  var $21$1 = HEAP32[$19 + 4 >> 2];
  HEAP32[$20 >> 2] = $21$0;
  HEAP32[$20 + 4 >> 2] = $21$1;
  var $23 = HEAP8[$this + 36 | 0] & 1;
  HEAP8[$m_hasPrevVertex_i] = $23;
  var $25 = HEAP8[$this + 37 | 0] & 1;
  HEAP8[$m_hasNextVertex_i] = $25;
  return $8 | 0;
  return null;
}

function __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($this, $edge, $index) {
  var $m_vertices$s2;
  var __label__;
  var $cmp = ($index | 0) > -1;
  do {
    if ($cmp) {
      if ((HEAP32[$this + 16 >> 2] - 1 | 0) > ($index | 0)) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str42 | 0, 89, STRING_TABLE.___PRETTY_FUNCTION____ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei | 0, STRING_TABLE.__str446 | 0);
  }
  HEAP32[$edge + 4 >> 2] = 1;
  var $1 = HEAPF32[$this + 8 >> 2];
  HEAPF32[$edge + 8 >> 2] = $1;
  var $m_vertices$s2 = ($this + 12 | 0) >> 2;
  var $3 = ($index << 3) + HEAP32[$m_vertices$s2] | 0;
  var $4 = $edge + 12 | 0;
  var $5$0 = HEAP32[$3 >> 2];
  var $5$1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 >> 2] = $5$0;
  HEAP32[$4 + 4 >> 2] = $5$1;
  var $7 = ($index + 1 << 3) + HEAP32[$m_vertices$s2] | 0;
  var $8 = $edge + 20 | 0;
  var $9$0 = HEAP32[$7 >> 2];
  var $9$1 = HEAP32[$7 + 4 >> 2];
  HEAP32[$8 >> 2] = $9$0;
  HEAP32[$8 + 4 >> 2] = $9$1;
  var $m_vertex0 = $edge + 28 | 0;
  if (($index | 0) > 0) {
    var $11 = ($index - 1 << 3) + HEAP32[$m_vertices$s2] | 0;
    var $12 = $m_vertex0;
    var $st$5$0 = $11 | 0;
    var $13$0 = HEAP32[$st$5$0 >> 2];
    var $st$5$1 = $11 + 4 | 0;
    var $13$1 = HEAP32[$st$5$1 >> 2];
    var $st$9$0 = $12 | 0;
    HEAP32[$st$9$0 >> 2] = $13$0;
    var $st$9$1 = $12 + 4 | 0;
    HEAP32[$st$9$1 >> 2] = $13$1;
    HEAP8[$edge + 44 | 0] = 1;
  } else {
    var $14 = $this + 20 | 0;
    var $15 = $m_vertex0;
    var $st$3$0 = $14 | 0;
    var $16$0 = HEAP32[$st$3$0 >> 2];
    var $st$3$1 = $14 + 4 | 0;
    var $16$1 = HEAP32[$st$3$1 >> 2];
    var $st$7$0 = $15 | 0;
    HEAP32[$st$7$0 >> 2] = $16$0;
    var $st$7$1 = $15 + 4 | 0;
    HEAP32[$st$7$1 >> 2] = $16$1;
    var $18 = HEAP8[$this + 36 | 0] & 1;
    HEAP8[$edge + 44 | 0] = $18;
  }
  var $m_vertex3 = $edge + 36 | 0;
  if ((HEAP32[$this + 16 >> 2] - 2 | 0) > ($index | 0)) {
    var $21 = ($index + 2 << 3) + HEAP32[$m_vertices$s2] | 0;
    var $22 = $m_vertex3;
    var $st$5$0 = $21 | 0;
    var $23$0 = HEAP32[$st$5$0 >> 2];
    var $st$5$1 = $21 + 4 | 0;
    var $23$1 = HEAP32[$st$5$1 >> 2];
    var $st$9$0 = $22 | 0;
    HEAP32[$st$9$0 >> 2] = $23$0;
    var $st$9$1 = $22 + 4 | 0;
    HEAP32[$st$9$1 >> 2] = $23$1;
    HEAP8[$edge + 45 | 0] = 1;
  } else {
    var $24 = $this + 28 | 0;
    var $25 = $m_vertex3;
    var $st$3$0 = $24 | 0;
    var $26$0 = HEAP32[$st$3$0 >> 2];
    var $st$3$1 = $24 + 4 | 0;
    var $26$1 = HEAP32[$st$3$1 >> 2];
    var $st$7$0 = $25 | 0;
    HEAP32[$st$7$0 >> 2] = $26$0;
    var $st$7$1 = $25 + 4 | 0;
    HEAP32[$st$7$1 >> 2] = $26$1;
    var $28 = HEAP8[$this + 37 | 0] & 1;
    HEAP8[$edge + 45 | 0] = $28;
  }
  return;
  return;
}

function __ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
  var $edgeShape$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 48;
  var $edgeShape = __stackBase__, $edgeShape$s2 = $edgeShape >> 2;
  var $m_count = $this + 16 | 0;
  var $0 = HEAP32[$m_count >> 2];
  if (($0 | 0) > ($childIndex | 0)) {
    var $1 = $0;
  } else {
    ___assert_func(STRING_TABLE.__str42 | 0, 129, STRING_TABLE.___PRETTY_FUNCTION____ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi | 0, STRING_TABLE.__str547 | 0);
    var $1 = HEAP32[$m_count >> 2];
  }
  var $1;
  HEAP32[$edgeShape$s2] = __ZTV11b2EdgeShape + 8 | 0;
  HEAP32[$edgeShape$s2 + 1] = 1;
  HEAPF32[$edgeShape$s2 + 2] = .009999999776482582;
  HEAPF32[$edgeShape$s2 + 7] = 0;
  HEAPF32[$edgeShape$s2 + 8] = 0;
  HEAPF32[$edgeShape$s2 + 9] = 0;
  HEAPF32[$edgeShape$s2 + 10] = 0;
  HEAP8[$edgeShape + 44 | 0] = 0;
  HEAP8[$edgeShape + 45 | 0] = 0;
  var $add = $childIndex + 1 | 0;
  var $i2_0 = ($add | 0) == ($1 | 0) ? 0 : $add;
  var $3 = HEAP32[$this + 12 >> 2];
  var $4 = ($childIndex << 3) + $3 | 0;
  var $5 = $edgeShape + 12 | 0;
  var $6$0 = HEAP32[$4 >> 2];
  var $6$1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 >> 2] = $6$0;
  HEAP32[$5 + 4 >> 2] = $6$1;
  var $7 = ($i2_0 << 3) + $3 | 0;
  var $8 = $edgeShape + 20 | 0;
  var $9$0 = HEAP32[$7 >> 2];
  var $9$1 = HEAP32[$7 + 4 >> 2];
  HEAP32[$8 >> 2] = $9$0;
  HEAP32[$8 + 4 >> 2] = $9$1;
  var $call = __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($edgeShape, $output, $input, $xf, undef);
  STACKTOP = __stackBase__;
  return $call;
  return null;
}

function __ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
  var $2$s2;
  var $m_count = $this + 16 | 0;
  var $0 = HEAP32[$m_count >> 2];
  if (($0 | 0) > ($childIndex | 0)) {
    var $1 = $0;
  } else {
    ___assert_func(STRING_TABLE.__str42 | 0, 148, STRING_TABLE.___PRETTY_FUNCTION____ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi | 0, STRING_TABLE.__str547 | 0);
    var $1 = HEAP32[$m_count >> 2];
  }
  var $1;
  var $add = $childIndex + 1 | 0;
  var $i2_0 = ($add | 0) == ($1 | 0) ? 0 : $add;
  var $2$s2 = HEAP32[$this + 12 >> 2] >> 2;
  var $3 = HEAPF32[$xf + 12 >> 2];
  var $4 = HEAPF32[($childIndex << 3 >> 2) + $2$s2];
  var $5 = HEAPF32[$xf + 8 >> 2];
  var $6 = HEAPF32[(($childIndex << 3) + 4 >> 2) + $2$s2];
  var $7 = HEAPF32[$xf >> 2];
  var $add_i = $3 * $4 - $5 * $6 + $7;
  var $8 = HEAPF32[$xf + 4 >> 2];
  var $add17_i = $5 * $4 + $3 * $6 + $8;
  var $9 = HEAPF32[($i2_0 << 3 >> 2) + $2$s2];
  var $10 = HEAPF32[(($i2_0 << 3) + 4 >> 2) + $2$s2];
  var $add_i21 = $3 * $9 - $5 * $10 + $7;
  var $add17_i26 = $5 * $9 + $3 * $10 + $8;
  var $cond_i_i7 = $add_i < $add_i21 ? $add_i : $add_i21;
  var $cond_i2_i11 = $add17_i < $add17_i26 ? $add17_i : $add17_i26;
  var $11 = $aabb;
  var $12 = (tempDoubleF32[0] = $cond_i_i7, tempDoubleI32[0]);
  var $13$0 = $12;
  var $14 = (tempDoubleF32[0] = $cond_i2_i11, tempDoubleI32[0]);
  var $17$1 = $14 | 0;
  HEAP32[$11 >> 2] = 0 | $13$0;
  HEAP32[$11 + 4 >> 2] = $17$1;
  var $cond_i_i = $add_i > $add_i21 ? $add_i : $add_i21;
  var $cond_i2_i = $add17_i > $add17_i26 ? $add17_i : $add17_i26;
  var $18 = $aabb + 8 | 0;
  var $19 = (tempDoubleF32[0] = $cond_i_i, tempDoubleI32[0]);
  var $20$0 = $19;
  var $21 = (tempDoubleF32[0] = $cond_i2_i, tempDoubleI32[0]);
  var $24$1 = $21 | 0;
  HEAP32[$18 >> 2] = 0 | $20$0;
  HEAP32[$18 + 4 >> 2] = $24$1;
  return;
  return;
}

function __ZNK13b2CircleShape5CloneEP16b2BlockAllocator($this, $allocator) {
  var $call$s2;
  var $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 20), $call$s2 = $call >> 2;
  if (($call | 0) == 0) {
    var $6 = 0;
  } else {
    var $0 = $call;
    HEAP32[$call$s2] = __ZTV13b2CircleShape + 8 | 0;
    HEAP32[$call$s2 + 1] = 0;
    HEAPF32[$call$s2 + 2] = 0;
    HEAPF32[$call$s2 + 3] = 0;
    HEAPF32[$call$s2 + 4] = 0;
    var $6 = $0;
  }
  var $6;
  var $7 = HEAP32[$this + 4 >> 2];
  HEAP32[$6 + 4 >> 2] = $7;
  var $8 = HEAPF32[$this + 8 >> 2];
  HEAPF32[$6 + 8 >> 2] = $8;
  var $9 = $this + 12 | 0;
  var $10 = $6 + 12 | 0;
  var $11$0 = HEAP32[$9 >> 2];
  var $11$1 = HEAP32[$9 + 4 >> 2];
  HEAP32[$10 >> 2] = $11$0;
  HEAP32[$10 + 4 >> 2] = $11$1;
  return $6 | 0;
  return null;
}

function __ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $transform, $childIndex) {
  var $input$s2 = $input >> 2;
  var $0 = HEAPF32[$transform + 12 >> 2];
  var $1 = HEAPF32[$this + 12 >> 2];
  var $2 = HEAPF32[$transform + 8 >> 2];
  var $3 = HEAPF32[$this + 16 >> 2];
  var $6 = HEAPF32[$input$s2];
  var $sub_i50 = $6 - (HEAPF32[$transform >> 2] + ($0 * $1 - $2 * $3));
  var $7 = HEAPF32[$input$s2 + 1];
  var $sub3_i53 = $7 - (HEAPF32[$transform + 4 >> 2] + $2 * $1 + $0 * $3);
  var $8 = HEAPF32[$this + 8 >> 2];
  var $sub_i36 = HEAPF32[$input$s2 + 2] - $6;
  var $sub3_i = HEAPF32[$input$s2 + 3] - $7;
  var $add_i33 = $sub_i50 * $sub_i36 + $sub3_i53 * $sub3_i;
  var $add_i26 = $sub_i36 * $sub_i36 + $sub3_i * $sub3_i;
  var $sub8 = $add_i33 * $add_i33 - $add_i26 * ($sub_i50 * $sub_i50 + $sub3_i53 * $sub3_i53 - $8 * $8);
  var $or_cond = $sub8 < 0 | $add_i26 < 1.1920928955078125e-7;
  do {
    if ($or_cond) {
      var $retval_0 = 0;
    } else {
      var $call_i = _sqrtf($sub8);
      var $add = $add_i33 + $call_i;
      var $sub11 = -$add;
      if ($add > 0) {
        var $retval_0 = 0;
        break;
      }
      if (HEAPF32[$input$s2 + 4] * $add_i26 < $sub11) {
        var $retval_0 = 0;
        break;
      }
      var $div = $sub11 / $add_i26;
      HEAPF32[$output + 8 >> 2] = $div;
      var $add_i9 = $sub_i50 + $sub_i36 * $div;
      var $add3_i12 = $sub3_i53 + $sub3_i * $div;
      var $12 = $output;
      var $13 = (tempDoubleF32[0] = $add_i9, tempDoubleI32[0]);
      var $14$0 = $13;
      var $15 = (tempDoubleF32[0] = $add3_i12, tempDoubleI32[0]);
      var $18$1 = $15 | 0;
      HEAP32[$12 >> 2] = 0 | $14$0;
      HEAP32[$12 + 4 >> 2] = $18$1;
      var $add_i_i = $add_i9 * $add_i9 + $add3_i12 * $add3_i12;
      var $call_i_i_i = _sqrtf($add_i_i);
      if ($call_i_i_i < 1.1920928955078125e-7) {
        var $retval_0 = 1;
        break;
      }
      var $y_i_i = $output + 4 | 0;
      var $div_i = 1 / $call_i_i_i;
      var $mul_i1 = $add_i9 * $div_i;
      HEAPF32[$output >> 2] = $mul_i1;
      var $mul2_i = $add3_i12 * $div_i;
      HEAPF32[$y_i_i >> 2] = $mul2_i;
      var $retval_0 = 1;
    }
  } while (0);
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN13b2CircleShapeD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZNK11b2EdgeShape5CloneEP16b2BlockAllocator($this, $allocator) {
  var $call$s2;
  var $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 48), $call$s2 = $call >> 2;
  if (($call | 0) == 0) {
    var $10 = 0;
  } else {
    var $0 = $call;
    HEAP32[$call$s2] = __ZTV11b2EdgeShape + 8 | 0;
    HEAP32[$call$s2 + 1] = 1;
    HEAPF32[$call$s2 + 2] = .009999999776482582;
    HEAPF32[$call$s2 + 7] = 0;
    HEAPF32[$call$s2 + 8] = 0;
    HEAPF32[$call$s2 + 9] = 0;
    HEAPF32[$call$s2 + 10] = 0;
    HEAP8[$call + 44 | 0] = 0;
    HEAP8[$call + 45 | 0] = 0;
    var $10 = $0;
  }
  var $10;
  var $11 = HEAP32[$this + 4 >> 2];
  HEAP32[$10 + 4 >> 2] = $11;
  var $12 = HEAPF32[$this + 8 >> 2];
  HEAPF32[$10 + 8 >> 2] = $12;
  var $13 = $this + 12 | 0;
  var $14 = $10 + 12 | 0;
  var $15$0 = HEAP32[$13 >> 2];
  var $15$1 = HEAP32[$13 + 4 >> 2];
  HEAP32[$14 >> 2] = $15$0;
  HEAP32[$14 + 4 >> 2] = $15$1;
  var $16 = $this + 20 | 0;
  var $17 = $10 + 20 | 0;
  var $18$0 = HEAP32[$16 >> 2];
  var $18$1 = HEAP32[$16 + 4 >> 2];
  HEAP32[$17 >> 2] = $18$0;
  HEAP32[$17 + 4 >> 2] = $18$1;
  var $19 = $this + 28 | 0;
  var $20 = $10 + 28 | 0;
  var $21$0 = HEAP32[$19 >> 2];
  var $21$1 = HEAP32[$19 + 4 >> 2];
  HEAP32[$20 >> 2] = $21$0;
  HEAP32[$20 + 4 >> 2] = $21$1;
  var $22 = $this + 36 | 0;
  var $23 = $10 + 36 | 0;
  var $24$0 = HEAP32[$22 >> 2];
  var $24$1 = HEAP32[$22 + 4 >> 2];
  HEAP32[$23 >> 2] = $24$0;
  HEAP32[$23 + 4 >> 2] = $24$1;
  var $26 = HEAP8[$this + 44 | 0] & 1;
  HEAP8[$10 + 44 | 0] = $26;
  var $28 = HEAP8[$this + 45 | 0] & 1;
  HEAP8[$10 + 45 | 0] = $28;
  return $10 | 0;
  return null;
}

function __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
  var $input$s2 = $input >> 2;
  var $1 = HEAPF32[$xf >> 2];
  var $sub_i = HEAPF32[$input$s2] - $1;
  var $3 = HEAPF32[$xf + 4 >> 2];
  var $sub3_i = HEAPF32[$input$s2 + 1] - $3;
  var $4 = HEAPF32[$xf + 12 >> 2];
  var $5 = HEAPF32[$xf + 8 >> 2];
  var $add_i72 = $4 * $sub_i + $5 * $sub3_i;
  var $sub_i73 = -$5;
  var $add8_i = $sub_i * $sub_i73 + $4 * $sub3_i;
  var $sub_i107 = HEAPF32[$input$s2 + 2] - $1;
  var $sub3_i110 = HEAPF32[$input$s2 + 3] - $3;
  var $sub_i86 = $4 * $sub_i107 + $5 * $sub3_i110 - $add_i72;
  var $sub3_i89 = $sub_i107 * $sub_i73 + $4 * $sub3_i110 - $add8_i;
  var $8 = $this + 12 | 0;
  var $9$1 = HEAP32[$8 + 4 >> 2];
  var $11 = (tempDoubleI32[0] = HEAP32[$8 >> 2], tempDoubleF32[0]);
  var $13 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
  var $14 = $this + 20 | 0;
  var $15$1 = HEAP32[$14 + 4 >> 2];
  var $17 = (tempDoubleI32[0] = HEAP32[$14 >> 2], tempDoubleF32[0]);
  var $19 = (tempDoubleI32[0] = $15$1, tempDoubleF32[0]);
  var $sub_i78 = $17 - $11;
  var $sub3_i81 = $19 - $13;
  var $sub = -$sub_i78;
  var $mul_i_i = $sub3_i81 * $sub3_i81;
  var $mul4_i_i = $sub_i78 * $sub_i78;
  var $add_i_i = $mul_i_i + $mul4_i_i;
  var $call_i_i_i = _sqrtf($add_i_i);
  if ($call_i_i_i < 1.1920928955078125e-7) {
    var $sroa_load_elt114117 = $sub3_i81;
    var $sroa_load_elt115118 = $sub;
  } else {
    var $div_i = 1 / $call_i_i_i;
    var $sroa_load_elt114117 = $sub3_i81 * $div_i;
    var $sroa_load_elt115118 = $div_i * $sub;
  }
  var $sroa_load_elt115118;
  var $sroa_load_elt114117;
  var $add_i56 = $sroa_load_elt114117 * ($11 - $add_i72) + $sroa_load_elt115118 * ($13 - $add8_i);
  var $add_i49 = $sroa_load_elt114117 * $sub_i86 + $sroa_load_elt115118 * $sub3_i89;
  var $cmp = $add_i49 == 0;
  do {
    if ($cmp) {
      var $retval_0 = 0;
    } else {
      var $div = $add_i56 / $add_i49;
      if ($div < 0) {
        var $retval_0 = 0;
        break;
      }
      if (HEAPF32[$input$s2 + 4] < $div) {
        var $retval_0 = 0;
        break;
      }
      var $add_i22 = $mul4_i_i + $mul_i_i;
      if ($add_i22 == 0) {
        var $retval_0 = 0;
        break;
      }
      var $div22 = (($add_i72 + $sub_i86 * $div - $11) * $sub_i78 + ($add8_i + $sub3_i89 * $div - $13) * $sub3_i81) / $add_i22;
      if ($div22 < 0 | $div22 > 1) {
        var $retval_0 = 0;
        break;
      }
      HEAPF32[$output + 8 >> 2] = $div;
      if ($add_i56 > 0) {
        var $21 = $output;
        var $22 = (tempDoubleF32[0] = -$sroa_load_elt114117, tempDoubleI32[0]);
        var $23$0 = $22;
        var $24 = (tempDoubleF32[0] = -$sroa_load_elt115118, tempDoubleI32[0]);
        var $27$1 = $24 | 0;
        HEAP32[$21 >> 2] = 0 | $23$0;
        HEAP32[$21 + 4 >> 2] = $27$1;
        var $retval_0 = 1;
      } else {
        var $28 = $output;
        var $29 = (tempDoubleF32[0] = $sroa_load_elt114117, tempDoubleI32[0]);
        var $30$0 = $29;
        var $31 = (tempDoubleF32[0] = $sroa_load_elt115118, tempDoubleI32[0]);
        var $34$1 = $31 | 0;
        HEAP32[$28 >> 2] = 0 | $30$0;
        HEAP32[$28 + 4 >> 2] = $34$1;
        var $retval_0 = 1;
      }
    }
  } while (0);
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN11b2EdgeShapeD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZNK14b2PolygonShape13GetChildCountEv($this) {
  return 1;
  return null;
}

function __ZN14b2PolygonShapeD1Ev($this) {
  return;
  return;
}

function __ZN14b2PolygonShape8SetAsBoxEff($this, $hx, $hy) {
  var $this$s2 = $this >> 2;
  HEAP32[$this$s2 + 37] = 4;
  var $sub = -$hx;
  var $sub2 = -$hy;
  HEAPF32[$this$s2 + 5] = $sub;
  HEAPF32[$this$s2 + 6] = $sub2;
  HEAPF32[$this$s2 + 7] = $hx;
  HEAPF32[$this$s2 + 8] = $sub2;
  HEAPF32[$this$s2 + 9] = $hx;
  HEAPF32[$this$s2 + 10] = $hy;
  HEAPF32[$this$s2 + 11] = $sub;
  HEAPF32[$this$s2 + 12] = $hy;
  HEAPF32[$this$s2 + 21] = 0;
  HEAPF32[$this$s2 + 22] = -1;
  HEAPF32[$this$s2 + 23] = 1;
  HEAPF32[$this$s2 + 24] = 0;
  HEAPF32[$this$s2 + 25] = 0;
  HEAPF32[$this$s2 + 26] = 1;
  HEAPF32[$this$s2 + 27] = -1;
  HEAPF32[$this$s2 + 28] = 0;
  HEAPF32[$this$s2 + 3] = 0;
  HEAPF32[$this$s2 + 4] = 0;
  return;
  return;
}

function __ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
  var $this$s2 = $this >> 2;
  var $sub_i = HEAPF32[$p >> 2] - HEAPF32[$xf >> 2];
  var $sub3_i = HEAPF32[$p + 4 >> 2] - HEAPF32[$xf + 4 >> 2];
  var $4 = HEAPF32[$xf + 12 >> 2];
  var $5 = HEAPF32[$xf + 8 >> 2];
  var $add_i16 = $4 * $sub_i + $5 * $sub3_i;
  var $add8_i = $sub_i * -$5 + $4 * $sub3_i;
  var $6 = HEAP32[$this$s2 + 37];
  var $i_0 = 0;
  while (1) {
    var $i_0;
    if (($i_0 | 0) >= ($6 | 0)) {
      var $retval_0 = 1;
      break;
    }
    if (HEAPF32[(($i_0 << 3) + 84 >> 2) + $this$s2] * ($add_i16 - HEAPF32[(($i_0 << 3) + 20 >> 2) + $this$s2]) + HEAPF32[(($i_0 << 3) + 88 >> 2) + $this$s2] * ($add8_i - HEAPF32[(($i_0 << 3) + 24 >> 2) + $this$s2]) > 0) {
      var $retval_0 = 0;
      break;
    }
    var $i_0 = $i_0 + 1 | 0;
  }
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
  var $this$s2 = $this >> 2;
  var $0 = HEAPF32[$xf + 12 >> 2];
  var $1 = HEAPF32[$this$s2 + 5];
  var $2 = HEAPF32[$xf + 8 >> 2];
  var $3 = HEAPF32[$this$s2 + 6];
  var $4 = HEAPF32[$xf >> 2];
  var $add_i = $0 * $1 - $2 * $3 + $4;
  var $5 = HEAPF32[$xf + 4 >> 2];
  var $add17_i = $2 * $1 + $0 * $3 + $5;
  var $6 = HEAP32[$this$s2 + 37];
  var $cmp56 = ($6 | 0) > 1;
  $for_body$$for_end$73 : do {
    if ($cmp56) {
      var $7 = $add17_i;
      var $sroa_load_elt535457 = $add17_i;
      var $_in58 = $add_i;
      var $_in5559 = $add_i;
      var $i_060 = 1;
      while (1) {
        var $i_060;
        var $_in5559;
        var $_in58;
        var $sroa_load_elt535457;
        var $7;
        var $8 = HEAPF32[(($i_060 << 3) + 20 >> 2) + $this$s2];
        var $9 = HEAPF32[(($i_060 << 3) + 24 >> 2) + $this$s2];
        var $add_i35 = $0 * $8 - $2 * $9 + $4;
        var $add17_i40 = $2 * $8 + $0 * $9 + $5;
        var $cond_i_i21 = $_in5559 < $add_i35 ? $_in5559 : $add_i35;
        var $cond_i2_i25 = $sroa_load_elt535457 < $add17_i40 ? $sroa_load_elt535457 : $add17_i40;
        var $cond_i_i = $_in58 > $add_i35 ? $_in58 : $add_i35;
        var $cond_i2_i = $7 > $add17_i40 ? $7 : $add17_i40;
        var $inc = $i_060 + 1 | 0;
        if (($inc | 0) >= ($6 | 0)) {
          var $_lcssa = $cond_i2_i;
          var $sroa_load_elt5354_lcssa = $cond_i2_i25;
          var $_in_lcssa = $cond_i_i;
          var $_in55_lcssa = $cond_i_i21;
          break $for_body$$for_end$73;
        }
        var $7 = $cond_i2_i;
        var $sroa_load_elt535457 = $cond_i2_i25;
        var $_in58 = $cond_i_i;
        var $_in5559 = $cond_i_i21;
        var $i_060 = $inc;
      }
    } else {
      var $_lcssa = $add17_i;
      var $sroa_load_elt5354_lcssa = $add17_i;
      var $_in_lcssa = $add_i;
      var $_in55_lcssa = $add_i;
    }
  } while (0);
  var $_in55_lcssa;
  var $_in_lcssa;
  var $sroa_load_elt5354_lcssa;
  var $_lcssa;
  var $10 = HEAPF32[$this$s2 + 2];
  var $sub3_i = $sroa_load_elt5354_lcssa - $10;
  var $11 = $aabb;
  var $12 = (tempDoubleF32[0] = $_in55_lcssa - $10, tempDoubleI32[0]);
  var $13$0 = $12;
  var $14 = (tempDoubleF32[0] = $sub3_i, tempDoubleI32[0]);
  var $17$1 = $14 | 0;
  HEAP32[$11 >> 2] = 0 | $13$0;
  HEAP32[$11 + 4 >> 2] = $17$1;
  var $add3_i = $_lcssa + $10;
  var $18 = $aabb + 8 | 0;
  var $19 = (tempDoubleF32[0] = $_in_lcssa + $10, tempDoubleI32[0]);
  var $20$0 = $19;
  var $21 = (tempDoubleF32[0] = $add3_i, tempDoubleI32[0]);
  var $24$1 = $21 | 0;
  HEAP32[$18 >> 2] = 0 | $20$0;
  HEAP32[$18 + 4 >> 2] = $24$1;
  return;
  return;
}

function __ZNK14b2PolygonShape5CloneEP16b2BlockAllocator($this, $allocator) {
  var $7$s2;
  var $call$s2;
  var $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 152), $call$s2 = $call >> 2;
  if (($call | 0) == 0) {
    var $7 = 0, $7$s2 = $7 >> 2;
  } else {
    var $0 = $call;
    HEAP32[$call$s2] = __ZTV14b2PolygonShape + 8 | 0;
    HEAP32[$call$s2 + 1] = 2;
    HEAPF32[$call$s2 + 2] = .009999999776482582;
    HEAP32[$call$s2 + 37] = 0;
    HEAPF32[$call$s2 + 3] = 0;
    HEAPF32[$call$s2 + 4] = 0;
    var $7 = $0, $7$s2 = $7 >> 2;
  }
  var $7;
  var $8 = HEAP32[$this + 4 >> 2];
  HEAP32[$7$s2 + 1] = $8;
  var $9 = HEAPF32[$this + 8 >> 2];
  HEAPF32[$7$s2 + 2] = $9;
  var $10 = $this + 12 | 0;
  var $11 = $7 + 12 | 0;
  var $12$0 = HEAP32[$10 >> 2];
  var $12$1 = HEAP32[$10 + 4 >> 2];
  HEAP32[$11 >> 2] = $12$0;
  HEAP32[$11 + 4 >> 2] = $12$1;
  var $14 = $this + 20 | 0;
  _memcpy($7 + 20 | 0, $14, 64, 1);
  var $16 = $this + 84 | 0;
  _memcpy($7 + 84 | 0, $16, 64, 1);
  var $17 = HEAP32[$this + 148 >> 2];
  HEAP32[$7$s2 + 37] = $17;
  return $7 | 0;
  return null;
}

function __ZN14b2PolygonShape8SetAsBoxEffRK6b2Vec2f($this, $hx, $hy, $center, $angle) {
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $m_vertexCount = $this + 148 | 0;
  HEAP32[$m_vertexCount >> 2] = 4;
  var $sub = -$hx;
  var $sub2 = -$hy;
  HEAPF32[$this$s2 + 5] = $sub;
  HEAPF32[$this$s2 + 6] = $sub2;
  HEAPF32[$this$s2 + 7] = $hx;
  HEAPF32[$this$s2 + 8] = $sub2;
  HEAPF32[$this$s2 + 9] = $hx;
  HEAPF32[$this$s2 + 10] = $hy;
  HEAPF32[$this$s2 + 11] = $sub;
  HEAPF32[$this$s2 + 12] = $hy;
  HEAPF32[$this$s2 + 21] = 0;
  HEAPF32[$this$s2 + 22] = -1;
  HEAPF32[$this$s2 + 23] = 1;
  HEAPF32[$this$s2 + 24] = 0;
  HEAPF32[$this$s2 + 25] = 0;
  HEAPF32[$this$s2 + 26] = 1;
  HEAPF32[$this$s2 + 27] = -1;
  HEAPF32[$this$s2 + 28] = 0;
  var $0$s2 = $center >> 2;
  var $1 = $this + 12 | 0;
  var $2$0 = HEAP32[$0$s2];
  var $2$1 = HEAP32[$0$s2 + 1];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  var $3$1 = HEAP32[$0$s2 + 1];
  var $5 = (tempDoubleI32[0] = HEAP32[$0$s2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $call_i = _sinf($angle);
  var $call2_i = _cosf($angle);
  var $i_033 = 0;
  var $9 = $sub2;
  var $8 = -1;
  while (1) {
    var $8;
    var $9;
    var $i_033;
    var $arrayidx20 = ($i_033 << 3) + $this + 20 | 0;
    var $10 = HEAPF32[$arrayidx20 >> 2];
    var $add_i8 = $call2_i * $10 - $call_i * $9 + $5;
    var $add17_i = $call_i * $10 + $call2_i * $9 + $7;
    var $11 = $arrayidx20;
    var $12 = (tempDoubleF32[0] = $add_i8, tempDoubleI32[0]);
    var $13$0 = $12;
    var $14 = (tempDoubleF32[0] = $add17_i, tempDoubleI32[0]);
    var $17$0 = 0 | $13$0;
    var $17$1 = $14 | 0;
    HEAP32[$11 >> 2] = $17$0;
    HEAP32[$11 + 4 >> 2] = $17$1;
    var $arrayidx24 = ($i_033 << 3) + $this + 84 | 0;
    var $18 = HEAPF32[$arrayidx24 >> 2];
    var $add_i = $call_i * $18 + $call2_i * $8;
    var $19 = $arrayidx24;
    var $20 = (tempDoubleF32[0] = $call2_i * $18 - $call_i * $8, tempDoubleI32[0]);
    var $21$0 = $20;
    var $22 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
    var $25$1 = $22 | 0;
    HEAP32[$19 >> 2] = 0 | $21$0;
    HEAP32[$19 + 4 >> 2] = $25$1;
    var $inc = $i_033 + 1 | 0;
    if (($inc | 0) >= (HEAP32[$m_vertexCount >> 2] | 0)) {
      break;
    }
    var $_pre = HEAPF32[(($inc << 3) + 24 >> 2) + $this$s2];
    var $_pre34 = HEAPF32[(($inc << 3) + 88 >> 2) + $this$s2];
    var $i_033 = $inc;
    var $9 = $_pre;
    var $8 = $_pre34;
  }
  return;
  return;
}

function __ZN14b2PolygonShape3SetEPK6b2Vec2i($this, $vertices, $count) {
  var $m_vertexCount$s2;
  var __label__;
  if (($count - 3 | 0) >>> 0 >= 6) {
    ___assert_func(STRING_TABLE.__str52 | 0, 122, STRING_TABLE.___PRETTY_FUNCTION____ZN14b2PolygonShape3SetEPK6b2Vec2i | 0, STRING_TABLE.__str153 | 0);
  }
  var $m_vertexCount$s2 = ($this + 148 | 0) >> 2;
  HEAP32[$m_vertexCount$s2] = $count;
  var $cmp421 = ($count | 0) > 0;
  do {
    if ($cmp421) {
      var $i_022 = 0;
      while (1) {
        var $i_022;
        var $1 = ($i_022 << 3) + $vertices | 0;
        var $2 = ($i_022 << 3) + $this + 20 | 0;
        var $3$0 = HEAP32[$1 >> 2];
        var $3$1 = HEAP32[$1 + 4 >> 2];
        HEAP32[$2 >> 2] = $3$0;
        HEAP32[$2 + 4 >> 2] = $3$1;
        var $inc = $i_022 + 1 | 0;
        var $4 = HEAPU32[$m_vertexCount$s2];
        if (($inc | 0) >= ($4 | 0)) {
          break;
        }
        var $i_022 = $inc;
      }
      if (($4 | 0) <= 0) {
        var $_lcssa_ph = $4;
        __label__ = 10;
        break;
      }
      var $5 = $4;
      var $i6_019 = 0;
      while (1) {
        var $i6_019;
        var $5;
        var $add = $i6_019 + 1 | 0;
        var $cond = ($add | 0) < ($5 | 0) ? $add : 0;
        var $sub_i = HEAPF32[$this + ($cond << 3) + 20 >> 2] - HEAPF32[$this + ($i6_019 << 3) + 20 >> 2];
        var $sub3_i = HEAPF32[$this + ($cond << 3) + 24 >> 2] - HEAPF32[$this + ($i6_019 << 3) + 24 >> 2];
        var $mul4_i = $sub3_i * $sub3_i;
        if ($sub_i * $sub_i + $mul4_i <= 1.4210854715202004e-14) {
          ___assert_func(STRING_TABLE.__str52 | 0, 137, STRING_TABLE.___PRETTY_FUNCTION____ZN14b2PolygonShape3SetEPK6b2Vec2i | 0, STRING_TABLE.__str254 | 0);
        }
        var $arrayidx25 = ($i6_019 << 3) + $this + 84 | 0;
        var $mul1_i = $sub_i * -1;
        var $10 = $arrayidx25;
        var $11 = (tempDoubleF32[0] = $sub3_i, tempDoubleI32[0]);
        var $12$0 = $11;
        var $13 = (tempDoubleF32[0] = $mul1_i, tempDoubleI32[0]);
        var $16$1 = $13 | 0;
        HEAP32[$10 >> 2] = 0 | $12$0;
        HEAP32[$10 + 4 >> 2] = $16$1;
        var $y_i_i = ($i6_019 << 3) + $this + 88 | 0;
        var $17 = HEAPF32[$y_i_i >> 2];
        var $add_i_i11 = $mul4_i + $17 * $17;
        var $call_i_i_i = _sqrtf($add_i_i11);
        if ($call_i_i_i >= 1.1920928955078125e-7) {
          var $div_i13 = 1 / $call_i_i_i;
          var $mul_i14 = $sub3_i * $div_i13;
          HEAPF32[$arrayidx25 >> 2] = $mul_i14;
          var $mul2_i = $17 * $div_i13;
          HEAPF32[$y_i_i >> 2] = $mul2_i;
        }
        var $_pr = HEAPU32[$m_vertexCount$s2];
        if (($add | 0) >= ($_pr | 0)) {
          break;
        }
        var $5 = $_pr;
        var $i6_019 = $add;
      }
      var $m_centroid = $this + 12 | 0;
      var $arraydecay = $this + 20 | 0;
      if (($_pr | 0) > 2) {
        var $_lcssa30 = $_pr;
        var $m_centroid33 = $m_centroid;
        var $arraydecay35 = $arraydecay;
        __label__ = 13;
        break;
      }
      var $_lcssa29 = $_pr;
      var $m_centroid34 = $m_centroid;
      var $arraydecay36 = $arraydecay;
      __label__ = 12;
      break;
    } else {
      var $_lcssa_ph = $count;
      __label__ = 10;
    }
  } while (0);
  do {
    if (__label__ == 10) {
      var $_lcssa_ph;
      var $_lcssa29 = $_lcssa_ph;
      var $m_centroid34 = $this + 12 | 0;
      var $arraydecay36 = $this + 20 | 0;
      __label__ = 12;
      break;
    }
  } while (0);
  do {
    if (__label__ == 12) {
      var $arraydecay36;
      var $m_centroid34;
      var $_lcssa29;
      ___assert_func(STRING_TABLE.__str52 | 0, 76, STRING_TABLE.___PRETTY_FUNCTION____ZL15ComputeCentroidPK6b2Vec2i | 0, STRING_TABLE.__str658 | 0);
      if (($_lcssa29 | 0) > 0) {
        var $_lcssa30 = $_lcssa29;
        var $m_centroid33 = $m_centroid34;
        var $arraydecay35 = $arraydecay36;
        __label__ = 13;
        break;
      }
      var $32 = 0;
      var $31 = 0;
      var $area_0_lcssa59_i = 0;
      var $m_centroid32 = $m_centroid34;
      __label__ = 18;
      break;
    }
  } while (0);
  do {
    if (__label__ == 13) {
      var $arraydecay35;
      var $m_centroid33;
      var $_lcssa30;
      var $area_044_i = 0;
      var $i_045_i = 0;
      var $18 = 0;
      var $add4_i46_i = 0;
      while (1) {
        var $add4_i46_i;
        var $18;
        var $i_045_i;
        var $area_044_i;
        var $19 = ($i_045_i << 3) + $this + 20 | 0;
        var $20$1 = HEAP32[$19 + 4 >> 2];
        var $22 = (tempDoubleI32[0] = HEAP32[$19 >> 2], tempDoubleF32[0]);
        var $24 = (tempDoubleI32[0] = $20$1, tempDoubleF32[0]);
        var $add_i = $i_045_i + 1 | 0;
        if (($add_i | 0) < ($_lcssa30 | 0)) {
          var $cond_lvalue_i = ($add_i << 3) + $this + 20 | 0;
        } else {
          var $cond_lvalue_i = $arraydecay35;
        }
        var $cond_lvalue_i;
        var $25 = $cond_lvalue_i;
        var $26$1 = HEAP32[$25 + 4 >> 2];
        var $28 = (tempDoubleI32[0] = HEAP32[$25 >> 2], tempDoubleF32[0]);
        var $30 = (tempDoubleI32[0] = $26$1, tempDoubleF32[0]);
        var $mul_i = ($22 * $30 - $24 * $28) * .5;
        var $add9_i = $area_044_i + $mul_i;
        var $mul10_i = $mul_i * .3333333432674408;
        var $add_i_i = $18 + ($22 + $28) * $mul10_i;
        var $add4_i_i = $add4_i46_i + ($24 + $30) * $mul10_i;
        if (($add_i | 0) == ($_lcssa30 | 0)) {
          break;
        }
        var $area_044_i = $add9_i;
        var $i_045_i = $add_i;
        var $18 = $add_i_i;
        var $add4_i46_i = $add4_i_i;
      }
      if ($add9_i > 1.1920928955078125e-7) {
        var $34 = $add4_i_i;
        var $33 = $add_i_i;
        var $area_0_lcssa60_i = $add9_i;
        var $m_centroid31 = $m_centroid33;
        __label__ = 19;
        break;
      }
      var $32 = $add4_i_i;
      var $31 = $add_i_i;
      var $area_0_lcssa59_i = $add9_i;
      var $m_centroid32 = $m_centroid33;
      __label__ = 18;
      break;
    }
  } while (0);
  if (__label__ == 18) {
    var $m_centroid32;
    var $area_0_lcssa59_i;
    var $31;
    var $32;
    ___assert_func(STRING_TABLE.__str52 | 0, 115, STRING_TABLE.___PRETTY_FUNCTION____ZL15ComputeCentroidPK6b2Vec2i | 0, STRING_TABLE.__str557 | 0);
    var $34 = $32;
    var $33 = $31;
    var $area_0_lcssa60_i = $area_0_lcssa59_i;
    var $m_centroid31 = $m_centroid32;
  }
  var $m_centroid31;
  var $area_0_lcssa60_i;
  var $33;
  var $34;
  var $div_i = 1 / $area_0_lcssa60_i;
  var $35 = $m_centroid31;
  var $36 = (tempDoubleF32[0] = $33 * $div_i, tempDoubleI32[0]);
  var $37$0 = $36;
  var $38 = (tempDoubleF32[0] = $34 * $div_i, tempDoubleI32[0]);
  var $41$1 = $38 | 0;
  HEAP32[$35 >> 2] = 0 | $37$0;
  HEAP32[$35 + 4 >> 2] = $41$1;
  return;
  return;
}

function __ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
  var $input$s2 = $input >> 2;
  var $this$s2 = $this >> 2;
  var $1 = HEAPF32[$xf >> 2];
  var $sub_i = HEAPF32[$input$s2] - $1;
  var $3 = HEAPF32[$xf + 4 >> 2];
  var $sub3_i = HEAPF32[$input$s2 + 1] - $3;
  var $c_i55 = $xf + 12 | 0;
  var $4 = HEAPF32[$c_i55 >> 2];
  var $s_i58 = $xf + 8 | 0;
  var $5 = HEAPF32[$s_i58 >> 2];
  var $add_i61 = $4 * $sub_i + $5 * $sub3_i;
  var $sub_i62 = -$5;
  var $add8_i65 = $sub_i * $sub_i62 + $4 * $sub3_i;
  var $sub_i49 = HEAPF32[$input$s2 + 2] - $1;
  var $sub3_i52 = HEAPF32[$input$s2 + 3] - $3;
  var $sub_i29 = $4 * $sub_i49 + $5 * $sub3_i52 - $add_i61;
  var $sub3_i32 = $sub_i49 * $sub_i62 + $4 * $sub3_i52 - $add8_i65;
  var $8 = HEAPF32[$input$s2 + 4];
  var $9 = HEAP32[$this$s2 + 37];
  var $i_0 = 0;
  var $index_0 = -1;
  var $upper_0 = $8;
  var $lower_0 = 0;
  $for_cond$51 : while (1) {
    var $lower_0;
    var $upper_0;
    var $index_0;
    var $i_0;
    if (($i_0 | 0) >= ($9 | 0)) {
      if ($lower_0 < 0 | $lower_0 > $8) {
        ___assert_func(STRING_TABLE.__str52 | 0, 249, STRING_TABLE.___PRETTY_FUNCTION____ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi | 0, STRING_TABLE.__str355 | 0);
      }
      if (($index_0 | 0) <= -1) {
        var $retval_0 = 0;
        break;
      }
      HEAPF32[$output + 8 >> 2] = $lower_0;
      var $14 = HEAPF32[$c_i55 >> 2];
      var $15 = HEAPF32[(($index_0 << 3) + 84 >> 2) + $this$s2];
      var $16 = HEAPF32[$s_i58 >> 2];
      var $17 = HEAPF32[(($index_0 << 3) + 88 >> 2) + $this$s2];
      var $add_i = $16 * $15 + $14 * $17;
      var $18 = $output;
      var $19 = (tempDoubleF32[0] = $14 * $15 - $16 * $17, tempDoubleI32[0]);
      var $20$0 = $19;
      var $21 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
      var $24$1 = $21 | 0;
      HEAP32[$18 >> 2] = 0 | $20$0;
      HEAP32[$18 + 4 >> 2] = $24$1;
      var $retval_0 = 1;
      break;
    }
    var $12 = HEAPF32[(($i_0 << 3) + 84 >> 2) + $this$s2];
    var $13 = HEAPF32[(($i_0 << 3) + 88 >> 2) + $this$s2];
    var $add_i18 = $12 * (HEAPF32[(($i_0 << 3) + 20 >> 2) + $this$s2] - $add_i61) + $13 * (HEAPF32[(($i_0 << 3) + 24 >> 2) + $this$s2] - $add8_i65);
    var $add_i11 = $12 * $sub_i29 + $13 * $sub3_i32;
    var $cmp12 = $add_i11 == 0;
    $if_then$$if_else$55 : do {
      if ($cmp12) {
        if ($add_i18 < 0) {
          var $retval_0 = 0;
          break $for_cond$51;
        }
        var $index_1 = $index_0;
        var $upper_1 = $upper_0;
        var $lower_1 = $lower_0;
      } else {
        var $cmp15 = $add_i11 < 0;
        do {
          if ($cmp15) {
            if ($add_i18 >= $lower_0 * $add_i11) {
              break;
            }
            var $index_1 = $i_0;
            var $upper_1 = $upper_0;
            var $lower_1 = $add_i18 / $add_i11;
            break $if_then$$if_else$55;
          }
        } while (0);
        if ($add_i11 <= 0) {
          var $index_1 = $index_0;
          var $upper_1 = $upper_0;
          var $lower_1 = $lower_0;
          break;
        }
        if ($add_i18 >= $upper_0 * $add_i11) {
          var $index_1 = $index_0;
          var $upper_1 = $upper_0;
          var $lower_1 = $lower_0;
          break;
        }
        var $index_1 = $index_0;
        var $upper_1 = $add_i18 / $add_i11;
        var $lower_1 = $lower_0;
      }
    } while (0);
    var $lower_1;
    var $upper_1;
    var $index_1;
    if ($upper_1 < $lower_1) {
      var $retval_0 = 0;
      break;
    }
    var $i_0 = $i_0 + 1 | 0;
    var $index_0 = $index_1;
    var $upper_0 = $upper_1;
    var $lower_0 = $lower_1;
  }
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
  var __label__;
  var $m_vertexCount = $this + 148 | 0;
  var $0 = HEAP32[$m_vertexCount >> 2];
  var $cmp = ($0 | 0) > 2;
  do {
    if (!$cmp) {
      ___assert_func(STRING_TABLE.__str52 | 0, 306, STRING_TABLE.___PRETTY_FUNCTION____ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf | 0, STRING_TABLE.__str456 | 0);
      var $_pre = HEAP32[$m_vertexCount >> 2];
      if (($_pre | 0) > 0) {
        var $1 = $_pre;
        __label__ = 3;
        break;
      }
      var $mul_i6196 = 0;
      var $mass101 = $massData | 0;
      HEAPF32[$mass101 >> 2] = 0;
      var $mul2_i6399103 = $mul_i6196;
      var $mul_i6198105 = $mul_i6196;
      var $I_0_lcssa107 = 0;
      var $area_0_lcssa109 = 0;
      var $_lcssa74111 = 0;
      var $_lcssa113 = 0;
      var $mass115 = $mass101;
      __label__ = 10;
      break;
    }
    var $1 = $0;
    __label__ = 3;
  } while (0);
  do {
    if (__label__ == 3) {
      var $1;
      var $3 = 0;
      var $2 = 0;
      var $i_086 = 0;
      while (1) {
        var $i_086;
        var $2;
        var $3;
        var $add_i66 = $2 + HEAPF32[$this + ($i_086 << 3) + 20 >> 2];
        var $add4_i69 = $3 + HEAPF32[$this + ($i_086 << 3) + 24 >> 2];
        var $inc = $i_086 + 1 | 0;
        if (($inc | 0) >= ($1 | 0)) {
          break;
        }
        var $3 = $add4_i69;
        var $2 = $add_i66;
        var $i_086 = $inc;
      }
      var $div = 1 / ($1 | 0);
      var $mul_i61 = $add_i66 * $div;
      var $mul2_i63 = $add4_i69 * $div;
      var $x_i37 = $this + 20 | 0;
      var $y_i40 = $this + 24 | 0;
      var $7 = 0;
      var $6 = 0;
      var $area_076 = 0;
      var $I_077 = 0;
      var $i5_078 = 0;
      while (1) {
        var $i5_078;
        var $I_077;
        var $area_076;
        var $6;
        var $7;
        var $sub_i54 = HEAPF32[$this + ($i5_078 << 3) + 20 >> 2] - $mul_i61;
        var $sub3_i57 = HEAPF32[$this + ($i5_078 << 3) + 24 >> 2] - $mul2_i63;
        var $add = $i5_078 + 1 | 0;
        var $cmp13 = ($add | 0) < ($1 | 0);
        if ($cmp13) {
          var $_pn73_in = ($add << 3) + $this + 20 | 0;
          var $_pn_in = ($add << 3) + $this + 24 | 0;
        } else {
          var $_pn73_in = $x_i37;
          var $_pn_in = $y_i40;
        }
        var $_pn_in;
        var $_pn73_in;
        var $10 = HEAPF32[$_pn73_in >> 2] - $mul_i61;
        var $11 = HEAPF32[$_pn_in >> 2] - $mul2_i63;
        var $sub_i = $sub_i54 * $11 - $sub3_i57 * $10;
        var $mul = $sub_i * .5;
        var $add22 = $area_076 + $mul;
        var $mul23 = $mul * .3333333432674408;
        var $add_i17 = $6 + ($sub_i54 + $10) * $mul23;
        var $add4_i = $7 + ($sub3_i57 + $11) * $mul23;
        var $add40 = $I_077 + $sub_i * .0833333358168602 * ($sub_i54 * $sub_i54 + $10 * $sub_i54 + $10 * $10 + $sub3_i57 * $sub3_i57 + $11 * $sub3_i57 + $11 * $11);
        if (!$cmp13) {
          break;
        }
        var $7 = $add4_i;
        var $6 = $add_i17;
        var $area_076 = $add22;
        var $I_077 = $add40;
        var $i5_078 = $add;
      }
      var $mul44 = $add22 * $density;
      var $mass = $massData | 0;
      HEAPF32[$mass >> 2] = $mul44;
      if ($add22 > 1.1920928955078125e-7) {
        var $12 = $mul44;
        var $mul2_i6399104 = $mul2_i63;
        var $mul_i6198106 = $mul_i61;
        var $I_0_lcssa108 = $add40;
        var $area_0_lcssa110 = $add22;
        var $_lcssa74112 = $add_i17;
        var $_lcssa114 = $add4_i;
        __label__ = 11;
        break;
      }
      var $mul2_i6399103 = $mul2_i63;
      var $mul_i6198105 = $mul_i61;
      var $I_0_lcssa107 = $add40;
      var $area_0_lcssa109 = $add22;
      var $_lcssa74111 = $add_i17;
      var $_lcssa113 = $add4_i;
      var $mass115 = $mass;
      __label__ = 10;
      break;
    }
  } while (0);
  if (__label__ == 10) {
    var $mass115;
    var $_lcssa113;
    var $_lcssa74111;
    var $area_0_lcssa109;
    var $I_0_lcssa107;
    var $mul_i6198105;
    var $mul2_i6399103;
    ___assert_func(STRING_TABLE.__str52 | 0, 352, STRING_TABLE.___PRETTY_FUNCTION____ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf | 0, STRING_TABLE.__str557 | 0);
    var $12 = HEAPF32[$mass115 >> 2];
    var $mul2_i6399104 = $mul2_i6399103;
    var $mul_i6198106 = $mul_i6198105;
    var $I_0_lcssa108 = $I_0_lcssa107;
    var $area_0_lcssa110 = $area_0_lcssa109;
    var $_lcssa74112 = $_lcssa74111;
    var $_lcssa114 = $_lcssa113;
  }
  var $_lcssa114;
  var $_lcssa74112;
  var $area_0_lcssa110;
  var $I_0_lcssa108;
  var $mul_i6198106;
  var $mul2_i6399104;
  var $12;
  var $div49 = 1 / $area_0_lcssa110;
  var $mul_i14 = $_lcssa74112 * $div49;
  var $mul2_i = $_lcssa114 * $div49;
  var $add_i10 = $mul_i14 + $mul_i6198106;
  var $add3_i = $mul2_i + $mul2_i6399104;
  var $13 = $massData + 4 | 0;
  var $14 = (tempDoubleF32[0] = $add_i10, tempDoubleI32[0]);
  var $15$0 = $14;
  var $16 = (tempDoubleF32[0] = $add3_i, tempDoubleI32[0]);
  var $19$1 = $16 | 0;
  HEAP32[$13 >> 2] = 0 | $15$0;
  HEAP32[$13 + 4 >> 2] = $19$1;
  HEAPF32[$massData + 12 >> 2] = $I_0_lcssa108 * $density + $12 * ($add_i10 * $add_i10 + $add3_i * $add3_i - ($mul_i14 * $mul_i14 + $mul2_i * $mul2_i));
  return;
  return;
}

function __ZN14b2PolygonShapeD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN16b2BlockAllocatorC2Ev($this) {
  var $m_chunkSpace = $this + 8 | 0;
  HEAP32[$m_chunkSpace >> 2] = 128;
  HEAP32[$this + 4 >> 2] = 0;
  var $call_i = _malloc(1024);
  HEAP32[$this >> 2] = $call_i;
  var $mul5 = HEAP32[$m_chunkSpace >> 2] << 3;
  _memset($call_i, 0, $mul5, 1);
  var $2 = $this + 12 | 0;
  _memset($2, 0, 56, 1);
  if ((HEAP8[__ZN16b2BlockAllocator28s_blockSizeLookupInitializedE] & 1) << 24 >> 24 == 0) {
    var $j_01 = 0;
    var $i_02 = 1;
    while (1) {
      var $i_02;
      var $j_01;
      if (($j_01 | 0) >= 14) {
        ___assert_func(STRING_TABLE.__str59 | 0, 73, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocatorC2Ev | 0, STRING_TABLE.__str160 | 0);
      }
      if (($i_02 | 0) > (HEAP32[__ZN16b2BlockAllocator12s_blockSizesE + ($j_01 << 2) >> 2] | 0)) {
        var $inc = $j_01 + 1 | 0;
        HEAP8[__ZN16b2BlockAllocator17s_blockSizeLookupE + $i_02 | 0] = $inc & 255;
        var $j_1 = $inc;
      } else {
        HEAP8[__ZN16b2BlockAllocator17s_blockSizeLookupE + $i_02 | 0] = $j_01 & 255;
        var $j_1 = $j_01;
      }
      var $j_1;
      var $inc14 = $i_02 + 1 | 0;
      if (($inc14 | 0) == 641) {
        break;
      }
      var $j_01 = $j_1;
      var $i_02 = $inc14;
    }
    HEAP8[__ZN16b2BlockAllocator28s_blockSizeLookupInitializedE] = 1;
  }
  return;
  return;
}

function __ZN16b2BlockAllocatorD2Ev($this) {
  var $m_chunkCount = $this + 4 | 0;
  var $cmp1 = (HEAP32[$m_chunkCount >> 2] | 0) > 0;
  var $m_chunks = $this | 0;
  var $1 = HEAP32[$m_chunks >> 2];
  $for_body$$for_end$111 : do {
    if ($cmp1) {
      var $i_02 = 0;
      var $2 = $1;
      while (1) {
        var $2;
        var $i_02;
        var $4 = HEAP32[$2 + ($i_02 << 3) + 4 >> 2];
        _free($4);
        var $inc = $i_02 + 1 | 0;
        var $6 = HEAP32[$m_chunks >> 2];
        if (($inc | 0) >= (HEAP32[$m_chunkCount >> 2] | 0)) {
          var $_lcssa = $6;
          break $for_body$$for_end$111;
        }
        var $i_02 = $inc;
        var $2 = $6;
      }
    } else {
      var $_lcssa = $1;
    }
  } while (0);
  var $_lcssa;
  _free($_lcssa);
  return;
  return;
}

function __ZN6b2DrawD1Ev($this) {
  return;
  return;
}

function __ZN6b2DrawC2Ev($this) {
  HEAP32[$this >> 2] = __ZTV6b2Draw + 8 | 0;
  HEAP32[$this + 4 >> 2] = 0;
  return;
  return;
}

function __ZN6b2Draw8SetFlagsEj($this, $flags) {
  HEAP32[$this + 4 >> 2] = $flags;
  return;
  return;
}

function __ZNK6b2Draw8GetFlagsEv($this) {
  return HEAP32[$this + 4 >> 2];
  return null;
}

function __ZN6b2Draw11AppendFlagsEj($this, $flags) {
  var $m_drawFlags = $this + 4 | 0;
  var $or = HEAP32[$m_drawFlags >> 2] | $flags;
  HEAP32[$m_drawFlags >> 2] = $or;
  return;
  return;
}

function __ZN6b2Draw10ClearFlagsEj($this, $flags) {
  var $m_drawFlags = $this + 4 | 0;
  var $and = HEAP32[$m_drawFlags >> 2] & ($flags ^ -1);
  HEAP32[$m_drawFlags >> 2] = $and;
  return;
  return;
}

function __ZNK7b2Mat337Solve33ERK6b2Vec3($agg_result, $this, $b) {
  var $this$s2 = $this >> 2;
  var $0 = HEAPF32[$this$s2 + 4];
  var $1 = HEAPF32[$this$s2 + 8];
  var $2 = HEAPF32[$this$s2 + 5];
  var $3 = HEAPF32[$this$s2 + 7];
  var $sub_i = $0 * $1 - $2 * $3;
  var $4 = HEAPF32[$this$s2 + 6];
  var $5 = HEAPF32[$this$s2 + 3];
  var $sub9_i = $2 * $4 - $5 * $1;
  var $sub16_i = $5 * $3 - $0 * $4;
  var $6 = HEAPF32[$this$s2];
  var $7 = HEAPF32[$this$s2 + 1];
  var $8 = HEAPF32[$this$s2 + 2];
  var $add6_i94 = $6 * $sub_i + $7 * $sub9_i + $8 * $sub16_i;
  if ($add6_i94 != 0) {
    var $det_0 = 1 / $add6_i94;
  } else {
    var $det_0 = $add6_i94;
  }
  var $det_0;
  var $9 = HEAPF32[$b >> 2];
  var $10 = HEAPF32[$b + 4 >> 2];
  var $11 = HEAPF32[$b + 8 >> 2];
  var $mul = $det_0 * ($9 * $sub_i + $10 * $sub9_i + $11 * $sub16_i);
  HEAPF32[$agg_result >> 2] = $mul;
  var $mul10 = $det_0 * ($6 * ($10 * $1 - $11 * $3) + $7 * ($11 * $4 - $9 * $1) + $8 * ($9 * $3 - $10 * $4));
  HEAPF32[$agg_result + 4 >> 2] = $mul10;
  var $mul15 = $det_0 * ($6 * ($0 * $11 - $2 * $10) + $7 * ($2 * $9 - $5 * $11) + $8 * ($5 * $10 - $0 * $9));
  HEAPF32[$agg_result + 8 >> 2] = $mul15;
  return;
  return;
}

function __ZNK7b2Mat337Solve22ERK6b2Vec2($agg_result, $this, $b) {
  var $0 = HEAPF32[$this >> 2];
  var $1 = HEAPF32[$this + 12 >> 2];
  var $2 = HEAPF32[$this + 4 >> 2];
  var $3 = HEAPF32[$this + 16 >> 2];
  var $sub = $0 * $3 - $1 * $2;
  if ($sub != 0) {
    var $det_0 = 1 / $sub;
  } else {
    var $det_0 = $sub;
  }
  var $det_0;
  var $4 = HEAPF32[$b >> 2];
  var $5 = HEAPF32[$b + 4 >> 2];
  var $mul12 = $det_0 * ($3 * $4 - $1 * $5);
  HEAPF32[$agg_result >> 2] = $mul12;
  var $mul19 = $det_0 * ($0 * $5 - $2 * $4);
  HEAPF32[$agg_result + 4 >> 2] = $mul19;
  return;
  return;
}

function __ZNK7b2Mat3312GetInverse22EPS_($this, $M) {
  var $M$s2 = $M >> 2;
  var $0 = HEAPF32[$this >> 2];
  var $1 = HEAPF32[$this + 12 >> 2];
  var $2 = HEAPF32[$this + 4 >> 2];
  var $3 = HEAPF32[$this + 16 >> 2];
  var $sub = $0 * $3 - $1 * $2;
  if ($sub != 0) {
    var $det_0 = 1 / $sub;
  } else {
    var $det_0 = $sub;
  }
  var $det_0;
  var $mul7 = $det_0 * $3;
  HEAPF32[$M$s2] = $mul7;
  var $sub10 = -$det_0;
  var $mul11 = $1 * $sub10;
  HEAPF32[$M$s2 + 3] = $mul11;
  HEAPF32[$M$s2 + 2] = 0;
  var $mul16 = $2 * $sub10;
  HEAPF32[$M$s2 + 1] = $mul16;
  var $mul19 = $det_0 * $0;
  HEAPF32[$M$s2 + 4] = $mul19;
  HEAPF32[$M$s2 + 5] = 0;
  HEAPF32[$M$s2 + 6] = 0;
  HEAPF32[$M$s2 + 7] = 0;
  HEAPF32[$M$s2 + 8] = 0;
  return;
  return;
}

function __ZNK7b2Mat3315GetSymInverse33EPS_($this, $M) {
  var $M$s2 = $M >> 2;
  var $this$s2 = $this >> 2;
  var $0 = HEAPF32[$this$s2 + 4];
  var $1 = HEAPF32[$this$s2 + 8];
  var $mul_i = $0 * $1;
  var $2 = HEAPF32[$this$s2 + 5];
  var $3 = HEAPF32[$this$s2 + 7];
  var $4 = HEAPF32[$this$s2 + 6];
  var $5 = HEAPF32[$this$s2 + 3];
  var $mul8_i = $5 * $1;
  var $mul12_i = $5 * $3;
  var $6 = HEAPF32[$this$s2];
  var $add6_i = $6 * ($mul_i - $2 * $3) + HEAPF32[$this$s2 + 1] * ($2 * $4 - $mul8_i) + HEAPF32[$this$s2 + 2] * ($mul12_i - $0 * $4);
  if ($add6_i != 0) {
    var $det_0 = 1 / $add6_i;
  } else {
    var $det_0 = $add6_i;
  }
  var $det_0;
  var $mul12 = $det_0 * ($mul_i - $3 * $3);
  HEAPF32[$M$s2] = $mul12;
  var $mul18 = $det_0 * ($4 * $3 - $mul8_i);
  HEAPF32[$M$s2 + 1] = $mul18;
  var $mul24 = $det_0 * ($mul12_i - $4 * $0);
  HEAPF32[$M$s2 + 2] = $mul24;
  HEAPF32[$M$s2 + 3] = $mul18;
  var $mul34 = $det_0 * ($6 * $1 - $4 * $4);
  HEAPF32[$M$s2 + 4] = $mul34;
  var $mul40 = $det_0 * ($4 * $5 - $6 * $3);
  HEAPF32[$M$s2 + 5] = $mul40;
  HEAPF32[$M$s2 + 6] = $mul24;
  HEAPF32[$M$s2 + 7] = $mul40;
  var $mul54 = $det_0 * ($6 * $0 - $5 * $5);
  HEAPF32[$M$s2 + 8] = $mul54;
  return;
  return;
}

function __ZN16b2StackAllocatorC2Ev($this) {
  HEAP32[$this + 102400 >> 2] = 0;
  HEAP32[$this + 102404 >> 2] = 0;
  HEAP32[$this + 102408 >> 2] = 0;
  HEAP32[$this + 102796 >> 2] = 0;
  return;
  return;
}

function __ZNK16b2StackAllocator16GetMaxAllocationEv($this) {
  return HEAP32[$this + 102408 >> 2];
  return null;
}

function __ZN16b2BlockAllocator8AllocateEi($this, $size) {
  var $blocks$s2;
  var $m_chunks$s2;
  var $m_chunkCount$s2;
  var $arrayidx11$s2;
  var $cmp = ($size | 0) == 0;
  $return$$if_end$2 : do {
    if ($cmp) {
      var $retval_0 = 0;
    } else {
      var $cmp2 = ($size | 0) > 0;
      do {
        if ($cmp2) {
          if (($size | 0) <= 640) {
            break;
          }
          var $call_i = _malloc($size);
          var $retval_0 = $call_i;
          break $return$$if_end$2;
        }
        ___assert_func(STRING_TABLE.__str59 | 0, 104, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator8AllocateEi | 0, STRING_TABLE.__str261 | 0);
      } while (0);
      var $0 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + $size | 0];
      var $conv = $0 & 255;
      if (($0 & 255) >= 14) {
        ___assert_func(STRING_TABLE.__str59 | 0, 112, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator8AllocateEi | 0, STRING_TABLE.__str362 | 0);
      }
      var $arrayidx11$s2 = (($conv << 2) + $this + 12 | 0) >> 2;
      var $1 = HEAPU32[$arrayidx11$s2];
      if (($1 | 0) == 0) {
        var $m_chunkCount$s2 = ($this + 4 | 0) >> 2;
        var $4 = HEAPU32[$m_chunkCount$s2];
        var $m_chunkSpace = $this + 8 | 0;
        var $5 = HEAP32[$m_chunkSpace >> 2];
        var $m_chunks$s2 = ($this | 0) >> 2;
        if (($4 | 0) == ($5 | 0)) {
          var $6 = HEAP32[$m_chunks$s2];
          var $add = $5 + 128 | 0;
          HEAP32[$m_chunkSpace >> 2] = $add;
          var $mul = $add << 3;
          var $call_i1 = _malloc($mul);
          var $7 = $call_i1;
          HEAP32[$m_chunks$s2] = $7;
          var $8 = $6;
          var $mul25 = HEAP32[$m_chunkCount$s2] << 3;
          _memcpy($call_i1, $8, $mul25, 1);
          var $12 = (HEAP32[$m_chunkCount$s2] << 3) + HEAP32[$m_chunks$s2] | 0;
          _memset($12, 0, 1024, 1);
          _free($8);
          var $13 = HEAP32[$m_chunkCount$s2];
        } else {
          var $13 = $4;
        }
        var $13;
        var $14 = HEAP32[$m_chunks$s2];
        var $call_i2 = _malloc(16384);
        var $15 = $call_i2;
        var $blocks$s2 = (($13 << 3) + $14 + 4 | 0) >> 2;
        HEAP32[$blocks$s2] = $15;
        var $16 = HEAP32[__ZN16b2BlockAllocator12s_blockSizesE + ($conv << 2) >> 2];
        var $blockSize34 = ($13 << 3) + $14 | 0;
        HEAP32[$blockSize34 >> 2] = $16;
        var $div = 16384 / $16 | 0;
        if (($div * $16 | 0) < 16385) {
          var $17 = $15;
        } else {
          ___assert_func(STRING_TABLE.__str59 | 0, 140, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator8AllocateEi | 0, STRING_TABLE.__str463 | 0);
          var $17 = HEAP32[$blocks$s2];
        }
        var $17;
        var $sub = $div - 1 | 0;
        var $cmp404 = ($sub | 0) > 0;
        var $18 = $17;
        $for_body$$for_end$20 : do {
          if ($cmp404) {
            var $i_05 = 0;
            var $19 = $18;
            while (1) {
              var $19;
              var $i_05;
              var $add47 = $i_05 + 1 | 0;
              var $20 = $19 + $add47 * $16 | 0;
              var $next50 = $19 + $i_05 * $16 | 0;
              HEAP32[$next50 >> 2] = $20;
              var $22 = HEAP32[$blocks$s2];
              if (($add47 | 0) == ($sub | 0)) {
                var $_lcssa = $22;
                break $for_body$$for_end$20;
              }
              var $i_05 = $add47;
              var $19 = $22;
            }
          } else {
            var $_lcssa = $18;
          }
        } while (0);
        var $_lcssa;
        var $next55 = $_lcssa + $sub * $16 | 0;
        HEAP32[$next55 >> 2] = 0;
        var $24 = HEAP32[HEAP32[$blocks$s2] >> 2];
        HEAP32[$arrayidx11$s2] = $24;
        var $inc61 = HEAP32[$m_chunkCount$s2] + 1 | 0;
        HEAP32[$m_chunkCount$s2] = $inc61;
        var $retval_0 = HEAP32[$blocks$s2];
      } else {
        var $2 = HEAP32[$1 >> 2];
        HEAP32[$arrayidx11$s2] = $2;
        var $retval_0 = $1;
      }
    }
  } while (0);
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN16b2BlockAllocator4FreeEPvi($this, $p, $size) {
  var $cmp = ($size | 0) == 0;
  $return$$if_end$27 : do {
    if (!$cmp) {
      var $cmp2 = ($size | 0) > 0;
      do {
        if ($cmp2) {
          if (($size | 0) <= 640) {
            break;
          }
          _free($p);
          break $return$$if_end$27;
        }
        ___assert_func(STRING_TABLE.__str59 | 0, 164, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str261 | 0);
      } while (0);
      var $0 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + $size | 0];
      var $conv = $0 & 255;
      if (($0 & 255) >= 14) {
        ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
      }
      var $1 = $p;
      var $arrayidx11 = ($conv << 2) + $this + 12 | 0;
      var $2 = HEAP32[$arrayidx11 >> 2];
      HEAP32[$p >> 2] = $2;
      HEAP32[$arrayidx11 >> 2] = $1;
    }
  } while (0);
  return;
  return;
}

function __ZN16b2BlockAllocator5ClearEv($this) {
  var $m_chunkCount$s2;
  var $m_chunkCount$s2 = ($this + 4 | 0) >> 2;
  var $cmp1 = (HEAP32[$m_chunkCount$s2] | 0) > 0;
  var $m_chunks = $this | 0;
  $for_body$$for_end$39 : do {
    if ($cmp1) {
      var $i_02 = 0;
      while (1) {
        var $i_02;
        var $3 = HEAP32[HEAP32[$m_chunks >> 2] + ($i_02 << 3) + 4 >> 2];
        _free($3);
        var $inc = $i_02 + 1 | 0;
        if (($inc | 0) >= (HEAP32[$m_chunkCount$s2] | 0)) {
          break $for_body$$for_end$39;
        }
        var $i_02 = $inc;
      }
    }
  } while (0);
  HEAP32[$m_chunkCount$s2] = 0;
  var $6 = HEAP32[$m_chunks >> 2];
  var $mul = HEAP32[$this + 8 >> 2] << 3;
  _memset($6, 0, $mul, 1);
  var $8 = $this + 12 | 0;
  _memset($8, 0, 56, 1);
  return;
  return;
}

function __ZN6b2DrawD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __Z7b2Alloci($size) {
  var $call = _malloc($size);
  return $call;
  return null;
}

function __Z6b2FreePv($mem) {
  _free($mem);
  return;
  return;
}

function __Z5b2LogPKcz($string) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $args = __stackBase__;
  HEAP32[$args >> 2] = arguments[__Z5b2LogPKcz.length];
  var $0 = HEAP32[$args >> 2];
  var $call = _vprintf($string, $0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN16b2StackAllocatorD2Ev($this) {
  if ((HEAP32[$this + 102400 >> 2] | 0) != 0) {
    ___assert_func(STRING_TABLE.__str72 | 0, 32, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocatorD2Ev | 0, STRING_TABLE.__str173 | 0);
  }
  if ((HEAP32[$this + 102796 >> 2] | 0) != 0) {
    ___assert_func(STRING_TABLE.__str72 | 0, 33, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocatorD2Ev | 0, STRING_TABLE.__str274 | 0);
  }
  return;
  return;
}

function __ZN16b2StackAllocator8AllocateEi($this, $size) {
  var $m_index$s2;
  var $add_ptr$s2;
  var $m_entryCount$s2;
  var $m_entryCount$s2 = ($this + 102796 | 0) >> 2;
  var $0 = HEAP32[$m_entryCount$s2];
  if (($0 | 0) < 32) {
    var $1 = $0;
  } else {
    ___assert_func(STRING_TABLE.__str72 | 0, 38, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator8AllocateEi | 0, STRING_TABLE.__str375 | 0);
    var $1 = HEAP32[$m_entryCount$s2];
  }
  var $1;
  var $add_ptr$s2 = ($this + $1 * 12 + 102412 | 0) >> 2;
  HEAP32[($this + 102416 >> 2) + ($1 * 3 | 0)] = $size;
  var $m_index$s2 = ($this + 102400 | 0) >> 2;
  var $2 = HEAP32[$m_index$s2];
  if (($2 + $size | 0) > 102400) {
    var $call_i = _malloc($size);
    HEAP32[$add_ptr$s2] = $call_i;
    HEAP8[$this + $1 * 12 + 102420 | 0] = 1;
  } else {
    var $add_ptr8 = $this + $2 | 0;
    HEAP32[$add_ptr$s2] = $add_ptr8;
    HEAP8[$this + $1 * 12 + 102420 | 0] = 0;
    var $add12 = HEAP32[$m_index$s2] + $size | 0;
    HEAP32[$m_index$s2] = $add12;
  }
  var $m_allocation = $this + 102404 | 0;
  var $add13 = HEAP32[$m_allocation >> 2] + $size | 0;
  HEAP32[$m_allocation >> 2] = $add13;
  var $m_maxAllocation = $this + 102408 | 0;
  var $5 = HEAP32[$m_maxAllocation >> 2];
  var $cond_i = ($5 | 0) > ($add13 | 0) ? $5 : $add13;
  HEAP32[$m_maxAllocation >> 2] = $cond_i;
  var $inc = HEAP32[$m_entryCount$s2] + 1 | 0;
  HEAP32[$m_entryCount$s2] = $inc;
  return HEAP32[$add_ptr$s2];
  return null;
}

function __ZN16b2StackAllocator4FreeEPv($this, $p) {
  var $m_entryCount$s2;
  var $m_entryCount$s2 = ($this + 102796 | 0) >> 2;
  var $0 = HEAP32[$m_entryCount$s2];
  if (($0 | 0) > 0) {
    var $1 = $0;
  } else {
    ___assert_func(STRING_TABLE.__str72 | 0, 63, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator4FreeEPv | 0, STRING_TABLE.__str476 | 0);
    var $1 = HEAP32[$m_entryCount$s2];
  }
  var $1;
  var $add_ptr_sum = $1 - 1 | 0;
  if ((HEAP32[($this + 102412 >> 2) + ($add_ptr_sum * 3 | 0)] | 0) != ($p | 0)) {
    ___assert_func(STRING_TABLE.__str72 | 0, 65, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator4FreeEPv | 0, STRING_TABLE.__str577 | 0);
  }
  if ((HEAP8[$this + $add_ptr_sum * 12 + 102420 | 0] & 1) << 24 >> 24 == 0) {
    var $size = $this + $add_ptr_sum * 12 + 102416 | 0;
    var $m_index = $this + 102400 | 0;
    var $sub = HEAP32[$m_index >> 2] - HEAP32[$size >> 2] | 0;
    HEAP32[$m_index >> 2] = $sub;
    var $size9_pre_phi = $size;
  } else {
    _free($p);
    var $size9_pre_phi = $this + $add_ptr_sum * 12 + 102416 | 0;
  }
  var $size9_pre_phi;
  var $m_allocation = $this + 102404 | 0;
  var $sub10 = HEAP32[$m_allocation >> 2] - HEAP32[$size9_pre_phi >> 2] | 0;
  HEAP32[$m_allocation >> 2] = $sub10;
  var $dec = HEAP32[$m_entryCount$s2] - 1 | 0;
  HEAP32[$m_entryCount$s2] = $dec;
  return;
  return;
}

function __ZN7b2TimerC2Ev($this) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $t_i = __stackBase__;
  var $call_i = _gettimeofday($t_i, 0);
  var $1 = HEAP32[$t_i >> 2];
  HEAP32[$this >> 2] = $1;
  var $mul_i = (HEAP32[$t_i + 4 >> 2] | 0) * .0010000000474974513;
  var $conv2_i = $mul_i >= 0 ? Math.floor($mul_i) : Math.ceil($mul_i);
  HEAP32[$this + 4 >> 2] = $conv2_i;
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN7b2Timer5ResetEv($this) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $t = __stackBase__;
  var $call = _gettimeofday($t, 0);
  var $0 = HEAP32[$t >> 2];
  HEAP32[$this >> 2] = $0;
  var $mul = (HEAP32[$t + 4 >> 2] | 0) * .0010000000474974513;
  var $conv2 = $mul >= 0 ? Math.floor($mul) : Math.ceil($mul);
  HEAP32[$this + 4 >> 2] = $conv2;
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZNK7b2Timer15GetMillisecondsEv($this) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $t = __stackBase__;
  var $call = _gettimeofday($t, 0);
  var $sub5 = (((HEAP32[$t >> 2] - HEAP32[$this >> 2]) * 1e3 | 0) >>> 0) + (HEAP32[$t + 4 >> 2] | 0) * .0010000000474974513 - (HEAPU32[$this + 4 >> 2] >>> 0);
  STACKTOP = __stackBase__;
  return $sub5;
  return null;
}

function __ZN6b2BodyD2Ev($this) {
  return;
  return;
}

function __ZN6b2BodyC2EPK9b2BodyDefP7b2World($this, $bd, $world) {
  var $m_flags$s1;
  var $angle$s2;
  var $bd$s2 = $bd >> 2;
  var $this$s2 = $this >> 2;
  var __label__;
  var $m_xf = $this + 12 | 0;
  var $m_linearVelocity = $this + 64 | 0;
  var $position = $bd + 4 | 0;
  var $0 = HEAPF32[$position >> 2];
  var $cmp_i_i29 = !isNaN($0) && !isNaN(0);
  var $or_cond_i33 = $cmp_i_i29 & $0 > -Infinity & $0 < Infinity;
  do {
    if ($or_cond_i33) {
      var $1 = HEAPF32[$bd$s2 + 2];
      var $cmp_i1_i35 = !isNaN($1) && !isNaN(0);
      if ($cmp_i1_i35 & $1 > -Infinity & $1 < Infinity) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str78 | 0, 27, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World | 0, STRING_TABLE.__str179 | 0);
  }
  var $linearVelocity = $bd + 16 | 0;
  var $2 = HEAPF32[$linearVelocity >> 2];
  var $cmp_i_i = !isNaN($2) && !isNaN(0);
  var $or_cond_i25 = $cmp_i_i & $2 > -Infinity & $2 < Infinity;
  do {
    if ($or_cond_i25) {
      var $3 = HEAPF32[$bd$s2 + 5];
      var $cmp_i1_i = !isNaN($3) && !isNaN(0);
      if ($cmp_i1_i & $3 > -Infinity & $3 < Infinity) {
        __label__ = 6;
        break;
      }
      __label__ = 5;
      break;
    } else {
      __label__ = 5;
    }
  } while (0);
  if (__label__ == 5) {
    ___assert_func(STRING_TABLE.__str78 | 0, 28, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World | 0, STRING_TABLE.__str280 | 0);
  }
  var $angle$s2 = ($bd + 12 | 0) >> 2;
  var $4 = HEAPF32[$angle$s2];
  var $cmp_i17 = !isNaN($4) && !isNaN(0);
  if (!($cmp_i17 & $4 > -Infinity & $4 < Infinity)) {
    ___assert_func(STRING_TABLE.__str78 | 0, 29, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World | 0, STRING_TABLE.__str381 | 0);
  }
  var $angularVelocity = $bd + 24 | 0;
  var $5 = HEAPF32[$angularVelocity >> 2];
  var $cmp_i10 = !isNaN($5) && !isNaN(0);
  if (!($cmp_i10 & $5 > -Infinity & $5 < Infinity)) {
    ___assert_func(STRING_TABLE.__str78 | 0, 30, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World | 0, STRING_TABLE.__str482 | 0);
  }
  var $angularDamping = $bd + 32 | 0;
  var $6 = HEAPF32[$angularDamping >> 2];
  var $cmp_i3 = !isNaN($6) && !isNaN(0);
  if ($6 < 0 | $cmp_i3 & $6 > -Infinity & $6 < Infinity ^ 1) {
    ___assert_func(STRING_TABLE.__str78 | 0, 31, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World | 0, STRING_TABLE.__str583 | 0);
  }
  var $linearDamping = $bd + 28 | 0;
  var $7 = HEAPF32[$linearDamping >> 2];
  var $cmp_i = !isNaN($7) && !isNaN(0);
  if ($7 < 0 | $cmp_i & $7 > -Infinity & $7 < Infinity ^ 1) {
    ___assert_func(STRING_TABLE.__str78 | 0, 32, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World | 0, STRING_TABLE.__str684 | 0);
  }
  var $m_flags$s1 = ($this + 4 | 0) >> 1;
  HEAP16[$m_flags$s1] = 0;
  if ((HEAP8[$bd + 39 | 0] & 1) << 24 >> 24 == 0) {
    var $10 = 0;
  } else {
    HEAP16[$m_flags$s1] = 8;
    var $10 = 8;
  }
  var $10;
  if ((HEAP8[$bd + 38 | 0] & 1) << 24 >> 24 == 0) {
    var $13 = $10;
  } else {
    var $or32 = $10 | 16;
    HEAP16[$m_flags$s1] = $or32;
    var $13 = $or32;
  }
  var $13;
  if ((HEAP8[$bd + 36 | 0] & 1) << 24 >> 24 == 0) {
    var $16 = $13;
  } else {
    var $or39 = $13 | 4;
    HEAP16[$m_flags$s1] = $or39;
    var $16 = $or39;
  }
  var $16;
  if ((HEAP8[$bd + 37 | 0] & 1) << 24 >> 24 == 0) {
    var $19 = $16;
  } else {
    var $or46 = $16 | 2;
    HEAP16[$m_flags$s1] = $or46;
    var $19 = $or46;
  }
  var $19;
  if ((HEAP8[$bd + 40 | 0] & 1) << 24 >> 24 != 0) {
    HEAP16[$m_flags$s1] = $19 | 32;
  }
  HEAP32[$this$s2 + 22] = $world;
  var $22 = $position;
  var $23 = $m_xf;
  var $24$0 = HEAP32[$22 >> 2];
  var $24$1 = HEAP32[$22 + 4 >> 2];
  HEAP32[$23 >> 2] = $24$0;
  HEAP32[$23 + 4 >> 2] = $24$1;
  var $25 = HEAPF32[$angle$s2];
  var $call_i = _sinf($25);
  HEAPF32[$this$s2 + 5] = $call_i;
  var $call2_i = _cosf($25);
  HEAPF32[$this$s2 + 6] = $call2_i;
  HEAPF32[$this$s2 + 7] = 0;
  HEAPF32[$this$s2 + 8] = 0;
  var $26 = $this + 36 | 0;
  HEAP32[$26 >> 2] = $24$0;
  HEAP32[$26 + 4 >> 2] = $24$1;
  var $27 = $this + 44 | 0;
  HEAP32[$27 >> 2] = $24$0;
  HEAP32[$27 + 4 >> 2] = $24$1;
  var $28 = HEAPF32[$angle$s2];
  HEAPF32[$this$s2 + 13] = $28;
  var $29 = HEAPF32[$angle$s2];
  HEAPF32[$this$s2 + 14] = $29;
  HEAPF32[$this$s2 + 15] = 0;
  HEAP32[$this$s2 + 27] = 0;
  HEAP32[$this$s2 + 28] = 0;
  HEAP32[$this$s2 + 23] = 0;
  HEAP32[$this$s2 + 24] = 0;
  var $30 = $linearVelocity;
  var $31 = $m_linearVelocity;
  var $32$0 = HEAP32[$30 >> 2];
  var $32$1 = HEAP32[$30 + 4 >> 2];
  HEAP32[$31 >> 2] = $32$0;
  HEAP32[$31 + 4 >> 2] = $32$1;
  var $33 = HEAPF32[$angularVelocity >> 2];
  HEAPF32[$this$s2 + 18] = $33;
  var $34 = HEAPF32[$linearDamping >> 2];
  HEAPF32[$this$s2 + 33] = $34;
  var $35 = HEAPF32[$angularDamping >> 2];
  HEAPF32[$this$s2 + 34] = $35;
  var $36 = HEAPF32[$bd$s2 + 12];
  HEAPF32[$this$s2 + 35] = $36;
  HEAPF32[$this$s2 + 19] = 0;
  HEAPF32[$this$s2 + 20] = 0;
  HEAPF32[$this$s2 + 21] = 0;
  HEAPF32[$this$s2 + 36] = 0;
  var $37 = HEAP32[$bd$s2];
  HEAP32[$this$s2] = $37;
  var $m_mass = $this + 116 | 0;
  if (($37 | 0) == 2) {
    HEAPF32[$m_mass >> 2] = 1;
    HEAPF32[$this$s2 + 30] = 1;
  } else {
    HEAPF32[$m_mass >> 2] = 0;
    HEAPF32[$this$s2 + 30] = 0;
  }
  HEAPF32[$this$s2 + 31] = 0;
  HEAPF32[$this$s2 + 32] = 0;
  var $38 = HEAP32[$bd$s2 + 11];
  HEAP32[$this$s2 + 37] = $38;
  HEAP32[$this$s2 + 25] = 0;
  HEAP32[$this$s2 + 26] = 0;
  return;
  return;
}

function __ZN6b2Body7SetTypeE10b2BodyType($this, $type) {
  var $m_type$s2;
  var $m_world$s2;
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var $xf1_i = __stackBase__;
  var $m_world$s2 = ($this + 88 | 0) >> 2;
  var $1 = HEAP32[HEAP32[$m_world$s2] + 102868 >> 2];
  if (($1 & 2 | 0) == 0) {
    var $2 = $1;
  } else {
    ___assert_func(STRING_TABLE.__str78 | 0, 115, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body7SetTypeE10b2BodyType | 0, STRING_TABLE.__str785 | 0);
    var $2 = HEAP32[HEAP32[$m_world$s2] + 102868 >> 2];
  }
  var $2;
  var $cmp_i3 = ($2 & 2 | 0) == 0;
  $if_end$$for_end$48 : do {
    if ($cmp_i3) {
      var $m_type$s2 = ($this | 0) >> 2;
      if ((HEAP32[$m_type$s2] | 0) == ($type | 0)) {
        break;
      }
      HEAP32[$m_type$s2] = $type;
      __ZN6b2Body13ResetMassDataEv($this);
      var $cmp11 = (HEAP32[$m_type$s2] | 0) == 0;
      $if_then12$$if_end16$51 : do {
        if ($cmp11) {
          HEAPF32[$this$s2 + 16] = 0;
          HEAPF32[$this$s2 + 17] = 0;
          HEAPF32[$this$s2 + 18] = 0;
          var $5 = HEAPF32[$this$s2 + 14];
          HEAPF32[$this$s2 + 13] = $5;
          var $6 = $this + 44 | 0;
          var $7 = $this + 36 | 0;
          var $8$0 = HEAP32[$6 >> 2];
          var $8$1 = HEAP32[$6 + 4 >> 2];
          HEAP32[$7 >> 2] = $8$0;
          HEAP32[$7 + 4 >> 2] = $8$1;
          var $call_i_i = _sinf($5);
          HEAPF32[$xf1_i + 8 >> 2] = $call_i_i;
          var $call2_i_i = _cosf($5);
          HEAPF32[$xf1_i + 12 >> 2] = $call2_i_i;
          var $10 = HEAPF32[$this$s2 + 7];
          var $11 = HEAPF32[$this$s2 + 8];
          var $sub_i_i = $call2_i_i * $10 - $call_i_i * $11;
          var $add_i_i = $call_i_i * $10 + $call2_i_i * $11;
          var $bitcast = (tempDoubleI32[0] = $8$0, tempDoubleF32[0]);
          var $sub_i4_i = $bitcast - $sub_i_i;
          var $14 = (tempDoubleI32[0] = $8$1, tempDoubleF32[0]);
          var $sub3_i_i = $14 - $add_i_i;
          var $15 = $xf1_i;
          var $16 = (tempDoubleF32[0] = $sub_i4_i, tempDoubleI32[0]);
          var $17$0 = $16;
          var $18 = (tempDoubleF32[0] = $sub3_i_i, tempDoubleI32[0]);
          var $21$0 = 0 | $17$0;
          var $21$1 = $18 | 0;
          HEAP32[$15 >> 2] = $21$0;
          HEAP32[$15 + 4 >> 2] = $21$1;
          var $m_broadPhase_i = HEAP32[$m_world$s2] + 102872 | 0;
          var $f_09_i = HEAP32[$this$s2 + 25];
          if (($f_09_i | 0) == 0) {
            break;
          }
          var $m_xf_i = $this + 12 | 0;
          var $f_011_i = $f_09_i;
          while (1) {
            var $f_011_i;
            __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($f_011_i, $m_broadPhase_i, $xf1_i, $m_xf_i);
            var $f_0_i = HEAP32[$f_011_i + 4 >> 2];
            if (($f_0_i | 0) == 0) {
              break $if_then12$$if_end16$51;
            }
            var $f_011_i = $f_0_i;
          }
        }
      } while (0);
      var $m_flags_i4 = $this + 4 | 0;
      var $23 = HEAP16[$m_flags_i4 >> 1];
      if (($23 & 2) << 16 >> 16 == 0) {
        var $or_i = $23 | 2;
        HEAP16[$m_flags_i4 >> 1] = $or_i;
        HEAPF32[$this$s2 + 36] = 0;
      }
      HEAPF32[$this$s2 + 19] = 0;
      HEAPF32[$this$s2 + 20] = 0;
      HEAPF32[$this$s2 + 21] = 0;
      var $f_09 = HEAP32[$this$s2 + 25];
      if (($f_09 | 0) == 0) {
        break;
      }
      var $f_011 = $f_09;
      while (1) {
        var $f_011;
        __ZN9b2Fixture8RefilterEv($f_011);
        var $f_0 = HEAP32[$f_011 + 4 >> 2];
        if (($f_0 | 0) == 0) {
          break $if_end$$for_end$48;
        }
        var $f_011 = $f_0;
      }
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN6b2Body13ResetMassDataEv($this) {
  var $f_046$s2;
  var $m_I$s2;
  var $m_invMass$s2;
  var $m_mass$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var __label__;
  var $massData = __stackBase__;
  var $m_mass$s2 = ($this + 116 | 0) >> 2;
  HEAPF32[$m_mass$s2] = 0;
  var $m_invMass$s2 = ($this + 120 | 0) >> 2;
  HEAPF32[$m_invMass$s2] = 0;
  var $m_I$s2 = ($this + 124 | 0) >> 2;
  HEAPF32[$m_I$s2] = 0;
  var $m_invI = $this + 128 | 0;
  HEAPF32[$m_invI >> 2] = 0;
  var $m_sweep = $this + 28 | 0;
  HEAPF32[$m_sweep >> 2] = 0;
  HEAPF32[$this + 32 >> 2] = 0;
  var $0 = HEAP32[$this >> 2];
  do {
    if ($0 == 0 || $0 == 1) {
      var $1 = $this + 12 | 0;
      var $2 = $this + 36 | 0;
      var $st$4$0 = $1 | 0;
      var $3$0 = HEAP32[$st$4$0 >> 2];
      var $st$4$1 = $1 + 4 | 0;
      var $3$1 = HEAP32[$st$4$1 >> 2];
      HEAP32[$2 >> 2] = $3$0;
      HEAP32[$2 + 4 >> 2] = $3$1;
      var $4 = $this + 44 | 0;
      HEAP32[$4 >> 2] = $3$0;
      HEAP32[$4 + 4 >> 2] = $3$1;
      var $5 = HEAPF32[$this + 56 >> 2];
      HEAPF32[$this + 52 >> 2] = $5;
      __label__ = 18;
      break;
    } else if ($0 == 2) {
      __label__ = 3;
    } else {
      ___assert_func(STRING_TABLE.__str78 | 0, 284, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body13ResetMassDataEv | 0, STRING_TABLE.__str1189 | 0);
      __label__ = 3;
      break;
    }
  } while (0);
  if (__label__ == 3) {
    var $$emscripten$temp$0 = _b2Vec2_zero;
    var $6$1 = HEAP32[$$emscripten$temp$0 + 4 >> 2];
    var $8 = (tempDoubleI32[0] = HEAP32[$$emscripten$temp$0 >> 2], tempDoubleF32[0]);
    var $10 = (tempDoubleI32[0] = $6$1, tempDoubleF32[0]);
    var $f_044 = HEAP32[$this + 100 >> 2];
    var $tobool45 = ($f_044 | 0) == 0;
    $for_end$$for_body_lr_ph$69 : do {
      if ($tobool45) {
        var $_lcssa = $10;
        var $_lcssa43 = $8;
      } else {
        var $mass = $massData | 0;
        var $x_i33 = $massData + 4 | 0;
        var $y_i35 = $massData + 8 | 0;
        var $I = $massData + 12 | 0;
        var $12 = $10;
        var $11 = $8;
        var $f_046 = $f_044, $f_046$s2 = $f_046 >> 2;
        while (1) {
          var $f_046;
          var $11;
          var $12;
          var $13 = HEAPF32[$f_046$s2];
          if ($13 == 0) {
            var $24 = $11;
            var $23 = $12;
          } else {
            var $14 = HEAP32[$f_046$s2 + 3];
            var $16 = HEAP32[HEAP32[$14 >> 2] + 28 >> 2];
            FUNCTION_TABLE[$16]($14, $massData, $13);
            var $17 = HEAPF32[$mass >> 2];
            var $add = HEAPF32[$m_mass$s2] + $17;
            HEAPF32[$m_mass$s2] = $add;
            var $add_i29 = $11 + HEAPF32[$x_i33 >> 2] * $17;
            var $add4_i32 = $12 + HEAPF32[$y_i35 >> 2] * $17;
            var $add19 = HEAPF32[$m_I$s2] + HEAPF32[$I >> 2];
            HEAPF32[$m_I$s2] = $add19;
            var $24 = $add_i29;
            var $23 = $add4_i32;
          }
          var $23;
          var $24;
          var $f_0 = HEAP32[$f_046$s2 + 1];
          if (($f_0 | 0) == 0) {
            var $_lcssa = $23;
            var $_lcssa43 = $24;
            break $for_end$$for_body_lr_ph$69;
          }
          var $12 = $23;
          var $11 = $24;
          var $f_046 = $f_0, $f_046$s2 = $f_046 >> 2;
        }
      }
    } while (0);
    var $_lcssa43;
    var $_lcssa;
    var $25 = HEAPF32[$m_mass$s2];
    if ($25 > 0) {
      var $div = 1 / $25;
      HEAPF32[$m_invMass$s2] = $div;
      var $28 = $_lcssa43 * $div;
      var $27 = $_lcssa * $div;
      var $26 = $25;
    } else {
      HEAPF32[$m_mass$s2] = 1;
      HEAPF32[$m_invMass$s2] = 1;
      var $28 = $_lcssa43;
      var $27 = $_lcssa;
      var $26 = 1;
    }
    var $26;
    var $27;
    var $28;
    var $29 = HEAPF32[$m_I$s2];
    var $cmp30 = $29 > 0;
    do {
      if ($cmp30) {
        if ((HEAP16[$this + 4 >> 1] & 16) << 16 >> 16 != 0) {
          __label__ = 16;
          break;
        }
        var $sub = $29 - $26 * ($28 * $28 + $27 * $27);
        HEAPF32[$m_I$s2] = $sub;
        if ($sub > 0) {
          var $31 = $sub;
        } else {
          ___assert_func(STRING_TABLE.__str78 | 0, 319, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body13ResetMassDataEv | 0, STRING_TABLE.__str1290 | 0);
          var $31 = HEAPF32[$m_I$s2];
        }
        var $31;
        var $storemerge = 1 / $31;
        __label__ = 17;
        break;
      }
      __label__ = 16;
    } while (0);
    if (__label__ == 16) {
      HEAPF32[$m_I$s2] = 0;
      var $storemerge = 0;
    }
    var $storemerge;
    HEAPF32[$m_invI >> 2] = $storemerge;
    var $32 = $this + 44 | 0;
    var $st$4$0 = $32 | 0;
    var $st$4$1 = $32 + 4 | 0;
    var $33$1 = HEAP32[$st$4$1 >> 2];
    var $35 = (tempDoubleI32[0] = HEAP32[$st$4$0 >> 2], tempDoubleF32[0]);
    var $37 = (tempDoubleI32[0] = $33$1, tempDoubleF32[0]);
    var $38 = $m_sweep;
    var $39 = (tempDoubleF32[0] = $28, tempDoubleI32[0]);
    var $40$0 = $39;
    var $41 = (tempDoubleF32[0] = $27, tempDoubleI32[0]);
    var $44$1 = $41 | 0;
    HEAP32[$38 >> 2] = 0 | $40$0;
    HEAP32[$38 + 4 >> 2] = $44$1;
    var $c052 = $this + 36 | 0;
    var $45 = HEAPF32[$this + 24 >> 2];
    var $46 = HEAPF32[$this + 20 >> 2];
    var $add_i14 = $45 * $28 - $46 * $27 + HEAPF32[$this + 12 >> 2];
    var $add17_i = $46 * $28 + $45 * $27 + HEAPF32[$this + 16 >> 2];
    var $49 = (tempDoubleF32[0] = $add_i14, tempDoubleI32[0]);
    var $50$0 = $49;
    var $51 = (tempDoubleF32[0] = $add17_i, tempDoubleI32[0]);
    var $54$0 = 0 | $50$0;
    var $54$1 = $51 | 0;
    HEAP32[$32 >> 2] = $54$0;
    HEAP32[$32 + 4 >> 2] = $54$1;
    var $55 = $c052;
    HEAP32[$55 >> 2] = $54$0;
    HEAP32[$55 + 4 >> 2] = $54$1;
    var $56 = HEAPF32[$this + 72 >> 2];
    var $mul1_i = ($add_i14 - $35) * $56;
    var $x2_i = $this + 64 | 0;
    var $add_i = HEAPF32[$x2_i >> 2] + ($add17_i - $37) * -$56;
    HEAPF32[$x2_i >> 2] = $add_i;
    var $y3_i = $this + 68 | 0;
    var $add4_i = HEAPF32[$y3_i >> 2] + $mul1_i;
    HEAPF32[$y3_i >> 2] = $add4_i;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN6b2Body19SynchronizeFixturesEv($this) {
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 16;
  var $xf1 = __stackBase__;
  var $0 = HEAPF32[$this$s2 + 13];
  var $call_i = _sinf($0);
  HEAPF32[$xf1 + 8 >> 2] = $call_i;
  var $call2_i = _cosf($0);
  HEAPF32[$xf1 + 12 >> 2] = $call2_i;
  var $1 = HEAPF32[$this$s2 + 7];
  var $2 = HEAPF32[$this$s2 + 8];
  var $sub3_i = HEAPF32[$this$s2 + 10] - ($call_i * $1 + $call2_i * $2);
  var $5 = $xf1;
  var $6 = (tempDoubleF32[0] = HEAPF32[$this$s2 + 9] - ($call2_i * $1 - $call_i * $2), tempDoubleI32[0]);
  var $7$0 = $6;
  var $8 = (tempDoubleF32[0] = $sub3_i, tempDoubleI32[0]);
  var $11$1 = $8 | 0;
  HEAP32[$5 >> 2] = 0 | $7$0;
  HEAP32[$5 + 4 >> 2] = $11$1;
  var $m_broadPhase = HEAP32[$this$s2 + 22] + 102872 | 0;
  var $f_09 = HEAP32[$this$s2 + 25];
  var $tobool10 = ($f_09 | 0) == 0;
  $for_end$$for_body_lr_ph$92 : do {
    if (!$tobool10) {
      var $m_xf = $this + 12 | 0;
      var $f_011 = $f_09;
      while (1) {
        var $f_011;
        __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($f_011, $m_broadPhase, $xf1, $m_xf);
        var $f_0 = HEAP32[$f_011 + 4 >> 2];
        if (($f_0 | 0) == 0) {
          break $for_end$$for_body_lr_ph$92;
        }
        var $f_011 = $f_0;
      }
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($this, $def) {
  var $m_proxies_i8$s2;
  var $19$s1;
  var $18$s1;
  var $14$s2;
  var $m_world$s2;
  var $def$s2 = $def >> 2;
  var $m_world$s2 = ($this + 88 | 0) >> 2;
  var $0 = HEAP32[$m_world$s2];
  var $1 = HEAP32[$0 + 102868 >> 2];
  if (($1 & 2 | 0) == 0) {
    var $3 = $0;
    var $2 = $1;
  } else {
    ___assert_func(STRING_TABLE.__str78 | 0, 153, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body13CreateFixtureEPK12b2FixtureDef | 0, STRING_TABLE.__str785 | 0);
    var $_pre = HEAP32[$m_world$s2];
    var $3 = $_pre;
    var $2 = HEAP32[$_pre + 102868 >> 2];
  }
  var $2;
  var $3;
  if (($2 & 2 | 0) == 0) {
    var $m_blockAllocator = $3 | 0;
    var $call7 = __ZN16b2BlockAllocator8AllocateEi($m_blockAllocator, 44);
    if (($call7 | 0) == 0) {
      var $14 = 0, $14$s2 = $14 >> 2;
    } else {
      var $4 = $call7;
      HEAP16[$call7 + 32 >> 1] = 1;
      HEAP16[$call7 + 34 >> 1] = -1;
      HEAP16[$call7 + 36 >> 1] = 0;
      HEAP32[$call7 + 40 >> 2] = 0;
      HEAP32[$call7 + 8 >> 2] = 0;
      HEAP32[$call7 + 4 >> 2] = 0;
      HEAP32[$call7 + 24 >> 2] = 0;
      HEAP32[$call7 + 28 >> 2] = 0;
      HEAP32[$call7 + 12 >> 2] = 0;
      HEAPF32[$call7 >> 2] = 0;
      var $14 = $4, $14$s2 = $14 >> 2;
    }
    var $14;
    var $15 = HEAP32[$def$s2 + 1];
    HEAP32[$14$s2 + 10] = $15;
    var $16 = HEAPF32[$def$s2 + 2];
    HEAPF32[$14$s2 + 4] = $16;
    var $17 = HEAPF32[$def$s2 + 3];
    HEAPF32[$14$s2 + 5] = $17;
    var $m_body_i5 = $14 + 8 | 0;
    HEAP32[$m_body_i5 >> 2] = $this;
    var $m_next_i6 = $14 + 4 | 0;
    HEAP32[$m_next_i6 >> 2] = 0;
    var $18$s1 = ($14 + 32 | 0) >> 1;
    var $19$s1 = ($def + 22 | 0) >> 1;
    HEAP16[$18$s1] = HEAP16[$19$s1];
    HEAP16[$18$s1 + 1] = HEAP16[$19$s1 + 1];
    HEAP16[$18$s1 + 2] = HEAP16[$19$s1 + 2];
    var $21 = HEAP8[$def + 20 | 0] & 1;
    HEAP8[$14 + 38 | 0] = $21;
    var $22 = HEAP32[$def$s2];
    var $24 = HEAP32[HEAP32[$22 >> 2] + 8 >> 2];
    var $call_i = FUNCTION_TABLE[$24]($22, $m_blockAllocator);
    HEAP32[$14$s2 + 3] = $call_i;
    var $26 = HEAP32[HEAP32[$call_i >> 2] + 12 >> 2];
    var $call5_i = FUNCTION_TABLE[$26]($call_i);
    var $mul_i = $call5_i * 28 | 0;
    var $call6_i = __ZN16b2BlockAllocator8AllocateEi($m_blockAllocator, $mul_i);
    var $27 = $call6_i;
    var $m_proxies_i8$s2 = ($14 + 24 | 0) >> 2;
    HEAP32[$m_proxies_i8$s2] = $27;
    var $cmp1_i = ($call5_i | 0) > 0;
    $for_body_i_preheader$$_ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef_exit$106 : do {
      if ($cmp1_i) {
        var $28 = $call6_i + 16 | 0;
        HEAP32[$28 >> 2] = 0;
        var $proxyId_i12 = HEAP32[$m_proxies_i8$s2] + 24 | 0;
        HEAP32[$proxyId_i12 >> 2] = -1;
        if (($call5_i | 0) == 1) {
          break;
        }
        var $inc_i14 = 1;
        while (1) {
          var $inc_i14;
          var $fixture_i = HEAP32[$m_proxies_i8$s2] + $inc_i14 * 28 + 16 | 0;
          HEAP32[$fixture_i >> 2] = 0;
          var $proxyId_i = HEAP32[$m_proxies_i8$s2] + $inc_i14 * 28 + 24 | 0;
          HEAP32[$proxyId_i >> 2] = -1;
          var $inc_i = $inc_i14 + 1 | 0;
          if (($inc_i | 0) == ($call5_i | 0)) {
            break $for_body_i_preheader$$_ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef_exit$106;
          }
          var $inc_i14 = $inc_i;
        }
      }
    } while (0);
    HEAP32[$14$s2 + 7] = 0;
    var $31 = HEAPF32[$def$s2 + 4];
    var $m_density_i10 = $14 | 0;
    HEAPF32[$m_density_i10 >> 2] = $31;
    if ((HEAP16[$this + 4 >> 1] & 32) << 16 >> 16 != 0) {
      var $m_broadPhase = HEAP32[$m_world$s2] + 102872 | 0;
      var $m_xf = $this + 12 | 0;
      __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($14, $m_broadPhase, $m_xf);
    }
    var $m_fixtureList = $this + 100 | 0;
    var $34 = HEAP32[$m_fixtureList >> 2];
    HEAP32[$m_next_i6 >> 2] = $34;
    HEAP32[$m_fixtureList >> 2] = $14;
    var $m_fixtureCount = $this + 104 | 0;
    var $inc = HEAP32[$m_fixtureCount >> 2] + 1 | 0;
    HEAP32[$m_fixtureCount >> 2] = $inc;
    HEAP32[$m_body_i5 >> 2] = $this;
    if (HEAPF32[$m_density_i10 >> 2] > 0) {
      __ZN6b2Body13ResetMassDataEv($this);
    }
    var $m_flags17 = HEAP32[$m_world$s2] + 102868 | 0;
    var $or = HEAP32[$m_flags17 >> 2] | 1;
    HEAP32[$m_flags17 >> 2] = $or;
    var $retval_0 = $14;
  } else {
    var $retval_0 = 0;
  }
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN6b2Body13CreateFixtureEPK7b2Shapef($this, $shape, $density) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var $def = __stackBase__;
  HEAP16[$def + 22 >> 1] = 1;
  HEAP16[$def + 24 >> 1] = -1;
  HEAP16[$def + 26 >> 1] = 0;
  var $shape_i_i = $def | 0;
  HEAP32[$def + 4 >> 2] = 0;
  HEAPF32[$def + 8 >> 2] = .20000000298023224;
  HEAPF32[$def + 12 >> 2] = 0;
  var $density_i_i = $def + 16 | 0;
  HEAP8[$def + 20 | 0] = 0;
  HEAP32[$shape_i_i >> 2] = $shape;
  HEAPF32[$density_i_i >> 2] = $density;
  var $call = __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($this, $def);
  STACKTOP = __stackBase__;
  return $call;
  return null;
}

function __ZN15b2ContactFilterD1Ev($this) {
  return;
  return;
}

function __ZN17b2ContactListenerD1Ev($this) {
  return;
  return;
}

function __ZNK6b2Body13ShouldCollideEPKS_($this, $other) {
  var __label__;
  var $cmp = (HEAP32[$this >> 2] | 0) == 2;
  do {
    if ($cmp) {
      __label__ = 2;
    } else {
      if ((HEAP32[$other >> 2] | 0) == 2) {
        __label__ = 2;
        break;
      }
      var $retval_0 = 0;
      __label__ = 7;
      break;
    }
  } while (0);
  $if_end$$return$66 : do {
    if (__label__ == 2) {
      var $jn_0_in = $this + 108 | 0;
      while (1) {
        var $jn_0_in;
        var $jn_0 = HEAP32[$jn_0_in >> 2];
        if (($jn_0 | 0) == 0) {
          var $retval_0 = 1;
          break $if_end$$return$66;
        }
        if ((HEAP32[$jn_0 >> 2] | 0) == ($other | 0)) {
          if ((HEAP8[HEAP32[$jn_0 + 4 >> 2] + 61 | 0] & 1) << 24 >> 24 == 0) {
            var $retval_0 = 0;
            break $if_end$$return$66;
          }
        }
        var $jn_0_in = $jn_0 + 12 | 0;
      }
    }
  } while (0);
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN6b2Body14DestroyFixtureEP9b2Fixture($this, $fixture) {
  var $m_proxyCount_i$s2;
  var $m_fixtureCount$s2;
  var $m_world$s2;
  var $m_world$s2 = ($this + 88 | 0) >> 2;
  var $1 = HEAP32[HEAP32[$m_world$s2] + 102868 >> 2];
  if (($1 & 2 | 0) == 0) {
    var $2 = $1;
  } else {
    ___assert_func(STRING_TABLE.__str78 | 0, 201, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body14DestroyFixtureEP9b2Fixture | 0, STRING_TABLE.__str785 | 0);
    var $2 = HEAP32[HEAP32[$m_world$s2] + 102868 >> 2];
  }
  var $2;
  if (($2 & 2 | 0) == 0) {
    var $m_body = $fixture + 8 | 0;
    if ((HEAP32[$m_body >> 2] | 0) != ($this | 0)) {
      ___assert_func(STRING_TABLE.__str78 | 0, 207, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body14DestroyFixtureEP9b2Fixture | 0, STRING_TABLE.__str886 | 0);
    }
    var $m_fixtureCount$s2 = ($this + 104 | 0) >> 2;
    if ((HEAP32[$m_fixtureCount$s2] | 0) <= 0) {
      ___assert_func(STRING_TABLE.__str78 | 0, 210, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body14DestroyFixtureEP9b2Fixture | 0, STRING_TABLE.__str987 | 0);
    }
    var $node_0 = $this + 100 | 0;
    while (1) {
      var $node_0;
      var $5 = HEAP32[$node_0 >> 2];
      if (($5 | 0) == 0) {
        ___assert_func(STRING_TABLE.__str78 | 0, 226, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body14DestroyFixtureEP9b2Fixture | 0, STRING_TABLE.__str1088 | 0);
        break;
      }
      if (($5 | 0) == ($fixture | 0)) {
        var $6 = HEAP32[$fixture + 4 >> 2];
        HEAP32[$node_0 >> 2] = $6;
        break;
      }
      var $node_0 = $5 + 4 | 0;
    }
    var $7 = HEAP32[$this + 112 >> 2];
    var $tobool235 = ($7 | 0) == 0;
    $while_end32$$while_body24$22 : do {
      if (!$tobool235) {
        var $edge_06 = $7;
        while (1) {
          var $edge_06;
          var $8 = HEAP32[$edge_06 + 4 >> 2];
          var $9 = HEAP32[$edge_06 + 12 >> 2];
          if ((HEAP32[$8 + 48 >> 2] | 0) == ($fixture | 0) | (HEAP32[$8 + 52 >> 2] | 0) == ($fixture | 0)) {
            var $13 = HEAP32[$m_world$s2] + 102872 | 0;
            var $14 = $8;
            __ZN16b2ContactManager7DestroyEP9b2Contact($13, $14);
          }
          if (($9 | 0) == 0) {
            break $while_end32$$while_body24$22;
          }
          var $edge_06 = $9;
        }
      }
    } while (0);
    var $15 = HEAPU32[$m_world$s2];
    var $m_blockAllocator = $15 | 0;
    if ((HEAP16[$this + 4 >> 1] & 32) << 16 >> 16 != 0) {
      var $m_proxyCount_i$s2 = ($fixture + 28 | 0) >> 2;
      var $cmp1_i = (HEAP32[$m_proxyCount_i$s2] | 0) > 0;
      $for_body_lr_ph_i$$_ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase_exit$31 : do {
        if ($cmp1_i) {
          var $m_proxies_i = $fixture + 24 | 0;
          var $18 = $15 + 102912 | 0;
          var $19 = $15 + 102904 | 0;
          var $20 = $15 + 102900 | 0;
          var $m_tree_i_i = $15 + 102872 | 0;
          var $i_02_i = 0;
          while (1) {
            var $i_02_i;
            var $proxyId_i = HEAP32[$m_proxies_i >> 2] + $i_02_i * 28 + 24 | 0;
            var $22 = HEAP32[$proxyId_i >> 2];
            var $23 = HEAP32[$18 >> 2];
            var $i_0_i_i_i = 0;
            while (1) {
              var $i_0_i_i_i;
              if (($i_0_i_i_i | 0) >= ($23 | 0)) {
                break;
              }
              var $arrayidx_i_i_i = ($i_0_i_i_i << 2) + HEAP32[$19 >> 2] | 0;
              if ((HEAP32[$arrayidx_i_i_i >> 2] | 0) == ($22 | 0)) {
                HEAP32[$arrayidx_i_i_i >> 2] = -1;
                break;
              }
              var $i_0_i_i_i = $i_0_i_i_i + 1 | 0;
            }
            var $dec_i_i = HEAP32[$20 >> 2] - 1 | 0;
            HEAP32[$20 >> 2] = $dec_i_i;
            __ZN13b2DynamicTree12DestroyProxyEi($m_tree_i_i, $22);
            HEAP32[$proxyId_i >> 2] = -1;
            var $inc_i = $i_02_i + 1 | 0;
            if (($inc_i | 0) >= (HEAP32[$m_proxyCount_i$s2] | 0)) {
              break $for_body_lr_ph_i$$_ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase_exit$31;
            }
            var $i_02_i = $inc_i;
          }
        }
      } while (0);
      HEAP32[$m_proxyCount_i$s2] = 0;
    }
    __ZN9b2Fixture7DestroyEP16b2BlockAllocator($fixture, $m_blockAllocator);
    HEAP32[$m_body >> 2] = 0;
    HEAP32[$fixture + 4 >> 2] = 0;
    var $28 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 44 | 0];
    var $conv_i = $28 & 255;
    if (($28 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $29 = $fixture;
    var $arrayidx11_i = ($conv_i << 2) + $15 + 12 | 0;
    var $30 = HEAP32[$arrayidx11_i >> 2];
    HEAP32[$fixture >> 2] = $30;
    HEAP32[$arrayidx11_i >> 2] = $29;
    var $dec = HEAP32[$m_fixtureCount$s2] - 1 | 0;
    HEAP32[$m_fixtureCount$s2] = $dec;
    __ZN6b2Body13ResetMassDataEv($this);
  }
  return;
  return;
}

function __ZN6b2Body11SetMassDataEPK10b2MassData($this, $massData) {
  var $10$s2;
  var $m_I$s2;
  var $m_world = $this + 88 | 0;
  var $1 = HEAP32[HEAP32[$m_world >> 2] + 102868 >> 2];
  if (($1 & 2 | 0) == 0) {
    var $2 = $1;
  } else {
    ___assert_func(STRING_TABLE.__str78 | 0, 340, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body11SetMassDataEPK10b2MassData | 0, STRING_TABLE.__str785 | 0);
    var $2 = HEAP32[HEAP32[$m_world >> 2] + 102868 >> 2];
  }
  var $2;
  var $cmp_i24 = ($2 & 2 | 0) == 0;
  do {
    if ($cmp_i24) {
      if ((HEAP32[$this >> 2] | 0) != 2) {
        break;
      }
      var $m_invMass = $this + 120 | 0;
      HEAPF32[$m_invMass >> 2] = 0;
      var $m_I$s2 = ($this + 124 | 0) >> 2;
      HEAPF32[$m_I$s2] = 0;
      var $m_invI = $this + 128 | 0;
      HEAPF32[$m_invI >> 2] = 0;
      var $4 = HEAPF32[$massData >> 2];
      var $storemerge = $4 > 0 ? $4 : 1;
      HEAPF32[$this + 116 >> 2] = $storemerge;
      var $div = 1 / $storemerge;
      HEAPF32[$m_invMass >> 2] = $div;
      var $5 = HEAPF32[$massData + 12 >> 2];
      var $cmp16 = $5 > 0;
      do {
        if ($cmp16) {
          if ((HEAP16[$this + 4 >> 1] & 16) << 16 >> 16 != 0) {
            break;
          }
          var $7 = HEAPF32[$massData + 4 >> 2];
          var $8 = HEAPF32[$massData + 8 >> 2];
          var $sub = $5 - $storemerge * ($7 * $7 + $8 * $8);
          HEAPF32[$m_I$s2] = $sub;
          if ($sub > 0) {
            var $9 = $sub;
          } else {
            ___assert_func(STRING_TABLE.__str78 | 0, 366, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body11SetMassDataEPK10b2MassData | 0, STRING_TABLE.__str1290 | 0);
            var $9 = HEAPF32[$m_I$s2];
          }
          var $9;
          HEAPF32[$m_invI >> 2] = 1 / $9;
        }
      } while (0);
      var $m_sweep = $this + 28 | 0;
      var $10$s2 = ($this + 44 | 0) >> 2;
      var $11$1 = HEAP32[$10$s2 + 1];
      var $13 = (tempDoubleI32[0] = HEAP32[$10$s2], tempDoubleF32[0]);
      var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
      var $16 = $massData + 4 | 0;
      var $17 = $m_sweep;
      var $18$0 = HEAP32[$16 >> 2];
      var $18$1 = HEAP32[$16 + 4 >> 2];
      HEAP32[$17 >> 2] = $18$0;
      HEAP32[$17 + 4 >> 2] = $18$1;
      var $c0 = $this + 36 | 0;
      var $19 = HEAPF32[$this + 24 >> 2];
      var $bitcast = (tempDoubleI32[0] = $18$0, tempDoubleF32[0]);
      var $mul_i9 = $19 * $bitcast;
      var $20 = HEAPF32[$this + 20 >> 2];
      var $23 = (tempDoubleI32[0] = $18$1, tempDoubleF32[0]);
      var $add_i12 = $mul_i9 - $20 * $23 + HEAPF32[$this + 12 >> 2];
      var $add17_i = $20 * $bitcast + $19 * $23 + HEAPF32[$this + 16 >> 2];
      var $26 = (tempDoubleF32[0] = $add_i12, tempDoubleI32[0]);
      var $27$0 = $26;
      var $28 = (tempDoubleF32[0] = $add17_i, tempDoubleI32[0]);
      var $31$0 = 0 | $27$0;
      var $31$1 = $28 | 0;
      HEAP32[$10$s2] = $31$0;
      HEAP32[$10$s2 + 1] = $31$1;
      var $32 = $c0;
      HEAP32[$32 >> 2] = $31$0;
      HEAP32[$32 + 4 >> 2] = $31$1;
      var $33 = HEAPF32[$this + 72 >> 2];
      var $mul1_i = ($add_i12 - $13) * $33;
      var $x2_i = $this + 64 | 0;
      var $add_i = HEAPF32[$x2_i >> 2] + ($add17_i - $15) * -$33;
      HEAPF32[$x2_i >> 2] = $add_i;
      var $y3_i = $this + 68 | 0;
      var $add4_i = HEAPF32[$y3_i >> 2] + $mul1_i;
      HEAPF32[$y3_i >> 2] = $add4_i;
    }
  } while (0);
  return;
  return;
}

function __ZN6b2Body12SetTransformERK6b2Vec2f($this, $position, $angle) {
  var $m_world$s2;
  var $this$s2 = $this >> 2;
  var $m_world$s2 = ($this + 88 | 0) >> 2;
  var $0 = HEAP32[$m_world$s2];
  var $1 = HEAP32[$0 + 102868 >> 2];
  if (($1 & 2 | 0) == 0) {
    var $3 = $0;
    var $2 = $1;
  } else {
    ___assert_func(STRING_TABLE.__str78 | 0, 404, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body12SetTransformERK6b2Vec2f | 0, STRING_TABLE.__str785 | 0);
    var $_pre = HEAP32[$m_world$s2];
    var $3 = $_pre;
    var $2 = HEAP32[$_pre + 102868 >> 2];
  }
  var $2;
  var $3;
  if (($2 & 2 | 0) == 0) {
    var $m_xf = $this + 12 | 0;
    var $call_i = _sinf($angle);
    HEAPF32[$this$s2 + 5] = $call_i;
    var $call2_i = _cosf($angle);
    HEAPF32[$this$s2 + 6] = $call2_i;
    var $4 = $position;
    var $5 = $m_xf;
    var $6$0 = HEAP32[$4 >> 2];
    var $6$1 = HEAP32[$4 + 4 >> 2];
    HEAP32[$5 >> 2] = $6$0;
    HEAP32[$5 + 4 >> 2] = $6$1;
    var $c = $this + 44 | 0;
    var $7 = HEAPF32[$this$s2 + 7];
    var $8 = HEAPF32[$this$s2 + 8];
    var $sub_i = $call2_i * $7 - $call_i * $8;
    var $bitcast = (tempDoubleI32[0] = $6$0, tempDoubleF32[0]);
    var $add_i = $sub_i + $bitcast;
    var $add14_i = $call_i * $7 + $call2_i * $8;
    var $11 = (tempDoubleI32[0] = $6$1, tempDoubleF32[0]);
    var $add17_i = $add14_i + $11;
    var $12 = $c;
    var $13 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
    var $14$0 = $13;
    var $15 = (tempDoubleF32[0] = $add17_i, tempDoubleI32[0]);
    var $18$0 = 0 | $14$0;
    var $18$1 = $15 | 0;
    HEAP32[$12 >> 2] = $18$0;
    HEAP32[$12 + 4 >> 2] = $18$1;
    HEAPF32[$this$s2 + 14] = $angle;
    var $19 = $this + 36 | 0;
    HEAP32[$19 >> 2] = $18$0;
    HEAP32[$19 + 4 >> 2] = $18$1;
    HEAPF32[$this$s2 + 13] = $angle;
    var $m_broadPhase = $3 + 102872 | 0;
    var $f_07 = HEAP32[$this$s2 + 25];
    if (($f_07 | 0) == 0) {
      var $20 = $3;
    } else {
      var $f_09 = $f_07;
      while (1) {
        var $f_09;
        __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($f_09, $m_broadPhase, $m_xf, $m_xf);
        var $f_0 = HEAP32[$f_09 + 4 >> 2];
        if (($f_0 | 0) == 0) {
          break;
        }
        var $f_09 = $f_0;
      }
      var $20 = HEAP32[$m_world$s2];
    }
    var $20;
    var $m_contactManager18 = $20 + 102872 | 0;
    __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($m_contactManager18, $m_contactManager18);
  }
  return;
  return;
}

function __ZN6b2Body9SetActiveEb($this, $flag) {
  var $m_proxyCount_i$s2;
  var $m_flags_i1$s1;
  var $m_world$s2;
  var $m_world$s2 = ($this + 88 | 0) >> 2;
  if ((HEAP32[HEAP32[$m_world$s2] + 102868 >> 2] & 2 | 0) != 0) {
    ___assert_func(STRING_TABLE.__str78 | 0, 443, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body9SetActiveEb | 0, STRING_TABLE.__str785 | 0);
  }
  var $m_flags_i1$s1 = ($this + 4 | 0) >> 1;
  var $2 = HEAP16[$m_flags_i1$s1];
  var $cmp5tmp = ($2 & 32) << 16 >> 16 != 0 ^ $flag;
  $if_end$$if_end31$91 : do {
    if ($cmp5tmp) {
      if ($flag) {
        var $or = $2 | 32;
        HEAP16[$m_flags_i1$s1] = $or;
        var $m_broadPhase = HEAP32[$m_world$s2] + 102872 | 0;
        var $f_010 = HEAP32[$this + 100 >> 2];
        if (($f_010 | 0) == 0) {
          break;
        }
        var $m_xf = $this + 12 | 0;
        var $f_012 = $f_010;
        while (1) {
          var $f_012;
          __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($f_012, $m_broadPhase, $m_xf);
          var $f_0 = HEAP32[$f_012 + 4 >> 2];
          if (($f_0 | 0) == 0) {
            break $if_end$$if_end31$91;
          }
          var $f_012 = $f_0;
        }
      } else {
        var $and = $2 & -33;
        HEAP16[$m_flags_i1$s1] = $and;
        var $4 = HEAP32[$m_world$s2];
        var $f19_07 = HEAP32[$this + 100 >> 2];
        var $tobool228 = ($f19_07 | 0) == 0;
        $for_end26$$for_body23_lr_ph$99 : do {
          if (!$tobool228) {
            var $5 = $4 + 102912 | 0;
            var $6 = $4 + 102904 | 0;
            var $7 = $4 + 102900 | 0;
            var $m_tree_i_i = $4 + 102872 | 0;
            var $f19_09 = $f19_07;
            while (1) {
              var $f19_09;
              var $m_proxyCount_i$s2 = ($f19_09 + 28 | 0) >> 2;
              var $cmp1_i = (HEAP32[$m_proxyCount_i$s2] | 0) > 0;
              $for_body_lr_ph_i$$_ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase_exit$103 : do {
                if ($cmp1_i) {
                  var $m_proxies_i = $f19_09 + 24 | 0;
                  var $i_02_i = 0;
                  while (1) {
                    var $i_02_i;
                    var $proxyId_i = HEAP32[$m_proxies_i >> 2] + $i_02_i * 28 + 24 | 0;
                    var $10 = HEAP32[$proxyId_i >> 2];
                    var $11 = HEAP32[$5 >> 2];
                    var $i_0_i_i_i = 0;
                    while (1) {
                      var $i_0_i_i_i;
                      if (($i_0_i_i_i | 0) >= ($11 | 0)) {
                        break;
                      }
                      var $arrayidx_i_i_i = ($i_0_i_i_i << 2) + HEAP32[$6 >> 2] | 0;
                      if ((HEAP32[$arrayidx_i_i_i >> 2] | 0) == ($10 | 0)) {
                        HEAP32[$arrayidx_i_i_i >> 2] = -1;
                        break;
                      }
                      var $i_0_i_i_i = $i_0_i_i_i + 1 | 0;
                    }
                    var $dec_i_i = HEAP32[$7 >> 2] - 1 | 0;
                    HEAP32[$7 >> 2] = $dec_i_i;
                    __ZN13b2DynamicTree12DestroyProxyEi($m_tree_i_i, $10);
                    HEAP32[$proxyId_i >> 2] = -1;
                    var $inc_i = $i_02_i + 1 | 0;
                    if (($inc_i | 0) >= (HEAP32[$m_proxyCount_i$s2] | 0)) {
                      break $for_body_lr_ph_i$$_ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase_exit$103;
                    }
                    var $i_02_i = $inc_i;
                  }
                }
              } while (0);
              HEAP32[$m_proxyCount_i$s2] = 0;
              var $f19_0 = HEAP32[$f19_09 + 4 >> 2];
              if (($f19_0 | 0) == 0) {
                break $for_end26$$for_body23_lr_ph$99;
              }
              var $f19_09 = $f19_0;
            }
          }
        } while (0);
        var $m_contactList = $this + 112 | 0;
        var $16 = HEAP32[$m_contactList >> 2];
        var $tobool275 = ($16 | 0) == 0;
        $while_end$$while_body$116 : do {
          if (!$tobool275) {
            var $ce_06 = $16;
            while (1) {
              var $ce_06;
              var $17 = HEAP32[$ce_06 + 12 >> 2];
              var $20 = HEAP32[$m_world$s2] + 102872 | 0;
              var $21 = HEAP32[$ce_06 + 4 >> 2];
              __ZN16b2ContactManager7DestroyEP9b2Contact($20, $21);
              if (($17 | 0) == 0) {
                break $while_end$$while_body$116;
              }
              var $ce_06 = $17;
            }
          }
        } while (0);
        HEAP32[$m_contactList >> 2] = 0;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN6b2Body4DumpEv($this) {
  var $m_flags$s1;
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  var $m_islandIndex = $this + 8 | 0;
  var $0 = HEAP32[$m_islandIndex >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str13187 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str1492 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  var $1 = HEAP32[$this$s2];
  __Z5b2LogPKcz(STRING_TABLE.__str1593 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $1, tempInt));
  var $conv = HEAPF32[$this$s2 + 3];
  var $conv4 = HEAPF32[$this$s2 + 4];
  __Z5b2LogPKcz(STRING_TABLE.__str1694 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv4, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv5 = HEAPF32[$this$s2 + 14];
  __Z5b2LogPKcz(STRING_TABLE.__str1795 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv5, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv7 = HEAPF32[$this$s2 + 16];
  var $conv10 = HEAPF32[$this$s2 + 17];
  __Z5b2LogPKcz(STRING_TABLE.__str1896 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv7, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv10, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv11 = HEAPF32[$this$s2 + 18];
  __Z5b2LogPKcz(STRING_TABLE.__str1997 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv11, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv12 = HEAPF32[$this$s2 + 33];
  __Z5b2LogPKcz(STRING_TABLE.__str2098 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv12, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv13 = HEAPF32[$this$s2 + 34];
  __Z5b2LogPKcz(STRING_TABLE.__str2199 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv13, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $m_flags$s1 = ($this + 4 | 0) >> 1;
  var $and = HEAPU16[$m_flags$s1] & 65535 & 4;
  __Z5b2LogPKcz(STRING_TABLE.__str22100 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $and, tempInt));
  var $and17 = HEAPU16[$m_flags$s1] & 65535 & 2;
  __Z5b2LogPKcz(STRING_TABLE.__str23101 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $and17, tempInt));
  var $and20 = HEAPU16[$m_flags$s1] & 65535 & 16;
  __Z5b2LogPKcz(STRING_TABLE.__str24102 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $and20, tempInt));
  var $and23 = HEAPU16[$m_flags$s1] & 65535 & 8;
  __Z5b2LogPKcz(STRING_TABLE.__str25103 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $and23, tempInt));
  var $and26 = HEAPU16[$m_flags$s1] & 65535 & 32;
  __Z5b2LogPKcz(STRING_TABLE.__str26104 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $and26, tempInt));
  var $conv27 = HEAPF32[$this$s2 + 35];
  __Z5b2LogPKcz(STRING_TABLE.__str27105 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv27, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $16 = HEAP32[$m_islandIndex >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str28106 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $16, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str31152 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  var $f_01 = HEAP32[$this$s2 + 25];
  var $tobool2 = ($f_01 | 0) == 0;
  $for_end$$for_body$122 : do {
    if (!$tobool2) {
      var $f_03 = $f_01;
      while (1) {
        var $f_03;
        __Z5b2LogPKcz(STRING_TABLE.__str30108 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        __ZN9b2Fixture4DumpEi($f_03, $0);
        __Z5b2LogPKcz(STRING_TABLE.__str31109 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        var $f_0 = HEAP32[$f_03 + 4 >> 2];
        if (($f_0 | 0) == 0) {
          break $for_end$$for_body$122;
        }
        var $f_03 = $f_0;
      }
    }
  } while (0);
  __Z5b2LogPKcz(STRING_TABLE.__str14188 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN16b2ContactManagerC2Ev($this) {
  var $this$s2 = $this >> 2;
  var $m_broadPhase = $this | 0;
  __ZN12b2BroadPhaseC2Ev($m_broadPhase);
  HEAP32[$this$s2 + 15] = 0;
  HEAP32[$this$s2 + 16] = 0;
  HEAP32[$this$s2 + 17] = _b2_defaultFilter;
  HEAP32[$this$s2 + 18] = _b2_defaultListener;
  HEAP32[$this$s2 + 19] = 0;
  return;
  return;
}

function __ZN16b2ContactManager7DestroyEP9b2Contact($this, $c) {
  var $next58_pre$s2;
  var $next31_pre$s2;
  var $m_next12_pre$s2;
  var $2 = HEAP32[HEAP32[$c + 48 >> 2] + 8 >> 2];
  var $3 = HEAP32[HEAP32[$c + 52 >> 2] + 8 >> 2];
  var $4 = HEAP32[$this + 72 >> 2];
  var $tobool = ($4 | 0) == 0;
  do {
    if (!$tobool) {
      if ((HEAP32[$c + 4 >> 2] & 2 | 0) == 0) {
        break;
      }
      var $7 = HEAP32[HEAP32[$4 >> 2] + 12 >> 2];
      FUNCTION_TABLE[$7]($4, $c);
    }
  } while (0);
  var $m_prev = $c + 8 | 0;
  var $8 = HEAP32[$m_prev >> 2];
  var $m_next12_pre$s2 = ($c + 12 | 0) >> 2;
  if (($8 | 0) != 0) {
    var $9 = HEAP32[$m_next12_pre$s2];
    var $m_next10 = $8 + 12 | 0;
    HEAP32[$m_next10 >> 2] = $9;
  }
  var $10 = HEAP32[$m_next12_pre$s2];
  if (($10 | 0) != 0) {
    var $11 = HEAP32[$m_prev >> 2];
    var $m_prev17 = $10 + 8 | 0;
    HEAP32[$m_prev17 >> 2] = $11;
  }
  var $m_contactList = $this + 60 | 0;
  if ((HEAP32[$m_contactList >> 2] | 0) == ($c | 0)) {
    var $13 = HEAP32[$m_next12_pre$s2];
    HEAP32[$m_contactList >> 2] = $13;
  }
  var $m_nodeA = $c + 16 | 0;
  var $prev = $c + 24 | 0;
  var $14 = HEAP32[$prev >> 2];
  var $next31_pre$s2 = ($c + 28 | 0) >> 2;
  if (($14 | 0) != 0) {
    var $15 = HEAP32[$next31_pre$s2];
    var $next28 = $14 + 12 | 0;
    HEAP32[$next28 >> 2] = $15;
  }
  var $16 = HEAP32[$next31_pre$s2];
  if (($16 | 0) != 0) {
    var $17 = HEAP32[$prev >> 2];
    var $prev38 = $16 + 8 | 0;
    HEAP32[$prev38 >> 2] = $17;
  }
  var $m_contactList41 = $2 + 112 | 0;
  if (($m_nodeA | 0) == (HEAP32[$m_contactList41 >> 2] | 0)) {
    var $19 = HEAP32[$next31_pre$s2];
    HEAP32[$m_contactList41 >> 2] = $19;
  }
  var $m_nodeB = $c + 32 | 0;
  var $prev48 = $c + 40 | 0;
  var $20 = HEAP32[$prev48 >> 2];
  var $next58_pre$s2 = ($c + 44 | 0) >> 2;
  if (($20 | 0) != 0) {
    var $21 = HEAP32[$next58_pre$s2];
    var $next55 = $20 + 12 | 0;
    HEAP32[$next55 >> 2] = $21;
  }
  var $22 = HEAP32[$next58_pre$s2];
  if (($22 | 0) != 0) {
    var $23 = HEAP32[$prev48 >> 2];
    var $prev65 = $22 + 8 | 0;
    HEAP32[$prev65 >> 2] = $23;
  }
  var $m_contactList68 = $3 + 112 | 0;
  if (($m_nodeB | 0) == (HEAP32[$m_contactList68 >> 2] | 0)) {
    var $25 = HEAP32[$next58_pre$s2];
    HEAP32[$m_contactList68 >> 2] = $25;
  }
  var $27 = $c;
  var $28 = HEAP32[$this + 76 >> 2];
  __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($27, $28);
  var $m_contactCount = $this + 64 | 0;
  var $dec = HEAP32[$m_contactCount >> 2] - 1 | 0;
  HEAP32[$m_contactCount >> 2] = $dec;
  return;
  return;
}

function __Z14b2PairLessThanRK6b2PairS1_($pair1, $pair2) {
  var $0 = HEAP32[$pair1 >> 2];
  var $1 = HEAP32[$pair2 >> 2];
  var $cmp = ($0 | 0) < ($1 | 0);
  do {
    if ($cmp) {
      var $retval_0 = 1;
    } else {
      if (($0 | 0) != ($1 | 0)) {
        var $retval_0 = 0;
        break;
      }
      var $retval_0 = (HEAP32[$pair1 + 4 >> 2] | 0) < (HEAP32[$pair2 + 4 >> 2] | 0);
    }
  } while (0);
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN16b2ContactManager7CollideEv($this) {
  var $36$s2;
  var $34$s2;
  var $m_flags$s2;
  var $c_011$s2;
  var __label__;
  var $0 = HEAP32[$this + 60 >> 2];
  var $tobool10 = ($0 | 0) == 0;
  $while_end$$while_body_lr_ph$2 : do {
    if (!$tobool10) {
      var $m_nodeCapacity_i_i = $this + 12 | 0;
      var $m_nodes_i_i = $this + 4 | 0;
      var $m_contactListener = $this + 72 | 0;
      var $m_contactFilter = $this + 68 | 0;
      var $c_011 = $0, $c_011$s2 = $c_011 >> 2;
      while (1) {
        var $c_011;
        var $1 = HEAP32[$c_011$s2 + 12];
        var $2 = HEAP32[$c_011$s2 + 13];
        var $3 = HEAP32[$c_011$s2 + 14];
        var $4 = HEAP32[$c_011$s2 + 15];
        var $5 = HEAP32[$1 + 8 >> 2];
        var $6 = HEAP32[$2 + 8 >> 2];
        var $m_flags$s2 = ($c_011 + 4 | 0) >> 2;
        var $7 = HEAP32[$m_flags$s2];
        var $tobool7 = ($7 & 8 | 0) == 0;
        $if_end22$$if_then$6 : do {
          if (!$tobool7) {
            var $8 = $5;
            var $cmp_i8 = (HEAP32[$6 >> 2] | 0) == 2;
            do {
              if ($cmp_i8) {
                __label__ = 5;
              } else {
                if ((HEAP32[$5 >> 2] | 0) == 2) {
                  __label__ = 5;
                  break;
                }
                __label__ = 10;
                break;
              }
            } while (0);
            $if_end_i$$if_then9$10 : do {
              if (__label__ == 5) {
                var $jn_0_in_i = $6 + 108 | 0;
                while (1) {
                  var $jn_0_in_i;
                  var $jn_0_i = HEAP32[$jn_0_in_i >> 2];
                  if (($jn_0_i | 0) == 0) {
                    break;
                  }
                  if ((HEAP32[$jn_0_i >> 2] | 0) == ($8 | 0)) {
                    if ((HEAP8[HEAP32[$jn_0_i + 4 >> 2] + 61 | 0] & 1) << 24 >> 24 == 0) {
                      break $if_end_i$$if_then9$10;
                    }
                  }
                  var $jn_0_in_i = $jn_0_i + 12 | 0;
                }
                var $17 = HEAP32[$m_contactFilter >> 2];
                if (($17 | 0) == 0) {
                  var $21 = $7;
                } else {
                  var $19 = HEAP32[HEAP32[$17 >> 2] + 8 >> 2];
                  var $call13 = FUNCTION_TABLE[$19]($17, $1, $2);
                  if (!$call13) {
                    var $20 = HEAP32[$c_011$s2 + 3];
                    __ZN16b2ContactManager7DestroyEP9b2Contact($this, $c_011);
                    var $c_0_be = $20;
                    __label__ = 11;
                    break $if_end22$$if_then$6;
                  }
                  var $21 = HEAP32[$m_flags$s2];
                }
                var $21;
                HEAP32[$m_flags$s2] = $21 & -9;
                __label__ = 17;
                break $if_end22$$if_then$6;
              }
            } while (0);
            var $16 = HEAP32[$c_011$s2 + 3];
            __ZN16b2ContactManager7DestroyEP9b2Contact($this, $c_011);
            var $c_0_be = $16;
            __label__ = 11;
            break;
          }
          __label__ = 17;
        } while (0);
        if (__label__ == 17) {
          if ((HEAP16[$5 + 4 >> 1] & 2) << 16 >> 16 == 0) {
            var $24 = 0;
          } else {
            var $24 = (HEAP32[$5 >> 2] | 0) != 0;
          }
          var $24;
          if ((HEAP16[$6 + 4 >> 1] & 2) << 16 >> 16 == 0) {
            var $27 = 0;
          } else {
            var $27 = (HEAP32[$6 >> 2] | 0) != 0;
          }
          var $27;
          if ($24 | $27) {
            var $30 = HEAP32[(HEAP32[$1 + 24 >> 2] + 24 >> 2) + ($3 * 7 | 0)];
            var $32 = HEAP32[(HEAP32[$2 + 24 >> 2] + 24 >> 2) + ($4 * 7 | 0)];
            var $cmp_i_i = ($30 | 0) > -1;
            do {
              if ($cmp_i_i) {
                if ((HEAP32[$m_nodeCapacity_i_i >> 2] | 0) > ($30 | 0)) {
                  __label__ = 26;
                  break;
                }
                __label__ = 25;
                break;
              } else {
                __label__ = 25;
              }
            } while (0);
            if (__label__ == 25) {
              ___assert_func(STRING_TABLE.__str19193 | 0, 159, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree10GetFatAABBEi | 0, STRING_TABLE.__str2111 | 0);
            }
            var $34 = HEAP32[$m_nodes_i_i >> 2], $34$s2 = $34 >> 2;
            var $cmp_i1_i = ($32 | 0) > -1;
            do {
              if ($cmp_i1_i) {
                if ((HEAP32[$m_nodeCapacity_i_i >> 2] | 0) > ($32 | 0)) {
                  var $36 = $34, $36$s2 = $36 >> 2;
                  __label__ = 29;
                  break;
                }
                __label__ = 28;
                break;
              } else {
                __label__ = 28;
              }
            } while (0);
            if (__label__ == 28) {
              ___assert_func(STRING_TABLE.__str19193 | 0, 159, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree10GetFatAABBEi | 0, STRING_TABLE.__str2111 | 0);
              var $36 = HEAP32[$m_nodes_i_i >> 2], $36$s2 = $36 >> 2;
            }
            var $36;
            if (HEAPF32[$36$s2 + ($32 * 9 | 0)] - HEAPF32[$34$s2 + ($30 * 9 | 0) + 2] > 0 | HEAPF32[$36$s2 + ($32 * 9 | 0) + 1] - HEAPF32[$34$s2 + ($30 * 9 | 0) + 3] > 0 | HEAPF32[$34$s2 + ($30 * 9 | 0)] - HEAPF32[$36$s2 + ($32 * 9 | 0) + 2] > 0 | HEAPF32[$34$s2 + ($30 * 9 | 0) + 1] - HEAPF32[$36$s2 + ($32 * 9 | 0) + 3] > 0) {
              var $49 = HEAP32[$c_011$s2 + 3];
              __ZN16b2ContactManager7DestroyEP9b2Contact($this, $c_011);
              var $c_0_be = $49;
            } else {
              var $52 = HEAP32[$m_contactListener >> 2];
              __ZN9b2Contact6UpdateEP17b2ContactListener($c_011, $52);
              var $c_0_be = HEAP32[$c_011$s2 + 3];
            }
          } else {
            var $c_0_be = HEAP32[$c_011$s2 + 3];
          }
        }
        var $c_0_be;
        if (($c_0_be | 0) == 0) {
          break $while_end$$while_body_lr_ph$2;
        }
        var $c_011 = $c_0_be, $c_011$s2 = $c_011 >> 2;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN16b2ContactManager15FindNewContactsEv($this) {
  var $m_broadPhase = $this | 0;
  __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($m_broadPhase, $this);
  return;
  return;
}

function __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($this, $callback) {
  var $m_pairBuffer$s2;
  var $m_moveCount$s2;
  var $m_pairCount$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var __label__;
  var $__comp_addr_i = __stackBase__;
  var $m_pairCount$s2 = ($this + 52 | 0) >> 2;
  HEAP32[$m_pairCount$s2] = 0;
  var $m_moveCount$s2 = ($this + 40 | 0) >> 2;
  var $0 = HEAP32[$m_moveCount$s2];
  if (($0 | 0) > 0) {
    var $m_moveBuffer = $this + 32 | 0;
    var $m_queryProxyId = $this + 56 | 0;
    var $m_tree = $this | 0;
    var $m_nodeCapacity_i = $this + 12 | 0;
    var $m_nodes_i = $this + 4 | 0;
    var $i_018 = 0;
    var $1 = $0;
    while (1) {
      var $1;
      var $i_018;
      var $3 = HEAP32[HEAP32[$m_moveBuffer >> 2] + ($i_018 << 2) >> 2];
      HEAP32[$m_queryProxyId >> 2] = $3;
      if (($3 | 0) == -1) {
        var $6 = $1;
      } else {
        var $cmp_i = ($3 | 0) > -1;
        do {
          if ($cmp_i) {
            if ((HEAP32[$m_nodeCapacity_i >> 2] | 0) > ($3 | 0)) {
              __label__ = 6;
              break;
            }
            __label__ = 5;
            break;
          } else {
            __label__ = 5;
          }
        } while (0);
        if (__label__ == 5) {
          ___assert_func(STRING_TABLE.__str19193 | 0, 159, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree10GetFatAABBEi | 0, STRING_TABLE.__str2111 | 0);
        }
        var $aabb_i = HEAP32[$m_nodes_i >> 2] + $3 * 36 | 0;
        __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($m_tree, $this, $aabb_i);
        var $6 = HEAP32[$m_moveCount$s2];
      }
      var $6;
      var $inc = $i_018 + 1 | 0;
      if (($inc | 0) >= ($6 | 0)) {
        break;
      }
      var $i_018 = $inc;
      var $1 = $6;
    }
    var $7 = HEAP32[$m_pairCount$s2];
  } else {
    var $7 = 0;
  }
  var $7;
  HEAP32[$m_moveCount$s2] = 0;
  var $m_pairBuffer$s2 = ($this + 44 | 0) >> 2;
  var $8 = HEAP32[$m_pairBuffer$s2];
  var $add_ptr = $8 + $7 * 12 | 0;
  HEAP32[$__comp_addr_i >> 2] = 2;
  __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($8, $add_ptr, $__comp_addr_i);
  var $cmp1115 = (HEAP32[$m_pairCount$s2] | 0) > 0;
  $while_body_lr_ph$$while_end34$68 : do {
    if ($cmp1115) {
      var $m_nodeCapacity_i2 = $this + 12 | 0;
      var $m_nodes_i6 = $this + 4 | 0;
      var $_pre1 = HEAP32[$m_pairBuffer$s2];
      var $i9_016 = 0;
      var $12 = $_pre1;
      var $11 = HEAP32[$_pre1 >> 2];
      $while_body$70 : while (1) {
        var $11;
        var $12;
        var $i9_016;
        var $proxyIdA = $12 + $i9_016 * 12 | 0;
        var $cmp_i1 = ($11 | 0) > -1;
        do {
          if ($cmp_i1) {
            if ((HEAP32[$m_nodeCapacity_i2 >> 2] | 0) > ($11 | 0)) {
              __label__ = 14;
              break;
            }
            __label__ = 13;
            break;
          } else {
            __label__ = 13;
          }
        } while (0);
        if (__label__ == 13) {
          ___assert_func(STRING_TABLE.__str19193 | 0, 153, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree11GetUserDataEi | 0, STRING_TABLE.__str2111 | 0);
        }
        var $14 = HEAP32[$m_nodes_i6 >> 2];
        var $15 = HEAP32[($14 + 16 >> 2) + ($11 * 9 | 0)];
        var $proxyIdB = $12 + $i9_016 * 12 + 4 | 0;
        var $16 = HEAP32[$proxyIdB >> 2];
        var $cmp_i7 = ($16 | 0) > -1;
        do {
          if ($cmp_i7) {
            if ((HEAP32[$m_nodeCapacity_i2 >> 2] | 0) > ($16 | 0)) {
              var $18 = $14;
              __label__ = 17;
              break;
            }
            __label__ = 16;
            break;
          } else {
            __label__ = 16;
          }
        } while (0);
        if (__label__ == 16) {
          ___assert_func(STRING_TABLE.__str19193 | 0, 153, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree11GetUserDataEi | 0, STRING_TABLE.__str2111 | 0);
          var $18 = HEAP32[$m_nodes_i6 >> 2];
        }
        var $18;
        var $19 = HEAP32[($18 + 16 >> 2) + ($16 * 9 | 0)];
        __ZN16b2ContactManager7AddPairEPvS0_($callback, $15, $19);
        var $20 = HEAP32[$m_pairCount$s2];
        var $i9_1_in = $i9_016;
        while (1) {
          var $i9_1_in;
          var $i9_1 = $i9_1_in + 1 | 0;
          if (($i9_1 | 0) >= ($20 | 0)) {
            break $while_body_lr_ph$$while_end34$68;
          }
          var $21 = HEAP32[$m_pairBuffer$s2];
          var $22 = HEAP32[($21 >> 2) + ($i9_1 * 3 | 0)];
          if (($22 | 0) != (HEAP32[$proxyIdA >> 2] | 0)) {
            var $i9_016 = $i9_1;
            var $12 = $21;
            var $11 = $22;
            continue $while_body$70;
          }
          if ((HEAP32[($21 + 4 >> 2) + ($i9_1 * 3 | 0)] | 0) != (HEAP32[$proxyIdB >> 2] | 0)) {
            var $i9_016 = $i9_1;
            var $12 = $21;
            var $11 = $22;
            continue $while_body$70;
          }
          var $i9_1_in = $i9_1;
        }
      }
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN16b2ContactManager7AddPairEPvS0_($this, $proxyUserDataA, $proxyUserDataB) {
  var $m_contactList83$s2;
  var $m_contactList66$s2;
  var $m_contactList$s2;
  var $11$s2;
  var $1 = HEAP32[$proxyUserDataA + 16 >> 2];
  var $3 = HEAP32[$proxyUserDataB + 16 >> 2];
  var $5 = HEAP32[$proxyUserDataA + 20 >> 2];
  var $7 = HEAP32[$proxyUserDataB + 20 >> 2];
  var $8 = HEAP32[$1 + 8 >> 2];
  var $9 = HEAP32[$3 + 8 >> 2];
  var $cmp = ($8 | 0) == ($9 | 0);
  $return$$if_end$88 : do {
    if (!$cmp) {
      var $edge_0_in = $9 + 112 | 0;
      while (1) {
        var $edge_0_in;
        var $edge_0 = HEAP32[$edge_0_in >> 2];
        if (($edge_0 | 0) == 0) {
          break;
        }
        if ((HEAP32[$edge_0 >> 2] | 0) == ($8 | 0)) {
          var $11$s2 = HEAP32[$edge_0 + 4 >> 2] >> 2;
          var $12 = HEAP32[$11$s2 + 12];
          var $13 = HEAP32[$11$s2 + 13];
          var $14 = HEAP32[$11$s2 + 14];
          var $15 = HEAP32[$11$s2 + 15];
          if (($12 | 0) == ($1 | 0) & ($13 | 0) == ($3 | 0) & ($14 | 0) == ($5 | 0) & ($15 | 0) == ($7 | 0)) {
            break $return$$if_end$88;
          }
          if (($12 | 0) == ($3 | 0) & ($13 | 0) == ($1 | 0) & ($14 | 0) == ($7 | 0) & ($15 | 0) == ($5 | 0)) {
            break $return$$if_end$88;
          }
        }
        var $edge_0_in = $edge_0 + 12 | 0;
      }
      var $16 = $8;
      if ((HEAP32[$9 >> 2] | 0) != 2) {
        if ((HEAP32[$8 >> 2] | 0) != 2) {
          break;
        }
      }
      var $jn_0_in_i = $9 + 108 | 0;
      while (1) {
        var $jn_0_in_i;
        var $jn_0_i = HEAP32[$jn_0_in_i >> 2];
        if (($jn_0_i | 0) == 0) {
          break;
        }
        if ((HEAP32[$jn_0_i >> 2] | 0) == ($16 | 0)) {
          if ((HEAP8[HEAP32[$jn_0_i + 4 >> 2] + 61 | 0] & 1) << 24 >> 24 == 0) {
            break $return$$if_end$88;
          }
        }
        var $jn_0_in_i = $jn_0_i + 12 | 0;
      }
      var $24 = HEAP32[$this + 68 >> 2];
      if (($24 | 0) != 0) {
        var $26 = HEAP32[HEAP32[$24 >> 2] + 8 >> 2];
        var $call40 = FUNCTION_TABLE[$26]($24, $1, $3);
        if (!$call40) {
          break;
        }
      }
      var $28 = $1;
      var $29 = $3;
      var $30 = HEAP32[$this + 76 >> 2];
      var $call45 = __ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($28, $5, $29, $7, $30);
      var $31 = $call45;
      if (($call45 | 0) == 0) {
        break;
      }
      var $34 = HEAP32[HEAP32[$call45 + 48 >> 2] + 8 >> 2];
      var $35 = HEAP32[HEAP32[$call45 + 52 >> 2] + 8 >> 2];
      var $m_prev = $call45 + 8 | 0;
      HEAP32[$m_prev >> 2] = 0;
      var $m_contactList$s2 = ($this + 60 | 0) >> 2;
      var $m_next = $call45 + 12 | 0;
      var $_c = HEAP32[$m_contactList$s2];
      HEAP32[$m_next >> 2] = $_c;
      var $37 = HEAP32[$m_contactList$s2];
      if (($37 | 0) != 0) {
        var $m_prev59 = $37 + 8 | 0;
        HEAP32[$m_prev59 >> 2] = $31;
      }
      HEAP32[$m_contactList$s2] = $31;
      var $m_nodeA = $call45 + 16 | 0;
      var $contact62 = $call45 + 20 | 0;
      HEAP32[$contact62 >> 2] = $call45;
      var $38 = $m_nodeA | 0;
      HEAP32[$38 >> 2] = $35;
      var $prev = $call45 + 24 | 0;
      HEAP32[$prev >> 2] = 0;
      var $m_contactList66$s2 = ($34 + 112 | 0) >> 2;
      var $39 = HEAP32[$m_contactList66$s2];
      var $next68 = $call45 + 28 | 0;
      HEAP32[$next68 >> 2] = $39;
      var $40 = HEAP32[$m_contactList66$s2];
      if (($40 | 0) != 0) {
        var $prev74 = $40 + 8 | 0;
        HEAP32[$prev74 >> 2] = $m_nodeA;
      }
      HEAP32[$m_contactList66$s2] = $m_nodeA;
      var $m_nodeB = $call45 + 32 | 0;
      var $contact78 = $call45 + 36 | 0;
      HEAP32[$contact78 >> 2] = $call45;
      var $41 = $m_nodeB | 0;
      HEAP32[$41 >> 2] = $34;
      var $prev82 = $call45 + 40 | 0;
      HEAP32[$prev82 >> 2] = 0;
      var $m_contactList83$s2 = ($35 + 112 | 0) >> 2;
      var $42 = HEAP32[$m_contactList83$s2];
      var $next85 = $call45 + 44 | 0;
      HEAP32[$next85 >> 2] = $42;
      var $43 = HEAP32[$m_contactList83$s2];
      if (($43 | 0) != 0) {
        var $prev91 = $43 + 8 | 0;
        HEAP32[$prev91 >> 2] = $m_nodeB;
      }
      HEAP32[$m_contactList83$s2] = $m_nodeB;
      var $44 = $34 + 4 | 0;
      var $45 = HEAP16[$44 >> 1];
      if (($45 & 2) << 16 >> 16 == 0) {
        var $or_i13 = $45 | 2;
        HEAP16[$44 >> 1] = $or_i13;
        HEAPF32[$34 + 144 >> 2] = 0;
      }
      var $47 = $35 + 4 | 0;
      var $48 = HEAP16[$47 >> 1];
      if (($48 & 2) << 16 >> 16 == 0) {
        var $or_i = $48 | 2;
        HEAP16[$47 >> 1] = $or_i;
        HEAPF32[$35 + 144 >> 2] = 0;
      }
      var $m_contactCount = $this + 64 | 0;
      var $inc = HEAP32[$m_contactCount >> 2] + 1 | 0;
      HEAP32[$m_contactCount >> 2] = $inc;
    }
  } while (0);
  return;
  return;
}

function __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($this, $callback, $aabb) {
  var $6$s2;
  var $m_pairBuffer_i$s2;
  var $m_pairCount_i$s2;
  var $m_queryProxyId_i$s2;
  var $m_capacity_i_i$s2;
  var $m_count_i_i$s2;
  var $m_stack_i_i$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 1036;
  var $stack = __stackBase__;
  var $arraydecay_i_i = $stack + 4 | 0;
  var $m_stack_i_i$s2 = ($stack | 0) >> 2;
  HEAP32[$m_stack_i_i$s2] = $arraydecay_i_i;
  var $m_count_i_i$s2 = ($stack + 1028 | 0) >> 2;
  var $m_capacity_i_i$s2 = ($stack + 1032 | 0) >> 2;
  HEAP32[$m_capacity_i_i$s2] = 256;
  var $0 = HEAP32[$this >> 2];
  HEAP32[$arraydecay_i_i >> 2] = $0;
  HEAP32[$m_count_i_i$s2] = 1;
  var $m_nodes = $this + 4 | 0;
  var $x_i1_i = $aabb | 0;
  var $1 = $aabb + 4 | 0;
  var $x1_i_i = $aabb + 8 | 0;
  var $2 = $aabb + 12 | 0;
  var $m_queryProxyId_i$s2 = ($callback + 56 | 0) >> 2;
  var $m_pairCount_i$s2 = ($callback + 52 | 0) >> 2;
  var $m_pairCapacity_i = $callback + 48 | 0;
  var $m_pairBuffer_i$s2 = ($callback + 44 | 0) >> 2;
  var $4 = 1;
  var $3 = $arraydecay_i_i;
  while (1) {
    var $3;
    var $4;
    var $dec_i = $4 - 1 | 0;
    HEAP32[$m_count_i_i$s2] = $dec_i;
    var $5 = HEAP32[$3 + ($dec_i << 2) >> 2];
    var $cmp5 = ($5 | 0) == -1;
    do {
      if ($cmp5) {
        var $_be = $dec_i;
      } else {
        var $6 = HEAP32[$m_nodes >> 2], $6$s2 = $6 >> 2;
        if (HEAPF32[$x_i1_i >> 2] - HEAPF32[$6$s2 + ($5 * 9 | 0) + 2] > 0 | HEAPF32[$1 >> 2] - HEAPF32[$6$s2 + ($5 * 9 | 0) + 3] > 0 | HEAPF32[$6$s2 + ($5 * 9 | 0)] - HEAPF32[$x1_i_i >> 2] > 0 | HEAPF32[$6$s2 + ($5 * 9 | 0) + 1] - HEAPF32[$2 >> 2] > 0) {
          var $_be = $dec_i;
          break;
        }
        var $child1_i = $6 + $5 * 36 + 24 | 0;
        if ((HEAP32[$child1_i >> 2] | 0) == -1) {
          var $18 = HEAP32[$m_queryProxyId_i$s2];
          if (($18 | 0) == ($5 | 0)) {
            var $_be = $dec_i;
            break;
          }
          var $19 = HEAP32[$m_pairCount_i$s2];
          var $20 = HEAP32[$m_pairCapacity_i >> 2];
          if (($19 | 0) == ($20 | 0)) {
            var $21 = HEAP32[$m_pairBuffer_i$s2];
            var $mul_i33 = $20 << 1;
            HEAP32[$m_pairCapacity_i >> 2] = $mul_i33;
            var $mul6_i = $20 * 24 | 0;
            var $call_i_i34 = _malloc($mul6_i);
            var $22 = $call_i_i34;
            HEAP32[$m_pairBuffer_i$s2] = $22;
            var $23 = $21;
            var $mul10_i = HEAP32[$m_pairCount_i$s2] * 12 | 0;
            _memcpy($call_i_i34, $23, $mul10_i, 1);
            _free($23);
            var $26 = HEAP32[$m_queryProxyId_i$s2];
            var $25 = HEAP32[$m_pairCount_i$s2];
          } else {
            var $26 = $18;
            var $25 = $19;
          }
          var $25;
          var $26;
          var $cond_i_i = ($26 | 0) > ($5 | 0) ? $5 : $26;
          var $proxyIdA_i = HEAP32[$m_pairBuffer_i$s2] + $25 * 12 | 0;
          HEAP32[$proxyIdA_i >> 2] = $cond_i_i;
          var $28 = HEAP32[$m_queryProxyId_i$s2];
          var $cond_i2_i = ($28 | 0) < ($5 | 0) ? $5 : $28;
          var $proxyIdB_i = HEAP32[$m_pairBuffer_i$s2] + HEAP32[$m_pairCount_i$s2] * 12 + 4 | 0;
          HEAP32[$proxyIdB_i >> 2] = $cond_i2_i;
          var $inc_i37 = HEAP32[$m_pairCount_i$s2] + 1 | 0;
          HEAP32[$m_pairCount_i$s2] = $inc_i37;
          var $_be = HEAP32[$m_count_i_i$s2];
        } else {
          var $32 = HEAP32[$m_capacity_i_i$s2];
          var $cmp_i41 = ($dec_i | 0) == ($32 | 0);
          do {
            if ($cmp_i41) {
              var $mul_i43 = $32 << 1;
              HEAP32[$m_capacity_i_i$s2] = $mul_i43;
              var $mul4_i44 = $32 << 3;
              var $call_i_i45 = _malloc($mul4_i44);
              var $33 = $call_i_i45;
              HEAP32[$m_stack_i_i$s2] = $33;
              var $34 = $3;
              var $mul8_i46 = HEAP32[$m_count_i_i$s2] << 2;
              _memcpy($call_i_i45, $34, $mul8_i46, 1);
              if (($3 | 0) == ($arraydecay_i_i | 0)) {
                break;
              }
              _free($34);
            }
          } while (0);
          var $36 = HEAP32[$child1_i >> 2];
          var $arrayidx_i51 = (HEAP32[$m_count_i_i$s2] << 2) + HEAP32[$m_stack_i_i$s2] | 0;
          HEAP32[$arrayidx_i51 >> 2] = $36;
          var $inc_i52 = HEAP32[$m_count_i_i$s2] + 1 | 0;
          HEAP32[$m_count_i_i$s2] = $inc_i52;
          var $child2 = $6 + $5 * 36 + 28 | 0;
          var $40 = HEAP32[$m_capacity_i_i$s2];
          var $cmp_i17 = ($inc_i52 | 0) == ($40 | 0);
          do {
            if ($cmp_i17) {
              var $41 = HEAP32[$m_stack_i_i$s2];
              var $mul_i19 = $40 << 1;
              HEAP32[$m_capacity_i_i$s2] = $mul_i19;
              var $mul4_i20 = $40 << 3;
              var $call_i_i21 = _malloc($mul4_i20);
              var $42 = $call_i_i21;
              HEAP32[$m_stack_i_i$s2] = $42;
              var $43 = $41;
              var $mul8_i22 = HEAP32[$m_count_i_i$s2] << 2;
              _memcpy($call_i_i21, $43, $mul8_i22, 1);
              if (($41 | 0) == ($arraydecay_i_i | 0)) {
                break;
              }
              _free($43);
            }
          } while (0);
          var $45 = HEAP32[$child2 >> 2];
          var $arrayidx_i27 = (HEAP32[$m_count_i_i$s2] << 2) + HEAP32[$m_stack_i_i$s2] | 0;
          HEAP32[$arrayidx_i27 >> 2] = $45;
          var $inc_i28 = HEAP32[$m_count_i_i$s2] + 1 | 0;
          HEAP32[$m_count_i_i$s2] = $inc_i28;
          var $_be = $inc_i28;
        }
      }
    } while (0);
    var $_be;
    var $_pre1 = HEAP32[$m_stack_i_i$s2];
    if (($_be | 0) <= 0) {
      break;
    }
    var $4 = $_be;
    var $3 = $_pre1;
  }
  if (($_pre1 | 0) != ($arraydecay_i_i | 0)) {
    var $49 = $_pre1;
    _free($49);
    HEAP32[$m_stack_i_i$s2] = 0;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN17b2ContactListener12BeginContactEP9b2Contact($this, $contact) {
  return;
  return;
}

function __ZN17b2ContactListener10EndContactEP9b2Contact($this, $contact) {
  return;
  return;
}

function __ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold($this, $contact, $oldManifold) {
  return;
  return;
}

function __ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse($this, $contact, $impulse) {
  return;
  return;
}

function __ZN9b2FixtureC2Ev($this) {
  HEAP16[$this + 32 >> 1] = 1;
  HEAP16[$this + 34 >> 1] = -1;
  HEAP16[$this + 36 >> 1] = 0;
  HEAP32[$this + 40 >> 2] = 0;
  HEAP32[$this + 8 >> 2] = 0;
  HEAP32[$this + 4 >> 2] = 0;
  HEAP32[$this + 24 >> 2] = 0;
  HEAP32[$this + 28 >> 2] = 0;
  HEAP32[$this + 12 >> 2] = 0;
  HEAPF32[$this >> 2] = 0;
  return;
  return;
}

function __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first, $__last, $__comp) {
  var $7$s2;
  var $6$s2;
  var $5$s2;
  var $3$s2;
  var $18$s2;
  var $17$s2;
  var $__i_2_lcssa$s2;
  var $13$s2;
  var $12$s2;
  var $__i_0$s2;
  var $27$s2;
  var $26$s2;
  var $24$s2;
  var $23$s2;
  var $__m_2$s2;
  var $__i_4$s2;
  var $__i_3_lcssa$s2;
  var $19$s2;
  var $2$s2;
  var $0$s2;
  var $__comp$s2 = $__comp >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var __label__;
  var $__t_i = __stackBase__;
  var $__last_addr_0_ph = $__last;
  var $__first_addr_0_ph = $__first;
  $__restart_outer$2 : while (1) {
    var $__first_addr_0_ph;
    var $__last_addr_0_ph;
    var $sub_ptr_rhs_cast = $__first_addr_0_ph;
    var $incdec_ptr80 = $__first_addr_0_ph + 12 | 0;
    var $__first_addr_0_021 = $__first_addr_0_ph | 0;
    var $__first_addr_0_123 = $__first_addr_0_ph + 4 | 0;
    var $__first_addr_0_225 = $__first_addr_0_ph + 8 | 0;
    var $0$s2 = $__first_addr_0_ph >> 2;
    var $__last_addr_0 = $__last_addr_0_ph;
    $__restart$4 : while (1) {
      var $__last_addr_0;
      var $sub_ptr_lhs_cast = $__last_addr_0;
      var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
      var $sub_ptr_div = $sub_ptr_sub / 12 | 0;
      if ($sub_ptr_div == 0 || $sub_ptr_div == 1) {
        __label__ = 52;
        break $__restart_outer$2;
      } else if ($sub_ptr_div == 2) {
        var $1 = HEAP32[$__comp$s2];
        var $incdec_ptr = $__last_addr_0 - 12 | 0;
        var $call = FUNCTION_TABLE[$1]($incdec_ptr, $__first_addr_0_ph);
        if (!$call) {
          __label__ = 52;
          break $__restart_outer$2;
        }
        var $tmp3 = HEAP32[$__first_addr_0_021 >> 2];
        var $tmp4 = HEAP32[$__first_addr_0_123 >> 2];
        var $tmp5 = HEAP32[$__first_addr_0_225 >> 2];
        var $2$s2 = $incdec_ptr >> 2;
        HEAP32[$0$s2] = HEAP32[$2$s2];
        HEAP32[$0$s2 + 1] = HEAP32[$2$s2 + 1];
        HEAP32[$0$s2 + 2] = HEAP32[$2$s2 + 2];
        HEAP32[$incdec_ptr >> 2] = $tmp3;
        HEAP32[$__last_addr_0 - 12 + 4 >> 2] = $tmp4;
        HEAP32[$__last_addr_0 - 12 + 8 >> 2] = $tmp5;
        __label__ = 52;
        break $__restart_outer$2;
      } else if ($sub_ptr_div == 3) {
        var $call4 = __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__first_addr_0_ph, $incdec_ptr80, $__last_addr_0 - 12 | 0, $__comp);
        __label__ = 52;
        break $__restart_outer$2;
      } else if ($sub_ptr_div == 4) {
        var $call9 = __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__first_addr_0_ph, $incdec_ptr80, $__first_addr_0_ph + 24 | 0, $__last_addr_0 - 12 | 0, $__comp);
        __label__ = 52;
        break $__restart_outer$2;
      } else if ($sub_ptr_div == 5) {
        var $call15 = __ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__first_addr_0_ph, $incdec_ptr80, $__first_addr_0_ph + 24 | 0, $__first_addr_0_ph + 36 | 0, $__last_addr_0 - 12 | 0, $__comp);
        __label__ = 52;
        break $__restart_outer$2;
      } else {
        if (($sub_ptr_sub | 0) < 372) {
          __label__ = 9;
          break $__restart_outer$2;
        }
        var $incdec_ptr18 = $__last_addr_0 - 12 | 0;
        var $div = $sub_ptr_sub / 24 | 0;
        var $add_ptr21 = $__first_addr_0_ph + $div * 12 | 0;
        if (($sub_ptr_sub | 0) > 11988) {
          var $div22 = $sub_ptr_sub / 48 | 0;
          var $call25 = __ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__first_addr_0_ph, $__first_addr_0_ph + $div22 * 12 | 0, $add_ptr21, $__first_addr_0_ph + ($div22 + $div) * 12 | 0, $incdec_ptr18, $__comp);
          var $__n_swaps_0 = $call25;
        } else {
          var $call28 = __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__first_addr_0_ph, $add_ptr21, $incdec_ptr18, $__comp);
          var $__n_swaps_0 = $call28;
        }
        var $__n_swaps_0;
        var $9 = HEAP32[$__comp$s2];
        var $call30 = FUNCTION_TABLE[$9]($__first_addr_0_ph, $add_ptr21);
        if ($call30) {
          var $__j_3 = $incdec_ptr18;
          var $__n_swaps_3 = $__n_swaps_0;
        } else {
          var $__j_0 = $incdec_ptr18;
          while (1) {
            var $__j_0;
            var $incdec_ptr34 = $__j_0 - 12 | 0;
            var $10 = HEAPU32[$__comp$s2];
            if (($__first_addr_0_ph | 0) == ($incdec_ptr34 | 0)) {
              break $__restart$4;
            }
            var $call74 = FUNCTION_TABLE[$10]($incdec_ptr34, $add_ptr21);
            if ($call74) {
              break;
            }
            var $__j_0 = $incdec_ptr34;
          }
          var $tmp22 = HEAP32[$__first_addr_0_021 >> 2];
          var $tmp24 = HEAP32[$__first_addr_0_123 >> 2];
          var $tmp26 = HEAP32[$__first_addr_0_225 >> 2];
          var $19$s2 = $incdec_ptr34 >> 2;
          HEAP32[$0$s2] = HEAP32[$19$s2];
          HEAP32[$0$s2 + 1] = HEAP32[$19$s2 + 1];
          HEAP32[$0$s2 + 2] = HEAP32[$19$s2 + 2];
          HEAP32[$incdec_ptr34 >> 2] = $tmp22;
          HEAP32[$__j_0 - 12 + 4 >> 2] = $tmp24;
          HEAP32[$__j_0 - 12 + 8 >> 2] = $tmp26;
          var $__j_3 = $incdec_ptr34;
          var $__n_swaps_3 = $__n_swaps_0 + 1 | 0;
        }
        var $__n_swaps_3;
        var $__j_3;
        var $cmp81 = $incdec_ptr80 >>> 0 < $__j_3 >>> 0;
        $while_cond85_outer$$if_end105$19 : do {
          if ($cmp81) {
            var $__j_4_ph = $__j_3;
            var $__i_3_ph = $incdec_ptr80;
            var $__n_swaps_4_ph = $__n_swaps_3;
            var $__m_0_ph = $add_ptr21;
            while (1) {
              var $__m_0_ph;
              var $__n_swaps_4_ph;
              var $__i_3_ph;
              var $__j_4_ph;
              var $20 = HEAP32[$__comp$s2];
              var $call8643 = FUNCTION_TABLE[$20]($__i_3_ph, $__m_0_ph);
              $while_body87$$while_cond90_preheader$22 : do {
                if ($call8643) {
                  var $__i_344 = $__i_3_ph;
                  while (1) {
                    var $__i_344;
                    var $incdec_ptr88 = $__i_344 + 12 | 0;
                    var $21 = HEAP32[$__comp$s2];
                    var $call86 = FUNCTION_TABLE[$21]($incdec_ptr88, $__m_0_ph);
                    if (!$call86) {
                      var $__i_3_lcssa = $incdec_ptr88, $__i_3_lcssa$s2 = $__i_3_lcssa >> 2;
                      break $while_body87$$while_cond90_preheader$22;
                    }
                    var $__i_344 = $incdec_ptr88;
                  }
                } else {
                  var $__i_3_lcssa = $__i_3_ph, $__i_3_lcssa$s2 = $__i_3_lcssa >> 2;
                }
              } while (0);
              var $__i_3_lcssa;
              var $__j_5 = $__j_4_ph;
              while (1) {
                var $__j_5;
                var $22 = HEAP32[$__comp$s2];
                var $incdec_ptr91 = $__j_5 - 12 | 0;
                var $call92 = FUNCTION_TABLE[$22]($incdec_ptr91, $__m_0_ph);
                if ($call92) {
                  break;
                }
                var $__j_5 = $incdec_ptr91;
              }
              if ($__i_3_lcssa >>> 0 > $incdec_ptr91 >>> 0) {
                var $__i_4 = $__i_3_lcssa, $__i_4$s2 = $__i_4 >> 2;
                var $__n_swaps_5 = $__n_swaps_4_ph;
                var $__m_2 = $__m_0_ph, $__m_2$s2 = $__m_2 >> 2;
                break $while_cond85_outer$$if_end105$19;
              }
              var $tmp30 = HEAP32[$__i_3_lcssa$s2];
              var $tmp31 = HEAP32[$__i_3_lcssa$s2 + 1];
              var $tmp32 = HEAP32[$__i_3_lcssa$s2 + 2];
              var $23$s2 = $__i_3_lcssa >> 2;
              var $24$s2 = $incdec_ptr91 >> 2;
              HEAP32[$23$s2] = HEAP32[$24$s2];
              HEAP32[$23$s2 + 1] = HEAP32[$24$s2 + 1];
              HEAP32[$23$s2 + 2] = HEAP32[$24$s2 + 2];
              HEAP32[$incdec_ptr91 >> 2] = $tmp30;
              HEAP32[$__j_5 - 12 + 4 >> 2] = $tmp31;
              HEAP32[$__j_5 - 12 + 8 >> 2] = $tmp32;
              var $__m_1 = ($__m_0_ph | 0) == ($__i_3_lcssa | 0) ? $incdec_ptr91 : $__m_0_ph;
              var $__j_4_ph = $incdec_ptr91;
              var $__i_3_ph = $__i_3_lcssa + 12 | 0;
              var $__n_swaps_4_ph = $__n_swaps_4_ph + 1 | 0;
              var $__m_0_ph = $__m_1;
            }
          } else {
            var $__i_4 = $incdec_ptr80, $__i_4$s2 = $__i_4 >> 2;
            var $__n_swaps_5 = $__n_swaps_3;
            var $__m_2 = $add_ptr21, $__m_2$s2 = $__m_2 >> 2;
          }
        } while (0);
        var $__m_2;
        var $__n_swaps_5;
        var $__i_4;
        var $cmp106 = ($__i_4 | 0) == ($__m_2 | 0);
        do {
          if ($cmp106) {
            var $__n_swaps_6 = $__n_swaps_5;
          } else {
            var $25 = HEAP32[$__comp$s2];
            var $call107 = FUNCTION_TABLE[$25]($__m_2, $__i_4);
            if (!$call107) {
              var $__n_swaps_6 = $__n_swaps_5;
              break;
            }
            var $tmp36 = HEAP32[$__i_4$s2];
            var $tmp37 = HEAP32[$__i_4$s2 + 1];
            var $tmp38 = HEAP32[$__i_4$s2 + 2];
            var $26$s2 = $__i_4 >> 2;
            var $27$s2 = $__m_2 >> 2;
            HEAP32[$26$s2] = HEAP32[$27$s2];
            HEAP32[$26$s2 + 1] = HEAP32[$27$s2 + 1];
            HEAP32[$26$s2 + 2] = HEAP32[$27$s2 + 2];
            HEAP32[$__m_2$s2] = $tmp36;
            HEAP32[$__m_2$s2 + 1] = $tmp37;
            HEAP32[$__m_2$s2 + 2] = $tmp38;
            var $__n_swaps_6 = $__n_swaps_5 + 1 | 0;
          }
        } while (0);
        var $__n_swaps_6;
        if (($__n_swaps_6 | 0) == 0) {
          var $call113 = __ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($__first_addr_0_ph, $__i_4, $__comp);
          var $add_ptr114 = $__i_4 + 12 | 0;
          var $call115 = __ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($add_ptr114, $__last_addr_0, $__comp);
          if ($call115) {
            if ($call113) {
              __label__ = 52;
              break $__restart_outer$2;
            }
            var $__last_addr_0 = $__i_4;
            continue;
          } else {
            if ($call113) {
              var $__last_addr_0_ph = $__last_addr_0;
              var $__first_addr_0_ph = $add_ptr114;
              continue $__restart_outer$2;
            }
          }
        }
        var $sub_ptr_lhs_cast126 = $__i_4;
        if (($sub_ptr_lhs_cast126 - $sub_ptr_rhs_cast | 0) < ($sub_ptr_lhs_cast - $sub_ptr_lhs_cast126 | 0)) {
          __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first_addr_0_ph, $__i_4, $__comp);
          var $__last_addr_0_ph = $__last_addr_0;
          var $__first_addr_0_ph = $__i_4 + 12 | 0;
          continue $__restart_outer$2;
        }
        __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__i_4 + 12 | 0, $__last_addr_0, $__comp);
        var $__last_addr_0 = $__i_4;
      }
    }
    var $call39 = FUNCTION_TABLE[$10]($__first_addr_0_ph, $incdec_ptr18);
    if ($call39) {
      var $__i_1 = $incdec_ptr80;
    } else {
      var $__i_0 = $incdec_ptr80, $__i_0$s2 = $__i_0 >> 2;
      while (1) {
        var $__i_0;
        if (($__i_0 | 0) == ($incdec_ptr18 | 0)) {
          __label__ = 52;
          break $__restart_outer$2;
        }
        var $11 = HEAP32[$__comp$s2];
        var $call46 = FUNCTION_TABLE[$11]($__first_addr_0_ph, $__i_0);
        if ($call46) {
          break;
        }
        var $__i_0 = $__i_0 + 12 | 0, $__i_0$s2 = $__i_0 >> 2;
      }
      var $tmp9 = HEAP32[$__i_0$s2];
      var $tmp10 = HEAP32[$__i_0$s2 + 1];
      var $tmp11 = HEAP32[$__i_0$s2 + 2];
      var $12$s2 = $__i_0 >> 2;
      var $13$s2 = $incdec_ptr18 >> 2;
      HEAP32[$12$s2] = HEAP32[$13$s2];
      HEAP32[$12$s2 + 1] = HEAP32[$13$s2 + 1];
      HEAP32[$12$s2 + 2] = HEAP32[$13$s2 + 2];
      HEAP32[$incdec_ptr18 >> 2] = $tmp9;
      HEAP32[$__last_addr_0 - 12 + 4 >> 2] = $tmp10;
      HEAP32[$__last_addr_0 - 12 + 8 >> 2] = $tmp11;
      var $__i_1 = $__i_0 + 12 | 0;
    }
    var $__i_1;
    if (($__i_1 | 0) == ($incdec_ptr18 | 0)) {
      __label__ = 52;
      break;
    }
    var $__j_1_ph = $incdec_ptr18;
    var $__i_2_ph = $__i_1;
    while (1) {
      var $__i_2_ph;
      var $__j_1_ph;
      var $14 = HEAP32[$__comp$s2];
      var $call5841 = FUNCTION_TABLE[$14]($__first_addr_0_ph, $__i_2_ph);
      $while_cond62_preheader$$while_body59$59 : do {
        if ($call5841) {
          var $__i_2_lcssa = $__i_2_ph, $__i_2_lcssa$s2 = $__i_2_lcssa >> 2;
        } else {
          var $__i_242 = $__i_2_ph;
          while (1) {
            var $__i_242;
            var $incdec_ptr60 = $__i_242 + 12 | 0;
            var $15 = HEAP32[$__comp$s2];
            var $call58 = FUNCTION_TABLE[$15]($__first_addr_0_ph, $incdec_ptr60);
            if ($call58) {
              var $__i_2_lcssa = $incdec_ptr60, $__i_2_lcssa$s2 = $__i_2_lcssa >> 2;
              break $while_cond62_preheader$$while_body59$59;
            }
            var $__i_242 = $incdec_ptr60;
          }
        }
      } while (0);
      var $__i_2_lcssa;
      var $__j_2 = $__j_1_ph;
      while (1) {
        var $__j_2;
        var $16 = HEAP32[$__comp$s2];
        var $incdec_ptr63 = $__j_2 - 12 | 0;
        var $call64 = FUNCTION_TABLE[$16]($__first_addr_0_ph, $incdec_ptr63);
        if (!$call64) {
          break;
        }
        var $__j_2 = $incdec_ptr63;
      }
      if ($__i_2_lcssa >>> 0 >= $incdec_ptr63 >>> 0) {
        var $__last_addr_0_ph = $__last_addr_0;
        var $__first_addr_0_ph = $__i_2_lcssa;
        continue $__restart_outer$2;
      }
      var $tmp15 = HEAP32[$__i_2_lcssa$s2];
      var $tmp16 = HEAP32[$__i_2_lcssa$s2 + 1];
      var $tmp17 = HEAP32[$__i_2_lcssa$s2 + 2];
      var $17$s2 = $__i_2_lcssa >> 2;
      var $18$s2 = $incdec_ptr63 >> 2;
      HEAP32[$17$s2] = HEAP32[$18$s2];
      HEAP32[$17$s2 + 1] = HEAP32[$18$s2 + 1];
      HEAP32[$17$s2 + 2] = HEAP32[$18$s2 + 2];
      HEAP32[$incdec_ptr63 >> 2] = $tmp15;
      HEAP32[$__j_2 - 12 + 4 >> 2] = $tmp16;
      HEAP32[$__j_2 - 12 + 8 >> 2] = $tmp17;
      var $__j_1_ph = $incdec_ptr63;
      var $__i_2_ph = $__i_2_lcssa + 12 | 0;
    }
  }
  $if_then16$$return$67 : do {
    if (__label__ == 9) {
      var $3$s2 = $__t_i >> 2;
      var $add_ptr_i = $__first_addr_0_ph + 24 | 0;
      var $call_i = __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__first_addr_0_ph, $incdec_ptr80, $add_ptr_i, $__comp);
      var $add_ptr2_i = $__first_addr_0_ph + 36 | 0;
      if (($add_ptr2_i | 0) == ($__last_addr_0 | 0)) {
        break;
      }
      var $__j_02_i = $add_ptr_i;
      var $__i_03_i = $add_ptr2_i;
      while (1) {
        var $__i_03_i;
        var $__j_02_i;
        var $4 = HEAP32[$__comp$s2];
        var $call3_i = FUNCTION_TABLE[$4]($__i_03_i, $__j_02_i);
        if ($call3_i) {
          var $5$s2 = $__i_03_i >> 2;
          HEAP32[$3$s2] = HEAP32[$5$s2];
          HEAP32[$3$s2 + 1] = HEAP32[$5$s2 + 1];
          HEAP32[$3$s2 + 2] = HEAP32[$5$s2 + 2];
          var $__k_0_i = $__j_02_i;
          var $__j_1_i = $__i_03_i;
          while (1) {
            var $__j_1_i;
            var $__k_0_i;
            var $6$s2 = $__j_1_i >> 2;
            var $7$s2 = $__k_0_i >> 2;
            HEAP32[$6$s2] = HEAP32[$7$s2];
            HEAP32[$6$s2 + 1] = HEAP32[$7$s2 + 1];
            HEAP32[$6$s2 + 2] = HEAP32[$7$s2 + 2];
            if (($__k_0_i | 0) == ($__first_addr_0_ph | 0)) {
              break;
            }
            var $8 = HEAP32[$__comp$s2];
            var $incdec_ptr_i = $__k_0_i - 12 | 0;
            var $call7_i = FUNCTION_TABLE[$8]($__t_i, $incdec_ptr_i);
            if (!$call7_i) {
              break;
            }
            var $__j_1_i = $__k_0_i;
            var $__k_0_i = $incdec_ptr_i;
          }
          HEAP32[$7$s2] = HEAP32[$3$s2];
          HEAP32[$7$s2 + 1] = HEAP32[$3$s2 + 1];
          HEAP32[$7$s2 + 2] = HEAP32[$3$s2 + 2];
        }
        var $incdec_ptr9_i = $__i_03_i + 12 | 0;
        if (($incdec_ptr9_i | 0) == ($__last_addr_0 | 0)) {
          break $if_then16$$return$67;
        }
        var $__j_02_i = $__i_03_i;
        var $__i_03_i = $incdec_ptr9_i;
      }
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__x, $__y, $__z, $__c) {
  var $5$s2;
  var $3$s2;
  var $2$s2;
  var $10$s2;
  var $8$s2;
  var $7$s2;
  var $6$s2;
  var $__z$s2 = $__z >> 2;
  var $__x$s2 = $__x >> 2;
  var $0 = HEAP32[$__c >> 2];
  var $call = FUNCTION_TABLE[$0]($__y, $__x);
  var $1 = HEAP32[$__c >> 2];
  var $call7 = FUNCTION_TABLE[$1]($__z, $__y);
  do {
    if ($call) {
      var $tmp46 = HEAP32[$__x$s2];
      var $tmp48 = HEAP32[$__x$s2 + 1];
      var $tmp50 = HEAP32[$__x$s2 + 2];
      var $6$s2 = $__x >> 2;
      if ($call7) {
        var $7$s2 = $__z >> 2;
        HEAP32[$6$s2] = HEAP32[$7$s2];
        HEAP32[$6$s2 + 1] = HEAP32[$7$s2 + 1];
        HEAP32[$6$s2 + 2] = HEAP32[$7$s2 + 2];
        HEAP32[$__z$s2] = $tmp46;
        HEAP32[$__z$s2 + 1] = $tmp48;
        HEAP32[$__z$s2 + 2] = $tmp50;
        var $retval_0 = 1;
      } else {
        var $8$s2 = $__y >> 2;
        HEAP32[$6$s2] = HEAP32[$8$s2];
        HEAP32[$6$s2 + 1] = HEAP32[$8$s2 + 1];
        HEAP32[$6$s2 + 2] = HEAP32[$8$s2 + 2];
        var $__y_027 = $__y | 0;
        HEAP32[$__y_027 >> 2] = $tmp46;
        var $__y_129 = $__y + 4 | 0;
        HEAP32[$__y_129 >> 2] = $tmp48;
        var $__y_231 = $__y + 8 | 0;
        HEAP32[$__y_231 >> 2] = $tmp50;
        var $9 = HEAP32[$__c >> 2];
        var $call10 = FUNCTION_TABLE[$9]($__z, $__y);
        if (!$call10) {
          var $retval_0 = 1;
          break;
        }
        var $tmp13 = HEAP32[$__y_027 >> 2];
        var $tmp15 = HEAP32[$__y_129 >> 2];
        var $tmp17 = HEAP32[$__y_231 >> 2];
        var $10$s2 = $__z >> 2;
        HEAP32[$8$s2] = HEAP32[$10$s2];
        HEAP32[$8$s2 + 1] = HEAP32[$10$s2 + 1];
        HEAP32[$8$s2 + 2] = HEAP32[$10$s2 + 2];
        HEAP32[$__z$s2] = $tmp13;
        HEAP32[$__z$s2 + 1] = $tmp15;
        HEAP32[$__z$s2 + 2] = $tmp17;
        var $retval_0 = 2;
      }
    } else {
      if (!$call7) {
        var $retval_0 = 0;
        break;
      }
      var $__y_0 = $__y | 0;
      var $tmp3 = HEAP32[$__y_0 >> 2];
      var $__y_1 = $__y + 4 | 0;
      var $tmp4 = HEAP32[$__y_1 >> 2];
      var $__y_2 = $__y + 8 | 0;
      var $tmp5 = HEAP32[$__y_2 >> 2];
      var $2$s2 = $__y >> 2;
      var $3$s2 = $__z >> 2;
      HEAP32[$2$s2] = HEAP32[$3$s2];
      HEAP32[$2$s2 + 1] = HEAP32[$3$s2 + 1];
      HEAP32[$2$s2 + 2] = HEAP32[$3$s2 + 2];
      HEAP32[$__z$s2] = $tmp3;
      HEAP32[$__z$s2 + 1] = $tmp4;
      HEAP32[$__z$s2 + 2] = $tmp5;
      var $4 = HEAP32[$__c >> 2];
      var $call3 = FUNCTION_TABLE[$4]($__y, $__x);
      if (!$call3) {
        var $retval_0 = 1;
        break;
      }
      var $tmp24 = HEAP32[$__x$s2];
      var $tmp25 = HEAP32[$__x$s2 + 1];
      var $tmp26 = HEAP32[$__x$s2 + 2];
      var $5$s2 = $__x >> 2;
      HEAP32[$5$s2] = HEAP32[$2$s2];
      HEAP32[$5$s2 + 1] = HEAP32[$2$s2 + 1];
      HEAP32[$5$s2 + 2] = HEAP32[$2$s2 + 2];
      HEAP32[$__y_0 >> 2] = $tmp24;
      HEAP32[$__y_1 >> 2] = $tmp25;
      HEAP32[$__y_2 >> 2] = $tmp26;
      var $retval_0 = 2;
    }
  } while (0);
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__x1, $__x2, $__x3, $__x4, $__c) {
  var $6$s2;
  var $4$s2;
  var $2$s2;
  var $1$s2;
  var $call = __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__x1, $__x2, $__x3, $__c);
  var $0 = HEAP32[$__c >> 2];
  var $call1 = FUNCTION_TABLE[$0]($__x4, $__x3);
  do {
    if ($call1) {
      var $__x3_0 = $__x3 | 0;
      var $tmp3 = HEAP32[$__x3_0 >> 2];
      var $__x3_1 = $__x3 + 4 | 0;
      var $tmp4 = HEAP32[$__x3_1 >> 2];
      var $__x3_2 = $__x3 + 8 | 0;
      var $tmp5 = HEAP32[$__x3_2 >> 2];
      var $1$s2 = $__x3 >> 2;
      var $2$s2 = $__x4 >> 2;
      HEAP32[$1$s2] = HEAP32[$2$s2];
      HEAP32[$1$s2 + 1] = HEAP32[$2$s2 + 1];
      HEAP32[$1$s2 + 2] = HEAP32[$2$s2 + 2];
      HEAP32[$__x4 >> 2] = $tmp3;
      HEAP32[$__x4 + 4 >> 2] = $tmp4;
      HEAP32[$__x4 + 8 >> 2] = $tmp5;
      var $inc = $call + 1 | 0;
      var $3 = HEAP32[$__c >> 2];
      var $call2 = FUNCTION_TABLE[$3]($__x3, $__x2);
      if (!$call2) {
        var $__r_0 = $inc;
        break;
      }
      var $__x2_018 = $__x2 | 0;
      var $tmp19 = HEAP32[$__x2_018 >> 2];
      var $__x2_120 = $__x2 + 4 | 0;
      var $tmp21 = HEAP32[$__x2_120 >> 2];
      var $__x2_222 = $__x2 + 8 | 0;
      var $tmp23 = HEAP32[$__x2_222 >> 2];
      var $4$s2 = $__x2 >> 2;
      HEAP32[$4$s2] = HEAP32[$1$s2];
      HEAP32[$4$s2 + 1] = HEAP32[$1$s2 + 1];
      HEAP32[$4$s2 + 2] = HEAP32[$1$s2 + 2];
      HEAP32[$__x3_0 >> 2] = $tmp19;
      HEAP32[$__x3_1 >> 2] = $tmp21;
      HEAP32[$__x3_2 >> 2] = $tmp23;
      var $inc4 = $call + 2 | 0;
      var $5 = HEAP32[$__c >> 2];
      var $call5 = FUNCTION_TABLE[$5]($__x2, $__x1);
      if (!$call5) {
        var $__r_0 = $inc4;
        break;
      }
      var $tmp9 = HEAP32[$__x1 >> 2];
      var $tmp10 = HEAP32[$__x1 + 4 >> 2];
      var $tmp11 = HEAP32[$__x1 + 8 >> 2];
      var $6$s2 = $__x1 >> 2;
      HEAP32[$6$s2] = HEAP32[$4$s2];
      HEAP32[$6$s2 + 1] = HEAP32[$4$s2 + 1];
      HEAP32[$6$s2 + 2] = HEAP32[$4$s2 + 2];
      HEAP32[$__x2_018 >> 2] = $tmp9;
      HEAP32[$__x2_120 >> 2] = $tmp10;
      HEAP32[$__x2_222 >> 2] = $tmp11;
      var $__r_0 = $call + 3 | 0;
    } else {
      var $__r_0 = $call;
    }
  } while (0);
  var $__r_0;
  return $__r_0;
  return null;
}

function __ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__x1, $__x2, $__x3, $__x4, $__x5, $__c) {
  var $8$s2;
  var $6$s2;
  var $4$s2;
  var $2$s2;
  var $1$s2;
  var $call = __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__x1, $__x2, $__x3, $__x4, $__c);
  var $0 = HEAP32[$__c >> 2];
  var $call1 = FUNCTION_TABLE[$0]($__x5, $__x4);
  do {
    if ($call1) {
      var $__x4_0 = $__x4 | 0;
      var $tmp3 = HEAP32[$__x4_0 >> 2];
      var $__x4_1 = $__x4 + 4 | 0;
      var $tmp4 = HEAP32[$__x4_1 >> 2];
      var $__x4_2 = $__x4 + 8 | 0;
      var $tmp5 = HEAP32[$__x4_2 >> 2];
      var $1$s2 = $__x4 >> 2;
      var $2$s2 = $__x5 >> 2;
      HEAP32[$1$s2] = HEAP32[$2$s2];
      HEAP32[$1$s2 + 1] = HEAP32[$2$s2 + 1];
      HEAP32[$1$s2 + 2] = HEAP32[$2$s2 + 2];
      HEAP32[$__x5 >> 2] = $tmp3;
      HEAP32[$__x5 + 4 >> 2] = $tmp4;
      HEAP32[$__x5 + 8 >> 2] = $tmp5;
      var $inc = $call + 1 | 0;
      var $3 = HEAP32[$__c >> 2];
      var $call2 = FUNCTION_TABLE[$3]($__x4, $__x3);
      if (!$call2) {
        var $__r_0 = $inc;
        break;
      }
      var $__x3_0 = $__x3 | 0;
      var $tmp18 = HEAP32[$__x3_0 >> 2];
      var $__x3_1 = $__x3 + 4 | 0;
      var $tmp19 = HEAP32[$__x3_1 >> 2];
      var $__x3_2 = $__x3 + 8 | 0;
      var $tmp20 = HEAP32[$__x3_2 >> 2];
      var $4$s2 = $__x3 >> 2;
      HEAP32[$4$s2] = HEAP32[$1$s2];
      HEAP32[$4$s2 + 1] = HEAP32[$1$s2 + 1];
      HEAP32[$4$s2 + 2] = HEAP32[$1$s2 + 2];
      HEAP32[$__x4_0 >> 2] = $tmp18;
      HEAP32[$__x4_1 >> 2] = $tmp19;
      HEAP32[$__x4_2 >> 2] = $tmp20;
      var $inc4 = $call + 2 | 0;
      var $5 = HEAP32[$__c >> 2];
      var $call5 = FUNCTION_TABLE[$5]($__x3, $__x2);
      if (!$call5) {
        var $__r_0 = $inc4;
        break;
      }
      var $__x2_027 = $__x2 | 0;
      var $tmp28 = HEAP32[$__x2_027 >> 2];
      var $__x2_129 = $__x2 + 4 | 0;
      var $tmp30 = HEAP32[$__x2_129 >> 2];
      var $__x2_231 = $__x2 + 8 | 0;
      var $tmp32 = HEAP32[$__x2_231 >> 2];
      var $6$s2 = $__x2 >> 2;
      HEAP32[$6$s2] = HEAP32[$4$s2];
      HEAP32[$6$s2 + 1] = HEAP32[$4$s2 + 1];
      HEAP32[$6$s2 + 2] = HEAP32[$4$s2 + 2];
      HEAP32[$__x3_0 >> 2] = $tmp28;
      HEAP32[$__x3_1 >> 2] = $tmp30;
      HEAP32[$__x3_2 >> 2] = $tmp32;
      var $inc7 = $call + 3 | 0;
      var $7 = HEAP32[$__c >> 2];
      var $call8 = FUNCTION_TABLE[$7]($__x2, $__x1);
      if (!$call8) {
        var $__r_0 = $inc7;
        break;
      }
      var $tmp9 = HEAP32[$__x1 >> 2];
      var $tmp10 = HEAP32[$__x1 + 4 >> 2];
      var $tmp11 = HEAP32[$__x1 + 8 >> 2];
      var $8$s2 = $__x1 >> 2;
      HEAP32[$8$s2] = HEAP32[$6$s2];
      HEAP32[$8$s2 + 1] = HEAP32[$6$s2 + 1];
      HEAP32[$8$s2 + 2] = HEAP32[$6$s2 + 2];
      HEAP32[$__x2_027 >> 2] = $tmp9;
      HEAP32[$__x2_129 >> 2] = $tmp10;
      HEAP32[$__x2_231 >> 2] = $tmp11;
      var $__r_0 = $call + 4 | 0;
    } else {
      var $__r_0 = $call;
    }
  } while (0);
  var $__r_0;
  return $__r_0;
  return null;
}

function __ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($__first, $__last, $__comp) {
  var $7$s2;
  var $6$s2;
  var $5$s2;
  var $3$s2;
  var $2$s2;
  var $1$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var $__t = __stackBase__;
  var $sub_ptr_div = ($__last - $__first) / 12 | 0;
  $sw_epilog$$return$$sw_bb1$$sw_bb2$$sw_bb5$$sw_bb10$104 : do {
    if ($sub_ptr_div == 0 || $sub_ptr_div == 1) {
      var $retval_0 = 1;
    } else if ($sub_ptr_div == 2) {
      var $0 = HEAP32[$__comp >> 2];
      var $incdec_ptr = $__last - 12 | 0;
      var $call = FUNCTION_TABLE[$0]($incdec_ptr, $__first);
      if (!$call) {
        var $retval_0 = 1;
        break;
      }
      var $tmp3 = HEAP32[$__first >> 2];
      var $tmp4 = HEAP32[$__first + 4 >> 2];
      var $tmp5 = HEAP32[$__first + 8 >> 2];
      var $1$s2 = $__first >> 2;
      var $2$s2 = $incdec_ptr >> 2;
      HEAP32[$1$s2] = HEAP32[$2$s2];
      HEAP32[$1$s2 + 1] = HEAP32[$2$s2 + 1];
      HEAP32[$1$s2 + 2] = HEAP32[$2$s2 + 2];
      HEAP32[$incdec_ptr >> 2] = $tmp3;
      HEAP32[$__last - 12 + 4 >> 2] = $tmp4;
      HEAP32[$__last - 12 + 8 >> 2] = $tmp5;
      var $retval_0 = 1;
    } else if ($sub_ptr_div == 3) {
      var $add_ptr = $__first + 12 | 0;
      var $incdec_ptr3 = $__last - 12 | 0;
      var $call4 = __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__first, $add_ptr, $incdec_ptr3, $__comp);
      var $retval_0 = 1;
    } else if ($sub_ptr_div == 4) {
      var $add_ptr6 = $__first + 12 | 0;
      var $add_ptr7 = $__first + 24 | 0;
      var $incdec_ptr8 = $__last - 12 | 0;
      var $call9 = __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__first, $add_ptr6, $add_ptr7, $incdec_ptr8, $__comp);
      var $retval_0 = 1;
    } else if ($sub_ptr_div == 5) {
      var $add_ptr11 = $__first + 12 | 0;
      var $add_ptr12 = $__first + 24 | 0;
      var $add_ptr13 = $__first + 36 | 0;
      var $incdec_ptr14 = $__last - 12 | 0;
      var $call15 = __ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__first, $add_ptr11, $add_ptr12, $add_ptr13, $incdec_ptr14, $__comp);
      var $retval_0 = 1;
    } else {
      var $add_ptr16 = $__first + 24 | 0;
      var $add_ptr17 = $__first + 12 | 0;
      var $call18 = __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__first, $add_ptr17, $add_ptr16, $__comp);
      var $3$s2 = $__t >> 2;
      var $__i_0 = $__first + 36 | 0;
      var $__count_0 = 0;
      var $__j_0 = $add_ptr16;
      while (1) {
        var $__j_0;
        var $__count_0;
        var $__i_0;
        if (($__i_0 | 0) == ($__last | 0)) {
          var $retval_0 = 1;
          break $sw_epilog$$return$$sw_bb1$$sw_bb2$$sw_bb5$$sw_bb10$104;
        }
        var $4 = HEAP32[$__comp >> 2];
        var $call20 = FUNCTION_TABLE[$4]($__i_0, $__j_0);
        if ($call20) {
          var $5$s2 = $__i_0 >> 2;
          HEAP32[$3$s2] = HEAP32[$5$s2];
          HEAP32[$3$s2 + 1] = HEAP32[$5$s2 + 1];
          HEAP32[$3$s2 + 2] = HEAP32[$5$s2 + 2];
          var $__k_0 = $__j_0;
          var $__j_1 = $__i_0;
          while (1) {
            var $__j_1;
            var $__k_0;
            var $6$s2 = $__j_1 >> 2;
            var $7$s2 = $__k_0 >> 2;
            HEAP32[$6$s2] = HEAP32[$7$s2];
            HEAP32[$6$s2 + 1] = HEAP32[$7$s2 + 1];
            HEAP32[$6$s2 + 2] = HEAP32[$7$s2 + 2];
            if (($__k_0 | 0) == ($__first | 0)) {
              break;
            }
            var $8 = HEAP32[$__comp >> 2];
            var $incdec_ptr25 = $__k_0 - 12 | 0;
            var $call26 = FUNCTION_TABLE[$8]($__t, $incdec_ptr25);
            if (!$call26) {
              break;
            }
            var $__j_1 = $__k_0;
            var $__k_0 = $incdec_ptr25;
          }
          HEAP32[$7$s2] = HEAP32[$3$s2];
          HEAP32[$7$s2 + 1] = HEAP32[$3$s2 + 1];
          HEAP32[$7$s2 + 2] = HEAP32[$3$s2 + 2];
          var $inc = $__count_0 + 1 | 0;
          if (($inc | 0) == 8) {
            break;
          }
          var $__count_1 = $inc;
        } else {
          var $__count_1 = $__count_0;
        }
        var $__count_1;
        var $__j_0 = $__i_0;
        var $__i_0 = $__i_0 + 12 | 0;
        var $__count_0 = $__count_1;
      }
      var $retval_0 = ($__i_0 + 12 | 0) == ($__last | 0);
    }
  } while (0);
  var $retval_0;
  STACKTOP = __stackBase__;
  return $retval_0;
  return null;
}

function __ZN17b2ContactListenerD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef($this, $allocator, $body, $def) {
  var $m_proxies$s2;
  var $4$s1;
  var $3$s1;
  var $def$s2 = $def >> 2;
  var $this$s2 = $this >> 2;
  var $0 = HEAP32[$def$s2 + 1];
  HEAP32[$this$s2 + 10] = $0;
  var $1 = HEAPF32[$def$s2 + 2];
  HEAPF32[$this$s2 + 4] = $1;
  var $2 = HEAPF32[$def$s2 + 3];
  HEAPF32[$this$s2 + 5] = $2;
  HEAP32[$this$s2 + 2] = $body;
  HEAP32[$this$s2 + 1] = 0;
  var $3$s1 = ($this + 32 | 0) >> 1;
  var $4$s1 = ($def + 22 | 0) >> 1;
  HEAP16[$3$s1] = HEAP16[$4$s1];
  HEAP16[$3$s1 + 1] = HEAP16[$4$s1 + 1];
  HEAP16[$3$s1 + 2] = HEAP16[$4$s1 + 2];
  var $6 = HEAP8[$def + 20 | 0] & 1;
  HEAP8[$this + 38 | 0] = $6;
  var $7 = HEAP32[$def$s2];
  var $9 = HEAP32[HEAP32[$7 >> 2] + 8 >> 2];
  var $call = FUNCTION_TABLE[$9]($7, $allocator);
  HEAP32[$this$s2 + 3] = $call;
  var $11 = HEAP32[HEAP32[$call >> 2] + 12 >> 2];
  var $call5 = FUNCTION_TABLE[$11]($call);
  var $mul = $call5 * 28 | 0;
  var $call6 = __ZN16b2BlockAllocator8AllocateEi($allocator, $mul);
  var $12 = $call6;
  var $m_proxies$s2 = ($this + 24 | 0) >> 2;
  HEAP32[$m_proxies$s2] = $12;
  var $cmp1 = ($call5 | 0) > 0;
  $for_body$$for_end$130 : do {
    if ($cmp1) {
      var $i_02 = 0;
      var $13 = $12;
      while (1) {
        var $13;
        var $i_02;
        HEAP32[($13 + 16 >> 2) + ($i_02 * 7 | 0)] = 0;
        var $proxyId = HEAP32[$m_proxies$s2] + $i_02 * 28 + 24 | 0;
        HEAP32[$proxyId >> 2] = -1;
        var $inc = $i_02 + 1 | 0;
        if (($inc | 0) == ($call5 | 0)) {
          break $for_body$$for_end$130;
        }
        var $i_02 = $inc;
        var $13 = HEAP32[$m_proxies$s2];
      }
    }
  } while (0);
  HEAP32[$this$s2 + 7] = 0;
  var $15 = HEAPF32[$def$s2 + 4];
  HEAPF32[$this$s2] = $15;
  return;
  return;
}

function __ZN9b2Fixture9SetSensorEb($this, $sensor) {
  var $m_isSensor = $this + 38 | 0;
  if (($sensor & 1 | 0) != (HEAP8[$m_isSensor] & 1 & 255 | 0)) {
    var $2 = HEAPU32[$this + 8 >> 2];
    var $m_flags_i = $2 + 4 | 0;
    var $3 = HEAP16[$m_flags_i >> 1];
    if (($3 & 2) << 16 >> 16 == 0) {
      var $or_i = $3 | 2;
      HEAP16[$m_flags_i >> 1] = $or_i;
      HEAPF32[$2 + 144 >> 2] = 0;
    }
    HEAP8[$m_isSensor] = $sensor & 1;
  }
  return;
  return;
}

function __ZN9b2Fixture7DestroyEP16b2BlockAllocator($this, $allocator) {
  var $9$s2;
  var $m_shape$s2;
  if ((HEAP32[$this + 28 >> 2] | 0) != 0) {
    ___assert_func(STRING_TABLE.__str121 | 0, 72, STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Fixture7DestroyEP16b2BlockAllocator | 0, STRING_TABLE.__str1122 | 0);
  }
  var $m_shape$s2 = ($this + 12 | 0) >> 2;
  var $1 = HEAP32[$m_shape$s2];
  var $3 = HEAP32[HEAP32[$1 >> 2] + 12 >> 2];
  var $call = FUNCTION_TABLE[$3]($1);
  var $m_proxies = $this + 24 | 0;
  var $4 = HEAPU32[$m_proxies >> 2];
  var $5 = $4;
  var $mul = $call * 28 | 0;
  var $cmp_i = ($mul | 0) == 0;
  $_ZN16b2BlockAllocator4FreeEPvi_exit$$if_end_i$5 : do {
    if (!$cmp_i) {
      var $cmp2_i = ($mul | 0) > 0;
      do {
        if ($cmp2_i) {
          if (($mul | 0) <= 640) {
            break;
          }
          _free($5);
          break $_ZN16b2BlockAllocator4FreeEPvi_exit$$if_end_i$5;
        }
        ___assert_func(STRING_TABLE.__str59 | 0, 164, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str261 | 0);
      } while (0);
      var $6 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + $mul | 0];
      var $conv_i = $6 & 255;
      if (($6 & 255) >= 14) {
        ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
      }
      var $7 = $4;
      var $arrayidx11_i = ($conv_i << 2) + $allocator + 12 | 0;
      var $8 = HEAP32[$arrayidx11_i >> 2];
      HEAP32[$4 >> 2] = $8;
      HEAP32[$arrayidx11_i >> 2] = $7;
    }
  } while (0);
  HEAP32[$m_proxies >> 2] = 0;
  var $9 = HEAPU32[$m_shape$s2], $9$s2 = $9 >> 2;
  var $10 = HEAP32[$9$s2 + 1];
  if ($10 == 0) {
    var $11 = $9;
    var $13 = HEAP32[HEAP32[$9$s2] >> 2];
    FUNCTION_TABLE[$13]($11);
    var $14 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 20 | 0];
    var $conv_i3 = $14 & 255;
    if (($14 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $15 = $9;
    var $arrayidx11_i7 = ($conv_i3 << 2) + $allocator + 12 | 0;
    var $_c43 = HEAP32[$arrayidx11_i7 >> 2];
    HEAP32[$9$s2] = $_c43;
    HEAP32[$arrayidx11_i7 >> 2] = $15;
  } else if ($10 == 1) {
    var $18 = $9;
    var $20 = HEAP32[HEAP32[$9$s2] >> 2];
    FUNCTION_TABLE[$20]($18);
    var $21 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 48 | 0];
    var $conv_i13 = $21 & 255;
    if (($21 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $22 = $9;
    var $arrayidx11_i17 = ($conv_i13 << 2) + $allocator + 12 | 0;
    var $_c42 = HEAP32[$arrayidx11_i17 >> 2];
    HEAP32[$9$s2] = $_c42;
    HEAP32[$arrayidx11_i17 >> 2] = $22;
  } else if ($10 == 2) {
    var $25 = $9;
    var $27 = HEAP32[HEAP32[$9$s2] >> 2];
    FUNCTION_TABLE[$27]($25);
    var $28 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 152 | 0];
    var $conv_i23 = $28 & 255;
    if (($28 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $29 = $9;
    var $arrayidx11_i27 = ($conv_i23 << 2) + $allocator + 12 | 0;
    var $_c41 = HEAP32[$arrayidx11_i27 >> 2];
    HEAP32[$9$s2] = $_c41;
    HEAP32[$arrayidx11_i27 >> 2] = $29;
  } else if ($10 == 3) {
    var $32 = $9;
    var $34 = HEAP32[HEAP32[$9$s2] >> 2];
    FUNCTION_TABLE[$34]($32);
    var $35 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 40 | 0];
    var $conv_i33 = $35 & 255;
    if (($35 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $36 = $9;
    var $arrayidx11_i37 = ($conv_i33 << 2) + $allocator + 12 | 0;
    var $_c = HEAP32[$arrayidx11_i37 >> 2];
    HEAP32[$9$s2] = $_c;
    HEAP32[$arrayidx11_i37 >> 2] = $36;
  } else {
    ___assert_func(STRING_TABLE.__str121 | 0, 115, STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Fixture7DestroyEP16b2BlockAllocator | 0, STRING_TABLE.__str1316 | 0);
  }
  HEAP32[$m_shape$s2] = 0;
  return;
  return;
}

function __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($this, $broadPhase, $xf) {
  var $m_proxyCount$s2;
  var $m_proxyCount$s2 = ($this + 28 | 0) >> 2;
  if ((HEAP32[$m_proxyCount$s2] | 0) != 0) {
    ___assert_func(STRING_TABLE.__str121 | 0, 124, STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform | 0, STRING_TABLE.__str1122 | 0);
  }
  var $m_shape = $this + 12 | 0;
  var $1 = HEAP32[$m_shape >> 2];
  var $3 = HEAP32[HEAP32[$1 >> 2] + 12 >> 2];
  var $call = FUNCTION_TABLE[$3]($1);
  HEAP32[$m_proxyCount$s2] = $call;
  var $cmp41 = ($call | 0) > 0;
  $for_body_lr_ph$$for_end$39 : do {
    if ($cmp41) {
      var $m_proxies = $this + 24 | 0;
      var $4 = $broadPhase;
      var $i_02 = 0;
      while (1) {
        var $i_02;
        var $5 = HEAP32[$m_proxies >> 2];
        var $add_ptr = $5 + $i_02 * 28 | 0;
        var $6 = HEAP32[$m_shape >> 2];
        var $8 = HEAP32[HEAP32[$6 >> 2] + 24 >> 2];
        var $aabb = $add_ptr | 0;
        FUNCTION_TABLE[$8]($6, $aabb, $xf, $i_02);
        var $9 = $add_ptr;
        var $10 = $add_ptr;
        var $call9 = __ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($4, $10, $9);
        var $proxyId = $5 + $i_02 * 28 + 24 | 0;
        HEAP32[$proxyId >> 2] = $call9;
        var $fixture = $5 + $i_02 * 28 + 16 | 0;
        HEAP32[$fixture >> 2] = $this;
        var $childIndex = $5 + $i_02 * 28 + 20 | 0;
        HEAP32[$childIndex >> 2] = $i_02;
        var $inc = $i_02 + 1 | 0;
        if (($inc | 0) >= (HEAP32[$m_proxyCount$s2] | 0)) {
          break $for_body_lr_ph$$for_end$39;
        }
        var $i_02 = $inc;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($this, $broadPhase) {
  var $m_proxyCount$s2;
  var $m_proxyCount$s2 = ($this + 28 | 0) >> 2;
  var $cmp1 = (HEAP32[$m_proxyCount$s2] | 0) > 0;
  $for_body_lr_ph$$for_end$45 : do {
    if ($cmp1) {
      var $m_proxies = $this + 24 | 0;
      var $1 = $broadPhase + 40 | 0;
      var $2 = $broadPhase + 32 | 0;
      var $3 = $broadPhase + 28 | 0;
      var $m_tree_i = $broadPhase;
      var $i_02 = 0;
      while (1) {
        var $i_02;
        var $proxyId = HEAP32[$m_proxies >> 2] + $i_02 * 28 + 24 | 0;
        var $5 = HEAP32[$proxyId >> 2];
        var $6 = HEAP32[$1 >> 2];
        var $i_0_i_i = 0;
        while (1) {
          var $i_0_i_i;
          if (($i_0_i_i | 0) >= ($6 | 0)) {
            break;
          }
          var $arrayidx_i_i = ($i_0_i_i << 2) + HEAP32[$2 >> 2] | 0;
          if ((HEAP32[$arrayidx_i_i >> 2] | 0) == ($5 | 0)) {
            HEAP32[$arrayidx_i_i >> 2] = -1;
            break;
          }
          var $i_0_i_i = $i_0_i_i + 1 | 0;
        }
        var $dec_i = HEAP32[$3 >> 2] - 1 | 0;
        HEAP32[$3 >> 2] = $dec_i;
        __ZN13b2DynamicTree12DestroyProxyEi($m_tree_i, $5);
        HEAP32[$proxyId >> 2] = -1;
        var $inc = $i_02 + 1 | 0;
        if (($inc | 0) >= (HEAP32[$m_proxyCount$s2] | 0)) {
          break $for_body_lr_ph$$for_end$45;
        }
        var $i_02 = $inc;
      }
    }
  } while (0);
  HEAP32[$m_proxyCount$s2] = 0;
  return;
  return;
}

function __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($this, $broadPhase, $transform1, $transform2) {
  var $11$s2;
  var $9$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 40;
  var $aabb1 = __stackBase__;
  var $aabb2 = __stackBase__ + 16;
  var $displacement = __stackBase__ + 32;
  var $m_proxyCount = $this + 28 | 0;
  var $1 = (HEAP32[$m_proxyCount >> 2] | 0) > 0;
  $for_body_lr_ph$$for_end$58 : do {
    if ($1) {
      var $m_proxies = $this + 24 | 0;
      var $m_shape = $this + 12 | 0;
      var $x_i_i = $aabb1 | 0;
      var $x1_i_i = $aabb2 | 0;
      var $2 = $aabb1 + 4 | 0;
      var $3 = $aabb2 + 4 | 0;
      var $4 = $aabb1 + 8 | 0;
      var $5 = $aabb2 + 8 | 0;
      var $6 = $aabb1 + 12 | 0;
      var $7 = $aabb2 + 12 | 0;
      var $x_i = $transform2 | 0;
      var $x1_i = $transform1 | 0;
      var $y_i = $transform2 + 4 | 0;
      var $y2_i = $transform1 + 4 | 0;
      var $x2_i_i_i = $displacement | 0;
      var $y3_i_i_i = $displacement + 4 | 0;
      var $8 = $displacement;
      var $m_tree_i = $broadPhase;
      var $9$s2 = ($broadPhase + 40 | 0) >> 2;
      var $10 = $broadPhase + 36 | 0;
      var $11$s2 = ($broadPhase + 32 | 0) >> 2;
      var $i_02 = 0;
      while (1) {
        var $i_02;
        var $12 = HEAP32[$m_proxies >> 2];
        var $add_ptr = $12 + $i_02 * 28 | 0;
        var $13 = HEAP32[$m_shape >> 2];
        var $15 = HEAP32[HEAP32[$13 >> 2] + 24 >> 2];
        var $childIndex = $12 + $i_02 * 28 + 20 | 0;
        var $16 = HEAP32[$childIndex >> 2];
        FUNCTION_TABLE[$15]($13, $aabb1, $transform1, $16);
        var $17 = HEAP32[$m_shape >> 2];
        var $19 = HEAP32[HEAP32[$17 >> 2] + 24 >> 2];
        var $20 = HEAP32[$childIndex >> 2];
        FUNCTION_TABLE[$19]($17, $aabb2, $transform2, $20);
        var $21 = $add_ptr;
        var $22 = HEAPF32[$x_i_i >> 2];
        var $23 = HEAPF32[$x1_i_i >> 2];
        var $cond_i_i_i = $22 < $23 ? $22 : $23;
        var $24 = HEAPF32[$2 >> 2];
        var $25 = HEAPF32[$3 >> 2];
        var $cond_i2_i_i = $24 < $25 ? $24 : $25;
        var $26 = $add_ptr;
        var $27 = (tempDoubleF32[0] = $cond_i_i_i, tempDoubleI32[0]);
        var $28$0 = $27;
        var $29 = (tempDoubleF32[0] = $cond_i2_i_i, tempDoubleI32[0]);
        var $32$1 = $29 | 0;
        var $st$38$0 = $26 | 0;
        HEAP32[$st$38$0 >> 2] = 0 | $28$0;
        var $st$38$1 = $26 + 4 | 0;
        HEAP32[$st$38$1 >> 2] = $32$1;
        var $33 = HEAPF32[$4 >> 2];
        var $34 = HEAPF32[$5 >> 2];
        var $cond_i_i4_i = $33 > $34 ? $33 : $34;
        var $35 = HEAPF32[$6 >> 2];
        var $36 = HEAPF32[$7 >> 2];
        var $cond_i2_i8_i = $35 > $36 ? $35 : $36;
        var $37 = $12 + $i_02 * 28 + 8 | 0;
        var $38 = (tempDoubleF32[0] = $cond_i_i4_i, tempDoubleI32[0]);
        var $39$0 = $38;
        var $40 = (tempDoubleF32[0] = $cond_i2_i8_i, tempDoubleI32[0]);
        var $43$1 = $40 | 0;
        var $st$62$0 = $37 | 0;
        HEAP32[$st$62$0 >> 2] = 0 | $39$0;
        var $st$62$1 = $37 + 4 | 0;
        HEAP32[$st$62$1 >> 2] = $43$1;
        var $sub_i = HEAPF32[$x_i >> 2] - HEAPF32[$x1_i >> 2];
        var $sub3_i = HEAPF32[$y_i >> 2] - HEAPF32[$y2_i >> 2];
        HEAPF32[$x2_i_i_i >> 2] = $sub_i;
        HEAPF32[$y3_i_i_i >> 2] = $sub3_i;
        var $48 = HEAP32[($12 + 24 >> 2) + ($i_02 * 7 | 0)];
        var $call_i = __ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($m_tree_i, $48, $21, $8);
        if ($call_i) {
          var $49 = HEAP32[$9$s2];
          var $50 = HEAP32[$10 >> 2];
          if (($49 | 0) == ($50 | 0)) {
            var $51 = HEAP32[$11$s2];
            var $mul_i_i = $50 << 1;
            HEAP32[$10 >> 2] = $mul_i_i;
            var $mul4_i_i = $50 << 3;
            var $call_i_i_i = _malloc($mul4_i_i);
            var $52 = $call_i_i_i;
            HEAP32[$11$s2] = $52;
            var $53 = $51;
            var $mul8_i_i = HEAP32[$9$s2] << 2;
            _memcpy($call_i_i_i, $53, $mul8_i_i, 1);
            _free($53);
            var $55 = HEAP32[$9$s2];
          } else {
            var $55 = $49;
          }
          var $55;
          var $arrayidx_i_i = ($55 << 2) + HEAP32[$11$s2] | 0;
          HEAP32[$arrayidx_i_i >> 2] = $48;
          var $inc_i_i = HEAP32[$9$s2] + 1 | 0;
          HEAP32[$9$s2] = $inc_i_i;
        }
        var $inc = $i_02 + 1 | 0;
        if (($inc | 0) >= (HEAP32[$m_proxyCount >> 2] | 0)) {
          break $for_body_lr_ph$$for_end$58;
        }
        var $i_02 = $inc;
      }
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN9b2Fixture13SetFilterDataERK8b2Filter($this, $filter) {
  var $1$s1;
  var $0$s1;
  var $0$s1 = ($this + 32 | 0) >> 1;
  var $1$s1 = $filter >> 1;
  HEAP16[$0$s1] = HEAP16[$1$s1];
  HEAP16[$0$s1 + 1] = HEAP16[$1$s1 + 1];
  HEAP16[$0$s1 + 2] = HEAP16[$1$s1 + 2];
  __ZN9b2Fixture8RefilterEv($this);
  return;
  return;
}

function __ZN9b2Fixture8RefilterEv($this) {
  var $10$s2;
  var $8$s2;
  var $m_body = $this + 8 | 0;
  var $0 = HEAP32[$m_body >> 2];
  var $cmp = ($0 | 0) == 0;
  $for_end$$if_end$71 : do {
    if (!$cmp) {
      var $edge_03 = HEAP32[$0 + 112 >> 2];
      if (($edge_03 | 0) == 0) {
        var $5 = $0;
      } else {
        var $edge_05 = $edge_03;
        while (1) {
          var $edge_05;
          var $1 = HEAP32[$edge_05 + 4 >> 2];
          if ((HEAP32[$1 + 48 >> 2] | 0) == ($this | 0) | (HEAP32[$1 + 52 >> 2] | 0) == ($this | 0)) {
            var $m_flags_i = $1 + 4 | 0;
            var $or_i = HEAP32[$m_flags_i >> 2] | 8;
            HEAP32[$m_flags_i >> 2] = $or_i;
          }
          var $edge_0 = HEAP32[$edge_05 + 12 >> 2];
          if (($edge_0 | 0) == 0) {
            break;
          }
          var $edge_05 = $edge_0;
        }
        var $5 = HEAP32[$m_body >> 2];
      }
      var $5;
      var $6 = HEAP32[$5 + 88 >> 2];
      if (($6 | 0) == 0) {
        break;
      }
      var $m_proxyCount = $this + 28 | 0;
      if ((HEAP32[$m_proxyCount >> 2] | 0) <= 0) {
        break;
      }
      var $m_proxies = $this + 24 | 0;
      var $8$s2 = ($6 + 102912 | 0) >> 2;
      var $9 = $6 + 102908 | 0;
      var $10$s2 = ($6 + 102904 | 0) >> 2;
      var $i_02 = 0;
      var $11 = HEAP32[$8$s2];
      while (1) {
        var $11;
        var $i_02;
        var $13 = HEAP32[(HEAP32[$m_proxies >> 2] + 24 >> 2) + ($i_02 * 7 | 0)];
        var $14 = HEAP32[$9 >> 2];
        if (($11 | 0) == ($14 | 0)) {
          var $15 = HEAP32[$10$s2];
          var $mul_i_i = $14 << 1;
          HEAP32[$9 >> 2] = $mul_i_i;
          var $mul4_i_i = $14 << 3;
          var $call_i_i_i = _malloc($mul4_i_i);
          var $16 = $call_i_i_i;
          HEAP32[$10$s2] = $16;
          var $17 = $15;
          var $mul8_i_i = HEAP32[$8$s2] << 2;
          _memcpy($call_i_i_i, $17, $mul8_i_i, 1);
          _free($17);
          var $19 = HEAP32[$8$s2];
        } else {
          var $19 = $11;
        }
        var $19;
        var $arrayidx_i_i = ($19 << 2) + HEAP32[$10$s2] | 0;
        HEAP32[$arrayidx_i_i >> 2] = $13;
        var $inc_i_i = HEAP32[$8$s2] + 1 | 0;
        HEAP32[$8$s2] = $inc_i_i;
        var $inc = $i_02 + 1 | 0;
        if (($inc | 0) >= (HEAP32[$m_proxyCount >> 2] | 0)) {
          break $for_end$$if_end$71;
        }
        var $i_02 = $inc;
        var $11 = $inc_i_i;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN9b2Fixture4DumpEi($this, $bodyIndex) {
  var $40$s2;
  var $8$s2;
  var __stackBase__ = STACKTOP;
  var __label__;
  __Z5b2LogPKcz(STRING_TABLE.__str3124 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  var $conv = HEAPF32[$this + 16 >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str4125 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv2 = HEAPF32[$this + 20 >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str5126 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv2, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv3 = HEAPF32[$this >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str6127 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv3, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv4 = HEAP8[$this + 38 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str7128 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv4, tempInt));
  var $conv5 = HEAPU16[$this + 32 >> 1] & 65535;
  __Z5b2LogPKcz(STRING_TABLE.__str8129 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv5, tempInt));
  var $conv7 = HEAPU16[$this + 34 >> 1] & 65535;
  __Z5b2LogPKcz(STRING_TABLE.__str9130 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv7, tempInt));
  var $conv9 = HEAP16[$this + 36 >> 1] << 16 >> 16;
  __Z5b2LogPKcz(STRING_TABLE.__str10131 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv9, tempInt));
  var $8 = HEAPU32[$this + 12 >> 2], $8$s2 = $8 >> 2;
  var $9 = HEAP32[$8$s2 + 1];
  do {
    if ($9 == 0) {
      __Z5b2LogPKcz(STRING_TABLE.__str11132 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $conv11 = HEAPF32[$8$s2 + 2];
      __Z5b2LogPKcz(STRING_TABLE.__str12133 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv11, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
      var $conv12 = HEAPF32[$8$s2 + 3];
      var $conv14 = HEAPF32[$8$s2 + 4];
      __Z5b2LogPKcz(STRING_TABLE.__str13134 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv12, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv14, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
      __label__ = 11;
      break;
    } else if ($9 == 1) {
      var $14 = $8;
      __Z5b2LogPKcz(STRING_TABLE.__str14135 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $conv19 = HEAPF32[$8$s2 + 2];
      __Z5b2LogPKcz(STRING_TABLE.__str12133 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv19, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
      var $m_vertex0 = $8 + 28 | 0;
      var $conv21 = HEAPF32[$m_vertex0 >> 2];
      var $conv24 = HEAPF32[$m_vertex0 + 4 >> 2];
      __Z5b2LogPKcz(STRING_TABLE.__str15136 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv21, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv24, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
      var $conv26 = HEAPF32[$8$s2 + 3];
      var $conv29 = HEAPF32[$8$s2 + 4];
      __Z5b2LogPKcz(STRING_TABLE.__str16137 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv26, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv29, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
      var $m_vertex2 = $8 + 20 | 0;
      var $conv31 = HEAPF32[$m_vertex2 >> 2];
      var $conv34 = HEAPF32[$m_vertex2 + 4 >> 2];
      __Z5b2LogPKcz(STRING_TABLE.__str17138 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv31, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv34, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
      var $conv36 = HEAPF32[$8$s2 + 9];
      var $conv39 = HEAPF32[$8$s2 + 10];
      __Z5b2LogPKcz(STRING_TABLE.__str18139 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv36, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv39, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
      var $conv41 = HEAP8[$8 + 44 | 0] & 1 & 255;
      __Z5b2LogPKcz(STRING_TABLE.__str19140 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv41, tempInt));
      var $conv43 = HEAP8[$14 + 45 | 0] & 1 & 255;
      __Z5b2LogPKcz(STRING_TABLE.__str20141 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv43, tempInt));
      __label__ = 11;
      break;
    } else if ($9 == 2) {
      __Z5b2LogPKcz(STRING_TABLE.__str21142 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      __Z5b2LogPKcz(STRING_TABLE.__str22143 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = 8, tempInt));
      var $33 = $8 + 148 | 0;
      var $34 = HEAPU32[$33 >> 2];
      var $cmp4 = ($34 | 0) > 0;
      $for_body_lr_ph$$for_end$101 : do {
        if ($cmp4) {
          var $35 = $8 + 20 | 0;
          var $i_05 = 0;
          while (1) {
            var $i_05;
            var $conv48 = HEAPF32[$35 + ($i_05 << 3) >> 2];
            var $conv52 = HEAPF32[$35 + ($i_05 << 3) + 4 >> 2];
            __Z5b2LogPKcz(STRING_TABLE.__str23144 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $i_05, tempDoubleF64[0] = $conv48, HEAP32[tempInt + 4 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 8 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv52, HEAP32[tempInt + 12 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 16 >> 2] = tempDoubleI32[1], tempInt));
            var $inc = $i_05 + 1 | 0;
            var $38 = HEAP32[$33 >> 2];
            if (($inc | 0) >= ($38 | 0)) {
              var $_lcssa3 = $38;
              break $for_body_lr_ph$$for_end$101;
            }
            var $i_05 = $inc;
          }
        } else {
          var $_lcssa3 = $34;
        }
      } while (0);
      var $_lcssa3;
      __Z5b2LogPKcz(STRING_TABLE.__str24145 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $_lcssa3, tempInt));
      __label__ = 11;
      break;
    } else if ($9 == 3) {
      var $39 = $8;
      __Z5b2LogPKcz(STRING_TABLE.__str25146 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $40$s2 = ($8 + 16 | 0) >> 2;
      var $41 = HEAP32[$40$s2];
      __Z5b2LogPKcz(STRING_TABLE.__str22143 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $41, tempInt));
      var $42 = HEAP32[$40$s2];
      var $cmp601 = ($42 | 0) > 0;
      $for_body61_lr_ph$$for_end72$107 : do {
        if ($cmp601) {
          var $43 = $8 + 12 | 0;
          var $i57_02 = 0;
          while (1) {
            var $i57_02;
            var $44 = HEAP32[$43 >> 2];
            var $conv65 = HEAPF32[$44 + ($i57_02 << 3) >> 2];
            var $conv69 = HEAPF32[$44 + ($i57_02 << 3) + 4 >> 2];
            __Z5b2LogPKcz(STRING_TABLE.__str23144 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $i57_02, tempDoubleF64[0] = $conv65, HEAP32[tempInt + 4 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 8 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv69, HEAP32[tempInt + 12 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 16 >> 2] = tempDoubleI32[1], tempInt));
            var $inc71 = $i57_02 + 1 | 0;
            var $47 = HEAP32[$40$s2];
            if (($inc71 | 0) >= ($47 | 0)) {
              var $_lcssa = $47;
              break $for_body61_lr_ph$$for_end72$107;
            }
            var $i57_02 = $inc71;
          }
        } else {
          var $_lcssa = $42;
        }
      } while (0);
      var $_lcssa;
      __Z5b2LogPKcz(STRING_TABLE.__str26147 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $_lcssa, tempInt));
      var $m_prevVertex = $8 + 20 | 0;
      var $conv75 = HEAPF32[$m_prevVertex >> 2];
      var $conv78 = HEAPF32[$m_prevVertex + 4 >> 2];
      __Z5b2LogPKcz(STRING_TABLE.__str27148 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv75, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv78, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
      var $m_nextVertex = $8 + 28 | 0;
      var $conv80 = HEAPF32[$m_nextVertex >> 2];
      var $conv83 = HEAPF32[$m_nextVertex + 4 >> 2];
      __Z5b2LogPKcz(STRING_TABLE.__str28149 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv80, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv83, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
      var $conv85 = HEAP8[$8 + 36 | 0] & 1 & 255;
      __Z5b2LogPKcz(STRING_TABLE.__str29150 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv85, tempInt));
      var $conv87 = HEAP8[$39 + 37 | 0] & 1 & 255;
      __Z5b2LogPKcz(STRING_TABLE.__str30151 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv87, tempInt));
      __label__ = 11;
      break;
    } else {
      __label__ = 12;
    }
  } while (0);
  if (__label__ == 11) {
    __Z5b2LogPKcz(STRING_TABLE.__str31152 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    __Z5b2LogPKcz(STRING_TABLE.__str32153 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    __Z5b2LogPKcz(STRING_TABLE.__str31152 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    __Z5b2LogPKcz(STRING_TABLE.__str33 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $bodyIndex, tempInt));
  }
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($this, $bodyCapacity, $contactCapacity, $jointCapacity, $allocator, $listener) {
  var $m_index_i88$s2;
  var $m_entryCount_i82$s2;
  var $m_index_i61$s2;
  var $m_entryCount_i55$s2;
  var $m_index_i34$s2;
  var $m_entryCount_i28$s2;
  var $m_index_i7$s2;
  var $m_entryCount_i1$s2;
  var $m_index_i$s2;
  var $add_ptr_i$s2;
  var $m_entryCount_i$s2;
  var $m_allocator$s2;
  var $m_bodyCapacity$s2;
  var $this$s2 = $this >> 2;
  var $m_bodyCapacity$s2 = ($this + 40 | 0) >> 2;
  HEAP32[$m_bodyCapacity$s2] = $bodyCapacity;
  HEAP32[$this$s2 + 11] = $contactCapacity;
  HEAP32[$this$s2 + 12] = $jointCapacity;
  HEAP32[$this$s2 + 7] = 0;
  HEAP32[$this$s2 + 9] = 0;
  HEAP32[$this$s2 + 8] = 0;
  var $m_allocator$s2 = ($this | 0) >> 2;
  HEAP32[$m_allocator$s2] = $allocator;
  HEAP32[$this$s2 + 1] = $listener;
  var $mul = $bodyCapacity << 2;
  var $m_entryCount_i$s2 = ($allocator + 102796 | 0) >> 2;
  var $0 = HEAP32[$m_entryCount_i$s2];
  if (($0 | 0) < 32) {
    var $1 = $0;
  } else {
    ___assert_func(STRING_TABLE.__str72 | 0, 38, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator8AllocateEi | 0, STRING_TABLE.__str375 | 0);
    var $1 = HEAP32[$m_entryCount_i$s2];
  }
  var $1;
  var $add_ptr_i$s2 = ($allocator + $1 * 12 + 102412 | 0) >> 2;
  HEAP32[($allocator + 102416 >> 2) + ($1 * 3 | 0)] = $mul;
  var $m_index_i$s2 = ($allocator + 102400 | 0) >> 2;
  var $2 = HEAP32[$m_index_i$s2];
  if (($2 + $mul | 0) > 102400) {
    var $call_i_i = _malloc($mul);
    HEAP32[$add_ptr_i$s2] = $call_i_i;
    HEAP8[$allocator + $1 * 12 + 102420 | 0] = 1;
  } else {
    var $add_ptr8_i = $allocator + $2 | 0;
    HEAP32[$add_ptr_i$s2] = $add_ptr8_i;
    HEAP8[$allocator + $1 * 12 + 102420 | 0] = 0;
    var $add12_i = HEAP32[$m_index_i$s2] + $mul | 0;
    HEAP32[$m_index_i$s2] = $add12_i;
  }
  var $m_allocation_i = $allocator + 102404 | 0;
  var $add13_i = HEAP32[$m_allocation_i >> 2] + $mul | 0;
  HEAP32[$m_allocation_i >> 2] = $add13_i;
  var $m_maxAllocation_i = $allocator + 102408 | 0;
  var $5 = HEAP32[$m_maxAllocation_i >> 2];
  var $cond_i_i = ($5 | 0) > ($add13_i | 0) ? $5 : $add13_i;
  HEAP32[$m_maxAllocation_i >> 2] = $cond_i_i;
  var $inc_i = HEAP32[$m_entryCount_i$s2] + 1 | 0;
  HEAP32[$m_entryCount_i$s2] = $inc_i;
  var $8 = HEAP32[$add_ptr_i$s2];
  HEAP32[$this$s2 + 2] = $8;
  var $9 = HEAP32[$m_allocator$s2];
  var $mul4 = $contactCapacity << 2;
  var $m_entryCount_i1$s2 = ($9 + 102796 | 0) >> 2;
  var $10 = HEAP32[$m_entryCount_i1$s2];
  if (($10 | 0) < 32) {
    var $11 = $10;
  } else {
    ___assert_func(STRING_TABLE.__str72 | 0, 38, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator8AllocateEi | 0, STRING_TABLE.__str375 | 0);
    var $11 = HEAP32[$m_entryCount_i1$s2];
  }
  var $11;
  var $add_ptr_i5 = $9 + $11 * 12 + 102412 | 0;
  var $size4_i6 = $9 + $11 * 12 + 102416 | 0;
  HEAP32[$size4_i6 >> 2] = $mul4;
  var $m_index_i7$s2 = ($9 + 102400 | 0) >> 2;
  var $12 = HEAP32[$m_index_i7$s2];
  if (($12 + $mul4 | 0) > 102400) {
    var $call_i_i11 = _malloc($mul4);
    var $data_i12 = $add_ptr_i5 | 0;
    HEAP32[$data_i12 >> 2] = $call_i_i11;
    HEAP8[$9 + $11 * 12 + 102420 | 0] = 1;
  } else {
    var $add_ptr8_i15 = $9 + $12 | 0;
    var $data9_i16 = $add_ptr_i5 | 0;
    HEAP32[$data9_i16 >> 2] = $add_ptr8_i15;
    HEAP8[$9 + $11 * 12 + 102420 | 0] = 0;
    var $add12_i18 = HEAP32[$m_index_i7$s2] + $mul4 | 0;
    HEAP32[$m_index_i7$s2] = $add12_i18;
  }
  var $m_allocation_i20 = $9 + 102404 | 0;
  var $add13_i21 = HEAP32[$m_allocation_i20 >> 2] + $mul4 | 0;
  HEAP32[$m_allocation_i20 >> 2] = $add13_i21;
  var $m_maxAllocation_i22 = $9 + 102408 | 0;
  var $15 = HEAP32[$m_maxAllocation_i22 >> 2];
  var $cond_i_i24 = ($15 | 0) > ($add13_i21 | 0) ? $15 : $add13_i21;
  HEAP32[$m_maxAllocation_i22 >> 2] = $cond_i_i24;
  var $inc_i25 = HEAP32[$m_entryCount_i1$s2] + 1 | 0;
  HEAP32[$m_entryCount_i1$s2] = $inc_i25;
  var $18 = HEAP32[$add_ptr_i5 >> 2];
  HEAP32[$this$s2 + 3] = $18;
  var $19 = HEAP32[$m_allocator$s2];
  var $mul7 = $jointCapacity << 2;
  var $m_entryCount_i28$s2 = ($19 + 102796 | 0) >> 2;
  var $20 = HEAP32[$m_entryCount_i28$s2];
  if (($20 | 0) < 32) {
    var $21 = $20;
  } else {
    ___assert_func(STRING_TABLE.__str72 | 0, 38, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator8AllocateEi | 0, STRING_TABLE.__str375 | 0);
    var $21 = HEAP32[$m_entryCount_i28$s2];
  }
  var $21;
  var $add_ptr_i32 = $19 + $21 * 12 + 102412 | 0;
  var $size4_i33 = $19 + $21 * 12 + 102416 | 0;
  HEAP32[$size4_i33 >> 2] = $mul7;
  var $m_index_i34$s2 = ($19 + 102400 | 0) >> 2;
  var $22 = HEAP32[$m_index_i34$s2];
  if (($22 + $mul7 | 0) > 102400) {
    var $call_i_i38 = _malloc($mul7);
    var $data_i39 = $add_ptr_i32 | 0;
    HEAP32[$data_i39 >> 2] = $call_i_i38;
    HEAP8[$19 + $21 * 12 + 102420 | 0] = 1;
  } else {
    var $add_ptr8_i42 = $19 + $22 | 0;
    var $data9_i43 = $add_ptr_i32 | 0;
    HEAP32[$data9_i43 >> 2] = $add_ptr8_i42;
    HEAP8[$19 + $21 * 12 + 102420 | 0] = 0;
    var $add12_i45 = HEAP32[$m_index_i34$s2] + $mul7 | 0;
    HEAP32[$m_index_i34$s2] = $add12_i45;
  }
  var $m_allocation_i47 = $19 + 102404 | 0;
  var $add13_i48 = HEAP32[$m_allocation_i47 >> 2] + $mul7 | 0;
  HEAP32[$m_allocation_i47 >> 2] = $add13_i48;
  var $m_maxAllocation_i49 = $19 + 102408 | 0;
  var $25 = HEAP32[$m_maxAllocation_i49 >> 2];
  var $cond_i_i51 = ($25 | 0) > ($add13_i48 | 0) ? $25 : $add13_i48;
  HEAP32[$m_maxAllocation_i49 >> 2] = $cond_i_i51;
  var $inc_i52 = HEAP32[$m_entryCount_i28$s2] + 1 | 0;
  HEAP32[$m_entryCount_i28$s2] = $inc_i52;
  var $28 = HEAP32[$add_ptr_i32 >> 2];
  HEAP32[$this$s2 + 4] = $28;
  var $29 = HEAP32[$m_allocator$s2];
  var $mul11 = HEAP32[$m_bodyCapacity$s2] * 12 | 0;
  var $m_entryCount_i55$s2 = ($29 + 102796 | 0) >> 2;
  var $31 = HEAP32[$m_entryCount_i55$s2];
  if (($31 | 0) < 32) {
    var $32 = $31;
  } else {
    ___assert_func(STRING_TABLE.__str72 | 0, 38, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator8AllocateEi | 0, STRING_TABLE.__str375 | 0);
    var $32 = HEAP32[$m_entryCount_i55$s2];
  }
  var $32;
  var $add_ptr_i59 = $29 + $32 * 12 + 102412 | 0;
  var $size4_i60 = $29 + $32 * 12 + 102416 | 0;
  HEAP32[$size4_i60 >> 2] = $mul11;
  var $m_index_i61$s2 = ($29 + 102400 | 0) >> 2;
  var $33 = HEAP32[$m_index_i61$s2];
  if (($33 + $mul11 | 0) > 102400) {
    var $call_i_i65 = _malloc($mul11);
    var $data_i66 = $add_ptr_i59 | 0;
    HEAP32[$data_i66 >> 2] = $call_i_i65;
    HEAP8[$29 + $32 * 12 + 102420 | 0] = 1;
  } else {
    var $add_ptr8_i69 = $29 + $33 | 0;
    var $data9_i70 = $add_ptr_i59 | 0;
    HEAP32[$data9_i70 >> 2] = $add_ptr8_i69;
    HEAP8[$29 + $32 * 12 + 102420 | 0] = 0;
    var $add12_i72 = HEAP32[$m_index_i61$s2] + $mul11 | 0;
    HEAP32[$m_index_i61$s2] = $add12_i72;
  }
  var $m_allocation_i74 = $29 + 102404 | 0;
  var $add13_i75 = HEAP32[$m_allocation_i74 >> 2] + $mul11 | 0;
  HEAP32[$m_allocation_i74 >> 2] = $add13_i75;
  var $m_maxAllocation_i76 = $29 + 102408 | 0;
  var $36 = HEAP32[$m_maxAllocation_i76 >> 2];
  var $cond_i_i78 = ($36 | 0) > ($add13_i75 | 0) ? $36 : $add13_i75;
  HEAP32[$m_maxAllocation_i76 >> 2] = $cond_i_i78;
  var $inc_i79 = HEAP32[$m_entryCount_i55$s2] + 1 | 0;
  HEAP32[$m_entryCount_i55$s2] = $inc_i79;
  var $39 = HEAP32[$add_ptr_i59 >> 2];
  HEAP32[$this$s2 + 6] = $39;
  var $40 = HEAP32[$m_allocator$s2];
  var $mul15 = HEAP32[$m_bodyCapacity$s2] * 12 | 0;
  var $m_entryCount_i82$s2 = ($40 + 102796 | 0) >> 2;
  var $42 = HEAP32[$m_entryCount_i82$s2];
  if (($42 | 0) < 32) {
    var $43 = $42;
  } else {
    ___assert_func(STRING_TABLE.__str72 | 0, 38, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator8AllocateEi | 0, STRING_TABLE.__str375 | 0);
    var $43 = HEAP32[$m_entryCount_i82$s2];
  }
  var $43;
  var $add_ptr_i86 = $40 + $43 * 12 + 102412 | 0;
  var $size4_i87 = $40 + $43 * 12 + 102416 | 0;
  HEAP32[$size4_i87 >> 2] = $mul15;
  var $m_index_i88$s2 = ($40 + 102400 | 0) >> 2;
  var $44 = HEAP32[$m_index_i88$s2];
  if (($44 + $mul15 | 0) > 102400) {
    var $call_i_i92 = _malloc($mul15);
    var $data_i93 = $add_ptr_i86 | 0;
    HEAP32[$data_i93 >> 2] = $call_i_i92;
    HEAP8[$40 + $43 * 12 + 102420 | 0] = 1;
  } else {
    var $add_ptr8_i96 = $40 + $44 | 0;
    var $data9_i97 = $add_ptr_i86 | 0;
    HEAP32[$data9_i97 >> 2] = $add_ptr8_i96;
    HEAP8[$40 + $43 * 12 + 102420 | 0] = 0;
    var $add12_i99 = HEAP32[$m_index_i88$s2] + $mul15 | 0;
    HEAP32[$m_index_i88$s2] = $add12_i99;
  }
  var $m_allocation_i101 = $40 + 102404 | 0;
  var $add13_i102 = HEAP32[$m_allocation_i101 >> 2] + $mul15 | 0;
  HEAP32[$m_allocation_i101 >> 2] = $add13_i102;
  var $m_maxAllocation_i103 = $40 + 102408 | 0;
  var $47 = HEAP32[$m_maxAllocation_i103 >> 2];
  var $cond_i_i105 = ($47 | 0) > ($add13_i102 | 0) ? $47 : $add13_i102;
  HEAP32[$m_maxAllocation_i103 >> 2] = $cond_i_i105;
  var $inc_i106 = HEAP32[$m_entryCount_i82$s2] + 1 | 0;
  HEAP32[$m_entryCount_i82$s2] = $inc_i106;
  var $50 = HEAP32[$add_ptr_i86 >> 2];
  HEAP32[$this$s2 + 5] = $50;
  return;
  return;
}

function __ZN8b2IslandD2Ev($this) {
  var $m_allocator$s2;
  var $this$s2 = $this >> 2;
  var $m_allocator$s2 = ($this | 0) >> 2;
  var $0 = HEAP32[$m_allocator$s2];
  var $2 = HEAP32[$this$s2 + 5];
  __ZN16b2StackAllocator4FreeEPv($0, $2);
  var $3 = HEAP32[$m_allocator$s2];
  var $5 = HEAP32[$this$s2 + 6];
  __ZN16b2StackAllocator4FreeEPv($3, $5);
  var $6 = HEAP32[$m_allocator$s2];
  var $8 = HEAP32[$this$s2 + 4];
  __ZN16b2StackAllocator4FreeEPv($6, $8);
  var $9 = HEAP32[$m_allocator$s2];
  var $11 = HEAP32[$this$s2 + 3];
  __ZN16b2StackAllocator4FreeEPv($9, $11);
  var $12 = HEAP32[$m_allocator$s2];
  var $14 = HEAP32[$this$s2 + 2];
  __ZN16b2StackAllocator4FreeEPv($12, $14);
  return;
  return;
}

function __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($this, $constraints) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 20;
  var $impulse = __stackBase__;
  var $m_listener = $this + 4 | 0;
  var $cmp = (HEAP32[$m_listener >> 2] | 0) == 0;
  $for_end15$$for_cond_preheader$100 : do {
    if (!$cmp) {
      var $m_contactCount = $this + 36 | 0;
      if ((HEAP32[$m_contactCount >> 2] | 0) <= 0) {
        break;
      }
      var $m_contacts = $this + 12 | 0;
      var $count = $impulse + 16 | 0;
      var $i_04 = 0;
      while (1) {
        var $i_04;
        var $3 = HEAP32[HEAP32[$m_contacts >> 2] + ($i_04 << 2) >> 2];
        var $4 = HEAP32[($constraints + 144 >> 2) + ($i_04 * 38 | 0)];
        HEAP32[$count >> 2] = $4;
        var $cmp51 = ($4 | 0) > 0;
        $for_body6$$for_end$105 : do {
          if ($cmp51) {
            var $j_02 = 0;
            while (1) {
              var $j_02;
              var $5 = HEAPF32[($constraints + 16 >> 2) + ($i_04 * 38 | 0) + ($j_02 * 9 | 0)];
              HEAPF32[$impulse + ($j_02 << 2) >> 2] = $5;
              var $6 = HEAPF32[($constraints + 20 >> 2) + ($i_04 * 38 | 0) + ($j_02 * 9 | 0)];
              HEAPF32[$impulse + ($j_02 << 2) + 8 >> 2] = $6;
              var $inc = $j_02 + 1 | 0;
              if (($inc | 0) >= ($4 | 0)) {
                break $for_body6$$for_end$105;
              }
              var $j_02 = $inc;
            }
          }
        } while (0);
        var $7 = HEAP32[$m_listener >> 2];
        var $9 = HEAP32[HEAP32[$7 >> 2] + 20 >> 2];
        FUNCTION_TABLE[$9]($7, $3, $impulse);
        var $inc14 = $i_04 + 1 | 0;
        if (($inc14 | 0) >= (HEAP32[$m_contactCount >> 2] | 0)) {
          break $for_end15$$for_cond_preheader$100;
        }
        var $i_04 = $inc14;
      }
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b($this, $profile, $step, $gravity, $allowSleep) {
  var $196$s2;
  var $172$s2;
  var $143$s2;
  var $97$s2;
  var $83$s2;
  var $m_joints$s2;
  var $m_jointCount$s2;
  var $m_contactCount$s2;
  var $48$s2;
  var $45$s2;
  var $44$s2;
  var $m_velocities33_pre_phi$s2;
  var $m_positions32_pre_phi$s2;
  var $4$s2;
  var $m_bodyCount$s2;
  var $contactSolver$s2;
  var $contactSolverDef$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 204;
  var __label__;
  var $t_i120 = __stackBase__;
  var $t_i98 = __stackBase__ + 8;
  var $t_i77 = __stackBase__ + 16;
  var $t_i61 = __stackBase__ + 24;
  var $t_i48 = __stackBase__ + 32;
  var $t_i = __stackBase__ + 40;
  var $impulse_i = __stackBase__ + 48;
  var $t_i_i = __stackBase__ + 68;
  var $solverData = __stackBase__ + 76;
  var $contactSolverDef = __stackBase__ + 108, $contactSolverDef$s2 = $contactSolverDef >> 2;
  var $contactSolver = __stackBase__ + 152, $contactSolver$s2 = $contactSolver >> 2;
  var $call_i_i = _gettimeofday($t_i_i, 0);
  var $1 = HEAPF32[$step >> 2];
  var $m_bodyCount$s2 = ($this + 28 | 0) >> 2;
  var $cmp197 = (HEAP32[$m_bodyCount$s2] | 0) > 0;
  $for_body_lr_ph$$entry_for_end_crit_edge$2 : do {
    if ($cmp197) {
      var $m_bodies = $this + 8 | 0;
      var $x_i = $gravity | 0;
      var $y_i = $gravity + 4 | 0;
      var $m_positions = $this + 20 | 0;
      var $m_velocities = $this + 24 | 0;
      var $i_0198 = 0;
      while (1) {
        var $i_0198;
        var $4 = HEAP32[HEAP32[$m_bodies >> 2] + ($i_0198 << 2) >> 2], $4$s2 = $4 >> 2;
        var $c2 = $4 + 44 | 0;
        var $tmp4 = HEAPF32[$c2 >> 2];
        var $tmp5 = HEAPF32[$4$s2 + 12];
        var $5 = HEAPF32[$4$s2 + 14];
        var $6 = $4 + 64 | 0;
        var $st$13$0 = $6 | 0;
        var $st$13$1 = $6 + 4 | 0;
        var $7$1 = HEAP32[$st$13$1 >> 2];
        var $9 = (tempDoubleI32[0] = HEAP32[$st$13$0 >> 2], tempDoubleF32[0]);
        var $11 = (tempDoubleI32[0] = $7$1, tempDoubleF32[0]);
        var $12 = HEAPF32[$4$s2 + 18];
        var $13 = $c2;
        var $14 = $4 + 36 | 0;
        var $15$0 = HEAP32[$13 >> 2];
        var $15$1 = HEAP32[$13 + 4 >> 2];
        var $st$34$0 = $14 | 0;
        HEAP32[$st$34$0 >> 2] = $15$0;
        var $st$34$1 = $14 + 4 | 0;
        HEAP32[$st$34$1 >> 2] = $15$1;
        HEAPF32[$4$s2 + 13] = $5;
        if ((HEAP32[$4$s2] | 0) == 2) {
          var $17 = HEAPF32[$4$s2 + 35];
          var $20 = HEAPF32[$4$s2 + 30];
          var $sub = 1 - $1 * HEAPF32[$4$s2 + 33];
          var $cond_i_i = $sub < 1 ? $sub : 1;
          var $cond_i2_i = $cond_i_i < 0 ? 0 : $cond_i_i;
          var $sub18 = 1 - $1 * HEAPF32[$4$s2 + 34];
          var $cond_i_i45 = $sub18 < 1 ? $sub18 : 1;
          var $cond_i2_i47 = $cond_i_i45 < 0 ? 0 : $cond_i_i45;
          var $w_0 = ($12 + $1 * HEAPF32[$4$s2 + 32] * HEAPF32[$4$s2 + 21]) * $cond_i2_i47;
          var $28 = ($9 + (HEAPF32[$x_i >> 2] * $17 + HEAPF32[$4$s2 + 19] * $20) * $1) * $cond_i2_i;
          var $27 = ($11 + (HEAPF32[$y_i >> 2] * $17 + HEAPF32[$4$s2 + 20] * $20) * $1) * $cond_i2_i;
        } else {
          var $w_0 = $12;
          var $28 = $9;
          var $27 = $11;
        }
        var $27;
        var $28;
        var $w_0;
        var $29 = HEAP32[$m_positions >> 2];
        HEAPF32[($29 >> 2) + ($i_0198 * 3 | 0)] = $tmp4;
        HEAPF32[($29 + 4 >> 2) + ($i_0198 * 3 | 0)] = $tmp5;
        HEAPF32[(HEAP32[$m_positions >> 2] + 8 >> 2) + ($i_0198 * 3 | 0)] = $5;
        var $32 = HEAP32[$m_velocities >> 2] + $i_0198 * 12 | 0;
        var $33 = (tempDoubleF32[0] = $28, tempDoubleI32[0]);
        var $34$0 = $33;
        var $35 = (tempDoubleF32[0] = $27, tempDoubleI32[0]);
        var $38$1 = $35 | 0;
        var $st$24$0 = $32 | 0;
        HEAP32[$st$24$0 >> 2] = 0 | $34$0;
        var $st$24$1 = $32 + 4 | 0;
        HEAP32[$st$24$1 >> 2] = $38$1;
        HEAPF32[(HEAP32[$m_velocities >> 2] + 8 >> 2) + ($i_0198 * 3 | 0)] = $w_0;
        var $inc = $i_0198 + 1 | 0;
        if (($inc | 0) >= (HEAP32[$m_bodyCount$s2] | 0)) {
          var $m_positions32_pre_phi = $m_positions, $m_positions32_pre_phi$s2 = $m_positions32_pre_phi >> 2;
          var $m_velocities33_pre_phi = $m_velocities, $m_velocities33_pre_phi$s2 = $m_velocities33_pre_phi >> 2;
          break $for_body_lr_ph$$entry_for_end_crit_edge$2;
        }
        var $i_0198 = $inc;
      }
    } else {
      var $m_positions32_pre_phi = $this + 20 | 0, $m_positions32_pre_phi$s2 = $m_positions32_pre_phi >> 2;
      var $m_velocities33_pre_phi = $this + 24 | 0, $m_velocities33_pre_phi$s2 = $m_velocities33_pre_phi >> 2;
    }
  } while (0);
  var $m_velocities33_pre_phi;
  var $m_positions32_pre_phi;
  var $call_i = _gettimeofday($t_i48, 0);
  var $42 = HEAP32[$t_i48 >> 2];
  var $mul_i53 = (HEAP32[$t_i48 + 4 >> 2] | 0) * .0010000000474974513;
  var $conv2_i54 = $mul_i53 >= 0 ? Math.floor($mul_i53) : Math.ceil($mul_i53);
  var $44$s2 = $solverData >> 2;
  var $45$s2 = $step >> 2;
  HEAP32[$44$s2] = HEAP32[$45$s2];
  HEAP32[$44$s2 + 1] = HEAP32[$45$s2 + 1];
  HEAP32[$44$s2 + 2] = HEAP32[$45$s2 + 2];
  HEAP32[$44$s2 + 3] = HEAP32[$45$s2 + 3];
  HEAP32[$44$s2 + 4] = HEAP32[$45$s2 + 4];
  HEAP32[$44$s2 + 5] = HEAP32[$45$s2 + 5];
  var $46 = HEAP32[$m_positions32_pre_phi$s2];
  HEAP32[$solverData + 24 >> 2] = $46;
  var $47 = HEAP32[$m_velocities33_pre_phi$s2];
  HEAP32[$solverData + 28 >> 2] = $47;
  var $48$s2 = $contactSolverDef >> 2;
  HEAP32[$48$s2] = HEAP32[$45$s2];
  HEAP32[$48$s2 + 1] = HEAP32[$45$s2 + 1];
  HEAP32[$48$s2 + 2] = HEAP32[$45$s2 + 2];
  HEAP32[$48$s2 + 3] = HEAP32[$45$s2 + 3];
  HEAP32[$48$s2 + 4] = HEAP32[$45$s2 + 4];
  HEAP32[$48$s2 + 5] = HEAP32[$45$s2 + 5];
  var $m_contacts = $this + 12 | 0;
  var $49 = HEAP32[$m_contacts >> 2];
  HEAP32[$contactSolverDef$s2 + 6] = $49;
  var $m_contactCount$s2 = ($this + 36 | 0) >> 2;
  var $50 = HEAP32[$m_contactCount$s2];
  HEAP32[$contactSolverDef$s2 + 7] = $50;
  HEAP32[$contactSolverDef$s2 + 8] = $46;
  HEAP32[$contactSolverDef$s2 + 9] = $47;
  var $51 = HEAP32[$this >> 2];
  HEAP32[$contactSolverDef$s2 + 10] = $51;
  var $52 = $contactSolver;
  var $53 = $contactSolverDef;
  __ZN15b2ContactSolverC2EP18b2ContactSolverDef($52, $53);
  __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($52);
  if ((HEAP8[$step + 20 | 0] & 1) << 24 >> 24 != 0) {
    __ZN15b2ContactSolver9WarmStartEv($52);
  }
  var $m_jointCount$s2 = ($this + 32 | 0) >> 2;
  var $m_joints$s2 = ($this + 16 | 0) >> 2;
  var $i42_0 = 0;
  while (1) {
    var $i42_0;
    if (($i42_0 | 0) >= (HEAP32[$m_jointCount$s2] | 0)) {
      break;
    }
    var $65 = HEAP32[HEAP32[$m_joints$s2] + ($i42_0 << 2) >> 2];
    var $67 = HEAP32[HEAP32[$65 >> 2] + 28 >> 2];
    FUNCTION_TABLE[$67]($65, $solverData);
    var $i42_0 = $i42_0 + 1 | 0;
  }
  var $call_i6275 = _gettimeofday($t_i61, 0);
  HEAPF32[$profile + 12 >> 2] = (((HEAP32[$t_i61 >> 2] - $42) * 1e3 | 0) >>> 0) + (HEAP32[$t_i61 + 4 >> 2] | 0) * .0010000000474974513 - ($conv2_i54 >>> 0);
  var $call_i7886 = _gettimeofday($t_i77, 0);
  var $72 = HEAP32[$t_i77 >> 2];
  var $mul_i83 = (HEAP32[$t_i77 + 4 >> 2] | 0) * .0010000000474974513;
  var $conv2_i84 = $mul_i83 >= 0 ? Math.floor($mul_i83) : Math.ceil($mul_i83);
  var $velocityIterations = $step + 12 | 0;
  var $i54_0 = 0;
  while (1) {
    var $i54_0;
    if (($i54_0 | 0) >= (HEAP32[$velocityIterations >> 2] | 0)) {
      break;
    }
    var $j_0 = 0;
    while (1) {
      var $j_0;
      if (($j_0 | 0) >= (HEAP32[$m_jointCount$s2] | 0)) {
        break;
      }
      var $77 = HEAP32[HEAP32[$m_joints$s2] + ($j_0 << 2) >> 2];
      var $79 = HEAP32[HEAP32[$77 >> 2] + 32 >> 2];
      FUNCTION_TABLE[$79]($77, $solverData);
      var $j_0 = $j_0 + 1 | 0;
    }
    __ZN15b2ContactSolver24SolveVelocityConstraintsEv($52);
    var $i54_0 = $i54_0 + 1 | 0;
  }
  var $81 = HEAP32[$contactSolver$s2 + 12];
  var $cmp4_i = ($81 | 0) > 0;
  $for_body_lr_ph_i89$$invoke_cont74$31 : do {
    if ($cmp4_i) {
      var $83 = HEAP32[$contactSolver$s2 + 10], $83$s2 = $83 >> 2;
      var $85 = HEAP32[$contactSolver$s2 + 11];
      var $i_05_i = 0;
      while (1) {
        var $i_05_i;
        var $87 = HEAP32[$85 + (HEAP32[$83$s2 + ($i_05_i * 38 | 0) + 37] << 2) >> 2];
        var $pointCount_i91 = $83 + $i_05_i * 152 + 144 | 0;
        var $cmp31_i = (HEAP32[$pointCount_i91 >> 2] | 0) > 0;
        $for_body4_i$$for_inc14_i$35 : do {
          if ($cmp31_i) {
            var $j_02_i93 = 0;
            while (1) {
              var $j_02_i93;
              var $89 = HEAPF32[$83$s2 + ($i_05_i * 38 | 0) + ($j_02_i93 * 9 | 0) + 4];
              HEAPF32[($87 + 72 >> 2) + ($j_02_i93 * 5 | 0)] = $89;
              var $90 = HEAPF32[$83$s2 + ($i_05_i * 38 | 0) + ($j_02_i93 * 9 | 0) + 5];
              HEAPF32[($87 + 76 >> 2) + ($j_02_i93 * 5 | 0)] = $90;
              var $inc_i96 = $j_02_i93 + 1 | 0;
              if (($inc_i96 | 0) >= (HEAP32[$pointCount_i91 >> 2] | 0)) {
                break $for_body4_i$$for_inc14_i$35;
              }
              var $j_02_i93 = $inc_i96;
            }
          }
        } while (0);
        var $inc15_i = $i_05_i + 1 | 0;
        if (($inc15_i | 0) >= ($81 | 0)) {
          break $for_body_lr_ph_i89$$invoke_cont74$31;
        }
        var $i_05_i = $inc15_i;
      }
    }
  } while (0);
  var $call_i99112 = _gettimeofday($t_i98, 0);
  HEAPF32[$profile + 16 >> 2] = (((HEAP32[$t_i98 >> 2] - $72) * 1e3 | 0) >>> 0) + (HEAP32[$t_i98 + 4 >> 2] | 0) * .0010000000474974513 - ($conv2_i84 >>> 0);
  var $cmp80185 = (HEAP32[$m_bodyCount$s2] | 0) > 0;
  $invoke_cont98$$for_end136$41 : do {
    if ($cmp80185) {
      var $i77_0186 = 0;
      while (1) {
        var $i77_0186;
        var $96 = HEAPU32[$m_positions32_pre_phi$s2];
        var $97$s2 = ($96 + $i77_0186 * 12 | 0) >> 2;
        var $98$1 = HEAP32[$97$s2 + 1];
        var $100 = (tempDoubleI32[0] = HEAP32[$97$s2], tempDoubleF32[0]);
        var $102 = (tempDoubleI32[0] = $98$1, tempDoubleF32[0]);
        var $103 = HEAPF32[($96 + 8 >> 2) + ($i77_0186 * 3 | 0)];
        var $104 = HEAP32[$m_velocities33_pre_phi$s2];
        var $105 = $104 + $i77_0186 * 12 | 0;
        var $106$1 = HEAP32[$105 + 4 >> 2];
        var $108 = (tempDoubleI32[0] = HEAP32[$105 >> 2], tempDoubleF32[0]);
        var $110 = (tempDoubleI32[0] = $106$1, tempDoubleF32[0]);
        var $111 = HEAPF32[($104 + 8 >> 2) + ($i77_0186 * 3 | 0)];
        var $mul_i115 = $108 * $1;
        var $mul1_i117 = $110 * $1;
        var $add_i137 = $mul_i115 * $mul_i115 + $mul1_i117 * $mul1_i117;
        if ($add_i137 > 4) {
          var $call_i_i161 = _sqrtf($add_i137);
          var $div = 2 / $call_i_i161;
          var $113 = $108 * $div;
          var $112 = $110 * $div;
        } else {
          var $113 = $108;
          var $112 = $110;
        }
        var $112;
        var $113;
        var $mul107 = $1 * $111;
        if ($mul107 * $mul107 > 2.4674012660980225) {
          if ($mul107 > 0) {
            var $cond_i152 = $mul107;
          } else {
            var $cond_i152 = -$mul107;
          }
          var $cond_i152;
          var $w94_0 = $111 * (1.5707963705062866 / $cond_i152);
        } else {
          var $w94_0 = $111;
        }
        var $w94_0;
        var $add_i140 = $100 + $113 * $1;
        var $add4_i143 = $102 + $112 * $1;
        var $add121 = $103 + $1 * $w94_0;
        var $114 = (tempDoubleF32[0] = $add_i140, tempDoubleI32[0]);
        var $115$0 = $114;
        var $116 = (tempDoubleF32[0] = $add4_i143, tempDoubleI32[0]);
        var $119$0 = 0 | $115$0;
        var $119$1 = $116 | 0;
        HEAP32[$97$s2] = $119$0;
        HEAP32[$97$s2 + 1] = $119$1;
        HEAPF32[(HEAP32[$m_positions32_pre_phi$s2] + 8 >> 2) + ($i77_0186 * 3 | 0)] = $add121;
        var $122 = HEAP32[$m_velocities33_pre_phi$s2] + $i77_0186 * 12 | 0;
        var $123 = (tempDoubleF32[0] = $113, tempDoubleI32[0]);
        var $124$0 = $123;
        var $125 = (tempDoubleF32[0] = $112, tempDoubleI32[0]);
        var $128$1 = $125 | 0;
        var $st$37$0 = $122 | 0;
        HEAP32[$st$37$0 >> 2] = 0 | $124$0;
        var $st$37$1 = $122 + 4 | 0;
        HEAP32[$st$37$1 >> 2] = $128$1;
        HEAPF32[(HEAP32[$m_velocities33_pre_phi$s2] + 8 >> 2) + ($i77_0186 * 3 | 0)] = $w94_0;
        var $inc135 = $i77_0186 + 1 | 0;
        if (($inc135 | 0) >= (HEAP32[$m_bodyCount$s2] | 0)) {
          break $invoke_cont98$$for_end136$41;
        }
        var $i77_0186 = $inc135;
      }
    }
  } while (0);
  var $call_i121129 = _gettimeofday($t_i120, 0);
  var $132 = HEAP32[$t_i120 >> 2];
  var $mul_i126 = (HEAP32[$t_i120 + 4 >> 2] | 0) * .0010000000474974513;
  var $conv2_i127 = $mul_i126 >= 0 ? Math.floor($mul_i126) : Math.ceil($mul_i126);
  var $positionIterations = $step + 16 | 0;
  var $i138_0 = 0;
  while (1) {
    var $i138_0;
    if (($i138_0 | 0) >= (HEAP32[$positionIterations >> 2] | 0)) {
      var $positionSolved_0 = 1;
      break;
    }
    var $call143 = __ZN15b2ContactSolver24SolvePositionConstraintsEv($52);
    var $i145_0 = 0;
    var $jointsOkay_0 = 1;
    while (1) {
      var $jointsOkay_0;
      var $i145_0;
      if (($i145_0 | 0) >= (HEAP32[$m_jointCount$s2] | 0)) {
        break;
      }
      var $137 = HEAP32[HEAP32[$m_joints$s2] + ($i145_0 << 2) >> 2];
      var $139 = HEAP32[HEAP32[$137 >> 2] + 36 >> 2];
      var $call155 = FUNCTION_TABLE[$139]($137, $solverData);
      var $140 = $jointsOkay_0 & $call155;
      var $i145_0 = $i145_0 + 1 | 0;
      var $jointsOkay_0 = $140;
    }
    if ($call143 & $jointsOkay_0) {
      var $positionSolved_0 = 0;
      break;
    }
    var $i138_0 = $i138_0 + 1 | 0;
  }
  var $positionSolved_0;
  var $cmp173176 = (HEAP32[$m_bodyCount$s2] | 0) > 0;
  $for_inc196_lr_ph$$for_end198$65 : do {
    if ($cmp173176) {
      var $m_bodies175 = $this + 8 | 0;
      var $i170_0177 = 0;
      while (1) {
        var $i170_0177;
        var $143 = HEAP32[HEAP32[$m_bodies175 >> 2] + ($i170_0177 << 2) >> 2], $143$s2 = $143 >> 2;
        var $145 = HEAP32[$m_positions32_pre_phi$s2] + $i170_0177 * 12 | 0;
        var $146 = $143 + 44 | 0;
        var $147$0 = HEAP32[$145 >> 2];
        var $147$1 = HEAP32[$145 + 4 >> 2];
        var $st$13$0 = $146 | 0;
        HEAP32[$st$13$0 >> 2] = $147$0;
        var $st$13$1 = $146 + 4 | 0;
        HEAP32[$st$13$1 >> 2] = $147$1;
        var $149 = HEAPF32[(HEAP32[$m_positions32_pre_phi$s2] + 8 >> 2) + ($i170_0177 * 3 | 0)];
        HEAPF32[$143$s2 + 14] = $149;
        var $151 = HEAP32[$m_velocities33_pre_phi$s2] + $i170_0177 * 12 | 0;
        var $152 = $143 + 64 | 0;
        var $153$0 = HEAP32[$151 >> 2];
        var $153$1 = HEAP32[$151 + 4 >> 2];
        var $st$31$0 = $152 | 0;
        HEAP32[$st$31$0 >> 2] = $153$0;
        var $st$31$1 = $152 + 4 | 0;
        HEAP32[$st$31$1 >> 2] = $153$1;
        var $155 = HEAPF32[(HEAP32[$m_velocities33_pre_phi$s2] + 8 >> 2) + ($i170_0177 * 3 | 0)];
        HEAPF32[$143$s2 + 18] = $155;
        var $call_i_i37 = _sinf($149);
        HEAPF32[$143$s2 + 5] = $call_i_i37;
        var $call2_i_i = _cosf($149);
        HEAPF32[$143$s2 + 6] = $call2_i_i;
        var $p_i = $143 + 12 | 0;
        var $156 = HEAPF32[$143$s2 + 7];
        var $157 = HEAPF32[$143$s2 + 8];
        var $sub_i_i = $call2_i_i * $156 - $call_i_i37 * $157;
        var $add_i_i = $call_i_i37 * $156 + $call2_i_i * $157;
        var $bitcast = (tempDoubleI32[0] = $147$0, tempDoubleF32[0]);
        var $sub_i4_i = $bitcast - $sub_i_i;
        var $160 = (tempDoubleI32[0] = $147$1, tempDoubleF32[0]);
        var $sub3_i_i = $160 - $add_i_i;
        var $161 = $p_i;
        var $162 = (tempDoubleF32[0] = $sub_i4_i, tempDoubleI32[0]);
        var $163$0 = $162;
        var $164 = (tempDoubleF32[0] = $sub3_i_i, tempDoubleI32[0]);
        var $167$0 = 0 | $163$0;
        var $167$1 = $164 | 0;
        var $st$78$0 = $161 | 0;
        HEAP32[$st$78$0 >> 2] = $167$0;
        var $st$78$1 = $161 + 4 | 0;
        HEAP32[$st$78$1 >> 2] = $167$1;
        var $inc197 = $i170_0177 + 1 | 0;
        if (($inc197 | 0) >= (HEAP32[$m_bodyCount$s2] | 0)) {
          break $for_inc196_lr_ph$$for_end198$65;
        }
        var $i170_0177 = $inc197;
      }
    }
  } while (0);
  var $call_i33 = _gettimeofday($t_i, 0);
  HEAPF32[$profile + 20 >> 2] = (((HEAP32[$t_i >> 2] - $132) * 1e3 | 0) >>> 0) + (HEAP32[$t_i + 4 >> 2] | 0) * .0010000000474974513 - ($conv2_i127 >>> 0);
  var $172 = HEAPU32[$contactSolver$s2 + 10], $172$s2 = $172 >> 2;
  var $m_listener_i = $this + 4 | 0;
  var $cmp_i23 = (HEAP32[$m_listener_i >> 2] | 0) == 0;
  $invoke_cont201$$for_cond_preheader_i$71 : do {
    if ($cmp_i23) {
      __label__ = 66;
    } else {
      if ((HEAP32[$m_contactCount$s2] | 0) <= 0) {
        break;
      }
      var $count_i = $impulse_i + 16 | 0;
      var $i_04_i = 0;
      while (1) {
        var $i_04_i;
        var $177 = HEAP32[HEAP32[$m_contacts >> 2] + ($i_04_i << 2) >> 2];
        var $178 = HEAP32[$172$s2 + ($i_04_i * 38 | 0) + 36];
        HEAP32[$count_i >> 2] = $178;
        var $cmp51_i = ($178 | 0) > 0;
        $for_body6_i$$for_end_i$76 : do {
          if ($cmp51_i) {
            var $j_02_i = 0;
            while (1) {
              var $j_02_i;
              var $179 = HEAPF32[$172$s2 + ($i_04_i * 38 | 0) + ($j_02_i * 9 | 0) + 4];
              HEAPF32[$impulse_i + ($j_02_i << 2) >> 2] = $179;
              var $180 = HEAPF32[$172$s2 + ($i_04_i * 38 | 0) + ($j_02_i * 9 | 0) + 5];
              HEAPF32[$impulse_i + ($j_02_i << 2) + 8 >> 2] = $180;
              var $inc_i = $j_02_i + 1 | 0;
              if (($inc_i | 0) == ($178 | 0)) {
                break $for_body6_i$$for_end_i$76;
              }
              var $j_02_i = $inc_i;
            }
          }
        } while (0);
        var $181 = HEAP32[$m_listener_i >> 2];
        var $183 = HEAP32[HEAP32[$181 >> 2] + 20 >> 2];
        FUNCTION_TABLE[$183]($181, $177, $impulse_i);
        var $inc14_i = $i_04_i + 1 | 0;
        if (($inc14_i | 0) >= (HEAP32[$m_contactCount$s2] | 0)) {
          break $invoke_cont201$$for_cond_preheader_i$71;
        }
        var $i_04_i = $inc14_i;
      }
    }
  } while (0);
  $for_cond205_preheader$$if_end255$82 : do {
    if ($allowSleep) {
      if ((HEAP32[$m_bodyCount$s2] | 0) <= 0) {
        break;
      }
      var $m_bodies210 = $this + 8 | 0;
      var $minSleepTime_0174 = 3.4028234663852886e+38;
      var $i204_0175 = 0;
      while (1) {
        var $i204_0175;
        var $minSleepTime_0174;
        var $187 = HEAP32[HEAP32[$m_bodies210 >> 2] + ($i204_0175 << 2) >> 2];
        var $cmp214 = (HEAP32[$187 >> 2] | 0) == 0;
        $for_inc235$$if_end216$87 : do {
          if ($cmp214) {
            var $minSleepTime_1 = $minSleepTime_0174;
          } else {
            var $cmp217 = (HEAP16[$187 + 4 >> 1] & 4) << 16 >> 16 == 0;
            do {
              if (!$cmp217) {
                var $190 = HEAPF32[$187 + 72 >> 2];
                if ($190 * $190 > .001218469929881394) {
                  break;
                }
                var $191 = HEAPF32[$187 + 64 >> 2];
                var $192 = HEAPF32[$187 + 68 >> 2];
                if ($191 * $191 + $192 * $192 > 9999999747378752e-20) {
                  break;
                }
                var $m_sleepTime229 = $187 + 144 | 0;
                var $add230 = HEAPF32[$m_sleepTime229 >> 2] + $1;
                HEAPF32[$m_sleepTime229 >> 2] = $add230;
                var $cond_i = $minSleepTime_0174 < $add230 ? $minSleepTime_0174 : $add230;
                var $minSleepTime_1 = $cond_i;
                break $for_inc235$$if_end216$87;
              }
            } while (0);
            HEAPF32[$187 + 144 >> 2] = 0;
            var $minSleepTime_1 = 0;
          }
        } while (0);
        var $minSleepTime_1;
        var $inc236 = $i204_0175 + 1 | 0;
        var $194 = HEAPU32[$m_bodyCount$s2];
        if (($inc236 | 0) >= ($194 | 0)) {
          break;
        }
        var $minSleepTime_0174 = $minSleepTime_1;
        var $i204_0175 = $inc236;
      }
      if (!(($194 | 0) > 0 & (($minSleepTime_1 < .5 | $positionSolved_0) ^ 1))) {
        break;
      }
      var $i242_0172 = 0;
      while (1) {
        var $i242_0172;
        var $196 = HEAPU32[HEAP32[$m_bodies210 >> 2] + ($i242_0172 << 2) >> 2], $196$s2 = $196 >> 2;
        var $197 = $196 + 4 | 0;
        var $and8_i = HEAP16[$197 >> 1] & -3;
        HEAP16[$197 >> 1] = $and8_i;
        HEAPF32[$196$s2 + 36] = 0;
        HEAPF32[$196$s2 + 16] = 0;
        HEAPF32[$196$s2 + 17] = 0;
        HEAPF32[$196$s2 + 18] = 0;
        HEAPF32[$196$s2 + 19] = 0;
        HEAPF32[$196$s2 + 20] = 0;
        HEAPF32[$196$s2 + 21] = 0;
        var $inc252 = $i242_0172 + 1 | 0;
        if (($inc252 | 0) >= (HEAP32[$m_bodyCount$s2] | 0)) {
          break $for_cond205_preheader$$if_end255$82;
        }
        var $i242_0172 = $inc252;
      }
    }
  } while (0);
  var $208 = HEAP32[$contactSolver$s2 + 8];
  var $209 = $172;
  __ZN16b2StackAllocator4FreeEPv($208, $209);
  var $212 = HEAP32[$contactSolver$s2 + 9];
  __ZN16b2StackAllocator4FreeEPv($208, $212);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN7b2World22SetDestructionListenerEP21b2DestructionListener($this, $listener) {
  HEAP32[$this + 102980 >> 2] = $listener;
  return;
  return;
}

function __ZN7b2World16SetContactFilterEP15b2ContactFilter($this, $filter) {
  HEAP32[$this + 102940 >> 2] = $filter;
  return;
  return;
}

function __ZN7b2World18SetContactListenerEP17b2ContactListener($this, $listener) {
  HEAP32[$this + 102944 >> 2] = $listener;
  return;
  return;
}

function __ZN7b2World12SetDebugDrawEP6b2Draw($this, $debugDraw) {
  HEAP32[$this + 102984 >> 2] = $debugDraw;
  return;
  return;
}

function __ZN7b2WorldC2ERK6b2Vec2($this, $gravity) {
  var $this$s2 = $this >> 2;
  var $m_blockAllocator = $this | 0;
  var $m_chunkSpace_i = $this + 8 | 0;
  HEAP32[$m_chunkSpace_i >> 2] = 128;
  HEAP32[$this$s2 + 1] = 0;
  var $call_i_i = _malloc(1024);
  HEAP32[$this$s2] = $call_i_i;
  var $mul5_i = HEAP32[$m_chunkSpace_i >> 2] << 3;
  _memset($call_i_i, 0, $mul5_i, 1);
  var $2 = $this + 12 | 0;
  _memset($2, 0, 56, 1);
  if ((HEAP8[__ZN16b2BlockAllocator28s_blockSizeLookupInitializedE] & 1) << 24 >> 24 == 0) {
    var $j_01_i = 0;
    var $i_02_i = 1;
    while (1) {
      var $i_02_i;
      var $j_01_i;
      if (($j_01_i | 0) >= 14) {
        ___assert_func(STRING_TABLE.__str59 | 0, 73, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocatorC2Ev | 0, STRING_TABLE.__str160 | 0);
      }
      if (($i_02_i | 0) > (HEAP32[__ZN16b2BlockAllocator12s_blockSizesE + ($j_01_i << 2) >> 2] | 0)) {
        var $inc_i = $j_01_i + 1 | 0;
        HEAP8[__ZN16b2BlockAllocator17s_blockSizeLookupE + $i_02_i | 0] = $inc_i & 255;
        var $j_1_i = $inc_i;
      } else {
        HEAP8[__ZN16b2BlockAllocator17s_blockSizeLookupE + $i_02_i | 0] = $j_01_i & 255;
        var $j_1_i = $j_01_i;
      }
      var $j_1_i;
      var $inc14_i = $i_02_i + 1 | 0;
      if (($inc14_i | 0) == 641) {
        break;
      }
      var $j_01_i = $j_1_i;
      var $i_02_i = $inc14_i;
    }
    HEAP8[__ZN16b2BlockAllocator28s_blockSizeLookupInitializedE] = 1;
  }
  HEAP32[$this$s2 + 25617] = 0;
  HEAP32[$this$s2 + 25618] = 0;
  HEAP32[$this$s2 + 25619] = 0;
  HEAP32[$this$s2 + 25716] = 0;
  var $m_broadPhase_i = $this + 102872 | 0;
  __ZN12b2BroadPhaseC2Ev($m_broadPhase_i);
  HEAP32[$this$s2 + 25733] = 0;
  HEAP32[$this$s2 + 25734] = 0;
  HEAP32[$this$s2 + 25735] = _b2_defaultFilter;
  HEAP32[$this$s2 + 25736] = _b2_defaultListener;
  var $m_allocator_i = $this + 102948 | 0;
  HEAP32[$m_allocator_i >> 2] = 0;
  var $m_gravity = $this + 102968 | 0;
  HEAP32[$this$s2 + 25745] = 0;
  HEAP32[$this$s2 + 25746] = 0;
  HEAP32[$this$s2 + 25738] = 0;
  HEAP32[$this$s2 + 25739] = 0;
  HEAP32[$this$s2 + 25740] = 0;
  HEAP32[$this$s2 + 25741] = 0;
  HEAP8[$this + 102992 | 0] = 1;
  HEAP8[$this + 102993 | 0] = 1;
  HEAP8[$this + 102994 | 0] = 0;
  HEAP8[$this + 102995 | 0] = 1;
  HEAP8[$this + 102976 | 0] = 1;
  var $7 = $gravity;
  var $8 = $m_gravity;
  var $9$0 = HEAP32[$7 >> 2];
  var $9$1 = HEAP32[$7 + 4 >> 2];
  HEAP32[$8 >> 2] = $9$0;
  HEAP32[$8 + 4 >> 2] = $9$1;
  HEAP32[$this$s2 + 25717] = 4;
  HEAPF32[$this$s2 + 25747] = 0;
  HEAP32[$m_allocator_i >> 2] = $m_blockAllocator;
  var $10 = $this + 102996 | 0;
  _memset($10, 0, 32, 1);
  return;
  return;
}

function __ZN7b2World10CreateBodyEPK9b2BodyDef($this, $def) {
  var $m_bodyList$s2;
  var $0 = $this;
  var $1 = $this + 102868 | 0;
  var $2 = HEAP32[$1 >> 2];
  if (($2 & 2 | 0) == 0) {
    var $3 = $2;
  } else {
    ___assert_func(STRING_TABLE.__str174 | 0, 109, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World10CreateBodyEPK9b2BodyDef | 0, STRING_TABLE.__str1175 | 0);
    var $3 = HEAP32[$1 >> 2];
  }
  var $3;
  if (($3 & 2 | 0) == 0) {
    var $m_blockAllocator = $this | 0;
    var $call3 = __ZN16b2BlockAllocator8AllocateEi($m_blockAllocator, 152);
    if (($call3 | 0) == 0) {
      var $7 = 0;
    } else {
      var $4 = $call3;
      var $5 = $call3;
      var $6 = $def;
      __ZN6b2BodyC2EPK9b2BodyDefP7b2World($5, $6, $0);
      var $7 = $4;
    }
    var $7;
    HEAP32[$7 + 92 >> 2] = 0;
    var $m_bodyList$s2 = ($this + 102952 | 0) >> 2;
    var $8 = HEAP32[$m_bodyList$s2];
    HEAP32[$7 + 96 >> 2] = $8;
    var $9 = HEAP32[$m_bodyList$s2];
    if (($9 | 0) != 0) {
      var $m_prev7 = $9 + 92 | 0;
      HEAP32[$m_prev7 >> 2] = $7;
    }
    HEAP32[$m_bodyList$s2] = $7;
    var $m_bodyCount = $this + 102960 | 0;
    var $inc = HEAP32[$m_bodyCount >> 2] + 1 | 0;
    HEAP32[$m_bodyCount >> 2] = $inc;
    var $retval_0 = $7;
  } else {
    var $retval_0 = 0;
  }
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN8b2Island8SolveTOIERK10b2TimeStepii($this, $subStep, $toiIndexA, $toiIndexB) {
  var $106$s2;
  var $93$s2;
  var $m_bodies27$s2;
  var $22$s2;
  var $21$s2;
  var $m_contactCount$s2;
  var $m_velocities19_pre_phi$s2;
  var $m_positions18_pre_phi$s2;
  var $m_bodyCount$s2;
  var $contactSolver$s2;
  var $contactSolverDef$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 116;
  var $impulse_i = __stackBase__;
  var $contactSolverDef = __stackBase__ + 20, $contactSolverDef$s2 = $contactSolverDef >> 2;
  var $contactSolver = __stackBase__ + 64, $contactSolver$s2 = $contactSolver >> 2;
  var $m_bodyCount$s2 = ($this + 28 | 0) >> 2;
  var $0 = HEAP32[$m_bodyCount$s2];
  if (($0 | 0) > ($toiIndexA | 0)) {
    var $1 = $0;
  } else {
    ___assert_func(STRING_TABLE.__str170 | 0, 386, STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island8SolveTOIERK10b2TimeStepii | 0, STRING_TABLE.__str1171 | 0);
    var $1 = HEAP32[$m_bodyCount$s2];
  }
  var $1;
  if (($1 | 0) > ($toiIndexB | 0)) {
    var $2 = $1;
  } else {
    ___assert_func(STRING_TABLE.__str170 | 0, 387, STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island8SolveTOIERK10b2TimeStepii | 0, STRING_TABLE.__str2172 | 0);
    var $2 = HEAP32[$m_bodyCount$s2];
  }
  var $2;
  var $cmp845 = ($2 | 0) > 0;
  $for_body_lr_ph$$for_cond_preheader_for_end_crit_edge$8 : do {
    if ($cmp845) {
      var $m_bodies = $this + 8 | 0;
      var $m_positions = $this + 20 | 0;
      var $m_velocities = $this + 24 | 0;
      var $i_046 = 0;
      while (1) {
        var $i_046;
        var $4 = HEAP32[HEAP32[$m_bodies >> 2] + ($i_046 << 2) >> 2];
        var $6 = $4 + 44 | 0;
        var $7 = HEAP32[$m_positions >> 2] + $i_046 * 12 | 0;
        var $st$9$0 = $6 | 0;
        var $8$0 = HEAP32[$st$9$0 >> 2];
        var $st$9$1 = $6 + 4 | 0;
        var $8$1 = HEAP32[$st$9$1 >> 2];
        var $st$13$0 = $7 | 0;
        HEAP32[$st$13$0 >> 2] = $8$0;
        var $st$13$1 = $7 + 4 | 0;
        HEAP32[$st$13$1 >> 2] = $8$1;
        var $9 = HEAPF32[$4 + 56 >> 2];
        HEAPF32[(HEAP32[$m_positions >> 2] + 8 >> 2) + ($i_046 * 3 | 0)] = $9;
        var $12 = $4 + 64 | 0;
        var $13 = HEAP32[$m_velocities >> 2] + $i_046 * 12 | 0;
        var $14$0 = HEAP32[$12 >> 2];
        var $14$1 = HEAP32[$12 + 4 >> 2];
        var $st$31$0 = $13 | 0;
        HEAP32[$st$31$0 >> 2] = $14$0;
        var $st$31$1 = $13 + 4 | 0;
        HEAP32[$st$31$1 >> 2] = $14$1;
        var $15 = HEAPF32[$4 + 72 >> 2];
        HEAPF32[(HEAP32[$m_velocities >> 2] + 8 >> 2) + ($i_046 * 3 | 0)] = $15;
        var $inc = $i_046 + 1 | 0;
        if (($inc | 0) >= (HEAP32[$m_bodyCount$s2] | 0)) {
          var $m_positions18_pre_phi = $m_positions, $m_positions18_pre_phi$s2 = $m_positions18_pre_phi >> 2;
          var $m_velocities19_pre_phi = $m_velocities, $m_velocities19_pre_phi$s2 = $m_velocities19_pre_phi >> 2;
          break $for_body_lr_ph$$for_cond_preheader_for_end_crit_edge$8;
        }
        var $i_046 = $inc;
      }
    } else {
      var $m_positions18_pre_phi = $this + 20 | 0, $m_positions18_pre_phi$s2 = $m_positions18_pre_phi >> 2;
      var $m_velocities19_pre_phi = $this + 24 | 0, $m_velocities19_pre_phi$s2 = $m_velocities19_pre_phi >> 2;
    }
  } while (0);
  var $m_velocities19_pre_phi;
  var $m_positions18_pre_phi;
  var $m_contacts = $this + 12 | 0;
  var $18 = HEAP32[$m_contacts >> 2];
  HEAP32[$contactSolverDef$s2 + 6] = $18;
  var $m_contactCount$s2 = ($this + 36 | 0) >> 2;
  var $19 = HEAP32[$m_contactCount$s2];
  HEAP32[$contactSolverDef$s2 + 7] = $19;
  var $20 = HEAP32[$this >> 2];
  HEAP32[$contactSolverDef$s2 + 10] = $20;
  var $21$s2 = $contactSolverDef >> 2;
  var $22$s2 = $subStep >> 2;
  HEAP32[$21$s2] = HEAP32[$22$s2];
  HEAP32[$21$s2 + 1] = HEAP32[$22$s2 + 1];
  HEAP32[$21$s2 + 2] = HEAP32[$22$s2 + 2];
  HEAP32[$21$s2 + 3] = HEAP32[$22$s2 + 3];
  HEAP32[$21$s2 + 4] = HEAP32[$22$s2 + 4];
  HEAP32[$21$s2 + 5] = HEAP32[$22$s2 + 5];
  var $23 = HEAP32[$m_positions18_pre_phi$s2];
  HEAP32[$contactSolverDef$s2 + 8] = $23;
  var $24 = HEAP32[$m_velocities19_pre_phi$s2];
  HEAP32[$contactSolverDef$s2 + 9] = $24;
  var $25 = $contactSolver;
  var $26 = $contactSolverDef;
  __ZN15b2ContactSolverC2EP18b2ContactSolverDef($25, $26);
  var $positionIterations = $subStep + 16 | 0;
  var $i20_0 = 0;
  while (1) {
    var $i20_0;
    if (($i20_0 | 0) >= (HEAP32[$positionIterations >> 2] | 0)) {
      break;
    }
    var $call = __ZN15b2ContactSolver27SolveTOIPositionConstraintsEii($25, $toiIndexA, $toiIndexB);
    if ($call) {
      break;
    }
    var $i20_0 = $i20_0 + 1 | 0;
  }
  var $m_bodies27$s2 = ($this + 8 | 0) >> 2;
  var $38 = HEAP32[$m_positions18_pre_phi$s2] + $toiIndexA * 12 | 0;
  var $39 = HEAP32[HEAP32[$m_bodies27$s2] + ($toiIndexA << 2) >> 2] + 36 | 0;
  var $st$9$0 = $38 | 0;
  var $40$0 = HEAP32[$st$9$0 >> 2];
  var $st$9$1 = $38 + 4 | 0;
  var $40$1 = HEAP32[$st$9$1 >> 2];
  var $st$13$0 = $39 | 0;
  HEAP32[$st$13$0 >> 2] = $40$0;
  var $st$13$1 = $39 + 4 | 0;
  HEAP32[$st$13$1 >> 2] = $40$1;
  var $42 = HEAPF32[(HEAP32[$m_positions18_pre_phi$s2] + 8 >> 2) + ($toiIndexA * 3 | 0)];
  HEAPF32[HEAP32[HEAP32[$m_bodies27$s2] + ($toiIndexA << 2) >> 2] + 52 >> 2] = $42;
  var $48 = HEAP32[$m_positions18_pre_phi$s2] + $toiIndexB * 12 | 0;
  var $49 = HEAP32[HEAP32[$m_bodies27$s2] + ($toiIndexB << 2) >> 2] + 36 | 0;
  var $50$0 = HEAP32[$48 >> 2];
  var $50$1 = HEAP32[$48 + 4 >> 2];
  var $st$37$0 = $49 | 0;
  HEAP32[$st$37$0 >> 2] = $50$0;
  var $st$37$1 = $49 + 4 | 0;
  HEAP32[$st$37$1 >> 2] = $50$1;
  var $52 = HEAPF32[(HEAP32[$m_positions18_pre_phi$s2] + 8 >> 2) + ($toiIndexB * 3 | 0)];
  HEAPF32[HEAP32[HEAP32[$m_bodies27$s2] + ($toiIndexB << 2) >> 2] + 52 >> 2] = $52;
  __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($25);
  var $velocityIterations = $subStep + 12 | 0;
  var $i54_0 = 0;
  while (1) {
    var $i54_0;
    if (($i54_0 | 0) >= (HEAP32[$velocityIterations >> 2] | 0)) {
      break;
    }
    __ZN15b2ContactSolver24SolveVelocityConstraintsEv($25);
    var $i54_0 = $i54_0 + 1 | 0;
  }
  var $56 = HEAPF32[$subStep >> 2];
  var $cmp6537 = (HEAP32[$m_bodyCount$s2] | 0) > 0;
  $invoke_cont83$$for_end127$26 : do {
    if ($cmp6537) {
      var $i62_038 = 0;
      while (1) {
        var $i62_038;
        var $58 = HEAP32[$m_positions18_pre_phi$s2];
        var $59 = $58 + $i62_038 * 12 | 0;
        var $60$1 = HEAP32[$59 + 4 >> 2];
        var $62 = (tempDoubleI32[0] = HEAP32[$59 >> 2], tempDoubleF32[0]);
        var $64 = (tempDoubleI32[0] = $60$1, tempDoubleF32[0]);
        var $65 = HEAPF32[($58 + 8 >> 2) + ($i62_038 * 3 | 0)];
        var $66 = HEAP32[$m_velocities19_pre_phi$s2];
        var $67 = $66 + $i62_038 * 12 | 0;
        var $68$1 = HEAP32[$67 + 4 >> 2];
        var $70 = (tempDoubleI32[0] = HEAP32[$67 >> 2], tempDoubleF32[0]);
        var $72 = (tempDoubleI32[0] = $68$1, tempDoubleF32[0]);
        var $73 = HEAPF32[($66 + 8 >> 2) + ($i62_038 * 3 | 0)];
        var $mul_i = $70 * $56;
        var $mul1_i = $72 * $56;
        var $add_i = $mul_i * $mul_i + $mul1_i * $mul1_i;
        if ($add_i > 4) {
          var $call_i_i = _sqrtf($add_i);
          var $div = 2 / $call_i_i;
          var $75 = $70 * $div;
          var $74 = $72 * $div;
        } else {
          var $75 = $70;
          var $74 = $72;
        }
        var $74;
        var $75;
        var $mul = $56 * $73;
        if ($mul * $mul > 2.4674012660980225) {
          if ($mul > 0) {
            var $cond_i = $mul;
          } else {
            var $cond_i = -$mul;
          }
          var $cond_i;
          var $w79_0 = $73 * (1.5707963705062866 / $cond_i);
        } else {
          var $w79_0 = $73;
        }
        var $w79_0;
        var $add_i25 = $62 + $75 * $56;
        var $add4_i = $64 + $74 * $56;
        var $add = $65 + $56 * $w79_0;
        var $76 = (tempDoubleF32[0] = $add_i25, tempDoubleI32[0]);
        var $77$0 = $76;
        var $78 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
        var $81$0 = 0 | $77$0;
        var $81$1 = $78 | 0;
        var $st$17$0 = $59 | 0;
        HEAP32[$st$17$0 >> 2] = $81$0;
        var $st$17$1 = $59 + 4 | 0;
        HEAP32[$st$17$1 >> 2] = $81$1;
        HEAPF32[(HEAP32[$m_positions18_pre_phi$s2] + 8 >> 2) + ($i62_038 * 3 | 0)] = $add;
        var $84 = HEAP32[$m_velocities19_pre_phi$s2] + $i62_038 * 12 | 0;
        var $85 = (tempDoubleF32[0] = $75, tempDoubleI32[0]);
        var $86$0 = $85;
        var $87 = (tempDoubleF32[0] = $74, tempDoubleI32[0]);
        var $90$0 = 0 | $86$0;
        var $90$1 = $87 | 0;
        var $st$37$0 = $84 | 0;
        HEAP32[$st$37$0 >> 2] = $90$0;
        var $st$37$1 = $84 + 4 | 0;
        HEAP32[$st$37$1 >> 2] = $90$1;
        HEAPF32[(HEAP32[$m_velocities19_pre_phi$s2] + 8 >> 2) + ($i62_038 * 3 | 0)] = $w79_0;
        var $93 = HEAP32[HEAP32[$m_bodies27$s2] + ($i62_038 << 2) >> 2], $93$s2 = $93 >> 2;
        var $94 = $93 + 44 | 0;
        var $st$49$0 = $94 | 0;
        HEAP32[$st$49$0 >> 2] = $81$0;
        var $st$49$1 = $94 + 4 | 0;
        HEAP32[$st$49$1 >> 2] = $81$1;
        HEAPF32[$93$s2 + 14] = $add;
        var $95 = $93 + 64 | 0;
        var $st$57$0 = $95 | 0;
        HEAP32[$st$57$0 >> 2] = $90$0;
        var $st$57$1 = $95 + 4 | 0;
        HEAP32[$st$57$1 >> 2] = $90$1;
        HEAPF32[$93$s2 + 18] = $w79_0;
        var $call_i_i23 = _sinf($add);
        HEAPF32[$93$s2 + 5] = $call_i_i23;
        var $call2_i_i = _cosf($add);
        HEAPF32[$93$s2 + 6] = $call2_i_i;
        var $96 = HEAPF32[$93$s2 + 7];
        var $97 = HEAPF32[$93$s2 + 8];
        var $sub_i4_i = $add_i25 - ($call2_i_i * $96 - $call_i_i23 * $97);
        var $sub3_i_i = $add4_i - ($call_i_i23 * $96 + $call2_i_i * $97);
        var $98 = $93 + 12 | 0;
        var $99 = (tempDoubleF32[0] = $sub_i4_i, tempDoubleI32[0]);
        var $100$0 = $99;
        var $101 = (tempDoubleF32[0] = $sub3_i_i, tempDoubleI32[0]);
        var $104$0 = 0 | $100$0;
        var $104$1 = $101 | 0;
        var $st$93$0 = $98 | 0;
        HEAP32[$st$93$0 >> 2] = $104$0;
        var $st$93$1 = $98 + 4 | 0;
        HEAP32[$st$93$1 >> 2] = $104$1;
        var $inc126 = $i62_038 + 1 | 0;
        if (($inc126 | 0) >= (HEAP32[$m_bodyCount$s2] | 0)) {
          break $invoke_cont83$$for_end127$26;
        }
        var $i62_038 = $inc126;
      }
    }
  } while (0);
  var $106 = HEAP32[$contactSolver$s2 + 10], $106$s2 = $106 >> 2;
  var $m_listener_i = $this + 4 | 0;
  var $cmp_i15 = (HEAP32[$m_listener_i >> 2] | 0) == 0;
  $invoke_cont128$$for_cond_preheader_i$39 : do {
    if (!$cmp_i15) {
      if ((HEAP32[$m_contactCount$s2] | 0) <= 0) {
        break;
      }
      var $count_i = $impulse_i + 16 | 0;
      var $i_04_i = 0;
      while (1) {
        var $i_04_i;
        var $111 = HEAP32[HEAP32[$m_contacts >> 2] + ($i_04_i << 2) >> 2];
        var $112 = HEAP32[$106$s2 + ($i_04_i * 38 | 0) + 36];
        HEAP32[$count_i >> 2] = $112;
        var $cmp51_i = ($112 | 0) > 0;
        $for_body6_i$$for_end_i$44 : do {
          if ($cmp51_i) {
            var $j_02_i = 0;
            while (1) {
              var $j_02_i;
              var $113 = HEAPF32[$106$s2 + ($i_04_i * 38 | 0) + ($j_02_i * 9 | 0) + 4];
              HEAPF32[$impulse_i + ($j_02_i << 2) >> 2] = $113;
              var $114 = HEAPF32[$106$s2 + ($i_04_i * 38 | 0) + ($j_02_i * 9 | 0) + 5];
              HEAPF32[$impulse_i + ($j_02_i << 2) + 8 >> 2] = $114;
              var $inc_i = $j_02_i + 1 | 0;
              if (($inc_i | 0) == ($112 | 0)) {
                break $for_body6_i$$for_end_i$44;
              }
              var $j_02_i = $inc_i;
            }
          }
        } while (0);
        var $115 = HEAP32[$m_listener_i >> 2];
        var $117 = HEAP32[HEAP32[$115 >> 2] + 20 >> 2];
        FUNCTION_TABLE[$117]($115, $111, $impulse_i);
        var $inc14_i = $i_04_i + 1 | 0;
        if (($inc14_i | 0) >= (HEAP32[$m_contactCount$s2] | 0)) {
          break $invoke_cont128$$for_cond_preheader_i$39;
        }
        var $i_04_i = $inc14_i;
      }
    }
  } while (0);
  var $120 = HEAP32[$contactSolver$s2 + 8];
  var $121 = $106;
  __ZN16b2StackAllocator4FreeEPv($120, $121);
  var $124 = HEAP32[$contactSolver$s2 + 9];
  __ZN16b2StackAllocator4FreeEPv($120, $124);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN7b2WorldD2Ev($this) {
  var $this$s2 = $this >> 2;
  var $m_blockAllocator = $this | 0;
  var $b_0 = HEAP32[$this$s2 + 25738];
  $while_cond$64 : while (1) {
    var $b_0;
    if (($b_0 | 0) == 0) {
      break;
    }
    var $1 = HEAP32[$b_0 + 96 >> 2];
    var $f_0 = HEAP32[$b_0 + 100 >> 2];
    while (1) {
      var $f_0;
      if (($f_0 | 0) == 0) {
        var $b_0 = $1;
        continue $while_cond$64;
      }
      var $3 = HEAP32[$f_0 + 4 >> 2];
      HEAP32[$f_0 + 28 >> 2] = 0;
      __ZN9b2Fixture7DestroyEP16b2BlockAllocator($f_0, $m_blockAllocator);
      var $f_0 = $3;
    }
  }
  var $7 = HEAP32[$this$s2 + 25726];
  _free($7);
  var $9 = HEAP32[$this$s2 + 25729];
  _free($9);
  var $11 = HEAP32[$this$s2 + 25719];
  _free($11);
  if ((HEAP32[$this$s2 + 25617] | 0) != 0) {
    ___assert_func(STRING_TABLE.__str72 | 0, 32, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocatorD2Ev | 0, STRING_TABLE.__str173 | 0);
  }
  if ((HEAP32[$this$s2 + 25716] | 0) != 0) {
    ___assert_func(STRING_TABLE.__str72 | 0, 33, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocatorD2Ev | 0, STRING_TABLE.__str274 | 0);
  }
  var $m_chunkCount_i = $this + 4 | 0;
  var $cmp1_i = (HEAP32[$m_chunkCount_i >> 2] | 0) > 0;
  var $m_chunks_i = $this | 0;
  var $15 = HEAP32[$m_chunks_i >> 2];
  $for_body_i$$_ZN16b2BlockAllocatorD2Ev_exit$77 : do {
    if ($cmp1_i) {
      var $i_02_i = 0;
      var $16 = $15;
      while (1) {
        var $16;
        var $i_02_i;
        var $18 = HEAP32[$16 + ($i_02_i << 3) + 4 >> 2];
        _free($18);
        var $inc_i = $i_02_i + 1 | 0;
        var $20 = HEAP32[$m_chunks_i >> 2];
        if (($inc_i | 0) >= (HEAP32[$m_chunkCount_i >> 2] | 0)) {
          var $_lcssa_i = $20;
          break $for_body_i$$_ZN16b2BlockAllocatorD2Ev_exit$77;
        }
        var $i_02_i = $inc_i;
        var $16 = $20;
      }
    } else {
      var $_lcssa_i = $15;
    }
  } while (0);
  var $_lcssa_i;
  _free($_lcssa_i);
  return;
  return;
}

function __ZN7b2World16SetAllowSleepingEb($this, $flag) {
  var $m_allowSleep = $this + 102976 | 0;
  var $cmp = ($flag & 1 | 0) == (HEAP8[$m_allowSleep] & 1 & 255 | 0);
  $if_end13$$if_end$133 : do {
    if (!$cmp) {
      HEAP8[$m_allowSleep] = $flag & 1;
      if ($flag) {
        break;
      }
      var $b_01 = HEAP32[$this + 102952 >> 2];
      if (($b_01 | 0) == 0) {
        break;
      }
      var $b_03 = $b_01;
      while (1) {
        var $b_03;
        var $2 = $b_03 + 4 | 0;
        var $3 = HEAP16[$2 >> 1];
        if (($3 & 2) << 16 >> 16 == 0) {
          var $or_i = $3 | 2;
          HEAP16[$2 >> 1] = $or_i;
          HEAPF32[$b_03 + 144 >> 2] = 0;
        }
        var $b_0 = HEAP32[$b_03 + 96 >> 2];
        if (($b_0 | 0) == 0) {
          break $if_end13$$if_end$133;
        }
        var $b_03 = $b_0;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN7b2World11DestroyBodyEP6b2Body($this, $b) {
  var $m_next42_pre$s2;
  var $25$s2;
  var $m_fixtureList$s2;
  var $m_jointList$s2;
  var $m_bodyCount$s2;
  var $m_bodyCount$s2 = ($this + 102960 | 0) >> 2;
  if ((HEAP32[$m_bodyCount$s2] | 0) <= 0) {
    ___assert_func(STRING_TABLE.__str174 | 0, 133, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World11DestroyBodyEP6b2Body | 0, STRING_TABLE.__str2176 | 0);
  }
  var $1 = $this + 102868 | 0;
  var $2 = HEAP32[$1 >> 2];
  if (($2 & 2 | 0) == 0) {
    var $3 = $2;
  } else {
    ___assert_func(STRING_TABLE.__str174 | 0, 134, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World11DestroyBodyEP6b2Body | 0, STRING_TABLE.__str1175 | 0);
    var $3 = HEAP32[$1 >> 2];
  }
  var $3;
  if (($3 & 2 | 0) == 0) {
    var $m_jointList$s2 = ($b + 108 | 0) >> 2;
    var $4 = HEAP32[$m_jointList$s2];
    var $tobool16 = ($4 | 0) == 0;
    $while_end$$while_body_lr_ph$10 : do {
      if (!$tobool16) {
        var $m_destructionListener = $this + 102980 | 0;
        var $je_017 = $4;
        while (1) {
          var $je_017;
          var $5 = HEAP32[$je_017 + 12 >> 2];
          var $6 = HEAP32[$m_destructionListener >> 2];
          if (($6 | 0) == 0) {
            var $joint11_pre_phi = $je_017 + 4 | 0;
          } else {
            var $8 = HEAP32[HEAP32[$6 >> 2] + 8 >> 2];
            var $joint = $je_017 + 4 | 0;
            var $9 = HEAP32[$joint >> 2];
            FUNCTION_TABLE[$8]($6, $9);
            var $joint11_pre_phi = $joint;
          }
          var $joint11_pre_phi;
          var $10 = HEAP32[$joint11_pre_phi >> 2];
          __ZN7b2World12DestroyJointEP7b2Joint($this, $10);
          HEAP32[$m_jointList$s2] = $5;
          if (($5 | 0) == 0) {
            break $while_end$$while_body_lr_ph$10;
          }
          var $je_017 = $5;
        }
      }
    } while (0);
    HEAP32[$m_jointList$s2] = 0;
    var $m_contactList = $b + 112 | 0;
    var $11 = HEAP32[$m_contactList >> 2];
    var $tobool1513 = ($11 | 0) == 0;
    $while_end18$$while_body16_lr_ph$19 : do {
      if (!$tobool1513) {
        var $12 = $this + 102872 | 0;
        var $ce_014 = $11;
        while (1) {
          var $ce_014;
          var $13 = HEAP32[$ce_014 + 12 >> 2];
          var $15 = HEAP32[$ce_014 + 4 >> 2];
          __ZN16b2ContactManager7DestroyEP9b2Contact($12, $15);
          if (($13 | 0) == 0) {
            break $while_end18$$while_body16_lr_ph$19;
          }
          var $ce_014 = $13;
        }
      }
    } while (0);
    HEAP32[$m_contactList >> 2] = 0;
    var $m_fixtureList$s2 = ($b + 100 | 0) >> 2;
    var $16 = HEAP32[$m_fixtureList$s2];
    var $tobool2111 = ($16 | 0) == 0;
    $while_end18_while_end33_crit_edge$$while_body22_lr_ph$24 : do {
      if ($tobool2111) {
        var $m_fixtureCount35_pre_phi = $b + 104 | 0;
      } else {
        var $m_destructionListener23 = $this + 102980 | 0;
        var $17 = $this + 102912 | 0;
        var $18 = $this + 102904 | 0;
        var $19 = $this + 102900 | 0;
        var $m_tree_i_i = $this + 102872 | 0;
        var $m_blockAllocator = $this | 0;
        var $m_fixtureCount = $b + 104 | 0;
        var $f_012 = $16;
        while (1) {
          var $f_012;
          var $20 = HEAPU32[$f_012 + 4 >> 2];
          var $21 = HEAP32[$m_destructionListener23 >> 2];
          if (($21 | 0) != 0) {
            var $23 = HEAP32[HEAP32[$21 >> 2] + 12 >> 2];
            FUNCTION_TABLE[$23]($21, $f_012);
          }
          var $24 = $f_012;
          var $25$s2 = ($f_012 + 28 | 0) >> 2;
          var $cmp1_i = (HEAP32[$25$s2] | 0) > 0;
          $for_body_lr_ph_i$$_ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase_exit$32 : do {
            if ($cmp1_i) {
              var $m_proxies_i = $f_012 + 24 | 0;
              var $i_02_i = 0;
              while (1) {
                var $i_02_i;
                var $proxyId_i = HEAP32[$m_proxies_i >> 2] + $i_02_i * 28 + 24 | 0;
                var $29 = HEAP32[$proxyId_i >> 2];
                var $30 = HEAP32[$17 >> 2];
                var $i_0_i_i_i = 0;
                while (1) {
                  var $i_0_i_i_i;
                  if (($i_0_i_i_i | 0) >= ($30 | 0)) {
                    break;
                  }
                  var $arrayidx_i_i_i = ($i_0_i_i_i << 2) + HEAP32[$18 >> 2] | 0;
                  if ((HEAP32[$arrayidx_i_i_i >> 2] | 0) == ($29 | 0)) {
                    HEAP32[$arrayidx_i_i_i >> 2] = -1;
                    break;
                  }
                  var $i_0_i_i_i = $i_0_i_i_i + 1 | 0;
                }
                var $dec_i_i = HEAP32[$19 >> 2] - 1 | 0;
                HEAP32[$19 >> 2] = $dec_i_i;
                __ZN13b2DynamicTree12DestroyProxyEi($m_tree_i_i, $29);
                HEAP32[$proxyId_i >> 2] = -1;
                var $inc_i = $i_02_i + 1 | 0;
                if (($inc_i | 0) >= (HEAP32[$25$s2] | 0)) {
                  break $for_body_lr_ph_i$$_ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase_exit$32;
                }
                var $i_02_i = $inc_i;
              }
            }
          } while (0);
          HEAP32[$25$s2] = 0;
          __ZN9b2Fixture7DestroyEP16b2BlockAllocator($24, $m_blockAllocator);
          var $35 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 44 | 0];
          var $conv_i4 = $35 & 255;
          if (($35 & 255) >= 14) {
            ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
          }
          var $arrayidx11_i7 = ($conv_i4 << 2) + $this + 12 | 0;
          var $37 = HEAP32[$arrayidx11_i7 >> 2];
          HEAP32[$f_012 >> 2] = $37;
          HEAP32[$arrayidx11_i7 >> 2] = $f_012;
          HEAP32[$m_fixtureList$s2] = $20;
          var $sub = HEAP32[$m_fixtureCount >> 2] - 1 | 0;
          HEAP32[$m_fixtureCount >> 2] = $sub;
          if (($20 | 0) == 0) {
            var $m_fixtureCount35_pre_phi = $m_fixtureCount;
            break $while_end18_while_end33_crit_edge$$while_body22_lr_ph$24;
          }
          var $f_012 = $20;
        }
      }
    } while (0);
    var $m_fixtureCount35_pre_phi;
    HEAP32[$m_fixtureList$s2] = 0;
    HEAP32[$m_fixtureCount35_pre_phi >> 2] = 0;
    var $m_prev = $b + 92 | 0;
    var $39 = HEAP32[$m_prev >> 2];
    var $m_next42_pre$s2 = ($b + 96 | 0) >> 2;
    if (($39 | 0) != 0) {
      var $40 = HEAP32[$m_next42_pre$s2];
      var $m_next40 = $39 + 96 | 0;
      HEAP32[$m_next40 >> 2] = $40;
    }
    var $41 = HEAP32[$m_next42_pre$s2];
    if (($41 | 0) != 0) {
      var $42 = HEAP32[$m_prev >> 2];
      var $m_prev47 = $41 + 92 | 0;
      HEAP32[$m_prev47 >> 2] = $42;
    }
    var $m_bodyList = $this + 102952 | 0;
    if ((HEAP32[$m_bodyList >> 2] | 0) == ($b | 0)) {
      var $44 = HEAP32[$m_next42_pre$s2];
      HEAP32[$m_bodyList >> 2] = $44;
    }
    var $dec = HEAP32[$m_bodyCount$s2] - 1 | 0;
    HEAP32[$m_bodyCount$s2] = $dec;
    var $46 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 152 | 0];
    var $conv_i = $46 & 255;
    if (($46 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $47 = $b;
    var $arrayidx11_i = ($conv_i << 2) + $this + 12 | 0;
    var $_c = HEAP32[$arrayidx11_i >> 2];
    HEAP32[$b >> 2] = $_c;
    HEAP32[$arrayidx11_i >> 2] = $47;
  }
  return;
  return;
}

function __ZN7b2World12DestroyJointEP7b2Joint($this, $j) {
  var $edge_018$s2;
  var $m_jointCount$s2;
  var $next59_pre$s2;
  var $prev49$s2;
  var $next28_pre$s2;
  var $prev$s2;
  var $m_next8_pre$s2;
  var $0 = $this + 102868 | 0;
  var $1 = HEAP32[$0 >> 2];
  if (($1 & 2 | 0) == 0) {
    var $2 = $1;
  } else {
    ___assert_func(STRING_TABLE.__str174 | 0, 274, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World12DestroyJointEP7b2Joint | 0, STRING_TABLE.__str1175 | 0);
    var $2 = HEAP32[$0 >> 2];
  }
  var $2;
  var $cmp_i4 = ($2 & 2 | 0) == 0;
  $if_end$$if_end95$65 : do {
    if ($cmp_i4) {
      var $4 = HEAP8[$j + 61 | 0] & 1;
      var $m_prev = $j + 8 | 0;
      var $5 = HEAP32[$m_prev >> 2];
      var $m_next8_pre$s2 = ($j + 12 | 0) >> 2;
      if (($5 | 0) != 0) {
        var $6 = HEAP32[$m_next8_pre$s2];
        var $m_next6 = $5 + 12 | 0;
        HEAP32[$m_next6 >> 2] = $6;
      }
      var $7 = HEAP32[$m_next8_pre$s2];
      if (($7 | 0) != 0) {
        var $8 = HEAP32[$m_prev >> 2];
        var $m_prev13 = $7 + 8 | 0;
        HEAP32[$m_prev13 >> 2] = $8;
      }
      var $m_jointList = $this + 102956 | 0;
      if ((HEAP32[$m_jointList >> 2] | 0) == ($j | 0)) {
        var $10 = HEAP32[$m_next8_pre$s2];
        HEAP32[$m_jointList >> 2] = $10;
      }
      var $11 = HEAP32[$j + 48 >> 2];
      var $12 = HEAP32[$j + 52 >> 2];
      var $13 = $11 + 4 | 0;
      var $14 = HEAP16[$13 >> 1];
      if (($14 & 2) << 16 >> 16 == 0) {
        var $or_i12 = $14 | 2;
        HEAP16[$13 >> 1] = $or_i12;
        HEAPF32[$11 + 144 >> 2] = 0;
      }
      var $16 = $12 + 4 | 0;
      var $17 = HEAP16[$16 >> 1];
      if (($17 & 2) << 16 >> 16 == 0) {
        var $or_i8 = $17 | 2;
        HEAP16[$16 >> 1] = $or_i8;
        HEAPF32[$12 + 144 >> 2] = 0;
      }
      var $m_edgeA = $j + 16 | 0;
      var $prev$s2 = ($j + 24 | 0) >> 2;
      var $19 = HEAP32[$prev$s2];
      var $next28_pre$s2 = ($j + 28 | 0) >> 2;
      if (($19 | 0) != 0) {
        var $20 = HEAP32[$next28_pre$s2];
        var $next25 = $19 + 12 | 0;
        HEAP32[$next25 >> 2] = $20;
      }
      var $21 = HEAP32[$next28_pre$s2];
      if (($21 | 0) != 0) {
        var $22 = HEAP32[$prev$s2];
        var $prev35 = $21 + 8 | 0;
        HEAP32[$prev35 >> 2] = $22;
      }
      var $m_jointList38 = $11 + 108 | 0;
      if (($m_edgeA | 0) == (HEAP32[$m_jointList38 >> 2] | 0)) {
        var $24 = HEAP32[$next28_pre$s2];
        HEAP32[$m_jointList38 >> 2] = $24;
      }
      HEAP32[$prev$s2] = 0;
      HEAP32[$next28_pre$s2] = 0;
      var $m_edgeB = $j + 32 | 0;
      var $prev49$s2 = ($j + 40 | 0) >> 2;
      var $25 = HEAP32[$prev49$s2];
      var $next59_pre$s2 = ($j + 44 | 0) >> 2;
      if (($25 | 0) != 0) {
        var $26 = HEAP32[$next59_pre$s2];
        var $next56 = $25 + 12 | 0;
        HEAP32[$next56 >> 2] = $26;
      }
      var $27 = HEAP32[$next59_pre$s2];
      if (($27 | 0) != 0) {
        var $28 = HEAP32[$prev49$s2];
        var $prev66 = $27 + 8 | 0;
        HEAP32[$prev66 >> 2] = $28;
      }
      var $m_jointList69 = $12 + 108 | 0;
      if (($m_edgeB | 0) == (HEAP32[$m_jointList69 >> 2] | 0)) {
        var $30 = HEAP32[$next59_pre$s2];
        HEAP32[$m_jointList69 >> 2] = $30;
      }
      HEAP32[$prev49$s2] = 0;
      HEAP32[$next59_pre$s2] = 0;
      var $m_blockAllocator = $this | 0;
      __ZN7b2Joint7DestroyEPS_P16b2BlockAllocator($j, $m_blockAllocator);
      var $m_jointCount$s2 = ($this + 102964 | 0) >> 2;
      var $31 = HEAP32[$m_jointCount$s2];
      if (($31 | 0) > 0) {
        var $32 = $31;
      } else {
        ___assert_func(STRING_TABLE.__str174 | 0, 346, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World12DestroyJointEP7b2Joint | 0, STRING_TABLE.__str3177 | 0);
        var $32 = HEAP32[$m_jointCount$s2];
      }
      var $32;
      HEAP32[$m_jointCount$s2] = $32 - 1 | 0;
      if ($4 << 24 >> 24 != 0) {
        break;
      }
      var $edge_016 = HEAP32[$12 + 112 >> 2];
      if (($edge_016 | 0) == 0) {
        break;
      }
      var $edge_018 = $edge_016, $edge_018$s2 = $edge_018 >> 2;
      while (1) {
        var $edge_018;
        if ((HEAP32[$edge_018$s2] | 0) == ($11 | 0)) {
          var $35 = HEAP32[$edge_018$s2 + 1] + 4 | 0;
          var $or_i = HEAP32[$35 >> 2] | 8;
          HEAP32[$35 >> 2] = $or_i;
        }
        var $edge_0 = HEAP32[$edge_018$s2 + 3];
        if (($edge_0 | 0) == 0) {
          break $if_end$$if_end95$65;
        }
        var $edge_018 = $edge_0, $edge_018$s2 = $edge_018 >> 2;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN7b2World11CreateJointEPK10b2JointDef($this, $def) {
  var $edge_07$s2;
  var $m_bodyA$s2;
  var $m_bodyB$s2;
  var $m_jointList$s2;
  var $call3$s2;
  var $0 = $this + 102868 | 0;
  var $1 = HEAP32[$0 >> 2];
  if (($1 & 2 | 0) == 0) {
    var $2 = $1;
  } else {
    ___assert_func(STRING_TABLE.__str174 | 0, 214, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World11CreateJointEPK10b2JointDef | 0, STRING_TABLE.__str1175 | 0);
    var $2 = HEAP32[$0 >> 2];
  }
  var $2;
  var $cmp_i4 = ($2 & 2 | 0) == 0;
  $if_end$$return$114 : do {
    if ($cmp_i4) {
      var $m_blockAllocator = $this | 0;
      var $call3 = __ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator($def, $m_blockAllocator), $call3$s2 = $call3 >> 2;
      HEAP32[$call3$s2 + 2] = 0;
      var $m_jointList$s2 = ($this + 102956 | 0) >> 2;
      var $3 = HEAP32[$m_jointList$s2];
      HEAP32[$call3$s2 + 3] = $3;
      var $4 = HEAP32[$m_jointList$s2];
      if (($4 | 0) != 0) {
        var $m_prev7 = $4 + 8 | 0;
        HEAP32[$m_prev7 >> 2] = $call3;
      }
      HEAP32[$m_jointList$s2] = $call3;
      var $m_jointCount = $this + 102964 | 0;
      var $inc = HEAP32[$m_jointCount >> 2] + 1 | 0;
      HEAP32[$m_jointCount >> 2] = $inc;
      var $m_edgeA = $call3 + 16 | 0;
      HEAP32[$call3$s2 + 5] = $call3;
      var $m_bodyB$s2 = ($call3 + 52 | 0) >> 2;
      var $6 = HEAP32[$m_bodyB$s2];
      HEAP32[$m_edgeA >> 2] = $6;
      HEAP32[$call3$s2 + 6] = 0;
      var $m_bodyA$s2 = ($call3 + 48 | 0) >> 2;
      var $7 = HEAP32[$m_bodyA$s2];
      var $m_jointList12 = $7 + 108 | 0;
      var $8 = HEAP32[$m_jointList12 >> 2];
      HEAP32[$call3$s2 + 7] = $8;
      var $9 = HEAP32[$m_jointList12 >> 2];
      if (($9 | 0) == 0) {
        var $10 = $7;
      } else {
        var $prev21 = $9 + 8 | 0;
        HEAP32[$prev21 >> 2] = $m_edgeA;
        var $10 = HEAP32[$m_bodyA$s2];
      }
      var $10;
      HEAP32[$10 + 108 >> 2] = $m_edgeA;
      var $m_edgeB = $call3 + 32 | 0;
      HEAP32[$call3$s2 + 9] = $call3;
      var $11 = HEAP32[$m_bodyA$s2];
      HEAP32[$m_edgeB >> 2] = $11;
      HEAP32[$call3$s2 + 10] = 0;
      var $12 = HEAP32[$m_bodyB$s2];
      var $m_jointList33 = $12 + 108 | 0;
      var $13 = HEAP32[$m_jointList33 >> 2];
      HEAP32[$call3$s2 + 11] = $13;
      var $14 = HEAP32[$m_jointList33 >> 2];
      if (($14 | 0) == 0) {
        var $15 = $12;
      } else {
        var $prev43 = $14 + 8 | 0;
        HEAP32[$prev43 >> 2] = $m_edgeB;
        var $15 = HEAP32[$m_bodyB$s2];
      }
      var $15;
      HEAP32[$15 + 108 >> 2] = $m_edgeB;
      var $16 = HEAP32[$def + 8 >> 2];
      if ((HEAP8[$def + 16 | 0] & 1) << 24 >> 24 != 0) {
        var $retval_0 = $call3;
        break;
      }
      var $edge_05 = HEAP32[HEAP32[$def + 12 >> 2] + 112 >> 2];
      if (($edge_05 | 0) == 0) {
        var $retval_0 = $call3;
        break;
      }
      var $edge_07 = $edge_05, $edge_07$s2 = $edge_07 >> 2;
      while (1) {
        var $edge_07;
        if ((HEAP32[$edge_07$s2] | 0) == ($16 | 0)) {
          var $22 = HEAP32[$edge_07$s2 + 1] + 4 | 0;
          var $or_i = HEAP32[$22 >> 2] | 8;
          HEAP32[$22 >> 2] = $or_i;
        }
        var $edge_0 = HEAP32[$edge_07$s2 + 3];
        if (($edge_0 | 0) == 0) {
          var $retval_0 = $call3;
          break $if_end$$return$114;
        }
        var $edge_07 = $edge_0, $edge_07$s2 = $edge_07 >> 2;
      }
    } else {
      var $retval_0 = 0;
    }
  } while (0);
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN7b2World5SolveERK10b2TimeStep($this, $step) {
  var $67$s1;
  var $m_flags98$s1;
  var $m_flags69$s2;
  var $43$s1;
  var $m_flags27$s1;
  var $m_bodies_i17$s2;
  var $m_bodyCount_i$s2;
  var $m_index_i$s2;
  var $add_ptr_i$s2;
  var $m_entryCount_i$s2;
  var $solvePosition$s2;
  var $solveVelocity$s2;
  var $solveInit$s2;
  var $island$s2;
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 116;
  var $xf1_i = __stackBase__;
  var $t_i_i = __stackBase__ + 16;
  var $t_i = __stackBase__ + 24;
  var $island = __stackBase__ + 32, $island$s2 = $island >> 2;
  var $profile = __stackBase__ + 84;
  var $solveInit$s2 = ($this + 103008 | 0) >> 2;
  HEAPF32[$solveInit$s2] = 0;
  var $solveVelocity$s2 = ($this + 103012 | 0) >> 2;
  HEAPF32[$solveVelocity$s2] = 0;
  var $solvePosition$s2 = ($this + 103016 | 0) >> 2;
  HEAPF32[$solvePosition$s2] = 0;
  var $m_bodyCount = $this + 102960 | 0;
  var $0 = HEAP32[$m_bodyCount >> 2];
  var $m_contactManager = $this + 102872 | 0;
  var $1 = HEAP32[$this$s2 + 25734];
  var $2 = HEAP32[$this$s2 + 25741];
  var $m_stackAllocator = $this + 68 | 0;
  var $4 = $island;
  var $5 = HEAP32[$this$s2 + 25736];
  __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($4, $0, $1, $2, $m_stackAllocator, $5);
  var $m_bodyList = $this + 102952 | 0;
  var $b_095 = HEAP32[$m_bodyList >> 2];
  var $tobool96 = ($b_095 | 0) == 0;
  $for_end$$for_body$2 : do {
    if (!$tobool96) {
      var $b_097 = $b_095;
      while (1) {
        var $b_097;
        var $m_flags = $b_097 + 4 | 0;
        var $and = HEAP16[$m_flags >> 1] & -2;
        HEAP16[$m_flags >> 1] = $and;
        var $b_0 = HEAP32[$b_097 + 96 >> 2];
        if (($b_0 | 0) == 0) {
          break $for_end$$for_body$2;
        }
        var $b_097 = $b_0;
      }
    }
  } while (0);
  var $c_092 = HEAP32[$this$s2 + 25733];
  var $tobool893 = ($c_092 | 0) == 0;
  $for_end14$$for_body9$6 : do {
    if (!$tobool893) {
      var $c_094 = $c_092;
      while (1) {
        var $c_094;
        var $m_flags10 = $c_094 + 4 | 0;
        var $and11 = HEAP32[$m_flags10 >> 2] & -2;
        HEAP32[$m_flags10 >> 2] = $and11;
        var $c_0 = HEAP32[$c_094 + 12 >> 2];
        if (($c_0 | 0) == 0) {
          break $for_end14$$for_body9$6;
        }
        var $c_094 = $c_0;
      }
    }
  } while (0);
  var $j_089 = HEAP32[$this$s2 + 25739];
  var $tobool1690 = ($j_089 | 0) == 0;
  $for_end20$$for_body17$10 : do {
    if (!$tobool1690) {
      var $j_091 = $j_089;
      while (1) {
        var $j_091;
        HEAP8[$j_091 + 60 | 0] = 0;
        var $j_0 = HEAP32[$j_091 + 12 >> 2];
        if (($j_0 | 0) == 0) {
          break $for_end20$$for_body17$10;
        }
        var $j_091 = $j_0;
      }
    }
  } while (0);
  var $8 = HEAP32[$m_bodyCount >> 2];
  var $mul = $8 << 2;
  var $m_entryCount_i$s2 = ($this + 102864 | 0) >> 2;
  var $9 = HEAP32[$m_entryCount_i$s2];
  if (($9 | 0) < 32) {
    var $10 = $9;
  } else {
    ___assert_func(STRING_TABLE.__str72 | 0, 38, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator8AllocateEi | 0, STRING_TABLE.__str375 | 0);
    var $10 = HEAP32[$m_entryCount_i$s2];
  }
  var $10;
  var $add_ptr_i$s2 = ($this + $10 * 12 + 102480 | 0) >> 2;
  HEAP32[$this$s2 + ($10 * 3 | 0) + 25621] = $mul;
  var $m_index_i$s2 = ($this + 102468 | 0) >> 2;
  var $11 = HEAP32[$m_index_i$s2];
  if (($11 + $mul | 0) > 102400) {
    var $call_i_i = _malloc($mul);
    HEAP32[$add_ptr_i$s2] = $call_i_i;
    HEAP8[$this + $10 * 12 + 102488 | 0] = 1;
  } else {
    var $add_ptr8_i = $this + ($11 + 68) | 0;
    HEAP32[$add_ptr_i$s2] = $add_ptr8_i;
    HEAP8[$this + $10 * 12 + 102488 | 0] = 0;
    var $add12_i = HEAP32[$m_index_i$s2] + $mul | 0;
    HEAP32[$m_index_i$s2] = $add12_i;
  }
  var $m_allocation_i = $this + 102472 | 0;
  var $add13_i = HEAP32[$m_allocation_i >> 2] + $mul | 0;
  HEAP32[$m_allocation_i >> 2] = $add13_i;
  var $m_maxAllocation_i = $this + 102476 | 0;
  var $14 = HEAP32[$m_maxAllocation_i >> 2];
  var $cond_i_i = ($14 | 0) > ($add13_i | 0) ? $14 : $add13_i;
  HEAP32[$m_maxAllocation_i >> 2] = $cond_i_i;
  var $inc_i = HEAP32[$m_entryCount_i$s2] + 1 | 0;
  HEAP32[$m_entryCount_i$s2] = $inc_i;
  var $16 = HEAP32[$add_ptr_i$s2];
  var $17 = $16;
  var $m_bodyCount_i$s2 = ($island + 28 | 0) >> 2;
  var $m_contactCount_i = $island + 36 | 0;
  var $m_jointCount_i = $island + 32 | 0;
  var $m_bodyCapacity_i = $island + 40 | 0;
  var $m_bodies_i17$s2 = ($island + 8 | 0) >> 2;
  var $m_contactCapacity_i = $island + 44 | 0;
  var $m_contacts_i43 = $island + 12 | 0;
  var $m_jointCapacity_i = $island + 48 | 0;
  var $m_joints_i55 = $island + 16 | 0;
  var $m_gravity = $this + 102968 | 0;
  var $m_allowSleep = $this + 102976 | 0;
  var $18 = $profile;
  var $19 = $step;
  var $solveInit161 = $profile + 12 | 0;
  var $solveVelocity164 = $profile + 16 | 0;
  var $solvePosition168 = $profile + 20 | 0;
  var $seed_0_in = $m_bodyList;
  while (1) {
    var $seed_0_in;
    var $seed_0 = HEAP32[$seed_0_in >> 2];
    if (($seed_0 | 0) == 0) {
      break;
    }
    var $m_flags27$s1 = ($seed_0 + 4 | 0) >> 1;
    var $22 = (HEAP16[$m_flags27$s1] & 35) << 16 >> 16 == 34;
    $if_end39$$for_inc190$25 : do {
      if ($22) {
        if ((HEAP32[$seed_0 >> 2] | 0) == 0) {
          break;
        }
        HEAP32[$m_bodyCount_i$s2] = 0;
        HEAP32[$m_contactCount_i >> 2] = 0;
        HEAP32[$m_jointCount_i >> 2] = 0;
        HEAP32[$17 >> 2] = $seed_0;
        var $or = HEAP16[$m_flags27$s1] | 1;
        HEAP16[$m_flags27$s1] = $or;
        var $36 = HEAP32[$m_bodyCapacity_i >> 2];
        var $37 = HEAP32[$m_bodies_i17$s2];
        var $38 = HEAP32[$m_contactCapacity_i >> 2];
        var $39 = HEAP32[$m_contacts_i43 >> 2];
        var $40 = HEAP32[$m_jointCapacity_i >> 2];
        var $41 = HEAP32[$m_joints_i55 >> 2];
        var $stackCount_0_ph = 1;
        var $_pre_i15_ph = 0;
        var $_ph1 = 0;
        var $_ph = 0;
        $while_cond_outer$28 : while (1) {
          var $_ph;
          var $_ph1;
          var $_pre_i15_ph;
          var $stackCount_0_ph;
          var $stackCount_0 = $stackCount_0_ph;
          var $_pre_i15 = $_pre_i15_ph;
          while (1) {
            var $_pre_i15;
            var $stackCount_0;
            if (($stackCount_0 | 0) <= 0) {
              break $while_cond_outer$28;
            }
            var $dec = $stackCount_0 - 1 | 0;
            var $42 = HEAP32[$17 + ($dec << 2) >> 2];
            var $43$s1 = ($42 + 4 | 0) >> 1;
            if ((HEAP16[$43$s1] & 32) << 16 >> 16 == 0) {
              ___assert_func(STRING_TABLE.__str174 | 0, 445, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World5SolveERK10b2TimeStep | 0, STRING_TABLE.__str4178 | 0);
            }
            if (($_pre_i15 | 0) >= ($36 | 0)) {
              ___assert_func(STRING_TABLE.__str25202 | 0, 54, STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP6b2Body | 0, STRING_TABLE.__str28205 | 0);
            }
            var $m_islandIndex_i = $42 + 8 | 0;
            HEAP32[$m_islandIndex_i >> 2] = $_pre_i15;
            var $arrayidx_i = ($_pre_i15 << 2) + $37 | 0;
            HEAP32[$arrayidx_i >> 2] = $42;
            var $inc_i18 = $_pre_i15 + 1 | 0;
            HEAP32[$m_bodyCount_i$s2] = $inc_i18;
            var $45 = HEAP16[$43$s1];
            if (($45 & 2) << 16 >> 16 == 0) {
              var $or_i = $45 | 2;
              HEAP16[$43$s1] = $or_i;
              HEAPF32[$42 + 144 >> 2] = 0;
            }
            if ((HEAP32[$42 >> 2] | 0) != 0) {
              break;
            }
            var $stackCount_0 = $dec;
            var $_pre_i15 = $inc_i18;
          }
          var $ce_0_in = $42 + 112 | 0;
          var $stackCount_1 = $dec;
          var $_pre_i40 = $_ph;
          while (1) {
            var $_pre_i40;
            var $stackCount_1;
            var $ce_0_in;
            var $ce_0 = HEAP32[$ce_0_in >> 2];
            if (($ce_0 | 0) == 0) {
              break;
            }
            var $48 = HEAP32[$ce_0 + 4 >> 2];
            var $m_flags69$s2 = ($48 + 4 | 0) >> 2;
            var $51 = (HEAP32[$m_flags69$s2] & 7 | 0) == 6;
            do {
              if ($51) {
                if ((HEAP8[HEAP32[$48 + 48 >> 2] + 38 | 0] & 1) << 24 >> 24 != 0) {
                  var $stackCount_2 = $stackCount_1;
                  var $62 = $_pre_i40;
                  break;
                }
                if ((HEAP8[HEAP32[$48 + 52 >> 2] + 38 | 0] & 1) << 24 >> 24 != 0) {
                  var $stackCount_2 = $stackCount_1;
                  var $62 = $_pre_i40;
                  break;
                }
                if (($_pre_i40 | 0) >= ($38 | 0)) {
                  ___assert_func(STRING_TABLE.__str25202 | 0, 62, STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP9b2Contact | 0, STRING_TABLE.__str27204 | 0);
                }
                var $inc_i42 = $_pre_i40 + 1 | 0;
                HEAP32[$m_contactCount_i >> 2] = $inc_i42;
                var $arrayidx_i44 = ($_pre_i40 << 2) + $39 | 0;
                HEAP32[$arrayidx_i44 >> 2] = $48;
                var $or96 = HEAP32[$m_flags69$s2] | 1;
                HEAP32[$m_flags69$s2] = $or96;
                var $59 = HEAP32[$ce_0 >> 2];
                var $m_flags98$s1 = ($59 + 4 | 0) >> 1;
                if ((HEAP16[$m_flags98$s1] & 1) << 16 >> 16 != 0) {
                  var $stackCount_2 = $stackCount_1;
                  var $62 = $inc_i42;
                  break;
                }
                if (($stackCount_1 | 0) >= ($8 | 0)) {
                  ___assert_func(STRING_TABLE.__str174 | 0, 495, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World5SolveERK10b2TimeStep | 0, STRING_TABLE.__str5179 | 0);
                }
                var $arrayidx110 = ($stackCount_1 << 2) + $17 | 0;
                HEAP32[$arrayidx110 >> 2] = $59;
                var $or113 = HEAP16[$m_flags98$s1] | 1;
                HEAP16[$m_flags98$s1] = $or113;
                var $stackCount_2 = $stackCount_1 + 1 | 0;
                var $62 = $inc_i42;
              } else {
                var $stackCount_2 = $stackCount_1;
                var $62 = $_pre_i40;
              }
            } while (0);
            var $62;
            var $stackCount_2;
            var $ce_0_in = $ce_0 + 12 | 0;
            var $stackCount_1 = $stackCount_2;
            var $_pre_i40 = $62;
          }
          var $je_0_in = $42 + 108 | 0;
          var $stackCount_3 = $stackCount_1;
          var $_pre_i52 = $_ph1;
          while (1) {
            var $_pre_i52;
            var $stackCount_3;
            var $je_0_in;
            var $je_0 = HEAP32[$je_0_in >> 2];
            if (($je_0 | 0) == 0) {
              var $stackCount_0_ph = $stackCount_3;
              var $_pre_i15_ph = $inc_i18;
              var $_ph1 = $_pre_i52;
              var $_ph = $_pre_i40;
              continue $while_cond_outer$28;
            }
            var $joint = $je_0 + 4 | 0;
            var $63 = HEAP32[$joint >> 2];
            var $tobool122 = (HEAP8[$63 + 60 | 0] & 1) << 24 >> 24 == 0;
            do {
              if ($tobool122) {
                var $66 = HEAP32[$je_0 >> 2];
                var $67$s1 = ($66 + 4 | 0) >> 1;
                if ((HEAP16[$67$s1] & 32) << 16 >> 16 == 0) {
                  var $stackCount_4 = $stackCount_3;
                  var $72 = $_pre_i52;
                  break;
                }
                if (($_pre_i52 | 0) >= ($40 | 0)) {
                  ___assert_func(STRING_TABLE.__str25202 | 0, 68, STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP7b2Joint | 0, STRING_TABLE.__str26203 | 0);
                }
                var $inc_i54 = $_pre_i52 + 1 | 0;
                HEAP32[$m_jointCount_i >> 2] = $inc_i54;
                var $arrayidx_i56 = ($_pre_i52 << 2) + $41 | 0;
                HEAP32[$arrayidx_i56 >> 2] = $63;
                HEAP8[HEAP32[$joint >> 2] + 60 | 0] = 1;
                if ((HEAP16[$67$s1] & 1) << 16 >> 16 != 0) {
                  var $stackCount_4 = $stackCount_3;
                  var $72 = $inc_i54;
                  break;
                }
                if (($stackCount_3 | 0) >= ($8 | 0)) {
                  ___assert_func(STRING_TABLE.__str174 | 0, 524, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World5SolveERK10b2TimeStep | 0, STRING_TABLE.__str5179 | 0);
                }
                var $arrayidx151 = ($stackCount_3 << 2) + $17 | 0;
                HEAP32[$arrayidx151 >> 2] = $66;
                var $or154 = HEAP16[$67$s1] | 1;
                HEAP16[$67$s1] = $or154;
                var $stackCount_4 = $stackCount_3 + 1 | 0;
                var $72 = $inc_i54;
              } else {
                var $stackCount_4 = $stackCount_3;
                var $72 = $_pre_i52;
              }
            } while (0);
            var $72;
            var $stackCount_4;
            var $je_0_in = $je_0 + 12 | 0;
            var $stackCount_3 = $stackCount_4;
            var $_pre_i52 = $72;
          }
        }
        var $tobool159 = (HEAP8[$m_allowSleep] & 1) << 24 >> 24 != 0;
        __ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b($4, $18, $19, $m_gravity, $tobool159);
        var $add = HEAPF32[$solveInit$s2] + HEAPF32[$solveInit161 >> 2];
        HEAPF32[$solveInit$s2] = $add;
        var $add167 = HEAPF32[$solveVelocity$s2] + HEAPF32[$solveVelocity164 >> 2];
        HEAPF32[$solveVelocity$s2] = $add167;
        var $add171 = HEAPF32[$solvePosition$s2] + HEAPF32[$solvePosition168 >> 2];
        HEAPF32[$solvePosition$s2] = $add171;
        var $81 = HEAP32[$m_bodyCount_i$s2];
        if (($81 | 0) <= 0) {
          break;
        }
        var $_pre = HEAP32[$m_bodies_i17$s2];
        var $i_085 = 0;
        while (1) {
          var $i_085;
          var $82 = HEAP32[$_pre + ($i_085 << 2) >> 2];
          if ((HEAP32[$82 >> 2] | 0) == 0) {
            var $m_flags182 = $82 + 4 | 0;
            var $and184 = HEAP16[$m_flags182 >> 1] & -2;
            HEAP16[$m_flags182 >> 1] = $and184;
          }
          var $inc188 = $i_085 + 1 | 0;
          if (($inc188 | 0) >= ($81 | 0)) {
            break $if_end39$$for_inc190$25;
          }
          var $i_085 = $inc188;
        }
      }
    } while (0);
    var $seed_0_in = $seed_0 + 96 | 0;
  }
  __ZN16b2StackAllocator4FreeEPv($m_stackAllocator, $16);
  var $call_i_i6263 = _gettimeofday($t_i_i, 0);
  var $86 = HEAP32[$t_i_i >> 2];
  var $mul_i_i = (HEAP32[$t_i_i + 4 >> 2] | 0) * .0010000000474974513;
  var $conv2_i_i = $mul_i_i >= 0 ? Math.floor($mul_i_i) : Math.ceil($mul_i_i);
  var $s_i_i = $xf1_i + 8 | 0;
  var $c_i_i = $xf1_i + 12 | 0;
  var $89 = $xf1_i;
  var $b196_0_in = $m_bodyList;
  while (1) {
    var $b196_0_in;
    var $b196_0 = HEAP32[$b196_0_in >> 2];
    if (($b196_0 | 0) == 0) {
      break;
    }
    var $cmp204 = (HEAP16[$b196_0 + 4 >> 1] & 1) << 16 >> 16 == 0;
    $for_inc213$$if_end206$88 : do {
      if (!$cmp204) {
        if ((HEAP32[$b196_0 >> 2] | 0) == 0) {
          break;
        }
        var $93 = HEAPF32[$b196_0 + 52 >> 2];
        var $call_i_i66 = _sinf($93);
        HEAPF32[$s_i_i >> 2] = $call_i_i66;
        var $call2_i_i = _cosf($93);
        HEAPF32[$c_i_i >> 2] = $call2_i_i;
        var $95 = HEAPF32[$b196_0 + 28 >> 2];
        var $97 = HEAPF32[$b196_0 + 32 >> 2];
        var $sub3_i_i = HEAPF32[$b196_0 + 40 >> 2] - ($call_i_i66 * $95 + $call2_i_i * $97);
        var $102 = (tempDoubleF32[0] = HEAPF32[$b196_0 + 36 >> 2] - ($call2_i_i * $95 - $call_i_i66 * $97), tempDoubleI32[0]);
        var $103$0 = $102;
        var $104 = (tempDoubleF32[0] = $sub3_i_i, tempDoubleI32[0]);
        var $107$0 = 0 | $103$0;
        var $107$1 = $104 | 0;
        HEAP32[$89 >> 2] = $107$0;
        HEAP32[$89 + 4 >> 2] = $107$1;
        var $109 = HEAP32[$b196_0 + 88 >> 2] + 102872 | 0;
        var $110 = HEAP32[$b196_0 + 100 >> 2];
        if (($110 | 0) == 0) {
          break;
        }
        var $111 = $b196_0 + 12 | 0;
        var $f_011_i = $110;
        while (1) {
          var $f_011_i;
          __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($f_011_i, $109, $xf1_i, $111);
          var $f_0_i = HEAP32[$f_011_i + 4 >> 2];
          if (($f_0_i | 0) == 0) {
            break $for_inc213$$if_end206$88;
          }
          var $f_011_i = $f_0_i;
        }
      }
    } while (0);
    var $b196_0_in = $b196_0 + 96 | 0;
  }
  var $112 = $m_contactManager;
  var $m_broadPhase_i = $m_contactManager;
  __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($m_broadPhase_i, $112);
  var $call_i61 = _gettimeofday($t_i, 0);
  HEAPF32[$this$s2 + 25755] = (((HEAP32[$t_i >> 2] - $86) * 1e3 | 0) >>> 0) + (HEAP32[$t_i + 4 >> 2] | 0) * .0010000000474974513 - ($conv2_i_i >>> 0);
  var $116 = HEAPU32[$island$s2];
  var $118 = HEAP32[$island$s2 + 5];
  __ZN16b2StackAllocator4FreeEPv($116, $118);
  var $120 = HEAP32[$island$s2 + 6];
  __ZN16b2StackAllocator4FreeEPv($116, $120);
  var $122 = HEAP32[$m_joints_i55 >> 2];
  __ZN16b2StackAllocator4FreeEPv($116, $122);
  var $124 = HEAP32[$m_contacts_i43 >> 2];
  __ZN16b2StackAllocator4FreeEPv($116, $124);
  var $126 = HEAP32[$m_bodies_i17$s2];
  __ZN16b2StackAllocator4FreeEPv($116, $126);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN7b2World8SolveTOIERK10b2TimeStep($this, $step) {
  var $47$s2;
  var $45$s2;
  var $m_flags_i$s2;
  var $278$s2;
  var $m_flags255$s1;
  var $m_sweep254_5$s2;
  var $m_sweep254_4$s2;
  var $m_sweep254_3$s2;
  var $m_sweep254_2_1$s2;
  var $m_sweep254_2_0$s2;
  var $m_sweep254_1_1$s2;
  var $m_sweep254_1_0$s2;
  var $m_sweep25421_1$s2;
  var $m_sweep25421_0$s2;
  var $m_flags224$s2;
  var $189$s1;
  var $186$s1;
  var $m_flags172$s2;
  var $st$31$1$s2;
  var $st$31$0$s2;
  var $109$s2;
  var $108$s2;
  var $107$s2;
  var $106$s2;
  var $105$s2;
  var $104$s2;
  var $102$s2;
  var $101$s2;
  var $100$s2;
  var $99$s2;
  var $98$s2;
  var $97$s2;
  var $96$s2;
  var $95$s2;
  var $93$s2;
  var $92$s2;
  var $c14_0$s2;
  var $m_contacts_i344$s2;
  var $m_bodies_i322$s2;
  var $m_contactCount_i315$s2;
  var $m_bodyCount_i314$s2;
  var $c_0398$s2;
  var $m_contactListener$s2;
  var $island$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 240;
  var __label__;
  var $xf1_i = __stackBase__;
  var $island = __stackBase__ + 16, $island$s2 = $island >> 2;
  var $input = __stackBase__ + 68;
  var $output = __stackBase__ + 200;
  var $bodies = __stackBase__ + 208;
  var $subStep = __stackBase__ + 216;
  var $m_stackAllocator = $this + 68 | 0;
  var $m_contactManager = $this + 102872 | 0;
  var $m_contactListener$s2 = ($this + 102944 | 0) >> 2;
  var $1 = $island;
  var $2 = HEAP32[$m_contactListener$s2];
  __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($1, 64, 32, 0, $m_stackAllocator, $2);
  var $m_stepComplete = $this + 102995 | 0;
  var $tobool = (HEAP8[$m_stepComplete] & 1) << 24 >> 24 == 0;
  $entry_for_cond13_preheader_crit_edge$$if_then$2 : do {
    if ($tobool) {
      var $m_contactList16_pre_phi = $this + 102932 | 0;
    } else {
      var $b_0399 = HEAP32[$this + 102952 >> 2];
      var $tobool2400 = ($b_0399 | 0) == 0;
      $for_end$$for_body$5 : do {
        if (!$tobool2400) {
          var $b_0401 = $b_0399;
          while (1) {
            var $b_0401;
            var $m_flags = $b_0401 + 4 | 0;
            var $and = HEAP16[$m_flags >> 1] & -2;
            HEAP16[$m_flags >> 1] = $and;
            HEAPF32[$b_0401 + 60 >> 2] = 0;
            var $b_0 = HEAP32[$b_0401 + 96 >> 2];
            if (($b_0 | 0) == 0) {
              break $for_end$$for_body$5;
            }
            var $b_0401 = $b_0;
          }
        }
      } while (0);
      var $m_contactList = $this + 102932 | 0;
      var $c_0396 = HEAP32[$m_contactList >> 2];
      if (($c_0396 | 0) == 0) {
        var $m_contactList16_pre_phi = $m_contactList;
        break;
      }
      var $c_0398 = $c_0396, $c_0398$s2 = $c_0398 >> 2;
      while (1) {
        var $c_0398;
        var $m_flags8 = $c_0398 + 4 | 0;
        var $and9 = HEAP32[$m_flags8 >> 2] & -34;
        HEAP32[$m_flags8 >> 2] = $and9;
        HEAP32[$c_0398$s2 + 32] = 0;
        HEAPF32[$c_0398$s2 + 33] = 1;
        var $c_0 = HEAP32[$c_0398$s2 + 3];
        if (($c_0 | 0) == 0) {
          var $m_contactList16_pre_phi = $m_contactList;
          break $entry_for_cond13_preheader_crit_edge$$if_then$2;
        }
        var $c_0398 = $c_0, $c_0398$s2 = $c_0398 >> 2;
      }
    }
  } while (0);
  var $m_contactList16_pre_phi;
  var $m_vertices_i_i_i_i = $input + 16 | 0;
  var $m_count_i_i_i_i = $input + 20 | 0;
  var $m_radius_i_i_i_i = $input + 24 | 0;
  var $m_vertices_i_i1_i_i = $input + 44 | 0;
  var $m_count_i_i2_i_i = $input + 48 | 0;
  var $m_radius_i_i3_i_i = $input + 52 | 0;
  var $proxyA = $input | 0;
  var $proxyB = $input + 28 | 0;
  var $7 = $input + 56 | 0;
  var $8 = $input + 92 | 0;
  var $tMax = $input + 128 | 0;
  var $state = $output | 0;
  var $t = $output + 4 | 0;
  var $m_bodyCount_i314$s2 = ($island + 28 | 0) >> 2;
  var $m_contactCount_i315$s2 = ($island + 36 | 0) >> 2;
  var $m_jointCount_i = $island + 32 | 0;
  var $m_bodyCapacity_i317 = $island + 40 | 0;
  var $m_bodies_i322$s2 = ($island + 8 | 0) >> 2;
  var $m_contactCapacity_i339 = $island + 44 | 0;
  var $m_contacts_i344$s2 = ($island + 12 | 0) >> 2;
  var $arrayinit_begin = $bodies | 0;
  var $arrayinit_element = $bodies + 4 | 0;
  var $dt = $step | 0;
  var $dt308 = $subStep | 0;
  var $inv_dt = $subStep + 4 | 0;
  var $dtRatio = $subStep + 8 | 0;
  var $positionIterations = $subStep + 16 | 0;
  var $velocityIterations = $step + 12 | 0;
  var $velocityIterations310 = $subStep + 12 | 0;
  var $warmStarting = $subStep + 20 | 0;
  var $9 = $subStep;
  var $s_i_i = $xf1_i + 8 | 0;
  var $c_i_i = $xf1_i + 12 | 0;
  var $11 = $xf1_i;
  var $12 = $m_contactManager;
  var $m_broadPhase_i = $m_contactManager;
  var $m_subStepping = $this + 102994 | 0;
  var $minContact_0 = 0;
  var $minAlpha_0 = 1;
  var $c14_0_in = $m_contactList16_pre_phi;
  while (1) {
    var $c14_0_in;
    var $minAlpha_0;
    var $minContact_0;
    var $c14_0 = HEAP32[$c14_0_in >> 2], $c14_0$s2 = $c14_0 >> 2;
    if (($c14_0 | 0) == 0) {
      if (($minContact_0 | 0) == 0 | $minAlpha_0 > .9999988079071045) {
        var $storemerge = 1;
        var $305 = HEAP32[$m_bodies_i322$s2];
        break;
      }
      var $90 = HEAP32[HEAP32[$minContact_0 + 48 >> 2] + 8 >> 2];
      var $91 = HEAP32[HEAP32[$minContact_0 + 52 >> 2] + 8 >> 2];
      var $92$s2 = ($90 + 28 | 0) >> 2;
      var $tmp65 = HEAPF32[$92$s2];
      var $93$s2 = ($90 + 32 | 0) >> 2;
      var $tmp66 = HEAPF32[$93$s2];
      var $94 = $90 + 36 | 0;
      var $tmp60 = HEAPF32[$94 >> 2];
      var $95$s2 = ($90 + 40 | 0) >> 2;
      var $tmp61 = HEAPF32[$95$s2];
      var $96$s2 = ($90 + 44 | 0) >> 2;
      var $tmp56 = HEAPF32[$96$s2];
      var $97$s2 = ($90 + 48 | 0) >> 2;
      var $tmp57 = HEAPF32[$97$s2];
      var $98$s2 = ($90 + 52 | 0) >> 2;
      var $tmp53 = HEAPF32[$98$s2];
      var $99$s2 = ($90 + 56 | 0) >> 2;
      var $tmp54 = HEAPF32[$99$s2];
      var $100$s2 = ($90 + 60 | 0) >> 2;
      var $tmp55 = HEAPF32[$100$s2];
      var $101$s2 = ($91 + 28 | 0) >> 2;
      var $tmp45 = HEAPF32[$101$s2];
      var $102$s2 = ($91 + 32 | 0) >> 2;
      var $tmp46 = HEAPF32[$102$s2];
      var $103 = $91 + 36 | 0;
      var $tmp40 = HEAPF32[$103 >> 2];
      var $104$s2 = ($91 + 40 | 0) >> 2;
      var $tmp41 = HEAPF32[$104$s2];
      var $105$s2 = ($91 + 44 | 0) >> 2;
      var $tmp36 = HEAPF32[$105$s2];
      var $106$s2 = ($91 + 48 | 0) >> 2;
      var $tmp37 = HEAPF32[$106$s2];
      var $107$s2 = ($91 + 52 | 0) >> 2;
      var $tmp33 = HEAPF32[$107$s2];
      var $108$s2 = ($91 + 56 | 0) >> 2;
      var $tmp34 = HEAPF32[$108$s2];
      var $109$s2 = ($91 + 60 | 0) >> 2;
      var $tmp35 = HEAPF32[$109$s2];
      if ($tmp55 < 1) {
        var $118 = $tmp55;
        var $117 = $tmp60;
        var $116 = $tmp61;
        var $115 = $tmp56;
        var $114 = $tmp57;
        var $113 = $tmp53;
        var $112 = $tmp54;
        var $111 = $tmp65;
        var $110 = $tmp66;
        var $c0_i_i_pre_phi = $90 + 36 | 0;
      } else {
        ___assert_func(STRING_TABLE.__str24201 | 0, 723, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Sweep7AdvanceEf | 0, STRING_TABLE.__str7181 | 0);
        var $c0_i_i_phi_trans_insert = $90 + 36 | 0;
        var $118 = HEAPF32[$100$s2];
        var $117 = HEAPF32[$c0_i_i_phi_trans_insert >> 2];
        var $116 = HEAPF32[$95$s2];
        var $115 = HEAPF32[$96$s2];
        var $114 = HEAPF32[$97$s2];
        var $113 = HEAPF32[$98$s2];
        var $112 = HEAPF32[$99$s2];
        var $111 = HEAPF32[$92$s2];
        var $110 = HEAPF32[$93$s2];
        var $c0_i_i_pre_phi = $c0_i_i_phi_trans_insert;
      }
      var $c0_i_i_pre_phi;
      var $110;
      var $111;
      var $112;
      var $113;
      var $114;
      var $115;
      var $116;
      var $117;
      var $118;
      var $div_i_i = ($minAlpha_0 - $118) / (1 - $118);
      var $sub6_i_i = 1 - $div_i_i;
      var $add_i_i_i = $117 * $sub6_i_i + $115 * $div_i_i;
      var $add3_i_i_i = $116 * $sub6_i_i + $114 * $div_i_i;
      var $119 = $c0_i_i_pre_phi;
      var $120 = (tempDoubleF32[0] = $add_i_i_i, tempDoubleI32[0]);
      var $121$0 = $120;
      var $122 = (tempDoubleF32[0] = $add3_i_i_i, tempDoubleI32[0]);
      var $125$0 = 0 | $121$0;
      var $125$1 = $122 | 0;
      var $st$31$0 = $119 | 0, $st$31$0$s2 = $st$31$0 >> 2;
      HEAP32[$st$31$0$s2] = $125$0;
      var $st$31$1 = $119 + 4 | 0, $st$31$1$s2 = $st$31$1 >> 2;
      HEAP32[$st$31$1$s2] = $125$1;
      var $add_i_i199 = $sub6_i_i * $113 + $div_i_i * $112;
      HEAPF32[$98$s2] = $add_i_i199;
      HEAPF32[$100$s2] = $minAlpha_0;
      var $126 = $90 + 44 | 0;
      var $st$42$0 = $126 | 0;
      HEAP32[$st$42$0 >> 2] = $125$0;
      var $st$42$1 = $126 + 4 | 0;
      HEAP32[$st$42$1 >> 2] = $125$1;
      HEAPF32[$99$s2] = $add_i_i199;
      var $call_i_i200 = _sinf($add_i_i199);
      var $s_i_i201 = $90 + 20 | 0;
      HEAPF32[$s_i_i201 >> 2] = $call_i_i200;
      var $call2_i_i202 = _cosf($add_i_i199);
      var $c_i_i203 = $90 + 24 | 0;
      HEAPF32[$c_i_i203 >> 2] = $call2_i_i202;
      var $sub3_i_i211 = $add3_i_i_i - ($call_i_i200 * $111 + $call2_i_i202 * $110);
      var $127 = $90 + 12 | 0;
      var $128 = (tempDoubleF32[0] = $add_i_i_i - ($call2_i_i202 * $111 - $call_i_i200 * $110), tempDoubleI32[0]);
      var $129$0 = $128;
      var $130 = (tempDoubleF32[0] = $sub3_i_i211, tempDoubleI32[0]);
      var $133$1 = $130 | 0;
      var $st$73$0 = $127 | 0;
      HEAP32[$st$73$0 >> 2] = 0 | $129$0;
      var $st$73$1 = $127 + 4 | 0;
      HEAP32[$st$73$1 >> 2] = $133$1;
      var $134 = HEAPF32[$109$s2];
      if ($134 < 1) {
        var $135 = $134;
      } else {
        ___assert_func(STRING_TABLE.__str24201 | 0, 723, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Sweep7AdvanceEf | 0, STRING_TABLE.__str7181 | 0);
        var $135 = HEAPF32[$109$s2];
      }
      var $135;
      var $div_i_i219 = ($minAlpha_0 - $135) / (1 - $135);
      var $c0_i_i220 = $91 + 36 | 0;
      var $sub6_i_i221 = 1 - $div_i_i219;
      var $add_i_i_i230 = HEAPF32[$c0_i_i220 >> 2] * $sub6_i_i221 + HEAPF32[$105$s2] * $div_i_i219;
      var $add3_i_i_i231 = HEAPF32[$104$s2] * $sub6_i_i221 + HEAPF32[$106$s2] * $div_i_i219;
      var $140 = $c0_i_i220;
      var $141 = (tempDoubleF32[0] = $add_i_i_i230, tempDoubleI32[0]);
      var $142$0 = $141;
      var $143 = (tempDoubleF32[0] = $add3_i_i_i231, tempDoubleI32[0]);
      var $146$0 = 0 | $142$0;
      var $146$1 = $143 | 0;
      var $st$28$0 = $140 | 0;
      HEAP32[$st$28$0 >> 2] = $146$0;
      var $st$28$1 = $140 + 4 | 0;
      HEAP32[$st$28$1 >> 2] = $146$1;
      var $add_i_i236 = $sub6_i_i221 * HEAPF32[$107$s2] + $div_i_i219 * HEAPF32[$108$s2];
      HEAPF32[$107$s2] = $add_i_i236;
      HEAPF32[$109$s2] = $minAlpha_0;
      var $149 = $91 + 44 | 0;
      var $st$41$0 = $149 | 0;
      HEAP32[$st$41$0 >> 2] = $146$0;
      var $st$41$1 = $149 + 4 | 0;
      HEAP32[$st$41$1 >> 2] = $146$1;
      HEAPF32[$108$s2] = $add_i_i236;
      var $call_i_i238 = _sinf($add_i_i236);
      var $s_i_i239 = $91 + 20 | 0;
      HEAPF32[$s_i_i239 >> 2] = $call_i_i238;
      var $call2_i_i240 = _cosf($add_i_i236);
      var $c_i_i241 = $91 + 24 | 0;
      HEAPF32[$c_i_i241 >> 2] = $call2_i_i240;
      var $150 = HEAPF32[$101$s2];
      var $151 = HEAPF32[$102$s2];
      var $sub3_i_i252 = $add3_i_i_i231 - ($call_i_i238 * $150 + $call2_i_i240 * $151);
      var $152 = $91 + 12 | 0;
      var $153 = (tempDoubleF32[0] = $add_i_i_i230 - ($call2_i_i240 * $150 - $call_i_i238 * $151), tempDoubleI32[0]);
      var $154$0 = $153;
      var $155 = (tempDoubleF32[0] = $sub3_i_i252, tempDoubleI32[0]);
      var $158$0 = 0 | $154$0;
      var $158$1 = $155 | 0;
      var $st$74$0 = $152 | 0;
      HEAP32[$st$74$0 >> 2] = $158$0;
      var $st$74$1 = $152 + 4 | 0;
      HEAP32[$st$74$1 >> 2] = $158$1;
      var $159 = HEAP32[$m_contactListener$s2];
      __ZN9b2Contact6UpdateEP17b2ContactListener($minContact_0, $159);
      var $m_flags172$s2 = ($minContact_0 + 4 | 0) >> 2;
      var $160 = HEAP32[$m_flags172$s2];
      var $and173 = $160 & -33;
      HEAP32[$m_flags172$s2] = $and173;
      var $m_toiCount174 = $minContact_0 + 128 | 0;
      var $inc = HEAP32[$m_toiCount174 >> 2] + 1 | 0;
      HEAP32[$m_toiCount174 >> 2] = $inc;
      if (($160 & 6 | 0) == 6) {
        var $186$s1 = ($90 + 4 | 0) >> 1;
        var $187 = HEAP16[$186$s1];
        if (($187 & 2) << 16 >> 16 == 0) {
          var $or_i303 = $187 | 2;
          HEAP16[$186$s1] = $or_i303;
          HEAPF32[$90 + 144 >> 2] = 0;
        }
        var $189$s1 = ($91 + 4 | 0) >> 1;
        var $190 = HEAP16[$189$s1];
        if (($190 & 2) << 16 >> 16 == 0) {
          var $or_i310 = $190 | 2;
          HEAP16[$189$s1] = $or_i310;
          HEAPF32[$91 + 144 >> 2] = 0;
        }
        HEAP32[$m_bodyCount_i314$s2] = 0;
        HEAP32[$m_contactCount_i315$s2] = 0;
        HEAP32[$m_jointCount_i >> 2] = 0;
        var $192 = HEAP32[$m_bodyCapacity_i317 >> 2];
        var $cmp_i318 = ($192 | 0) > 0;
        do {
          if (!$cmp_i318) {
            ___assert_func(STRING_TABLE.__str25202 | 0, 54, STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP6b2Body | 0, STRING_TABLE.__str28205 | 0);
            var $m_islandIndex_i321433 = $90 + 8 | 0;
            HEAP32[$m_islandIndex_i321433 >> 2] = 0;
            var $193 = HEAP32[$m_bodies_i322$s2];
            HEAP32[$193 >> 2] = $90;
            HEAP32[$m_bodyCount_i314$s2] = 1;
            var $m_islandIndex_i321435 = $m_islandIndex_i321433;
            var $195 = $193;
            __label__ = 68;
            break;
          }
          var $m_islandIndex_i321 = $90 + 8 | 0;
          HEAP32[$m_islandIndex_i321 >> 2] = 0;
          var $194 = HEAP32[$m_bodies_i322$s2];
          HEAP32[$194 >> 2] = $90;
          HEAP32[$m_bodyCount_i314$s2] = 1;
          if (($192 | 0) > 1) {
            var $m_islandIndex_i321436 = $m_islandIndex_i321;
            var $196 = $194;
            __label__ = 69;
            break;
          }
          var $m_islandIndex_i321435 = $m_islandIndex_i321;
          var $195 = $194;
          __label__ = 68;
          break;
        } while (0);
        if (__label__ == 68) {
          var $195;
          var $m_islandIndex_i321435;
          ___assert_func(STRING_TABLE.__str25202 | 0, 54, STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP6b2Body | 0, STRING_TABLE.__str28205 | 0);
          var $m_islandIndex_i321436 = $m_islandIndex_i321435;
          var $196 = $195;
        }
        var $196;
        var $m_islandIndex_i321436;
        var $m_islandIndex_i332 = $91 + 8 | 0;
        HEAP32[$m_islandIndex_i332 >> 2] = 1;
        HEAP32[$196 + 4 >> 2] = $91;
        HEAP32[$m_bodyCount_i314$s2] = 2;
        if ((HEAP32[$m_contactCapacity_i339 >> 2] | 0) <= 0) {
          ___assert_func(STRING_TABLE.__str25202 | 0, 62, STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP9b2Contact | 0, STRING_TABLE.__str27204 | 0);
        }
        HEAP32[$m_contactCount_i315$s2] = 1;
        var $198 = HEAP32[$m_contacts_i344$s2];
        HEAP32[$198 >> 2] = $minContact_0;
        var $or199 = HEAP16[$186$s1] | 1;
        HEAP16[$186$s1] = $or199;
        var $or203 = HEAP16[$189$s1] | 1;
        HEAP16[$189$s1] = $or203;
        var $or206 = HEAP32[$m_flags172$s2] | 1;
        HEAP32[$m_flags172$s2] = $or206;
        HEAP32[$arrayinit_begin >> 2] = $90;
        HEAP32[$arrayinit_element >> 2] = $91;
        var $202 = HEAP32[$m_bodyCapacity_i317 >> 2];
        var $203 = HEAP32[$m_contactCapacity_i339 >> 2];
        var $204 = HEAP32[$m_contacts_i344$s2];
        var $205 = HEAP32[$m_bodies_i322$s2];
        var $i_0 = 0;
        while (1) {
          var $i_0;
          if (($i_0 | 0) >= 2) {
            break;
          }
          var $206 = HEAP32[$bodies + ($i_0 << 2) >> 2];
          var $cmp211 = (HEAP32[$206 >> 2] | 0) == 2;
          $if_then212$$for_inc303$50 : do {
            if ($cmp211) {
              var $m_flags_i348 = $206 + 4 | 0;
              var $ce_0_in = $206 + 112 | 0;
              while (1) {
                var $ce_0_in;
                var $ce_0 = HEAP32[$ce_0_in >> 2];
                if (($ce_0 | 0) == 0) {
                  break $if_then212$$for_inc303$50;
                }
                var $208 = HEAP32[$m_bodyCount_i314$s2];
                if (($208 | 0) == ($202 | 0)) {
                  break $if_then212$$for_inc303$50;
                }
                var $209 = HEAP32[$m_contactCount_i315$s2];
                if (($209 | 0) == ($203 | 0)) {
                  break $if_then212$$for_inc303$50;
                }
                var $210 = HEAP32[$ce_0 + 4 >> 2];
                var $m_flags224$s2 = ($210 + 4 | 0) >> 2;
                var $tobool226 = (HEAP32[$m_flags224$s2] & 1 | 0) == 0;
                $if_end228$$for_inc300$57 : do {
                  if ($tobool226) {
                    var $212 = HEAP32[$ce_0 >> 2];
                    var $m_type230 = $212 | 0;
                    var $cmp231 = (HEAP32[$m_type230 >> 2] | 0) == 2;
                    do {
                      if ($cmp231) {
                        if ((HEAP16[$m_flags_i348 >> 1] & 8) << 16 >> 16 != 0) {
                          break;
                        }
                        if ((HEAP16[$212 + 4 >> 1] & 8) << 16 >> 16 == 0) {
                          break $if_end228$$for_inc300$57;
                        }
                      }
                    } while (0);
                    if ((HEAP8[HEAP32[$210 + 48 >> 2] + 38 | 0] & 1) << 24 >> 24 != 0) {
                      break;
                    }
                    if ((HEAP8[HEAP32[$210 + 52 >> 2] + 38 | 0] & 1) << 24 >> 24 != 0) {
                      break;
                    }
                    var $m_sweep25421_0$s2 = ($212 + 28 | 0) >> 2;
                    var $tmp22 = HEAPF32[$m_sweep25421_0$s2];
                    var $m_sweep25421_1$s2 = ($212 + 32 | 0) >> 2;
                    var $tmp23 = HEAPF32[$m_sweep25421_1$s2];
                    var $m_sweep254_1_0$s2 = ($212 + 36 | 0) >> 2;
                    var $tmp15 = HEAPF32[$m_sweep254_1_0$s2];
                    var $m_sweep254_1_1$s2 = ($212 + 40 | 0) >> 2;
                    var $tmp16 = HEAPF32[$m_sweep254_1_1$s2];
                    var $m_sweep254_2_0$s2 = ($212 + 44 | 0) >> 2;
                    var $tmp9 = HEAPF32[$m_sweep254_2_0$s2];
                    var $m_sweep254_2_1$s2 = ($212 + 48 | 0) >> 2;
                    var $tmp10 = HEAPF32[$m_sweep254_2_1$s2];
                    var $m_sweep254_3$s2 = ($212 + 52 | 0) >> 2;
                    var $tmp6 = HEAPF32[$m_sweep254_3$s2];
                    var $m_sweep254_4$s2 = ($212 + 56 | 0) >> 2;
                    var $tmp7 = HEAPF32[$m_sweep254_4$s2];
                    var $m_sweep254_5$s2 = ($212 + 60 | 0) >> 2;
                    var $tmp8 = HEAPF32[$m_sweep254_5$s2];
                    var $m_flags255$s1 = ($212 + 4 | 0) >> 1;
                    if ((HEAP16[$m_flags255$s1] & 1) << 16 >> 16 == 0) {
                      if ($tmp8 < 1) {
                        var $231 = $tmp8;
                        var $230 = $tmp15;
                        var $229 = $tmp16;
                        var $228 = $tmp9;
                        var $227 = $tmp10;
                        var $226 = $tmp6;
                        var $225 = $tmp7;
                        var $224 = $tmp22;
                        var $223 = $tmp23;
                        var $c0_i_i358_pre_phi = $212 + 36 | 0;
                      } else {
                        ___assert_func(STRING_TABLE.__str24201 | 0, 723, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Sweep7AdvanceEf | 0, STRING_TABLE.__str7181 | 0);
                        var $c0_i_i358_phi_trans_insert = $212 + 36 | 0;
                        var $231 = HEAPF32[$m_sweep254_5$s2];
                        var $230 = HEAPF32[$c0_i_i358_phi_trans_insert >> 2];
                        var $229 = HEAPF32[$m_sweep254_1_1$s2];
                        var $228 = HEAPF32[$m_sweep254_2_0$s2];
                        var $227 = HEAPF32[$m_sweep254_2_1$s2];
                        var $226 = HEAPF32[$m_sweep254_3$s2];
                        var $225 = HEAPF32[$m_sweep254_4$s2];
                        var $224 = HEAPF32[$m_sweep25421_0$s2];
                        var $223 = HEAPF32[$m_sweep25421_1$s2];
                        var $c0_i_i358_pre_phi = $c0_i_i358_phi_trans_insert;
                      }
                      var $c0_i_i358_pre_phi;
                      var $223;
                      var $224;
                      var $225;
                      var $226;
                      var $227;
                      var $228;
                      var $229;
                      var $230;
                      var $231;
                      var $div_i_i357 = ($minAlpha_0 - $231) / (1 - $231);
                      var $sub6_i_i359 = 1 - $div_i_i357;
                      var $add_i_i_i368 = $230 * $sub6_i_i359 + $228 * $div_i_i357;
                      var $add3_i_i_i369 = $229 * $sub6_i_i359 + $227 * $div_i_i357;
                      var $232 = $c0_i_i358_pre_phi;
                      var $233 = (tempDoubleF32[0] = $add_i_i_i368, tempDoubleI32[0]);
                      var $234$0 = $233;
                      var $235 = (tempDoubleF32[0] = $add3_i_i_i369, tempDoubleI32[0]);
                      var $238$0 = 0 | $234$0;
                      var $238$1 = $235 | 0;
                      var $st$31$0 = $232 | 0, $st$31$0$s2 = $st$31$0 >> 2;
                      HEAP32[$st$31$0$s2] = $238$0;
                      var $st$31$1 = $232 + 4 | 0, $st$31$1$s2 = $st$31$1 >> 2;
                      HEAP32[$st$31$1$s2] = $238$1;
                      var $add_i_i374 = $sub6_i_i359 * $226 + $div_i_i357 * $225;
                      HEAPF32[$m_sweep254_3$s2] = $add_i_i374;
                      HEAPF32[$m_sweep254_5$s2] = $minAlpha_0;
                      var $239 = $212 + 44 | 0;
                      var $st$42$0 = $239 | 0;
                      HEAP32[$st$42$0 >> 2] = $238$0;
                      var $st$42$1 = $239 + 4 | 0;
                      HEAP32[$st$42$1 >> 2] = $238$1;
                      HEAPF32[$m_sweep254_4$s2] = $add_i_i374;
                      var $call_i_i376 = _sinf($add_i_i374);
                      HEAPF32[$212 + 20 >> 2] = $call_i_i376;
                      var $call2_i_i378 = _cosf($add_i_i374);
                      HEAPF32[$212 + 24 >> 2] = $call2_i_i378;
                      var $sub3_i_i390 = $add3_i_i_i369 - ($call_i_i376 * $224 + $call2_i_i378 * $223);
                      var $240 = $212 + 12 | 0;
                      var $241 = (tempDoubleF32[0] = $add_i_i_i368 - ($call2_i_i378 * $224 - $call_i_i376 * $223), tempDoubleI32[0]);
                      var $242$0 = $241;
                      var $243 = (tempDoubleF32[0] = $sub3_i_i390, tempDoubleI32[0]);
                      var $246$1 = $243 | 0;
                      var $st$73$0 = $240 | 0;
                      HEAP32[$st$73$0 >> 2] = 0 | $242$0;
                      var $st$73$1 = $240 + 4 | 0;
                      HEAP32[$st$73$1 >> 2] = $246$1;
                    }
                    var $247 = HEAP32[$m_contactListener$s2];
                    __ZN9b2Contact6UpdateEP17b2ContactListener($210, $247);
                    var $248 = HEAP32[$m_flags224$s2];
                    if (($248 & 4 | 0) == 0) {
                      HEAPF32[$m_sweep25421_0$s2] = $tmp22;
                      HEAPF32[$m_sweep25421_1$s2] = $tmp23;
                      HEAPF32[$m_sweep254_1_0$s2] = $tmp15;
                      HEAPF32[$m_sweep254_1_1$s2] = $tmp16;
                      HEAPF32[$m_sweep254_2_0$s2] = $tmp9;
                      HEAPF32[$m_sweep254_2_1$s2] = $tmp10;
                      HEAPF32[$m_sweep254_3$s2] = $tmp6;
                      HEAPF32[$m_sweep254_4$s2] = $tmp7;
                      HEAPF32[$m_sweep254_5$s2] = $tmp8;
                      var $call_i_i175 = _sinf($tmp7);
                      HEAPF32[$212 + 20 >> 2] = $call_i_i175;
                      var $call2_i_i177 = _cosf($tmp7);
                      HEAPF32[$212 + 24 >> 2] = $call2_i_i177;
                      var $sub3_i_i191 = $tmp10 - ($call_i_i175 * $tmp22 + $call2_i_i177 * $tmp23);
                      var $252 = $212 + 12 | 0;
                      var $253 = (tempDoubleF32[0] = $tmp9 - ($call2_i_i177 * $tmp22 - $call_i_i175 * $tmp23), tempDoubleI32[0]);
                      var $254$0 = $253;
                      var $255 = (tempDoubleF32[0] = $sub3_i_i191, tempDoubleI32[0]);
                      var $258$1 = $255 | 0;
                      var $st$35$0 = $252 | 0;
                      HEAP32[$st$35$0 >> 2] = 0 | $254$0;
                      var $st$35$1 = $252 + 4 | 0;
                      HEAP32[$st$35$1 >> 2] = $258$1;
                    } else {
                      if (($248 & 2 | 0) == 0) {
                        HEAPF32[$m_sweep25421_0$s2] = $tmp22;
                        HEAPF32[$m_sweep25421_1$s2] = $tmp23;
                        HEAPF32[$m_sweep254_1_0$s2] = $tmp15;
                        HEAPF32[$m_sweep254_1_1$s2] = $tmp16;
                        HEAPF32[$m_sweep254_2_0$s2] = $tmp9;
                        HEAPF32[$m_sweep254_2_1$s2] = $tmp10;
                        HEAPF32[$m_sweep254_3$s2] = $tmp6;
                        HEAPF32[$m_sweep254_4$s2] = $tmp7;
                        HEAPF32[$m_sweep254_5$s2] = $tmp8;
                        var $call_i_i153 = _sinf($tmp7);
                        HEAPF32[$212 + 20 >> 2] = $call_i_i153;
                        var $call2_i_i155 = _cosf($tmp7);
                        HEAPF32[$212 + 24 >> 2] = $call2_i_i155;
                        var $sub3_i_i168 = $tmp10 - ($call_i_i153 * $tmp22 + $call2_i_i155 * $tmp23);
                        var $262 = $212 + 12 | 0;
                        var $263 = (tempDoubleF32[0] = $tmp9 - ($call2_i_i155 * $tmp22 - $call_i_i153 * $tmp23), tempDoubleI32[0]);
                        var $264$0 = $263;
                        var $265 = (tempDoubleF32[0] = $sub3_i_i168, tempDoubleI32[0]);
                        var $268$1 = $265 | 0;
                        var $st$35$0 = $262 | 0;
                        HEAP32[$st$35$0 >> 2] = 0 | $264$0;
                        var $st$35$1 = $262 + 4 | 0;
                        HEAP32[$st$35$1 >> 2] = $268$1;
                      } else {
                        var $or282 = $248 | 1;
                        HEAP32[$m_flags224$s2] = $or282;
                        if (($209 | 0) >= ($203 | 0)) {
                          ___assert_func(STRING_TABLE.__str25202 | 0, 62, STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP9b2Contact | 0, STRING_TABLE.__str27204 | 0);
                        }
                        var $inc_i147 = $209 + 1 | 0;
                        HEAP32[$m_contactCount_i315$s2] = $inc_i147;
                        var $arrayidx_i149 = ($209 << 2) + $204 | 0;
                        HEAP32[$arrayidx_i149 >> 2] = $210;
                        var $269 = HEAP16[$m_flags255$s1];
                        if (($269 & 1) << 16 >> 16 != 0) {
                          break;
                        }
                        var $or292 = $269 | 1;
                        HEAP16[$m_flags255$s1] = $or292;
                        var $cmp295 = (HEAP32[$m_type230 >> 2] | 0) == 0;
                        do {
                          if (!$cmp295) {
                            if (($269 & 2) << 16 >> 16 != 0) {
                              break;
                            }
                            var $or_i = $269 | 3;
                            HEAP16[$m_flags255$s1] = $or_i;
                            HEAPF32[$212 + 144 >> 2] = 0;
                          }
                        } while (0);
                        if (($208 | 0) >= ($202 | 0)) {
                          ___assert_func(STRING_TABLE.__str25202 | 0, 54, STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP6b2Body | 0, STRING_TABLE.__str28205 | 0);
                        }
                        var $m_islandIndex_i = $212 + 8 | 0;
                        HEAP32[$m_islandIndex_i >> 2] = $208;
                        var $arrayidx_i = ($208 << 2) + $205 | 0;
                        HEAP32[$arrayidx_i >> 2] = $212;
                        var $inc_i = $208 + 1 | 0;
                        HEAP32[$m_bodyCount_i314$s2] = $inc_i;
                      }
                    }
                  }
                } while (0);
                var $ce_0_in = $ce_0 + 12 | 0;
              }
            }
          } while (0);
          var $i_0 = $i_0 + 1 | 0;
        }
        var $mul307 = (1 - $minAlpha_0) * HEAPF32[$dt >> 2];
        HEAPF32[$dt308 >> 2] = $mul307;
        var $div = 1 / $mul307;
        HEAPF32[$inv_dt >> 2] = $div;
        HEAPF32[$dtRatio >> 2] = 1;
        HEAP32[$positionIterations >> 2] = 20;
        var $273 = HEAP32[$velocityIterations >> 2];
        HEAP32[$velocityIterations310 >> 2] = $273;
        HEAP8[$warmStarting] = 0;
        var $274 = HEAP32[$m_islandIndex_i321436 >> 2];
        var $275 = HEAP32[$m_islandIndex_i332 >> 2];
        __ZN8b2Island8SolveTOIERK10b2TimeStepii($1, $9, $274, $275);
        var $276 = HEAP32[$m_bodyCount_i314$s2];
        var $277 = HEAP32[$m_bodies_i322$s2];
        var $i313_0 = 0;
        while (1) {
          var $i313_0;
          if (($i313_0 | 0) >= ($276 | 0)) {
            break;
          }
          var $278 = HEAP32[$277 + ($i313_0 << 2) >> 2], $278$s2 = $278 >> 2;
          var $m_flags320 = $278 + 4 | 0;
          var $and322 = HEAP16[$m_flags320 >> 1] & -2;
          HEAP16[$m_flags320 >> 1] = $and322;
          var $cmp325 = (HEAP32[$278$s2] | 0) == 2;
          $if_end327$$for_inc340$98 : do {
            if ($cmp325) {
              var $282 = HEAPF32[$278$s2 + 13];
              var $call_i_i = _sinf($282);
              HEAPF32[$s_i_i >> 2] = $call_i_i;
              var $call2_i_i = _cosf($282);
              HEAPF32[$c_i_i >> 2] = $call2_i_i;
              var $284 = HEAPF32[$278$s2 + 7];
              var $286 = HEAPF32[$278$s2 + 8];
              var $sub3_i_i = HEAPF32[$278$s2 + 10] - ($call_i_i * $284 + $call2_i_i * $286);
              var $291 = (tempDoubleF32[0] = HEAPF32[$278$s2 + 9] - ($call2_i_i * $284 - $call_i_i * $286), tempDoubleI32[0]);
              var $292$0 = $291;
              var $293 = (tempDoubleF32[0] = $sub3_i_i, tempDoubleI32[0]);
              var $296$1 = $293 | 0;
              HEAP32[$11 >> 2] = 0 | $292$0;
              HEAP32[$11 + 4 >> 2] = $296$1;
              var $298 = HEAP32[$278$s2 + 22] + 102872 | 0;
              var $299 = HEAP32[$278$s2 + 25];
              var $tobool10_i = ($299 | 0) == 0;
              $invoke_cont328$$for_body_lr_ph_i$100 : do {
                if (!$tobool10_i) {
                  var $300 = $278 + 12 | 0;
                  var $f_011_i = $299;
                  while (1) {
                    var $f_011_i;
                    __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($f_011_i, $298, $xf1_i, $300);
                    var $f_0_i = HEAP32[$f_011_i + 4 >> 2];
                    if (($f_0_i | 0) == 0) {
                      break $invoke_cont328$$for_body_lr_ph_i$100;
                    }
                    var $f_011_i = $f_0_i;
                  }
                }
              } while (0);
              var $ce329_0412 = HEAP32[$278$s2 + 28];
              if (($ce329_0412 | 0) == 0) {
                break;
              }
              var $ce329_0414 = $ce329_0412;
              while (1) {
                var $ce329_0414;
                var $m_flags335 = HEAP32[$ce329_0414 + 4 >> 2] + 4 | 0;
                var $and336 = HEAP32[$m_flags335 >> 2] & -34;
                HEAP32[$m_flags335 >> 2] = $and336;
                var $ce329_0 = HEAP32[$ce329_0414 + 12 >> 2];
                if (($ce329_0 | 0) == 0) {
                  break $if_end327$$for_inc340$98;
                }
                var $ce329_0414 = $ce329_0;
              }
            }
          } while (0);
          var $i313_0 = $i313_0 + 1 | 0;
        }
        __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($m_broadPhase_i, $12);
        if ((HEAP8[$m_subStepping] & 1) << 24 >> 24 != 0) {
          var $storemerge = 0;
          var $305 = $277;
          break;
        }
        var $minContact_0 = 0;
        var $minAlpha_0 = 1;
        var $c14_0_in = $m_contactList16_pre_phi;
      } else {
        var $and_i262 = $160 & -37;
        HEAP32[$m_flags172$s2] = $and_i262;
        HEAPF32[$92$s2] = $tmp65;
        HEAPF32[$93$s2] = $tmp66;
        HEAPF32[$94 >> 2] = $tmp60;
        HEAPF32[$95$s2] = $tmp61;
        HEAPF32[$96$s2] = $tmp56;
        HEAPF32[$97$s2] = $tmp57;
        HEAPF32[$98$s2] = $tmp53;
        HEAPF32[$99$s2] = $tmp54;
        HEAPF32[$100$s2] = $tmp55;
        HEAPF32[$101$s2] = $tmp45;
        HEAPF32[$102$s2] = $tmp46;
        HEAPF32[$103 >> 2] = $tmp40;
        HEAPF32[$104$s2] = $tmp41;
        HEAPF32[$105$s2] = $tmp36;
        HEAPF32[$106$s2] = $tmp37;
        HEAPF32[$107$s2] = $tmp33;
        HEAPF32[$108$s2] = $tmp34;
        HEAPF32[$109$s2] = $tmp35;
        var $164 = HEAPF32[$99$s2];
        var $call_i_i265 = _sinf($164);
        HEAPF32[$s_i_i201 >> 2] = $call_i_i265;
        var $call2_i_i267 = _cosf($164);
        HEAPF32[$c_i_i203 >> 2] = $call2_i_i267;
        var $165 = HEAPF32[$92$s2];
        var $166 = HEAPF32[$93$s2];
        var $sub3_i_i281 = HEAPF32[$97$s2] - ($call_i_i265 * $165 + $call2_i_i267 * $166);
        var $169 = (tempDoubleF32[0] = HEAPF32[$96$s2] - ($call2_i_i267 * $165 - $call_i_i265 * $166), tempDoubleI32[0]);
        var $170$0 = $169;
        var $171 = (tempDoubleF32[0] = $sub3_i_i281, tempDoubleI32[0]);
        var $174$1 = $171 | 0;
        var $st$47$0 = $127 | 0;
        HEAP32[$st$47$0 >> 2] = 0 | $170$0;
        var $st$47$1 = $127 + 4 | 0;
        HEAP32[$st$47$1 >> 2] = $174$1;
        var $175 = HEAPF32[$108$s2];
        var $call_i_i283 = _sinf($175);
        HEAPF32[$s_i_i239 >> 2] = $call_i_i283;
        var $call2_i_i285 = _cosf($175);
        HEAPF32[$c_i_i241 >> 2] = $call2_i_i285;
        var $176 = HEAPF32[$101$s2];
        var $177 = HEAPF32[$102$s2];
        var $sub3_i_i299 = HEAPF32[$106$s2] - ($call_i_i283 * $176 + $call2_i_i285 * $177);
        var $180 = (tempDoubleF32[0] = HEAPF32[$105$s2] - ($call2_i_i285 * $176 - $call_i_i283 * $177), tempDoubleI32[0]);
        var $181$0 = $180;
        var $182 = (tempDoubleF32[0] = $sub3_i_i299, tempDoubleI32[0]);
        var $185$1 = $182 | 0;
        var $st$78$0 = $152 | 0;
        HEAP32[$st$78$0 >> 2] = 0 | $181$0;
        var $st$78$1 = $152 + 4 | 0;
        HEAP32[$st$78$1 >> 2] = $185$1;
        var $minContact_0 = 0;
        var $minAlpha_0 = 1;
        var $c14_0_in = $m_contactList16_pre_phi;
      }
    } else {
      var $m_flags_i$s2 = ($c14_0 + 4 | 0) >> 2;
      var $13 = HEAP32[$m_flags_i$s2];
      var $cmp_i = ($13 & 4 | 0) == 0;
      do {
        if ($cmp_i) {
          var $minContact_1 = $minContact_0;
          var $minAlpha_1 = $minAlpha_0;
        } else {
          if ((HEAP32[$c14_0$s2 + 32] | 0) > 8) {
            var $minContact_1 = $minContact_0;
            var $minAlpha_1 = $minAlpha_0;
            break;
          }
          if (($13 & 32 | 0) == 0) {
            var $27 = HEAP32[$c14_0$s2 + 12];
            var $28 = HEAP32[$c14_0$s2 + 13];
            if ((HEAP8[$27 + 38 | 0] & 1) << 24 >> 24 != 0) {
              var $minContact_1 = $minContact_0;
              var $minAlpha_1 = $minAlpha_0;
              break;
            }
            if ((HEAP8[$28 + 38 | 0] & 1) << 24 >> 24 != 0) {
              var $minContact_1 = $minContact_0;
              var $minAlpha_1 = $minAlpha_0;
              break;
            }
            var $33 = HEAP32[$27 + 8 >> 2];
            var $34 = HEAP32[$28 + 8 >> 2];
            var $35 = HEAP32[$33 >> 2];
            var $36 = HEAP32[$34 >> 2];
            if (!(($35 | 0) == 2 | ($36 | 0) == 2)) {
              ___assert_func(STRING_TABLE.__str174 | 0, 641, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World8SolveTOIERK10b2TimeStep | 0, STRING_TABLE.__str6180 | 0);
            }
            var $38 = HEAP16[$33 + 4 >> 1];
            var $41 = HEAP16[$34 + 4 >> 1];
            if (!(($38 & 2) << 16 >> 16 != 0 & ($35 | 0) != 0 | ($41 & 2) << 16 >> 16 != 0 & ($36 | 0) != 0)) {
              var $minContact_1 = $minContact_0;
              var $minAlpha_1 = $minAlpha_0;
              break;
            }
            if (!(($38 & 8) << 16 >> 16 != 0 | ($35 | 0) != 2 | (($41 & 8) << 16 >> 16 != 0 | ($36 | 0) != 2))) {
              var $minContact_1 = $minContact_0;
              var $minAlpha_1 = $minAlpha_0;
              break;
            }
            var $m_sweep88 = $33 + 28 | 0;
            var $45$s2 = ($33 + 60 | 0) >> 2;
            var $46 = HEAPF32[$45$s2];
            var $m_sweep92 = $34 + 28 | 0;
            var $47$s2 = ($34 + 60 | 0) >> 2;
            var $48 = HEAPF32[$47$s2];
            var $cmp94 = $46 < $48;
            do {
              if ($cmp94) {
                if ($46 < 1) {
                  var $49 = $46;
                } else {
                  ___assert_func(STRING_TABLE.__str24201 | 0, 723, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Sweep7AdvanceEf | 0, STRING_TABLE.__str7181 | 0);
                  var $49 = HEAPF32[$45$s2];
                }
                var $49;
                var $div_i = ($48 - $49) / (1 - $49);
                var $c0_i = $33 + 36 | 0;
                var $sub6_i = 1 - $div_i;
                var $add3_i_i = HEAPF32[$33 + 40 >> 2] * $sub6_i + HEAPF32[$33 + 48 >> 2] * $div_i;
                var $54 = $c0_i;
                var $55 = (tempDoubleF32[0] = HEAPF32[$c0_i >> 2] * $sub6_i + HEAPF32[$33 + 44 >> 2] * $div_i, tempDoubleI32[0]);
                var $56$0 = $55;
                var $57 = (tempDoubleF32[0] = $add3_i_i, tempDoubleI32[0]);
                var $60$0 = 0 | $56$0;
                var $60$1 = $57 | 0;
                var $st$31$0 = $54 | 0, $st$31$0$s2 = $st$31$0 >> 2;
                HEAP32[$st$31$0$s2] = $60$0;
                var $st$31$1 = $54 + 4 | 0, $st$31$1$s2 = $st$31$1 >> 2;
                HEAP32[$st$31$1$s2] = $60$1;
                var $a0_i107 = $33 + 52 | 0;
                var $add_i = $sub6_i * HEAPF32[$a0_i107 >> 2] + $div_i * HEAPF32[$33 + 56 >> 2];
                HEAPF32[$a0_i107 >> 2] = $add_i;
                HEAPF32[$45$s2] = $48;
                var $alpha087_0 = $48;
              } else {
                if ($48 >= $46) {
                  var $alpha087_0 = $46;
                  break;
                }
                if ($48 < 1) {
                  var $63 = $48;
                } else {
                  ___assert_func(STRING_TABLE.__str24201 | 0, 723, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Sweep7AdvanceEf | 0, STRING_TABLE.__str7181 | 0);
                  var $63 = HEAPF32[$47$s2];
                }
                var $63;
                var $div_i115 = ($46 - $63) / (1 - $63);
                var $c0_i116 = $34 + 36 | 0;
                var $sub6_i117 = 1 - $div_i115;
                var $add3_i_i127 = HEAPF32[$34 + 40 >> 2] * $sub6_i117 + HEAPF32[$34 + 48 >> 2] * $div_i115;
                var $68 = $c0_i116;
                var $69 = (tempDoubleF32[0] = HEAPF32[$c0_i116 >> 2] * $sub6_i117 + HEAPF32[$34 + 44 >> 2] * $div_i115, tempDoubleI32[0]);
                var $70$0 = $69;
                var $71 = (tempDoubleF32[0] = $add3_i_i127, tempDoubleI32[0]);
                var $74$0 = 0 | $70$0;
                var $74$1 = $71 | 0;
                var $st$31$0 = $68 | 0, $st$31$0$s2 = $st$31$0 >> 2;
                HEAP32[$st$31$0$s2] = $74$0;
                var $st$31$1 = $68 + 4 | 0, $st$31$1$s2 = $st$31$1 >> 2;
                HEAP32[$st$31$1$s2] = $74$1;
                var $a0_i128 = $34 + 52 | 0;
                var $add_i132 = $sub6_i117 * HEAPF32[$a0_i128 >> 2] + $div_i115 * HEAPF32[$34 + 56 >> 2];
                HEAPF32[$a0_i128 >> 2] = $add_i132;
                HEAPF32[$47$s2] = $46;
                var $alpha087_0 = $46;
              }
            } while (0);
            var $alpha087_0;
            if ($alpha087_0 >= 1) {
              ___assert_func(STRING_TABLE.__str174 | 0, 676, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World8SolveTOIERK10b2TimeStep | 0, STRING_TABLE.__str7181 | 0);
            }
            var $78 = HEAP32[$c14_0$s2 + 14];
            var $80 = HEAP32[$c14_0$s2 + 15];
            HEAP32[$m_vertices_i_i_i_i >> 2] = 0;
            HEAP32[$m_count_i_i_i_i >> 2] = 0;
            HEAPF32[$m_radius_i_i_i_i >> 2] = 0;
            HEAP32[$m_vertices_i_i1_i_i >> 2] = 0;
            HEAP32[$m_count_i_i2_i_i >> 2] = 0;
            HEAPF32[$m_radius_i_i3_i_i >> 2] = 0;
            var $81 = HEAP32[$27 + 12 >> 2];
            __ZN15b2DistanceProxy3SetEPK7b2Shapei($proxyA, $81, $78);
            var $82 = HEAP32[$28 + 12 >> 2];
            __ZN15b2DistanceProxy3SetEPK7b2Shapei($proxyB, $82, $80);
            var $83 = $m_sweep88;
            for (var $$src = $83 >> 2, $$dest = $7 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
              HEAP32[$$dest] = HEAP32[$$src];
            }
            var $84 = $m_sweep92;
            for (var $$src = $84 >> 2, $$dest = $8 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
              HEAP32[$$dest] = HEAP32[$$src];
            }
            HEAPF32[$tMax >> 2] = 1;
            __Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput($output, $input);
            if ((HEAP32[$state >> 2] | 0) == 3) {
              var $add = $alpha087_0 + (1 - $alpha087_0) * HEAPF32[$t >> 2];
              var $cond_i = $add < 1 ? $add : 1;
              var $alpha_0 = $cond_i;
            } else {
              var $alpha_0 = 1;
            }
            var $alpha_0;
            HEAPF32[$c14_0$s2 + 33] = $alpha_0;
            var $or = HEAP32[$m_flags_i$s2] | 32;
            HEAP32[$m_flags_i$s2] = $or;
            var $alpha_1 = $alpha_0;
          } else {
            var $alpha_1 = HEAPF32[$c14_0$s2 + 33];
          }
          var $alpha_1;
          if ($alpha_1 >= $minAlpha_0) {
            var $minContact_1 = $minContact_0;
            var $minAlpha_1 = $minAlpha_0;
            break;
          }
          var $minContact_1 = $c14_0;
          var $minAlpha_1 = $alpha_1;
        }
      } while (0);
      var $minAlpha_1;
      var $minContact_1;
      var $minContact_0 = $minContact_1;
      var $minAlpha_0 = $minAlpha_1;
      var $c14_0_in = $c14_0 + 12 | 0;
    }
  }
  var $305;
  var $storemerge;
  HEAP8[$m_stepComplete] = $storemerge;
  var $306 = HEAP32[$island$s2];
  var $308 = HEAP32[$island$s2 + 5];
  __ZN16b2StackAllocator4FreeEPv($306, $308);
  var $310 = HEAP32[$island$s2 + 6];
  __ZN16b2StackAllocator4FreeEPv($306, $310);
  var $312 = HEAP32[$island$s2 + 4];
  __ZN16b2StackAllocator4FreeEPv($306, $312);
  var $314 = HEAP32[$m_contacts_i344$s2];
  __ZN16b2StackAllocator4FreeEPv($306, $314);
  __ZN16b2StackAllocator4FreeEPv($306, $305);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN7b2World11ClearForcesEv($this) {
  var $body_03$s2;
  var $body_01 = HEAP32[$this + 102952 >> 2];
  var $tobool2 = ($body_01 | 0) == 0;
  $for_end$$for_body$28 : do {
    if (!$tobool2) {
      var $body_03 = $body_01, $body_03$s2 = $body_03 >> 2;
      while (1) {
        var $body_03;
        HEAPF32[$body_03$s2 + 19] = 0;
        HEAPF32[$body_03$s2 + 20] = 0;
        HEAPF32[$body_03$s2 + 21] = 0;
        var $body_0 = HEAP32[$body_03$s2 + 24];
        if (($body_0 | 0) == 0) {
          break $for_end$$for_body$28;
        }
        var $body_03 = $body_0, $body_03$s2 = $body_03 >> 2;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN7b2World4StepEfii($this, $dt, $velocityIterations, $positionIterations) {
  var $body_03_i$s2;
  var $dt5$s2;
  var $m_flags$s2;
  var $step$s2;
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 88;
  var __label__;
  var $t_i56 = __stackBase__;
  var $t_i42 = __stackBase__ + 8;
  var $t_i_i33 = __stackBase__ + 16;
  var $t_i19 = __stackBase__ + 24;
  var $t_i_i10 = __stackBase__ + 32;
  var $t_i = __stackBase__ + 40;
  var $t_i_i1 = __stackBase__ + 48;
  var $t_i_i = __stackBase__ + 56;
  var $step = __stackBase__ + 64, $step$s2 = $step >> 2;
  var $call_i_i = _gettimeofday($t_i_i, 0);
  var $1 = HEAP32[$t_i_i >> 2];
  var $mul_i_i = (HEAP32[$t_i_i + 4 >> 2] | 0) * .0010000000474974513;
  var $conv2_i_i = $mul_i_i >= 0 ? Math.floor($mul_i_i) : Math.ceil($mul_i_i);
  var $m_flags$s2 = ($this + 102868 | 0) >> 2;
  var $3 = HEAP32[$m_flags$s2];
  if (($3 & 1 | 0) == 0) {
    var $6 = $3;
  } else {
    var $m_contactManager = $this + 102872 | 0;
    var $4 = $m_contactManager;
    var $m_broadPhase_i = $m_contactManager;
    __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($m_broadPhase_i, $4);
    var $and3 = HEAP32[$m_flags$s2] & -2;
    HEAP32[$m_flags$s2] = $and3;
    var $6 = $and3;
  }
  var $6;
  HEAP32[$m_flags$s2] = $6 | 2;
  var $dt5$s2 = ($step | 0) >> 2;
  HEAPF32[$dt5$s2] = $dt;
  HEAP32[$step$s2 + 3] = $velocityIterations;
  HEAP32[$step$s2 + 4] = $positionIterations;
  var $cmp = $dt > 0;
  if ($cmp) {
    HEAPF32[$step$s2 + 1] = 1 / $dt;
  } else {
    HEAPF32[$step$s2 + 1] = 0;
  }
  var $m_inv_dt0 = $this + 102988 | 0;
  var $mul = HEAPF32[$m_inv_dt0 >> 2] * $dt;
  HEAPF32[$step$s2 + 2] = $mul;
  var $9 = HEAP8[$this + 102992 | 0] & 1;
  HEAP8[$step + 20 | 0] = $9;
  var $call_i_i2 = _gettimeofday($t_i_i1, 0);
  var $11 = HEAP32[$t_i_i1 >> 2];
  var $mul_i_i7 = (HEAP32[$t_i_i1 + 4 >> 2] | 0) * .0010000000474974513;
  var $conv2_i_i8 = $mul_i_i7 >= 0 ? Math.floor($mul_i_i7) : Math.ceil($mul_i_i7);
  var $13 = $this + 102872 | 0;
  __ZN16b2ContactManager7CollideEv($13);
  var $call_i = _gettimeofday($t_i, 0);
  HEAPF32[$this$s2 + 25750] = (((HEAP32[$t_i >> 2] - $11) * 1e3 | 0) >>> 0) + (HEAP32[$t_i + 4 >> 2] | 0) * .0010000000474974513 - ($conv2_i_i8 >>> 0);
  if (!((HEAP8[$this + 102995 | 0] & 1) << 24 >> 24 == 0 | $cmp ^ 1)) {
    var $call_i_i11 = _gettimeofday($t_i_i10, 0);
    var $20 = HEAP32[$t_i_i10 >> 2];
    var $mul_i_i16 = (HEAP32[$t_i_i10 + 4 >> 2] | 0) * .0010000000474974513;
    var $conv2_i_i17 = $mul_i_i16 >= 0 ? Math.floor($mul_i_i16) : Math.ceil($mul_i_i16);
    __ZN7b2World5SolveERK10b2TimeStep($this, $step);
    var $call_i20 = _gettimeofday($t_i19, 0);
    HEAPF32[$this$s2 + 25751] = (((HEAP32[$t_i19 >> 2] - $20) * 1e3 | 0) >>> 0) + (HEAP32[$t_i19 + 4 >> 2] | 0) * .0010000000474974513 - ($conv2_i_i17 >>> 0);
  }
  var $tobool21 = (HEAP8[$this + 102993 | 0] & 1) << 24 >> 24 == 0;
  do {
    if (!$tobool21) {
      var $27 = HEAPF32[$dt5$s2];
      if ($27 <= 0) {
        var $34 = $27;
        __label__ = 11;
        break;
      }
      var $call_i_i34 = _gettimeofday($t_i_i33, 0);
      var $29 = HEAP32[$t_i_i33 >> 2];
      var $mul_i_i39 = (HEAP32[$t_i_i33 + 4 >> 2] | 0) * .0010000000474974513;
      var $conv2_i_i40 = $mul_i_i39 >= 0 ? Math.floor($mul_i_i39) : Math.ceil($mul_i_i39);
      __ZN7b2World8SolveTOIERK10b2TimeStep($this, $step);
      var $call_i43 = _gettimeofday($t_i42, 0);
      HEAPF32[$this$s2 + 25756] = (((HEAP32[$t_i42 >> 2] - $29) * 1e3 | 0) >>> 0) + (HEAP32[$t_i42 + 4 >> 2] | 0) * .0010000000474974513 - ($conv2_i_i40 >>> 0);
      __label__ = 10;
      break;
    }
    __label__ = 10;
  } while (0);
  if (__label__ == 10) {
    var $34 = HEAPF32[$dt5$s2];
  }
  var $34;
  if ($34 > 0) {
    var $35 = HEAPF32[$step$s2 + 1];
    HEAPF32[$m_inv_dt0 >> 2] = $35;
  }
  var $36 = HEAPU32[$m_flags$s2];
  var $tobool38 = ($36 & 4 | 0) == 0;
  do {
    if ($tobool38) {
      var $37 = $36;
    } else {
      var $body_01_i = HEAP32[$this$s2 + 25738];
      if (($body_01_i | 0) == 0) {
        var $37 = $36;
        break;
      }
      var $body_03_i = $body_01_i, $body_03_i$s2 = $body_03_i >> 2;
      while (1) {
        var $body_03_i;
        HEAPF32[$body_03_i$s2 + 19] = 0;
        HEAPF32[$body_03_i$s2 + 20] = 0;
        HEAPF32[$body_03_i$s2 + 21] = 0;
        var $body_0_i = HEAP32[$body_03_i$s2 + 24];
        if (($body_0_i | 0) == 0) {
          break;
        }
        var $body_03_i = $body_0_i, $body_03_i$s2 = $body_03_i >> 2;
      }
      var $37 = HEAP32[$m_flags$s2];
    }
  } while (0);
  var $37;
  HEAP32[$m_flags$s2] = $37 & -3;
  var $call_i57 = _gettimeofday($t_i56, 0);
  HEAPF32[$this$s2 + 25749] = (((HEAP32[$t_i56 >> 2] - $1) * 1e3 | 0) >>> 0) + (HEAP32[$t_i56 + 4 >> 2] | 0) * .0010000000474974513 - ($conv2_i_i >>> 0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZNK7b2World9QueryAABBEP15b2QueryCallbackRK6b2AABB($this, $callback, $aabb) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $wrapper = __stackBase__;
  var $m_broadPhase = $this + 102872 | 0;
  HEAP32[$wrapper >> 2] = $m_broadPhase;
  HEAP32[$wrapper + 4 >> 2] = $callback;
  var $m_tree_i = $m_broadPhase | 0;
  __ZNK13b2DynamicTree5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($m_tree_i, $wrapper, $aabb);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZNK7b2World7RayCastEP17b2RayCastCallbackRK6b2Vec2S4_($this, $callback, $point1, $point2) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var $wrapper = __stackBase__;
  var $input = __stackBase__ + 8;
  var $m_broadPhase = $this + 102872 | 0;
  HEAP32[$wrapper >> 2] = $m_broadPhase;
  HEAP32[$wrapper + 4 >> 2] = $callback;
  HEAPF32[$input + 16 >> 2] = 1;
  var $0 = $point1;
  var $1 = $input;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  var $3 = $point2;
  var $4 = $input + 8 | 0;
  var $5$0 = HEAP32[$3 >> 2];
  var $5$1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 >> 2] = $5$0;
  HEAP32[$4 + 4 >> 2] = $5$1;
  var $m_tree_i = $m_broadPhase | 0;
  __ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput($m_tree_i, $wrapper, $input);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($this, $fixture, $xf, $color) {
  var $29$s2;
  var $0$s2;
  var $xf$s2 = $xf >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 112;
  var __label__;
  var $center = __stackBase__;
  var $axis = __stackBase__ + 8;
  var $v1 = __stackBase__ + 16;
  var $v2 = __stackBase__ + 24;
  var $v110 = __stackBase__ + 32;
  var $v211 = __stackBase__ + 40;
  var $vertices22 = __stackBase__ + 48;
  var $0 = HEAP32[$fixture + 12 >> 2], $0$s2 = $0 >> 2;
  var $1 = HEAP32[$0$s2 + 1];
  $sw_epilog$$sw_bb$$sw_bb3$$sw_bb8$$sw_bb19$35 : do {
    if ($1 == 0) {
      var $2 = HEAPF32[$xf$s2 + 3];
      var $3 = HEAPF32[$0$s2 + 3];
      var $4 = HEAPF32[$xf$s2 + 2];
      var $6 = HEAPF32[$0$s2 + 4];
      var $add_i11 = $2 * $3 - $4 * $6 + HEAPF32[$xf$s2];
      var $add17_i16 = $4 * $3 + $2 * $6 + HEAPF32[$xf$s2 + 1];
      HEAPF32[$center >> 2] = $add_i11;
      HEAPF32[$center + 4 >> 2] = $add17_i16;
      var $9 = HEAPF32[$0$s2 + 2];
      var $sub_i56 = $2 - 0;
      var $add_i57 = $4;
      HEAPF32[$axis >> 2] = $sub_i56;
      HEAPF32[$axis + 4 >> 2] = $add_i57;
      var $10 = HEAP32[$this + 102984 >> 2];
      var $12 = HEAP32[HEAP32[$10 >> 2] + 20 >> 2];
      FUNCTION_TABLE[$12]($10, $center, $9, $axis, $color);
    } else if ($1 == 1) {
      var $13 = HEAPF32[$xf$s2 + 3];
      var $14 = HEAPF32[$0$s2 + 3];
      var $15 = HEAPF32[$xf$s2 + 2];
      var $17 = HEAPF32[$0$s2 + 4];
      var $18 = HEAPF32[$xf$s2];
      var $add_i84 = $13 * $14 - $15 * $17 + $18;
      var $19 = HEAPF32[$xf$s2 + 1];
      var $add17_i89 = $15 * $14 + $13 * $17 + $19;
      HEAPF32[$v1 >> 2] = $add_i84;
      HEAPF32[$v1 + 4 >> 2] = $add17_i89;
      var $m_vertex2 = $0 + 20 | 0;
      var $20 = HEAPF32[$m_vertex2 >> 2];
      var $22 = HEAPF32[$m_vertex2 + 4 >> 2];
      var $add_i68 = $13 * $20 - $15 * $22 + $18;
      var $add17_i73 = $15 * $20 + $13 * $22 + $19;
      HEAPF32[$v2 >> 2] = $add_i68;
      HEAPF32[$v2 + 4 >> 2] = $add17_i73;
      var $23 = HEAP32[$this + 102984 >> 2];
      var $25 = HEAP32[HEAP32[$23 >> 2] + 24 >> 2];
      FUNCTION_TABLE[$25]($23, $v1, $v2, $color);
    } else if ($1 == 3) {
      var $27 = HEAP32[$0$s2 + 4];
      var $29$s2 = HEAP32[$0$s2 + 3] >> 2;
      var $c_i35 = $xf + 12 | 0;
      var $30 = HEAPF32[$c_i35 >> 2];
      var $31 = HEAPF32[$29$s2];
      var $s_i38 = $xf + 8 | 0;
      var $32 = HEAPF32[$s_i38 >> 2];
      var $33 = HEAPF32[$29$s2 + 1];
      var $x4_i42 = $xf | 0;
      var $34 = HEAPF32[$x4_i42 >> 2];
      var $add_i43 = $30 * $31 - $32 * $33 + $34;
      var $y16_i47 = $xf + 4 | 0;
      var $35 = HEAPF32[$y16_i47 >> 2];
      var $add17_i48 = $32 * $31 + $30 * $33 + $35;
      HEAPF32[$v110 >> 2] = $add_i43;
      HEAPF32[$v110 + 4 >> 2] = $add17_i48;
      if (($27 | 0) <= 1) {
        break;
      }
      var $x2_i_i_i33 = $v211 | 0;
      var $y3_i_i_i34 = $v211 + 4 | 0;
      var $m_debugDraw13 = $this + 102984 | 0;
      var $36 = $v211;
      var $37 = $v110;
      var $i_097 = 1;
      var $41 = $30;
      var $40 = $32;
      var $39 = $34;
      var $38 = $35;
      while (1) {
        var $38;
        var $39;
        var $40;
        var $41;
        var $i_097;
        var $42 = HEAPF32[($i_097 << 3 >> 2) + $29$s2];
        var $43 = HEAPF32[(($i_097 << 3) + 4 >> 2) + $29$s2];
        var $add_i27 = $41 * $42 - $40 * $43 + $39;
        var $add17_i32 = $40 * $42 + $41 * $43 + $38;
        HEAPF32[$x2_i_i_i33 >> 2] = $add_i27;
        HEAPF32[$y3_i_i_i34 >> 2] = $add17_i32;
        var $44 = HEAP32[$m_debugDraw13 >> 2];
        var $46 = HEAP32[HEAP32[$44 >> 2] + 24 >> 2];
        FUNCTION_TABLE[$46]($44, $v110, $v211, $color);
        var $47 = HEAP32[$m_debugDraw13 >> 2];
        var $49 = HEAP32[HEAP32[$47 >> 2] + 16 >> 2];
        FUNCTION_TABLE[$49]($47, $v110, .05000000074505806, $color);
        var $50$0 = HEAP32[$36 >> 2];
        var $50$1 = HEAP32[$36 + 4 >> 2];
        HEAP32[$37 >> 2] = $50$0;
        HEAP32[$37 + 4 >> 2] = $50$1;
        var $inc = $i_097 + 1 | 0;
        if (($inc | 0) == ($27 | 0)) {
          break $sw_epilog$$sw_bb$$sw_bb3$$sw_bb8$$sw_bb19$35;
        }
        var $i_097 = $inc;
        var $41 = HEAPF32[$c_i35 >> 2];
        var $40 = HEAPF32[$s_i38 >> 2];
        var $39 = HEAPF32[$x4_i42 >> 2];
        var $38 = HEAPF32[$y16_i47 >> 2];
      }
    } else if ($1 == 2) {
      var $52 = HEAP32[$0$s2 + 37];
      var $cmp21 = ($52 | 0) < 9;
      do {
        if (!$cmp21) {
          ___assert_func(STRING_TABLE.__str174 | 0, 1077, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color | 0, STRING_TABLE.__str8182 | 0);
          var $array_begin109 = $vertices22 | 0;
          __label__ = 10;
          break;
        }
        var $array_begin = $vertices22 | 0;
        if (($52 | 0) > 0) {
          var $array_begin109 = $array_begin;
          __label__ = 10;
          break;
        }
        var $array_begin108 = $array_begin;
        __label__ = 12;
        break;
      } while (0);
      $for_body26_lr_ph$$for_end33$47 : do {
        if (__label__ == 10) {
          var $array_begin109;
          var $53 = $0 + 20 | 0;
          var $_pre = HEAPF32[$xf$s2 + 3];
          var $_pre99 = HEAPF32[$xf$s2 + 2];
          var $_pre100 = HEAPF32[$xf$s2];
          var $_pre101 = HEAPF32[$xf$s2 + 1];
          var $i23_095 = 0;
          while (1) {
            var $i23_095;
            var $54 = HEAPF32[$53 + ($i23_095 << 3) >> 2];
            var $55 = HEAPF32[$53 + ($i23_095 << 3) + 4 >> 2];
            var $add17_i = $_pre99 * $54 + $_pre * $55 + $_pre101;
            var $56 = ($i23_095 << 3) + $vertices22 | 0;
            var $57 = (tempDoubleF32[0] = $_pre * $54 - $_pre99 * $55 + $_pre100, tempDoubleI32[0]);
            var $58$0 = $57;
            var $59 = (tempDoubleF32[0] = $add17_i, tempDoubleI32[0]);
            var $62$0 = 0 | $58$0;
            var $62$1 = $59 | 0;
            HEAP32[$56 >> 2] = $62$0;
            HEAP32[$56 + 4 >> 2] = $62$1;
            var $inc32 = $i23_095 + 1 | 0;
            if (($inc32 | 0) == ($52 | 0)) {
              var $array_begin108 = $array_begin109;
              break $for_body26_lr_ph$$for_end33$47;
            }
            var $i23_095 = $inc32;
          }
        }
      } while (0);
      var $array_begin108;
      var $63 = HEAP32[$this + 102984 >> 2];
      var $65 = HEAP32[HEAP32[$63 >> 2] + 12 >> 2];
      FUNCTION_TABLE[$65]($63, $array_begin108, $52, $color);
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN7b2World9DrawJointEP7b2Joint($this, $joint) {
  var $m_debugDraw21$s2;
  var $m_debugDraw12$s2;
  var $color$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 60;
  var $x1 = __stackBase__;
  var $x2 = __stackBase__ + 8;
  var $p1 = __stackBase__ + 16;
  var $p2 = __stackBase__ + 24;
  var $color = __stackBase__ + 32, $color$s2 = $color >> 2;
  var $s1 = __stackBase__ + 44;
  var $s2 = __stackBase__ + 52;
  var $m_xf_i1 = HEAP32[$joint + 52 >> 2] + 12 | 0;
  var $2 = HEAP32[$joint + 48 >> 2] + 12 | 0;
  var $3 = $x1;
  var $4$0 = HEAP32[$2 >> 2];
  var $4$1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 >> 2] = $4$0;
  HEAP32[$3 + 4 >> 2] = $4$1;
  var $5 = $m_xf_i1;
  var $6 = $x2;
  var $7$0 = HEAP32[$5 >> 2];
  var $7$1 = HEAP32[$5 + 4 >> 2];
  HEAP32[$6 >> 2] = $7$0;
  HEAP32[$6 + 4 >> 2] = $7$1;
  var $8 = $joint;
  var $9 = HEAP32[HEAP32[$8 >> 2] >> 2];
  FUNCTION_TABLE[$9]($p1, $joint);
  var $10 = HEAP32[HEAP32[$8 >> 2] + 4 >> 2];
  FUNCTION_TABLE[$10]($p2, $joint);
  HEAPF32[$color$s2] = .5;
  HEAPF32[$color$s2 + 1] = .800000011920929;
  HEAPF32[$color$s2 + 2] = .800000011920929;
  var $11 = HEAP32[$joint + 4 >> 2];
  if ($11 == 3) {
    var $12 = HEAP32[$this + 102984 >> 2];
    var $14 = HEAP32[HEAP32[$12 >> 2] + 24 >> 2];
    FUNCTION_TABLE[$14]($12, $p1, $p2, $color);
  } else if ($11 == 4) {
    var $15 = $joint + 68 | 0;
    var $16 = $s1;
    var $17$0 = HEAP32[$15 >> 2];
    var $17$1 = HEAP32[$15 + 4 >> 2];
    HEAP32[$16 >> 2] = $17$0;
    HEAP32[$16 + 4 >> 2] = $17$1;
    var $18 = $joint + 76 | 0;
    var $19 = $s2;
    var $20$0 = HEAP32[$18 >> 2];
    var $20$1 = HEAP32[$18 + 4 >> 2];
    HEAP32[$19 >> 2] = $20$0;
    HEAP32[$19 + 4 >> 2] = $20$1;
    var $m_debugDraw12$s2 = ($this + 102984 | 0) >> 2;
    var $21 = HEAP32[$m_debugDraw12$s2];
    var $23 = HEAP32[HEAP32[$21 >> 2] + 24 >> 2];
    FUNCTION_TABLE[$23]($21, $s1, $p1, $color);
    var $24 = HEAP32[$m_debugDraw12$s2];
    var $26 = HEAP32[HEAP32[$24 >> 2] + 24 >> 2];
    FUNCTION_TABLE[$26]($24, $s2, $p2, $color);
    var $27 = HEAP32[$m_debugDraw12$s2];
    var $29 = HEAP32[HEAP32[$27 >> 2] + 24 >> 2];
    FUNCTION_TABLE[$29]($27, $s1, $s2, $color);
  } else if ($11 != 5) {
    var $m_debugDraw21$s2 = ($this + 102984 | 0) >> 2;
    var $30 = HEAP32[$m_debugDraw21$s2];
    var $32 = HEAP32[HEAP32[$30 >> 2] + 24 >> 2];
    FUNCTION_TABLE[$32]($30, $x1, $p1, $color);
    var $33 = HEAP32[$m_debugDraw21$s2];
    var $35 = HEAP32[HEAP32[$33 >> 2] + 24 >> 2];
    FUNCTION_TABLE[$35]($33, $p1, $p2, $color);
    var $36 = HEAP32[$m_debugDraw21$s2];
    var $38 = HEAP32[HEAP32[$36 >> 2] + 24 >> 2];
    FUNCTION_TABLE[$38]($36, $x2, $p2, $color);
  }
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZNK7b2World13GetProxyCountEv($this) {
  return HEAP32[$this + 102900 >> 2];
  return null;
}

function __ZNK7b2World13GetTreeHeightEv($this) {
  var $0 = HEAP32[$this + 102872 >> 2];
  if (($0 | 0) == -1) {
    var $retval_0_i_i = 0;
  } else {
    var $retval_0_i_i = HEAP32[(HEAP32[$this + 102876 >> 2] + 32 >> 2) + ($0 * 9 | 0)];
  }
  var $retval_0_i_i;
  return $retval_0_i_i;
  return null;
}

function __ZNK7b2World14GetTreeQualityEv($this) {
  var $2$s2;
  var $0 = HEAP32[$this + 102872 >> 2];
  if (($0 | 0) == -1) {
    var $retval_0_i_i = 0;
  } else {
    var $2$s2 = HEAP32[$this + 102876 >> 2] >> 2;
    var $mul_i_i_i = (HEAPF32[$2$s2 + ($0 * 9 | 0) + 2] - HEAPF32[$2$s2 + ($0 * 9 | 0)] + (HEAPF32[$2$s2 + ($0 * 9 | 0) + 3] - HEAPF32[$2$s2 + ($0 * 9 | 0) + 1])) * 2;
    var $8 = HEAP32[$this + 102884 >> 2];
    var $cmp39_i_i = ($8 | 0) > 0;
    $for_body_i_i$$for_end_i_i$82 : do {
      if ($cmp39_i_i) {
        var $totalArea_010_i_i = 0;
        var $i_011_i_i = 0;
        while (1) {
          var $i_011_i_i;
          var $totalArea_010_i_i;
          if ((HEAP32[$2$s2 + ($i_011_i_i * 9 | 0) + 8] | 0) < 0) {
            var $totalArea_1_i_i = $totalArea_010_i_i;
          } else {
            var $totalArea_1_i_i = $totalArea_010_i_i + (HEAPF32[$2$s2 + ($i_011_i_i * 9 | 0) + 2] - HEAPF32[$2$s2 + ($i_011_i_i * 9 | 0)] + (HEAPF32[$2$s2 + ($i_011_i_i * 9 | 0) + 3] - HEAPF32[$2$s2 + ($i_011_i_i * 9 | 0) + 1])) * 2;
          }
          var $totalArea_1_i_i;
          var $inc_i_i = $i_011_i_i + 1 | 0;
          if (($inc_i_i | 0) == ($8 | 0)) {
            var $totalArea_0_lcssa_i_i = $totalArea_1_i_i;
            break $for_body_i_i$$for_end_i_i$82;
          }
          var $totalArea_010_i_i = $totalArea_1_i_i;
          var $i_011_i_i = $inc_i_i;
        }
      } else {
        var $totalArea_0_lcssa_i_i = 0;
      }
    } while (0);
    var $totalArea_0_lcssa_i_i;
    var $retval_0_i_i = $totalArea_0_lcssa_i_i / $mul_i_i_i;
  }
  var $retval_0_i_i;
  return $retval_0_i_i;
  return null;
}

function __ZN7b2World13DrawDebugDataEv($this) {
  var $23$s2;
  var $21$s2;
  var $13$s2;
  var $m_debugDraw$s2;
  var $color62$s2;
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 120;
  var __label__;
  var $ref_tmp = __stackBase__;
  var $ref_tmp16 = __stackBase__ + 12;
  var $ref_tmp21 = __stackBase__ + 24;
  var $ref_tmp27 = __stackBase__ + 36;
  var $ref_tmp29 = __stackBase__ + 48;
  var $color62 = __stackBase__ + 60, $color62$s2 = $color62 >> 2;
  var $vs = __stackBase__ + 72;
  var $xf116 = __stackBase__ + 104;
  var $m_debugDraw$s2 = ($this + 102984 | 0) >> 2;
  var $0 = HEAP32[$m_debugDraw$s2];
  var $cmp = ($0 | 0) == 0;
  $if_end125$$if_end$2 : do {
    if (!$cmp) {
      var $1 = HEAP32[$0 + 4 >> 2];
      var $tobool = ($1 & 1 | 0) == 0;
      $if_end38$$if_then3$4 : do {
        if (!$tobool) {
          var $b_047 = HEAP32[$this$s2 + 25738];
          if (($b_047 | 0) == 0) {
            break;
          }
          var $r2_i_i23 = $ref_tmp | 0;
          var $g3_i_i24 = $ref_tmp + 4 | 0;
          var $b4_i_i25 = $ref_tmp + 8 | 0;
          var $r2_i_i34 = $ref_tmp27 | 0;
          var $g3_i_i35 = $ref_tmp27 + 4 | 0;
          var $b4_i_i36 = $ref_tmp27 + 8 | 0;
          var $r2_i_i28 = $ref_tmp29 | 0;
          var $g3_i_i29 = $ref_tmp29 + 4 | 0;
          var $b4_i_i30 = $ref_tmp29 + 8 | 0;
          var $r2_i_i31 = $ref_tmp16 | 0;
          var $g3_i_i32 = $ref_tmp16 + 4 | 0;
          var $b4_i_i33 = $ref_tmp16 + 8 | 0;
          var $r2_i_i41 = $ref_tmp21 | 0;
          var $g3_i_i42 = $ref_tmp21 + 4 | 0;
          var $b4_i_i43 = $ref_tmp21 + 8 | 0;
          var $b_049 = $b_047;
          while (1) {
            var $b_049;
            var $m_xf_i = $b_049 + 12 | 0;
            var $f_044 = HEAP32[$b_049 + 100 >> 2];
            var $tobool845 = ($f_044 | 0) == 0;
            $for_inc35$$for_body9_lr_ph$9 : do {
              if (!$tobool845) {
                var $2 = $b_049 + 4 | 0;
                var $m_type_i = $b_049 | 0;
                var $f_046 = $f_044;
                while (1) {
                  var $f_046;
                  var $3 = HEAP16[$2 >> 1];
                  if (($3 & 32) << 16 >> 16 == 0) {
                    HEAPF32[$r2_i_i23 >> 2] = .5;
                    HEAPF32[$g3_i_i24 >> 2] = .5;
                    HEAPF32[$b4_i_i25 >> 2] = .30000001192092896;
                    __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($this, $f_046, $m_xf_i, $ref_tmp);
                  } else {
                    var $4 = HEAP32[$m_type_i >> 2];
                    if ($4 == 0) {
                      HEAPF32[$r2_i_i31 >> 2] = .5;
                      HEAPF32[$g3_i_i32 >> 2] = .8999999761581421;
                      HEAPF32[$b4_i_i33 >> 2] = .5;
                      __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($this, $f_046, $m_xf_i, $ref_tmp16);
                    } else if ($4 == 1) {
                      HEAPF32[$r2_i_i41 >> 2] = .5;
                      HEAPF32[$g3_i_i42 >> 2] = .5;
                      HEAPF32[$b4_i_i43 >> 2] = .8999999761581421;
                      __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($this, $f_046, $m_xf_i, $ref_tmp21);
                    } else {
                      if (($3 & 2) << 16 >> 16 == 0) {
                        HEAPF32[$r2_i_i34 >> 2] = .6000000238418579;
                        HEAPF32[$g3_i_i35 >> 2] = .6000000238418579;
                        HEAPF32[$b4_i_i36 >> 2] = .6000000238418579;
                        __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($this, $f_046, $m_xf_i, $ref_tmp27);
                      } else {
                        HEAPF32[$r2_i_i28 >> 2] = .8999999761581421;
                        HEAPF32[$g3_i_i29 >> 2] = .699999988079071;
                        HEAPF32[$b4_i_i30 >> 2] = .699999988079071;
                        __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($this, $f_046, $m_xf_i, $ref_tmp29);
                      }
                    }
                  }
                  var $f_0 = HEAP32[$f_046 + 4 >> 2];
                  if (($f_0 | 0) == 0) {
                    break $for_inc35$$for_body9_lr_ph$9;
                  }
                  var $f_046 = $f_0;
                }
              }
            } while (0);
            var $b_0 = HEAP32[$b_049 + 96 >> 2];
            if (($b_0 | 0) == 0) {
              break $if_end38$$if_then3$4;
            }
            var $b_049 = $b_0;
          }
        }
      } while (0);
      var $tobool40 = ($1 & 2 | 0) == 0;
      $if_end48$$if_then41$26 : do {
        if (!$tobool40) {
          var $j_050 = HEAP32[$this$s2 + 25739];
          if (($j_050 | 0) == 0) {
            break;
          }
          var $j_052 = $j_050;
          while (1) {
            var $j_052;
            __ZN7b2World9DrawJointEP7b2Joint($this, $j_052);
            var $j_0 = HEAP32[$j_052 + 12 >> 2];
            if (($j_0 | 0) == 0) {
              break $if_end48$$if_then41$26;
            }
            var $j_052 = $j_0;
          }
        }
      } while (0);
      var $tobool50 = ($1 & 8 | 0) == 0;
      $if_end58$$if_then51$31 : do {
        if (!$tobool50) {
          var $c_053 = HEAP32[$this$s2 + 25733];
          if (($c_053 | 0) == 0) {
            break;
          }
          var $c_055 = $c_053;
          while (1) {
            var $c_055;
            var $c_0 = HEAP32[$c_055 + 12 >> 2];
            if (($c_0 | 0) == 0) {
              break $if_end58$$if_then51$31;
            }
            var $c_055 = $c_0;
          }
        }
      } while (0);
      var $tobool60 = ($1 & 4 | 0) == 0;
      $if_end107$$if_then61$36 : do {
        if (!$tobool60) {
          HEAPF32[$color62$s2] = .8999999761581421;
          HEAPF32[$color62$s2 + 1] = .30000001192092896;
          HEAPF32[$color62$s2 + 2] = .8999999761581421;
          var $b64_061 = HEAP32[$this$s2 + 25738];
          if (($b64_061 | 0) == 0) {
            break;
          }
          var $5 = $this + 102884 | 0;
          var $m_nodes_i_i = $this + 102876 | 0;
          var $array_begin = $vs | 0;
          var $x_i12 = $vs | 0;
          var $y_i13 = $vs + 4 | 0;
          var $x_i10 = $vs + 8 | 0;
          var $y_i11 = $vs + 12 | 0;
          var $x_i8 = $vs + 16 | 0;
          var $y_i9 = $vs + 20 | 0;
          var $x_i = $vs + 24 | 0;
          var $y_i = $vs + 28 | 0;
          var $b64_063 = $b64_061;
          while (1) {
            var $b64_063;
            var $cmp_i17 = (HEAP16[$b64_063 + 4 >> 1] & 32) << 16 >> 16 == 0;
            $for_inc104$$if_end73$41 : do {
              if (!$cmp_i17) {
                var $f74_058 = HEAP32[$b64_063 + 100 >> 2];
                if (($f74_058 | 0) == 0) {
                  break;
                }
                var $f74_060 = $f74_058;
                while (1) {
                  var $f74_060;
                  var $m_proxyCount = $f74_060 + 28 | 0;
                  var $cmp8056 = (HEAP32[$m_proxyCount >> 2] | 0) > 0;
                  $for_body81_lr_ph$$for_inc101$45 : do {
                    if ($cmp8056) {
                      var $m_proxies = $f74_060 + 24 | 0;
                      var $i_057 = 0;
                      while (1) {
                        var $i_057;
                        var $10 = HEAP32[(HEAP32[$m_proxies >> 2] + 24 >> 2) + ($i_057 * 7 | 0)];
                        var $cmp_i_i = ($10 | 0) > -1;
                        do {
                          if ($cmp_i_i) {
                            if ((HEAP32[$5 >> 2] | 0) > ($10 | 0)) {
                              __label__ = 32;
                              break;
                            }
                            __label__ = 31;
                            break;
                          } else {
                            __label__ = 31;
                          }
                        } while (0);
                        if (__label__ == 31) {
                          ___assert_func(STRING_TABLE.__str19193 | 0, 159, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree10GetFatAABBEi | 0, STRING_TABLE.__str2111 | 0);
                        }
                        var $13$s2 = HEAP32[$m_nodes_i_i >> 2] >> 2;
                        var $tmp3 = HEAPF32[$13$s2 + ($10 * 9 | 0)];
                        var $tmp4 = HEAPF32[$13$s2 + ($10 * 9 | 0) + 1];
                        var $tmp = HEAPF32[$13$s2 + ($10 * 9 | 0) + 2];
                        var $tmp1 = HEAPF32[$13$s2 + ($10 * 9 | 0) + 3];
                        HEAPF32[$x_i12 >> 2] = $tmp3;
                        HEAPF32[$y_i13 >> 2] = $tmp4;
                        HEAPF32[$x_i10 >> 2] = $tmp;
                        HEAPF32[$y_i11 >> 2] = $tmp4;
                        HEAPF32[$x_i8 >> 2] = $tmp;
                        HEAPF32[$y_i9 >> 2] = $tmp1;
                        HEAPF32[$x_i >> 2] = $tmp3;
                        HEAPF32[$y_i >> 2] = $tmp1;
                        var $17 = HEAP32[$m_debugDraw$s2];
                        var $19 = HEAP32[HEAP32[$17 >> 2] + 8 >> 2];
                        FUNCTION_TABLE[$19]($17, $array_begin, 4, $color62);
                        var $inc = $i_057 + 1 | 0;
                        if (($inc | 0) >= (HEAP32[$m_proxyCount >> 2] | 0)) {
                          break $for_body81_lr_ph$$for_inc101$45;
                        }
                        var $i_057 = $inc;
                      }
                    }
                  } while (0);
                  var $f74_0 = HEAP32[$f74_060 + 4 >> 2];
                  if (($f74_0 | 0) == 0) {
                    break $for_inc104$$if_end73$41;
                  }
                  var $f74_060 = $f74_0;
                }
              }
            } while (0);
            var $b64_0 = HEAP32[$b64_063 + 96 >> 2];
            if (($b64_0 | 0) == 0) {
              break $if_end107$$if_then61$36;
            }
            var $b64_063 = $b64_0;
          }
        }
      } while (0);
      if (($1 & 16 | 0) == 0) {
        break;
      }
      var $b111_064 = HEAP32[$this$s2 + 25738];
      if (($b111_064 | 0) == 0) {
        break;
      }
      var $21$s2 = $xf116 >> 2;
      var $22 = $xf116;
      var $b111_066 = $b111_064;
      while (1) {
        var $b111_066;
        var $23$s2 = ($b111_066 + 12 | 0) >> 2;
        HEAP32[$21$s2] = HEAP32[$23$s2];
        HEAP32[$21$s2 + 1] = HEAP32[$23$s2 + 1];
        HEAP32[$21$s2 + 2] = HEAP32[$23$s2 + 2];
        HEAP32[$21$s2 + 3] = HEAP32[$23$s2 + 3];
        var $24 = $b111_066 + 44 | 0;
        var $25$0 = HEAP32[$24 >> 2];
        var $25$1 = HEAP32[$24 + 4 >> 2];
        HEAP32[$22 >> 2] = $25$0;
        HEAP32[$22 + 4 >> 2] = $25$1;
        var $26 = HEAP32[$m_debugDraw$s2];
        var $28 = HEAP32[HEAP32[$26 >> 2] + 28 >> 2];
        FUNCTION_TABLE[$28]($26, $xf116);
        var $b111_0 = HEAP32[$b111_066 + 96 >> 2];
        if (($b111_0 | 0) == 0) {
          break $if_end125$$if_end$2;
        }
        var $b111_066 = $b111_0;
      }
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZNK7b2World14GetTreeBalanceEv($this) {
  var $0 = $this + 102884 | 0;
  var $1 = HEAP32[$0 >> 2];
  var $cmp4_i_i = ($1 | 0) > 0;
  $for_body_lr_ph_i_i$$_ZNK12b2BroadPhase14GetTreeBalanceEv_exit$68 : do {
    if ($cmp4_i_i) {
      var $m_nodes_i_i = $this + 102876 | 0;
      var $maxBalance_05_i_i = 0;
      var $i_06_i_i = 0;
      var $4 = HEAP32[$m_nodes_i_i >> 2];
      var $3 = $1;
      while (1) {
        var $3;
        var $4;
        var $i_06_i_i;
        var $maxBalance_05_i_i;
        if ((HEAP32[($4 + 32 >> 2) + ($i_06_i_i * 9 | 0)] | 0) < 2) {
          var $maxBalance_1_i_i = $maxBalance_05_i_i;
          var $14 = $4;
          var $13 = $3;
        } else {
          var $child1_i_i_i = $4 + $i_06_i_i * 36 + 24 | 0;
          var $6 = HEAP32[$child1_i_i_i >> 2];
          if (($6 | 0) == -1) {
            ___assert_func(STRING_TABLE.__str14 | 0, 686, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree13GetMaxBalanceEv | 0, STRING_TABLE.__str31 | 0);
            var $9 = HEAP32[$child1_i_i_i >> 2];
            var $8 = HEAP32[$m_nodes_i_i >> 2];
            var $_pre7_i_i = HEAP32[$0 >> 2];
          } else {
            var $9 = $6;
            var $8 = $4;
            var $_pre7_i_i = $3;
          }
          var $_pre7_i_i;
          var $8;
          var $9;
          var $sub_i_i = HEAP32[($8 + 32 >> 2) + (HEAP32[($4 + 28 >> 2) + ($i_06_i_i * 9 | 0)] * 9 | 0)] - HEAP32[($8 + 32 >> 2) + ($9 * 9 | 0)] | 0;
          var $cond_i3_i_i = ($sub_i_i | 0) > 0 ? $sub_i_i : -$sub_i_i | 0;
          var $cond_i_i_i = ($maxBalance_05_i_i | 0) > ($cond_i3_i_i | 0) ? $maxBalance_05_i_i : $cond_i3_i_i;
          var $maxBalance_1_i_i = $cond_i_i_i;
          var $14 = $8;
          var $13 = $_pre7_i_i;
        }
        var $13;
        var $14;
        var $maxBalance_1_i_i;
        var $inc_i_i = $i_06_i_i + 1 | 0;
        if (($inc_i_i | 0) >= ($13 | 0)) {
          var $maxBalance_0_lcssa_i_i = $maxBalance_1_i_i;
          break $for_body_lr_ph_i_i$$_ZNK12b2BroadPhase14GetTreeBalanceEv_exit$68;
        }
        var $maxBalance_05_i_i = $maxBalance_1_i_i;
        var $i_06_i_i = $inc_i_i;
        var $4 = $14;
        var $3 = $13;
      }
    } else {
      var $maxBalance_0_lcssa_i_i = 0;
    }
  } while (0);
  var $maxBalance_0_lcssa_i_i;
  return $maxBalance_0_lcssa_i_i;
  return null;
}

function __ZN7b2World4DumpEv($this) {
  var $j22_03$s2;
  var $j11_06$s2;
  var $m_jointList$s2;
  var $this$s2 = $this >> 2;
  if ((HEAP32[$this$s2 + 25717] & 2 | 0) == 0) {
    var $conv = HEAPF32[$this$s2 + 25742];
    var $conv3 = HEAPF32[$this$s2 + 25743];
    __Z5b2LogPKcz(STRING_TABLE.__str9183 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv3, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
    __Z5b2LogPKcz(STRING_TABLE.__str10184 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    var $3 = HEAP32[$this$s2 + 25740];
    __Z5b2LogPKcz(STRING_TABLE.__str11185 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $3, tempInt));
    var $4 = HEAP32[$this$s2 + 25741];
    __Z5b2LogPKcz(STRING_TABLE.__str12186 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $4, tempInt));
    var $b_011 = HEAP32[$this$s2 + 25738];
    var $tobool12 = ($b_011 | 0) == 0;
    $for_end$$for_body$93 : do {
      if (!$tobool12) {
        var $i_013 = 0;
        var $b_014 = $b_011;
        while (1) {
          var $b_014;
          var $i_013;
          HEAP32[$b_014 + 8 >> 2] = $i_013;
          __ZN6b2Body4DumpEv($b_014);
          var $b_0 = HEAP32[$b_014 + 96 >> 2];
          if (($b_0 | 0) == 0) {
            break $for_end$$for_body$93;
          }
          var $i_013 = $i_013 + 1 | 0;
          var $b_014 = $b_0;
        }
      }
    } while (0);
    var $m_jointList$s2 = ($this + 102956 | 0) >> 2;
    var $j_07 = HEAP32[$m_jointList$s2];
    var $tobool58 = ($j_07 | 0) == 0;
    $for_end35$$for_body6$97 : do {
      if (!$tobool58) {
        var $i_19 = 0;
        var $j_010 = $j_07;
        while (1) {
          var $j_010;
          var $i_19;
          HEAP32[$j_010 + 56 >> 2] = $i_19;
          var $j_0 = HEAP32[$j_010 + 12 >> 2];
          if (($j_0 | 0) == 0) {
            break;
          }
          var $i_19 = $i_19 + 1 | 0;
          var $j_010 = $j_0;
        }
        var $j11_04_pre = HEAP32[$m_jointList$s2];
        if (($j11_04_pre | 0) == 0) {
          break;
        }
        var $j11_06 = $j11_04_pre, $j11_06$s2 = $j11_06 >> 2;
        while (1) {
          var $j11_06;
          if ((HEAP32[$j11_06$s2 + 1] | 0) != 6) {
            __Z5b2LogPKcz(STRING_TABLE.__str13187 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
            var $8 = HEAP32[HEAP32[$j11_06$s2] + 16 >> 2];
            FUNCTION_TABLE[$8]($j11_06);
            __Z5b2LogPKcz(STRING_TABLE.__str14188 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          }
          var $j11_0 = HEAP32[$j11_06$s2 + 3];
          if (($j11_0 | 0) == 0) {
            break;
          }
          var $j11_06 = $j11_0, $j11_06$s2 = $j11_06 >> 2;
        }
        var $j22_01_pre = HEAP32[$m_jointList$s2];
        if (($j22_01_pre | 0) == 0) {
          break;
        }
        var $j22_03 = $j22_01_pre, $j22_03$s2 = $j22_03 >> 2;
        while (1) {
          var $j22_03;
          if ((HEAP32[$j22_03$s2 + 1] | 0) == 6) {
            __Z5b2LogPKcz(STRING_TABLE.__str13187 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
            var $11 = HEAP32[HEAP32[$j22_03$s2] + 16 >> 2];
            FUNCTION_TABLE[$11]($j22_03);
            __Z5b2LogPKcz(STRING_TABLE.__str14188 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          }
          var $j22_0 = HEAP32[$j22_03$s2 + 3];
          if (($j22_0 | 0) == 0) {
            break $for_end35$$for_body6$97;
          }
          var $j22_03 = $j22_0, $j22_03$s2 = $j22_03 >> 2;
        }
      }
    } while (0);
    __Z5b2LogPKcz(STRING_TABLE.__str15189 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    __Z5b2LogPKcz(STRING_TABLE.__str16190 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    __Z5b2LogPKcz(STRING_TABLE.__str17191 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    __Z5b2LogPKcz(STRING_TABLE.__str18192 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  return;
  return;
}

function __ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput($this, $callback, $input) {
  var $24$s2;
  var $m_capacity_i_i$s2;
  var $m_count_i_i$s2;
  var $m_stack_i_i182$s2;
  var $5$s2;
  var $0$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 1056;
  var $stack = __stackBase__;
  var $subInput = __stackBase__ + 1036;
  var $0$s2 = $input >> 2;
  var $2 = HEAP32[$0$s2];
  var $4 = (tempDoubleI32[0] = HEAP32[$0$s2 + 1], tempDoubleF32[0]);
  var $5$s2 = ($input + 8 | 0) >> 2;
  var $6$1 = HEAP32[$5$s2 + 1];
  var $8 = (tempDoubleI32[0] = HEAP32[$5$s2], tempDoubleF32[0]);
  var $10 = (tempDoubleI32[0] = $6$1, tempDoubleF32[0]);
  var $11 = (tempDoubleI32[0] = $2, tempDoubleF32[0]);
  var $sub_i = $8 - $11;
  var $sub3_i = $10 - $4;
  var $add_i = $sub_i * $sub_i + $sub3_i * $sub3_i;
  if ($add_i <= 0) {
    ___assert_func(STRING_TABLE.__str19193 | 0, 204, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput | 0, STRING_TABLE.__str20194 | 0);
  }
  var $call_i_i_i = _sqrtf($add_i);
  if ($call_i_i_i < 1.1920928955078125e-7) {
    var $sub_i193 = $sub_i;
    var $sub3_i194 = $sub3_i;
  } else {
    var $div_i = 1 / $call_i_i_i;
    var $sub_i193 = $sub_i * $div_i;
    var $sub3_i194 = $sub3_i * $div_i;
  }
  var $sub3_i194;
  var $sub_i193;
  var $mul_i8 = $sub3_i194 * -1;
  if ($mul_i8 > 0) {
    var $cond_i_i = $mul_i8;
  } else {
    var $cond_i_i = -$mul_i8;
  }
  var $cond_i_i;
  if ($sub_i193 > 0) {
    var $cond_i4_i = $sub_i193;
  } else {
    var $cond_i4_i = -$sub_i193;
  }
  var $cond_i4_i;
  var $12 = HEAPF32[$input + 16 >> 2];
  var $add_i135 = $11 + $sub_i * $12;
  var $add3_i138 = $4 + $sub3_i * $12;
  var $cond_i_i149 = $11 < $add_i135 ? $11 : $add_i135;
  var $cond_i2_i153 = $4 < $add3_i138 ? $4 : $add3_i138;
  var $13 = (tempDoubleF32[0] = $cond_i_i149, tempDoubleI32[0]);
  var $cond_i_i175 = $11 > $add_i135 ? $11 : $add_i135;
  var $cond_i2_i179 = $4 > $add3_i138 ? $4 : $add3_i138;
  var $arraydecay_i_i181 = $stack + 4 | 0;
  var $m_stack_i_i182$s2 = ($stack | 0) >> 2;
  HEAP32[$m_stack_i_i182$s2] = $arraydecay_i_i181;
  var $m_count_i_i$s2 = ($stack + 1028 | 0) >> 2;
  var $m_capacity_i_i$s2 = ($stack + 1032 | 0) >> 2;
  HEAP32[$m_capacity_i_i$s2] = 256;
  var $14 = HEAP32[$this >> 2];
  HEAP32[$arraydecay_i_i181 >> 2] = $14;
  HEAP32[$m_count_i_i$s2] = 1;
  var $m_nodes = $this + 4 | 0;
  var $15 = $subInput;
  var $16 = $subInput + 8 | 0;
  var $maxFraction43 = $subInput + 16 | 0;
  var $maxFraction_0_ph203 = $12;
  var $_ph202 = $13;
  var $_ph201 = $cond_i2_i153;
  var $_ph200 = $cond_i_i175;
  var $_ph199 = $cond_i2_i179;
  var $_ph198 = 1;
  $while_cond_outer$127 : while (1) {
    var $_ph198;
    var $_ph199;
    var $_ph200;
    var $_ph201;
    var $_ph202;
    var $maxFraction_0_ph203;
    var $17 = (tempDoubleI32[0] = $_ph202, tempDoubleF32[0]);
    var $18 = $_ph198;
    while (1) {
      var $18;
      if (($18 | 0) <= 0) {
        break $while_cond_outer$127;
      }
      var $dec_i = $18 - 1 | 0;
      HEAP32[$m_count_i_i$s2] = $dec_i;
      var $19 = HEAP32[$m_stack_i_i182$s2];
      var $20 = HEAP32[$19 + ($dec_i << 2) >> 2];
      if (($20 | 0) == -1) {
        var $maxFraction_0_ph = $maxFraction_0_ph203;
        var $_ph197 = $_ph202;
        var $_ph196 = $_ph201;
        var $_ph195 = $_ph200;
        var $_ph = $_ph199;
        break;
      }
      var $24 = HEAP32[$m_nodes >> 2], $24$s2 = $24 >> 2;
      var $26 = HEAPF32[$24$s2 + ($20 * 9 | 0) + 2];
      var $28 = HEAPF32[$24$s2 + ($20 * 9 | 0) + 3];
      var $29 = HEAPF32[$24$s2 + ($20 * 9 | 0)];
      var $31 = HEAPF32[$24$s2 + ($20 * 9 | 0) + 1];
      if ($17 - $26 > 0 | $_ph201 - $28 > 0 | $29 - $_ph200 > 0 | $31 - $_ph199 > 0) {
        var $maxFraction_0_ph = $maxFraction_0_ph203;
        var $_ph197 = $_ph202;
        var $_ph196 = $_ph201;
        var $_ph195 = $_ph200;
        var $_ph = $_ph199;
        break;
      }
      var $add_i99 = $mul_i8 * ($11 - ($29 + $26) * .5) + $sub_i193 * ($4 - ($31 + $28) * .5);
      if ($add_i99 > 0) {
        var $cond_i = $add_i99;
      } else {
        var $cond_i = -$add_i99;
      }
      var $cond_i;
      if ($cond_i - ($cond_i_i * ($26 - $29) * .5 + $cond_i4_i * ($28 - $31) * .5) > 0) {
        var $maxFraction_0_ph = $maxFraction_0_ph203;
        var $_ph197 = $_ph202;
        var $_ph196 = $_ph201;
        var $_ph195 = $_ph200;
        var $_ph = $_ph199;
        break;
      }
      var $32 = $24 + $20 * 36 + 24 | 0;
      if ((HEAP32[$32 >> 2] | 0) == -1) {
        var $34$0 = HEAP32[$0$s2];
        var $34$1 = HEAP32[$0$s2 + 1];
        HEAP32[$15 >> 2] = $34$0;
        HEAP32[$15 + 4 >> 2] = $34$1;
        var $35$0 = HEAP32[$5$s2];
        var $35$1 = HEAP32[$5$s2 + 1];
        HEAP32[$16 >> 2] = $35$0;
        HEAP32[$16 + 4 >> 2] = $35$1;
        HEAPF32[$maxFraction43 >> 2] = $maxFraction_0_ph203;
        var $call45 = __ZN21b2WorldRayCastWrapper15RayCastCallbackERK14b2RayCastInputi($callback, $subInput, $20);
        if ($call45 == 0) {
          break $while_cond_outer$127;
        }
        if ($call45 <= 0) {
          var $maxFraction_0_ph = $maxFraction_0_ph203;
          var $_ph197 = $_ph202;
          var $_ph196 = $_ph201;
          var $_ph195 = $_ph200;
          var $_ph = $_ph199;
          break;
        }
        var $add_i59 = $11 + $sub_i * $call45;
        var $add3_i = $4 + $sub3_i * $call45;
        var $cond_i_i51 = $11 < $add_i59 ? $11 : $add_i59;
        var $cond_i2_i55 = $4 < $add3_i ? $4 : $add3_i;
        var $36 = (tempDoubleF32[0] = $cond_i_i51, tempDoubleI32[0]);
        var $cond_i_i43 = $11 > $add_i59 ? $11 : $add_i59;
        var $cond_i2_i = $4 > $add3_i ? $4 : $add3_i;
        var $maxFraction_0_ph = $call45;
        var $_ph197 = $36;
        var $_ph196 = $cond_i2_i55;
        var $_ph195 = $cond_i_i43;
        var $_ph = $cond_i2_i;
        break;
      }
      var $37 = HEAP32[$m_capacity_i_i$s2];
      var $cmp_i19 = ($dec_i | 0) == ($37 | 0);
      do {
        if ($cmp_i19) {
          var $mul_i21 = $37 << 1;
          HEAP32[$m_capacity_i_i$s2] = $mul_i21;
          var $mul4_i22 = $37 << 3;
          var $call_i_i23 = _malloc($mul4_i22);
          var $38 = $call_i_i23;
          HEAP32[$m_stack_i_i182$s2] = $38;
          var $39 = $19;
          var $mul8_i24 = HEAP32[$m_count_i_i$s2] << 2;
          _memcpy($call_i_i23, $39, $mul8_i24, 1);
          if (($19 | 0) == ($arraydecay_i_i181 | 0)) {
            break;
          }
          _free($39);
        }
      } while (0);
      var $41 = HEAP32[$32 >> 2];
      var $arrayidx_i29 = (HEAP32[$m_count_i_i$s2] << 2) + HEAP32[$m_stack_i_i182$s2] | 0;
      HEAP32[$arrayidx_i29 >> 2] = $41;
      var $inc_i30 = HEAP32[$m_count_i_i$s2] + 1 | 0;
      HEAP32[$m_count_i_i$s2] = $inc_i30;
      var $child2 = $24 + $20 * 36 + 28 | 0;
      var $45 = HEAP32[$m_capacity_i_i$s2];
      var $cmp_i = ($inc_i30 | 0) == ($45 | 0);
      do {
        if ($cmp_i) {
          var $46 = HEAP32[$m_stack_i_i182$s2];
          var $mul_i3 = $45 << 1;
          HEAP32[$m_capacity_i_i$s2] = $mul_i3;
          var $mul4_i4 = $45 << 3;
          var $call_i_i = _malloc($mul4_i4);
          var $47 = $call_i_i;
          HEAP32[$m_stack_i_i182$s2] = $47;
          var $48 = $46;
          var $mul8_i = HEAP32[$m_count_i_i$s2] << 2;
          _memcpy($call_i_i, $48, $mul8_i, 1);
          if (($46 | 0) == ($arraydecay_i_i181 | 0)) {
            break;
          }
          _free($48);
        }
      } while (0);
      var $50 = HEAP32[$child2 >> 2];
      var $arrayidx_i = (HEAP32[$m_count_i_i$s2] << 2) + HEAP32[$m_stack_i_i182$s2] | 0;
      HEAP32[$arrayidx_i >> 2] = $50;
      var $inc_i = HEAP32[$m_count_i_i$s2] + 1 | 0;
      HEAP32[$m_count_i_i$s2] = $inc_i;
      var $18 = $inc_i;
    }
    var $_ph;
    var $_ph195;
    var $_ph196;
    var $_ph197;
    var $maxFraction_0_ph;
    var $maxFraction_0_ph203 = $maxFraction_0_ph;
    var $_ph202 = $_ph197;
    var $_ph201 = $_ph196;
    var $_ph200 = $_ph195;
    var $_ph199 = $_ph;
    var $_ph198 = HEAP32[$m_count_i_i$s2];
  }
  var $54 = HEAP32[$m_stack_i_i182$s2];
  if (($54 | 0) != ($arraydecay_i_i181 | 0)) {
    var $55 = $54;
    _free($55);
    HEAP32[$m_stack_i_i182$s2] = 0;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN23b2ChainAndCircleContactD1Ev($this) {
  return;
  return;
}

function __ZN24b2ChainAndPolygonContactD1Ev($this) {
  return;
  return;
}

function __ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  var $0 = HEAP16[$fixtureA + 36 >> 1];
  var $or_cond = $0 << 16 >> 16 != HEAP16[$fixtureB + 36 >> 1] << 16 >> 16 | $0 << 16 >> 16 == 0;
  do {
    if ($or_cond) {
      if ((HEAP16[$fixtureB + 32 >> 1] & HEAP16[$fixtureA + 34 >> 1]) << 16 >> 16 == 0) {
        var $retval_0 = 0;
        break;
      }
      var $retval_0 = (HEAP16[$fixtureB + 34 >> 1] & HEAP16[$fixtureA + 32 >> 1]) << 16 >> 16 != 0;
    } else {
      var $retval_0 = $0 << 16 >> 16 > 0;
    }
  } while (0);
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN21b2WorldRayCastWrapper15RayCastCallbackERK14b2RayCastInputi($this, $input, $proxyId) {
  var $input$s2 = $input >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 20;
  var __label__;
  var $output = __stackBase__;
  var $point = __stackBase__ + 12;
  var $0 = HEAP32[$this >> 2];
  var $cmp_i_i = ($proxyId | 0) > -1;
  do {
    if ($cmp_i_i) {
      if ((HEAP32[$0 + 12 >> 2] | 0) > ($proxyId | 0)) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str19193 | 0, 153, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree11GetUserDataEi | 0, STRING_TABLE.__str2111 | 0);
  }
  var $5 = HEAP32[(HEAP32[$0 + 4 >> 2] + 16 >> 2) + ($proxyId * 9 | 0)];
  var $7 = HEAP32[$5 + 16 >> 2];
  var $9 = HEAP32[$5 + 20 >> 2];
  var $10 = HEAP32[$7 + 12 >> 2];
  var $12 = HEAP32[HEAP32[$10 >> 2] + 20 >> 2];
  var $m_xf_i_i = HEAP32[$7 + 8 >> 2] + 12 | 0;
  var $call2_i = FUNCTION_TABLE[$12]($10, $output, $input, $m_xf_i_i, $9);
  if ($call2_i) {
    var $14 = HEAPF32[$output + 8 >> 2];
    var $sub = 1 - $14;
    var $add_i = HEAPF32[$input$s2] * $sub + HEAPF32[$input$s2 + 2] * $14;
    var $add3_i = HEAPF32[$input$s2 + 1] * $sub + HEAPF32[$input$s2 + 3] * $14;
    HEAPF32[$point >> 2] = $add_i;
    HEAPF32[$point + 4 >> 2] = $add3_i;
    var $19 = HEAP32[$this + 4 >> 2];
    var $21 = HEAP32[HEAP32[$19 >> 2] + 8 >> 2];
    var $normal = $output | 0;
    var $call6 = FUNCTION_TABLE[$21]($19, $7, $point, $normal, $14);
    var $retval_0 = $call6;
  } else {
    var $retval_0 = HEAPF32[$input$s2 + 4];
  }
  var $retval_0;
  STACKTOP = __stackBase__;
  return $retval_0;
  return null;
}

function __ZNK13b2DynamicTree5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($this, $callback, $aabb) {
  var $10$s2;
  var $m_capacity_i_i$s2;
  var $m_count_i_i$s2;
  var $m_stack_i_i$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 1036;
  var __label__;
  var $stack = __stackBase__;
  var $arraydecay_i_i = $stack + 4 | 0;
  var $m_stack_i_i$s2 = ($stack | 0) >> 2;
  HEAP32[$m_stack_i_i$s2] = $arraydecay_i_i;
  var $m_count_i_i$s2 = ($stack + 1028 | 0) >> 2;
  var $m_capacity_i_i$s2 = ($stack + 1032 | 0) >> 2;
  HEAP32[$m_capacity_i_i$s2] = 256;
  var $0 = HEAP32[$this >> 2];
  HEAP32[$arraydecay_i_i >> 2] = $0;
  HEAP32[$m_count_i_i$s2] = 1;
  var $m_nodes = $this + 4 | 0;
  var $x_i1_i = $aabb | 0;
  var $1 = $aabb + 4 | 0;
  var $2 = $aabb + 8 | 0;
  var $3 = $aabb + 12 | 0;
  var $broadPhase_i = $callback | 0;
  var $callback_i = $callback + 4 | 0;
  var $4 = 1;
  while (1) {
    var $4;
    if (($4 | 0) <= 0) {
      break;
    }
    var $dec_i = $4 - 1 | 0;
    HEAP32[$m_count_i_i$s2] = $dec_i;
    var $5 = HEAP32[$m_stack_i_i$s2];
    var $6 = HEAP32[$5 + ($dec_i << 2) >> 2];
    if (($6 | 0) == -1) {
      var $4 = $dec_i;
      continue;
    }
    var $10 = HEAP32[$m_nodes >> 2], $10$s2 = $10 >> 2;
    if (HEAPF32[$x_i1_i >> 2] - HEAPF32[$10$s2 + ($6 * 9 | 0) + 2] > 0 | HEAPF32[$1 >> 2] - HEAPF32[$10$s2 + ($6 * 9 | 0) + 3] > 0 | HEAPF32[$10$s2 + ($6 * 9 | 0)] - HEAPF32[$2 >> 2] > 0 | HEAPF32[$10$s2 + ($6 * 9 | 0) + 1] - HEAPF32[$3 >> 2] > 0) {
      var $4 = $dec_i;
      continue;
    }
    var $22 = $10 + $6 * 36 + 24 | 0;
    if ((HEAP32[$22 >> 2] | 0) == -1) {
      var $24 = HEAP32[$broadPhase_i >> 2];
      var $cmp_i_i_i = ($6 | 0) > -1;
      do {
        if ($cmp_i_i_i) {
          if ((HEAP32[$24 + 12 >> 2] | 0) > ($6 | 0)) {
            __label__ = 10;
            break;
          }
          __label__ = 9;
          break;
        } else {
          __label__ = 9;
        }
      } while (0);
      if (__label__ == 9) {
        ___assert_func(STRING_TABLE.__str19193 | 0, 153, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree11GetUserDataEi | 0, STRING_TABLE.__str2111 | 0);
      }
      var $30 = HEAP32[$callback_i >> 2];
      var $32 = HEAP32[HEAP32[$30 >> 2] + 8 >> 2];
      var $34 = HEAP32[HEAP32[(HEAP32[$24 + 4 >> 2] + 16 >> 2) + ($6 * 9 | 0)] + 16 >> 2];
      var $call2_i33 = FUNCTION_TABLE[$32]($30, $34);
      if (!$call2_i33) {
        break;
      }
      var $4 = HEAP32[$m_count_i_i$s2];
    } else {
      var $35 = HEAP32[$m_capacity_i_i$s2];
      var $cmp_i36 = ($dec_i | 0) == ($35 | 0);
      do {
        if ($cmp_i36) {
          var $mul_i38 = $35 << 1;
          HEAP32[$m_capacity_i_i$s2] = $mul_i38;
          var $mul4_i39 = $35 << 3;
          var $call_i_i40 = _malloc($mul4_i39);
          var $36 = $call_i_i40;
          HEAP32[$m_stack_i_i$s2] = $36;
          var $37 = $5;
          var $mul8_i41 = HEAP32[$m_count_i_i$s2] << 2;
          _memcpy($call_i_i40, $37, $mul8_i41, 1);
          if (($5 | 0) == ($arraydecay_i_i | 0)) {
            break;
          }
          _free($37);
        }
      } while (0);
      var $39 = HEAP32[$22 >> 2];
      var $arrayidx_i46 = (HEAP32[$m_count_i_i$s2] << 2) + HEAP32[$m_stack_i_i$s2] | 0;
      HEAP32[$arrayidx_i46 >> 2] = $39;
      var $inc_i47 = HEAP32[$m_count_i_i$s2] + 1 | 0;
      HEAP32[$m_count_i_i$s2] = $inc_i47;
      var $child2 = $10 + $6 * 36 + 28 | 0;
      var $43 = HEAP32[$m_capacity_i_i$s2];
      var $cmp_i17 = ($inc_i47 | 0) == ($43 | 0);
      do {
        if ($cmp_i17) {
          var $44 = HEAP32[$m_stack_i_i$s2];
          var $mul_i19 = $43 << 1;
          HEAP32[$m_capacity_i_i$s2] = $mul_i19;
          var $mul4_i20 = $43 << 3;
          var $call_i_i21 = _malloc($mul4_i20);
          var $45 = $call_i_i21;
          HEAP32[$m_stack_i_i$s2] = $45;
          var $46 = $44;
          var $mul8_i22 = HEAP32[$m_count_i_i$s2] << 2;
          _memcpy($call_i_i21, $46, $mul8_i22, 1);
          if (($44 | 0) == ($arraydecay_i_i | 0)) {
            break;
          }
          _free($46);
        }
      } while (0);
      var $48 = HEAP32[$child2 >> 2];
      var $arrayidx_i27 = (HEAP32[$m_count_i_i$s2] << 2) + HEAP32[$m_stack_i_i$s2] | 0;
      HEAP32[$arrayidx_i27 >> 2] = $48;
      var $inc_i28 = HEAP32[$m_count_i_i$s2] + 1 | 0;
      HEAP32[$m_count_i_i$s2] = $inc_i28;
      var $4 = $inc_i28;
    }
  }
  var $52 = HEAP32[$m_stack_i_i$s2];
  if (($52 | 0) != ($arraydecay_i_i | 0)) {
    var $53 = $52;
    _free($53);
    HEAP32[$m_stack_i_i$s2] = 0;
  }
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN15b2ContactFilterD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
  var $call$s2;
  var $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144), $call$s2 = $call >> 2;
  var $new_isnull = ($call | 0) == 0;
  do {
    if ($new_isnull) {
      var $20 = 0;
    } else {
      var $0 = $call;
      var $1 = $call;
      HEAP32[$1 >> 2] = __ZTV9b2Contact + 8 | 0;
      HEAP32[$call$s2 + 1] = 4;
      HEAP32[$call$s2 + 12] = $fixtureA;
      var $4 = $call + 52 | 0;
      HEAP32[$4 >> 2] = $fixtureB;
      HEAP32[$call$s2 + 14] = $indexA;
      HEAP32[$call$s2 + 15] = $indexB;
      HEAP32[$call$s2 + 31] = 0;
      var $m_prev_i_i = $call + 8 | 0;
      HEAP32[$call$s2 + 32] = 0;
      var $m_friction_i_i = $fixtureA + 16 | 0;
      for (var $$dest = $m_prev_i_i >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0;
      }
      var $mul_i_i_i = HEAPF32[$m_friction_i_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
      var $call_i_i_i_i = _sqrtf($mul_i_i_i);
      HEAPF32[$call$s2 + 34] = $call_i_i_i_i;
      var $12 = HEAPF32[$fixtureA + 20 >> 2];
      var $13 = HEAPF32[$fixtureB + 20 >> 2];
      var $cond_i_i_i = $12 > $13 ? $12 : $13;
      HEAPF32[$call$s2 + 35] = $cond_i_i_i;
      HEAP32[$1 >> 2] = __ZTV23b2ChainAndCircleContact + 8 | 0;
      if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 3) {
        var $17 = $fixtureB;
      } else {
        ___assert_func(STRING_TABLE.__str208 | 0, 43, STRING_TABLE.___PRETTY_FUNCTION____ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i | 0, STRING_TABLE.__str1212 | 0);
        var $17 = HEAP32[$4 >> 2];
      }
      var $17;
      if ((HEAP32[HEAP32[$17 + 12 >> 2] + 4 >> 2] | 0) == 0) {
        var $20 = $0;
        break;
      }
      ___assert_func(STRING_TABLE.__str208 | 0, 44, STRING_TABLE.___PRETTY_FUNCTION____ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i | 0, STRING_TABLE.__str2268 | 0);
      var $20 = $0;
    }
  } while (0);
  var $20;
  return $20 | 0;
  return null;
}

function __ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var $0 = $contact;
  var $2 = HEAP32[HEAP32[$contact >> 2] + 4 >> 2];
  FUNCTION_TABLE[$2]($0);
  var $3 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 144 | 0];
  var $conv_i = $3 & 255;
  if (($3 & 255) >= 14) {
    ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
  }
  var $4 = $contact;
  var $arrayidx11_i = ($conv_i << 2) + $allocator + 12 | 0;
  var $_c = HEAP32[$arrayidx11_i >> 2];
  HEAP32[$contact >> 2] = $_c;
  HEAP32[$arrayidx11_i >> 2] = $4;
  return;
  return;
}

function __ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i($this, $fixtureA, $indexA, $fixtureB, $indexB) {
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV9b2Contact + 8 | 0;
  HEAP32[$this$s2 + 1] = 4;
  HEAP32[$this$s2 + 12] = $fixtureA;
  var $m_fixtureB_i = $this + 52 | 0;
  HEAP32[$m_fixtureB_i >> 2] = $fixtureB;
  HEAP32[$this$s2 + 14] = $indexA;
  HEAP32[$this$s2 + 15] = $indexB;
  HEAP32[$this$s2 + 31] = 0;
  var $m_prev_i = $this + 8 | 0;
  HEAP32[$this$s2 + 32] = 0;
  var $m_friction_i = $fixtureA + 16 | 0;
  var $1 = $m_prev_i;
  for (var $$dest = $1 >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  var $mul_i_i = HEAPF32[$m_friction_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
  var $call_i_i_i = _sqrtf($mul_i_i);
  HEAPF32[$this$s2 + 34] = $call_i_i_i;
  var $4 = HEAPF32[$fixtureA + 20 >> 2];
  var $5 = HEAPF32[$fixtureB + 20 >> 2];
  var $cond_i_i = $4 > $5 ? $4 : $5;
  HEAPF32[$this$s2 + 35] = $cond_i_i;
  HEAP32[$0 >> 2] = __ZTV23b2ChainAndCircleContact + 8 | 0;
  if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 3) {
    var $8 = $fixtureB;
  } else {
    ___assert_func(STRING_TABLE.__str208 | 0, 43, STRING_TABLE.___PRETTY_FUNCTION____ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i | 0, STRING_TABLE.__str1212 | 0);
    var $8 = HEAP32[$m_fixtureB_i >> 2];
  }
  var $8;
  if ((HEAP32[HEAP32[$8 + 12 >> 2] + 4 >> 2] | 0) != 0) {
    ___assert_func(STRING_TABLE.__str208 | 0, 44, STRING_TABLE.___PRETTY_FUNCTION____ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i | 0, STRING_TABLE.__str2268 | 0);
  }
  return;
  return;
}

function __ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var $edge$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 48;
  var $edge = __stackBase__, $edge$s2 = $edge >> 2;
  var $1 = HEAP32[HEAP32[$this + 48 >> 2] + 12 >> 2];
  var $2 = $edge;
  HEAP32[$edge$s2] = __ZTV11b2EdgeShape + 8 | 0;
  HEAP32[$edge$s2 + 1] = 1;
  HEAPF32[$edge$s2 + 2] = .009999999776482582;
  HEAPF32[$edge$s2 + 7] = 0;
  HEAPF32[$edge$s2 + 8] = 0;
  HEAPF32[$edge$s2 + 9] = 0;
  HEAPF32[$edge$s2 + 10] = 0;
  HEAP8[$edge + 44 | 0] = 0;
  HEAP8[$edge + 45 | 0] = 0;
  var $12 = HEAP32[$this + 56 >> 2];
  var $13 = $1;
  __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($13, $2, $12);
  var $16 = $manifold;
  var $17 = $edge;
  var $18 = HEAP32[HEAP32[$this + 52 >> 2] + 12 >> 2];
  __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($16, $17, $xfA, $18, $xfB);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN23b2ChainAndCircleContactD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
  var $call$s2;
  var $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144), $call$s2 = $call >> 2;
  var $new_isnull = ($call | 0) == 0;
  do {
    if ($new_isnull) {
      var $20 = 0;
    } else {
      var $0 = $call;
      var $1 = $call;
      HEAP32[$1 >> 2] = __ZTV9b2Contact + 8 | 0;
      HEAP32[$call$s2 + 1] = 4;
      HEAP32[$call$s2 + 12] = $fixtureA;
      var $4 = $call + 52 | 0;
      HEAP32[$4 >> 2] = $fixtureB;
      HEAP32[$call$s2 + 14] = $indexA;
      HEAP32[$call$s2 + 15] = $indexB;
      HEAP32[$call$s2 + 31] = 0;
      var $m_prev_i_i = $call + 8 | 0;
      HEAP32[$call$s2 + 32] = 0;
      var $m_friction_i_i = $fixtureA + 16 | 0;
      for (var $$dest = $m_prev_i_i >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0;
      }
      var $mul_i_i_i = HEAPF32[$m_friction_i_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
      var $call_i_i_i_i = _sqrtf($mul_i_i_i);
      HEAPF32[$call$s2 + 34] = $call_i_i_i_i;
      var $12 = HEAPF32[$fixtureA + 20 >> 2];
      var $13 = HEAPF32[$fixtureB + 20 >> 2];
      var $cond_i_i_i = $12 > $13 ? $12 : $13;
      HEAPF32[$call$s2 + 35] = $cond_i_i_i;
      HEAP32[$1 >> 2] = __ZTV24b2ChainAndPolygonContact + 8 | 0;
      if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 3) {
        var $17 = $fixtureB;
      } else {
        ___assert_func(STRING_TABLE.__str211 | 0, 43, STRING_TABLE.___PRETTY_FUNCTION____ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i | 0, STRING_TABLE.__str1212 | 0);
        var $17 = HEAP32[$4 >> 2];
      }
      var $17;
      if ((HEAP32[HEAP32[$17 + 12 >> 2] + 4 >> 2] | 0) == 2) {
        var $20 = $0;
        break;
      }
      ___assert_func(STRING_TABLE.__str211 | 0, 44, STRING_TABLE.___PRETTY_FUNCTION____ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i | 0, STRING_TABLE.__str2275 | 0);
      var $20 = $0;
    }
  } while (0);
  var $20;
  return $20 | 0;
  return null;
}

function __ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var $0 = $contact;
  var $2 = HEAP32[HEAP32[$contact >> 2] + 4 >> 2];
  FUNCTION_TABLE[$2]($0);
  var $3 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 144 | 0];
  var $conv_i = $3 & 255;
  if (($3 & 255) >= 14) {
    ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
  }
  var $4 = $contact;
  var $arrayidx11_i = ($conv_i << 2) + $allocator + 12 | 0;
  var $_c = HEAP32[$arrayidx11_i >> 2];
  HEAP32[$contact >> 2] = $_c;
  HEAP32[$arrayidx11_i >> 2] = $4;
  return;
  return;
}

function __ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i($this, $fixtureA, $indexA, $fixtureB, $indexB) {
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV9b2Contact + 8 | 0;
  HEAP32[$this$s2 + 1] = 4;
  HEAP32[$this$s2 + 12] = $fixtureA;
  var $m_fixtureB_i = $this + 52 | 0;
  HEAP32[$m_fixtureB_i >> 2] = $fixtureB;
  HEAP32[$this$s2 + 14] = $indexA;
  HEAP32[$this$s2 + 15] = $indexB;
  HEAP32[$this$s2 + 31] = 0;
  var $m_prev_i = $this + 8 | 0;
  HEAP32[$this$s2 + 32] = 0;
  var $m_friction_i = $fixtureA + 16 | 0;
  var $1 = $m_prev_i;
  for (var $$dest = $1 >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  var $mul_i_i = HEAPF32[$m_friction_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
  var $call_i_i_i = _sqrtf($mul_i_i);
  HEAPF32[$this$s2 + 34] = $call_i_i_i;
  var $4 = HEAPF32[$fixtureA + 20 >> 2];
  var $5 = HEAPF32[$fixtureB + 20 >> 2];
  var $cond_i_i = $4 > $5 ? $4 : $5;
  HEAPF32[$this$s2 + 35] = $cond_i_i;
  HEAP32[$0 >> 2] = __ZTV24b2ChainAndPolygonContact + 8 | 0;
  if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 3) {
    var $8 = $fixtureB;
  } else {
    ___assert_func(STRING_TABLE.__str211 | 0, 43, STRING_TABLE.___PRETTY_FUNCTION____ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i | 0, STRING_TABLE.__str1212 | 0);
    var $8 = HEAP32[$m_fixtureB_i >> 2];
  }
  var $8;
  if ((HEAP32[HEAP32[$8 + 12 >> 2] + 4 >> 2] | 0) != 2) {
    ___assert_func(STRING_TABLE.__str211 | 0, 44, STRING_TABLE.___PRETTY_FUNCTION____ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i | 0, STRING_TABLE.__str2275 | 0);
  }
  return;
  return;
}

function __ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var $edge$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 300;
  var $collider_i = __stackBase__;
  var $edge = __stackBase__ + 252, $edge$s2 = $edge >> 2;
  var $1 = HEAP32[HEAP32[$this + 48 >> 2] + 12 >> 2];
  var $2 = $edge;
  HEAP32[$edge$s2] = __ZTV11b2EdgeShape + 8 | 0;
  HEAP32[$edge$s2 + 1] = 1;
  HEAPF32[$edge$s2 + 2] = .009999999776482582;
  HEAPF32[$edge$s2 + 7] = 0;
  HEAPF32[$edge$s2 + 8] = 0;
  HEAPF32[$edge$s2 + 9] = 0;
  HEAPF32[$edge$s2 + 10] = 0;
  HEAP8[$edge + 44 | 0] = 0;
  HEAP8[$edge + 45 | 0] = 0;
  var $12 = HEAP32[$this + 56 >> 2];
  var $13 = $1;
  __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($13, $2, $12);
  var $16 = $manifold;
  var $17 = $edge;
  var $18 = HEAP32[HEAP32[$this + 52 >> 2] + 12 >> 2];
  __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($collider_i, $16, $17, $xfA, $18, $xfB);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN24b2ChainAndPolygonContactD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  var $call$s2;
  var $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144), $call$s2 = $call >> 2;
  var $new_isnull = ($call | 0) == 0;
  do {
    if ($new_isnull) {
      var $22 = 0;
    } else {
      var $2 = $call;
      var $3 = $call;
      HEAP32[$3 >> 2] = __ZTV9b2Contact + 8 | 0;
      HEAP32[$call$s2 + 1] = 4;
      HEAP32[$call$s2 + 12] = $fixtureA;
      var $6 = $call + 52 | 0;
      HEAP32[$6 >> 2] = $fixtureB;
      HEAP32[$call$s2 + 14] = 0;
      HEAP32[$call$s2 + 15] = 0;
      HEAP32[$call$s2 + 31] = 0;
      var $m_prev_i_i = $call + 8 | 0;
      HEAP32[$call$s2 + 32] = 0;
      var $m_friction_i_i = $fixtureA + 16 | 0;
      for (var $$dest = $m_prev_i_i >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0;
      }
      var $mul_i_i_i = HEAPF32[$m_friction_i_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
      var $call_i_i_i_i = _sqrtf($mul_i_i_i);
      HEAPF32[$call$s2 + 34] = $call_i_i_i_i;
      var $14 = HEAPF32[$fixtureA + 20 >> 2];
      var $15 = HEAPF32[$fixtureB + 20 >> 2];
      var $cond_i_i_i = $14 > $15 ? $14 : $15;
      HEAPF32[$call$s2 + 35] = $cond_i_i_i;
      HEAP32[$3 >> 2] = __ZTV15b2CircleContact + 8 | 0;
      if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 0) {
        var $19 = $fixtureB;
      } else {
        ___assert_func(STRING_TABLE.__str214 | 0, 44, STRING_TABLE.___PRETTY_FUNCTION____ZN15b2CircleContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str1215 | 0);
        var $19 = HEAP32[$6 >> 2];
      }
      var $19;
      if ((HEAP32[HEAP32[$19 + 12 >> 2] + 4 >> 2] | 0) == 0) {
        var $22 = $2;
        break;
      }
      ___assert_func(STRING_TABLE.__str214 | 0, 45, STRING_TABLE.___PRETTY_FUNCTION____ZN15b2CircleContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str2268 | 0);
      var $22 = $2;
    }
  } while (0);
  var $22;
  return $22 | 0;
  return null;
}

function __ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var $0 = $contact;
  var $2 = HEAP32[HEAP32[$contact >> 2] + 4 >> 2];
  FUNCTION_TABLE[$2]($0);
  var $3 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 144 | 0];
  var $conv_i = $3 & 255;
  if (($3 & 255) >= 14) {
    ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
  }
  var $4 = $contact;
  var $arrayidx11_i = ($conv_i << 2) + $allocator + 12 | 0;
  var $_c = HEAP32[$arrayidx11_i >> 2];
  HEAP32[$contact >> 2] = $_c;
  HEAP32[$arrayidx11_i >> 2] = $4;
  return;
  return;
}

function __ZN15b2CircleContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV9b2Contact + 8 | 0;
  HEAP32[$this$s2 + 1] = 4;
  HEAP32[$this$s2 + 12] = $fixtureA;
  var $m_fixtureB_i = $this + 52 | 0;
  HEAP32[$m_fixtureB_i >> 2] = $fixtureB;
  HEAP32[$this$s2 + 14] = 0;
  HEAP32[$this$s2 + 15] = 0;
  HEAP32[$this$s2 + 31] = 0;
  var $m_prev_i = $this + 8 | 0;
  HEAP32[$this$s2 + 32] = 0;
  var $m_friction_i = $fixtureA + 16 | 0;
  var $1 = $m_prev_i;
  for (var $$dest = $1 >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  var $mul_i_i = HEAPF32[$m_friction_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
  var $call_i_i_i = _sqrtf($mul_i_i);
  HEAPF32[$this$s2 + 34] = $call_i_i_i;
  var $4 = HEAPF32[$fixtureA + 20 >> 2];
  var $5 = HEAPF32[$fixtureB + 20 >> 2];
  var $cond_i_i = $4 > $5 ? $4 : $5;
  HEAPF32[$this$s2 + 35] = $cond_i_i;
  HEAP32[$0 >> 2] = __ZTV15b2CircleContact + 8 | 0;
  if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 0) {
    var $8 = $fixtureB;
  } else {
    ___assert_func(STRING_TABLE.__str214 | 0, 44, STRING_TABLE.___PRETTY_FUNCTION____ZN15b2CircleContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str1215 | 0);
    var $8 = HEAP32[$m_fixtureB_i >> 2];
  }
  var $8;
  if ((HEAP32[HEAP32[$8 + 12 >> 2] + 4 >> 2] | 0) != 0) {
    ___assert_func(STRING_TABLE.__str214 | 0, 45, STRING_TABLE.___PRETTY_FUNCTION____ZN15b2CircleContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str2268 | 0);
  }
  return;
  return;
}

function __ZN15b2CircleContactD1Ev($this) {
  return;
  return;
}

function __ZN9b2Contact19InitializeRegistersEv() {
  HEAP32[__ZN9b2Contact11s_registersE >> 2] = 4;
  HEAP32[__ZN9b2Contact11s_registersE + 4 >> 2] = 6;
  HEAP8[__ZN9b2Contact11s_registersE + 8 | 0] = 1;
  HEAP32[__ZN9b2Contact11s_registersE + 96 >> 2] = 8;
  HEAP32[__ZN9b2Contact11s_registersE + 100 >> 2] = 10;
  HEAP8[__ZN9b2Contact11s_registersE + 104 | 0] = 1;
  HEAP32[__ZN9b2Contact11s_registersE + 24 >> 2] = 8;
  HEAP32[__ZN9b2Contact11s_registersE + 28 >> 2] = 10;
  HEAP8[__ZN9b2Contact11s_registersE + 32 | 0] = 0;
  HEAP32[__ZN9b2Contact11s_registersE + 120 >> 2] = 12;
  HEAP32[__ZN9b2Contact11s_registersE + 124 >> 2] = 14;
  HEAP8[__ZN9b2Contact11s_registersE + 128 | 0] = 1;
  HEAP32[__ZN9b2Contact11s_registersE + 48 >> 2] = 16;
  HEAP32[__ZN9b2Contact11s_registersE + 52 >> 2] = 18;
  HEAP8[__ZN9b2Contact11s_registersE + 56 | 0] = 1;
  HEAP32[__ZN9b2Contact11s_registersE + 12 >> 2] = 16;
  HEAP32[__ZN9b2Contact11s_registersE + 16 >> 2] = 18;
  HEAP8[__ZN9b2Contact11s_registersE + 20 | 0] = 0;
  HEAP32[__ZN9b2Contact11s_registersE + 72 >> 2] = 20;
  HEAP32[__ZN9b2Contact11s_registersE + 76 >> 2] = 22;
  HEAP8[__ZN9b2Contact11s_registersE + 80 | 0] = 1;
  HEAP32[__ZN9b2Contact11s_registersE + 108 >> 2] = 20;
  HEAP32[__ZN9b2Contact11s_registersE + 112 >> 2] = 22;
  HEAP8[__ZN9b2Contact11s_registersE + 116 | 0] = 0;
  HEAP32[__ZN9b2Contact11s_registersE + 144 >> 2] = 24;
  HEAP32[__ZN9b2Contact11s_registersE + 148 >> 2] = 26;
  HEAP8[__ZN9b2Contact11s_registersE + 152 | 0] = 1;
  HEAP32[__ZN9b2Contact11s_registersE + 36 >> 2] = 24;
  HEAP32[__ZN9b2Contact11s_registersE + 40 >> 2] = 26;
  HEAP8[__ZN9b2Contact11s_registersE + 44 | 0] = 0;
  HEAP32[__ZN9b2Contact11s_registersE + 168 >> 2] = 28;
  HEAP32[__ZN9b2Contact11s_registersE + 172 >> 2] = 30;
  HEAP8[__ZN9b2Contact11s_registersE + 176 | 0] = 1;
  HEAP32[__ZN9b2Contact11s_registersE + 132 >> 2] = 28;
  HEAP32[__ZN9b2Contact11s_registersE + 136 >> 2] = 30;
  HEAP8[__ZN9b2Contact11s_registersE + 140 | 0] = 0;
  return;
  return;
}

function __ZN9b2ContactD1Ev($this) {
  return;
  return;
}

function __ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var $1 = HEAP32[HEAP32[$this + 48 >> 2] + 12 >> 2];
  var $3 = HEAP32[HEAP32[$this + 52 >> 2] + 12 >> 2];
  var $4 = $manifold + 60 | 0;
  HEAP32[$4 >> 2] = 0;
  var $m_p_i = $1 + 12 | 0;
  var $5 = HEAPF32[$xfA + 12 >> 2];
  var $6 = HEAPF32[$m_p_i >> 2];
  var $7 = HEAPF32[$xfA + 8 >> 2];
  var $9 = HEAPF32[$1 + 16 >> 2];
  var $m_p1_i = $3 + 12 | 0;
  var $12 = HEAPF32[$xfB + 12 >> 2];
  var $13 = HEAPF32[$m_p1_i >> 2];
  var $14 = HEAPF32[$xfB + 8 >> 2];
  var $16 = HEAPF32[$3 + 16 >> 2];
  var $sub_i10_i = $12 * $13 - $14 * $16 + HEAPF32[$xfB >> 2] - ($5 * $6 - $7 * $9 + HEAPF32[$xfA >> 2]);
  var $sub3_i_i = $14 * $13 + $12 * $16 + HEAPF32[$xfB + 4 >> 2] - ($7 * $6 + $5 * $9 + HEAPF32[$xfA + 4 >> 2]);
  var $add_i = HEAPF32[$1 + 8 >> 2] + HEAPF32[$3 + 8 >> 2];
  if ($sub_i10_i * $sub_i10_i + $sub3_i_i * $sub3_i_i <= $add_i * $add_i) {
    HEAP32[$manifold + 56 >> 2] = 0;
    var $25 = $m_p_i;
    var $26 = $manifold + 48 | 0;
    var $27$0 = HEAP32[$25 >> 2];
    var $27$1 = HEAP32[$25 + 4 >> 2];
    HEAP32[$26 >> 2] = $27$0;
    HEAP32[$26 + 4 >> 2] = $27$1;
    HEAPF32[$manifold + 40 >> 2] = 0;
    HEAPF32[$manifold + 44 >> 2] = 0;
    HEAP32[$4 >> 2] = 1;
    var $30 = $m_p1_i;
    var $31 = $manifold;
    var $32$0 = HEAP32[$30 >> 2];
    var $32$1 = HEAP32[$30 + 4 >> 2];
    HEAP32[$31 >> 2] = $32$0;
    HEAP32[$31 + 4 >> 2] = $32$1;
    HEAP32[$manifold + 16 >> 2] = 0;
  }
  return;
  return;
}

function __ZN15b2CircleContactD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_($createFcn, $destoryFcn, $type1, $type2) {
  if ($type1 >>> 0 >= 4) {
    ___assert_func(STRING_TABLE.__str217 | 0, 54, STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_ | 0, STRING_TABLE.__str1218 | 0);
  }
  if ($type2 >>> 0 >= 4) {
    ___assert_func(STRING_TABLE.__str217 | 0, 55, STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_ | 0, STRING_TABLE.__str2219 | 0);
  }
  HEAP32[(__ZN9b2Contact11s_registersE >> 2) + ($type1 * 12 | 0) + ($type2 * 3 | 0)] = $createFcn;
  HEAP32[(__ZN9b2Contact11s_registersE + 4 >> 2) + ($type1 * 12 | 0) + ($type2 * 3 | 0)] = $destoryFcn;
  HEAP8[__ZN9b2Contact11s_registersE + $type1 * 48 + $type2 * 12 + 8 | 0] = 1;
  if (($type1 | 0) != ($type2 | 0)) {
    HEAP32[(__ZN9b2Contact11s_registersE >> 2) + ($type2 * 12 | 0) + ($type1 * 3 | 0)] = $createFcn;
    HEAP32[(__ZN9b2Contact11s_registersE + 4 >> 2) + ($type2 * 12 | 0) + ($type1 * 3 | 0)] = $destoryFcn;
    HEAP8[__ZN9b2Contact11s_registersE + $type2 * 48 + $type1 * 12 + 8 | 0] = 0;
  }
  return;
  return;
}

function __ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
  if ((HEAP8[__ZN9b2Contact13s_initializedE] & 1) << 24 >> 24 == 0) {
    HEAP32[__ZN9b2Contact11s_registersE >> 2] = 4;
    HEAP32[__ZN9b2Contact11s_registersE + 4 >> 2] = 6;
    HEAP8[__ZN9b2Contact11s_registersE + 8 | 0] = 1;
    HEAP32[__ZN9b2Contact11s_registersE + 96 >> 2] = 8;
    HEAP32[__ZN9b2Contact11s_registersE + 100 >> 2] = 10;
    HEAP8[__ZN9b2Contact11s_registersE + 104 | 0] = 1;
    HEAP32[__ZN9b2Contact11s_registersE + 24 >> 2] = 8;
    HEAP32[__ZN9b2Contact11s_registersE + 28 >> 2] = 10;
    HEAP8[__ZN9b2Contact11s_registersE + 32 | 0] = 0;
    HEAP32[__ZN9b2Contact11s_registersE + 120 >> 2] = 12;
    HEAP32[__ZN9b2Contact11s_registersE + 124 >> 2] = 14;
    HEAP8[__ZN9b2Contact11s_registersE + 128 | 0] = 1;
    HEAP32[__ZN9b2Contact11s_registersE + 48 >> 2] = 16;
    HEAP32[__ZN9b2Contact11s_registersE + 52 >> 2] = 18;
    HEAP8[__ZN9b2Contact11s_registersE + 56 | 0] = 1;
    HEAP32[__ZN9b2Contact11s_registersE + 12 >> 2] = 16;
    HEAP32[__ZN9b2Contact11s_registersE + 16 >> 2] = 18;
    HEAP8[__ZN9b2Contact11s_registersE + 20 | 0] = 0;
    HEAP32[__ZN9b2Contact11s_registersE + 72 >> 2] = 20;
    HEAP32[__ZN9b2Contact11s_registersE + 76 >> 2] = 22;
    HEAP8[__ZN9b2Contact11s_registersE + 80 | 0] = 1;
    HEAP32[__ZN9b2Contact11s_registersE + 108 >> 2] = 20;
    HEAP32[__ZN9b2Contact11s_registersE + 112 >> 2] = 22;
    HEAP8[__ZN9b2Contact11s_registersE + 116 | 0] = 0;
    HEAP32[__ZN9b2Contact11s_registersE + 144 >> 2] = 24;
    HEAP32[__ZN9b2Contact11s_registersE + 148 >> 2] = 26;
    HEAP8[__ZN9b2Contact11s_registersE + 152 | 0] = 1;
    HEAP32[__ZN9b2Contact11s_registersE + 36 >> 2] = 24;
    HEAP32[__ZN9b2Contact11s_registersE + 40 >> 2] = 26;
    HEAP8[__ZN9b2Contact11s_registersE + 44 | 0] = 0;
    HEAP32[__ZN9b2Contact11s_registersE + 168 >> 2] = 28;
    HEAP32[__ZN9b2Contact11s_registersE + 172 >> 2] = 30;
    HEAP8[__ZN9b2Contact11s_registersE + 176 | 0] = 1;
    HEAP32[__ZN9b2Contact11s_registersE + 132 >> 2] = 28;
    HEAP32[__ZN9b2Contact11s_registersE + 136 >> 2] = 30;
    HEAP8[__ZN9b2Contact11s_registersE + 140 | 0] = 0;
    HEAP8[__ZN9b2Contact13s_initializedE] = 1;
  }
  var $3 = HEAPU32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2];
  var $5 = HEAPU32[HEAP32[$fixtureB + 12 >> 2] + 4 >> 2];
  if ($3 >>> 0 >= 4) {
    ___assert_func(STRING_TABLE.__str217 | 0, 80, STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator | 0, STRING_TABLE.__str1218 | 0);
  }
  if ($5 >>> 0 >= 4) {
    ___assert_func(STRING_TABLE.__str217 | 0, 81, STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator | 0, STRING_TABLE.__str2219 | 0);
  }
  var $8 = HEAPU32[(__ZN9b2Contact11s_registersE >> 2) + ($3 * 12 | 0) + ($5 * 3 | 0)];
  if (($8 | 0) == 0) {
    var $retval_0 = 0;
  } else {
    if ((HEAP8[__ZN9b2Contact11s_registersE + $3 * 48 + $5 * 12 + 8 | 0] & 1) << 24 >> 24 == 0) {
      var $call19 = FUNCTION_TABLE[$8]($fixtureB, $indexB, $fixtureA, $indexA, $allocator);
      var $retval_0 = $call19;
    } else {
      var $call18 = FUNCTION_TABLE[$8]($fixtureA, $indexA, $fixtureB, $indexB, $allocator);
      var $retval_0 = $call18;
    }
  }
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($contact, $allocator) {
  if ((HEAP8[__ZN9b2Contact13s_initializedE] & 1) << 24 >> 24 == 0) {
    ___assert_func(STRING_TABLE.__str217 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7DestroyEPS_P16b2BlockAllocator | 0, STRING_TABLE.__str3220 | 0);
  }
  var $cmp1 = (HEAP32[$contact + 124 >> 2] | 0) > 0;
  var $m_fixtureA_i = $contact + 48 | 0;
  do {
    if ($cmp1) {
      var $4 = HEAP32[HEAP32[$m_fixtureA_i >> 2] + 8 >> 2];
      var $5 = $4 + 4 | 0;
      var $6 = HEAP16[$5 >> 1];
      if (($6 & 2) << 16 >> 16 == 0) {
        var $or_i10 = $6 | 2;
        HEAP16[$5 >> 1] = $or_i10;
        HEAPF32[$4 + 144 >> 2] = 0;
      }
      var $m_fixtureB_i6 = $contact + 52 | 0;
      var $9 = HEAP32[HEAP32[$m_fixtureB_i6 >> 2] + 8 >> 2];
      var $10 = $9 + 4 | 0;
      var $11 = HEAP16[$10 >> 1];
      if (($11 & 2) << 16 >> 16 != 0) {
        var $m_fixtureB_i_pre_phi = $m_fixtureB_i6;
        break;
      }
      var $or_i = $11 | 2;
      HEAP16[$10 >> 1] = $or_i;
      HEAPF32[$9 + 144 >> 2] = 0;
      var $m_fixtureB_i_pre_phi = $m_fixtureB_i6;
    } else {
      var $m_fixtureB_i_pre_phi = $contact + 52 | 0;
    }
  } while (0);
  var $m_fixtureB_i_pre_phi;
  var $15 = HEAP32[HEAP32[HEAP32[$m_fixtureA_i >> 2] + 12 >> 2] + 4 >> 2];
  var $18 = HEAP32[HEAP32[HEAP32[$m_fixtureB_i_pre_phi >> 2] + 12 >> 2] + 4 >> 2];
  if (!(($15 | 0) > -1 & ($18 | 0) < 4)) {
    ___assert_func(STRING_TABLE.__str217 | 0, 114, STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7DestroyEPS_P16b2BlockAllocator | 0, STRING_TABLE.__str4221 | 0);
    ___assert_func(STRING_TABLE.__str217 | 0, 115, STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7DestroyEPS_P16b2BlockAllocator | 0, STRING_TABLE.__str4221 | 0);
  }
  var $19 = HEAP32[(__ZN9b2Contact11s_registersE + 4 >> 2) + ($15 * 12 | 0) + ($18 * 3 | 0)];
  FUNCTION_TABLE[$19]($contact, $allocator);
  return;
  return;
}

function __ZN9b2ContactC2EP9b2FixtureiS1_i($this, $fA, $indexA, $fB, $indexB) {
  var $this$s2 = $this >> 2;
  HEAP32[$this$s2] = __ZTV9b2Contact + 8 | 0;
  HEAP32[$this$s2 + 1] = 4;
  HEAP32[$this$s2 + 12] = $fA;
  HEAP32[$this$s2 + 13] = $fB;
  HEAP32[$this$s2 + 14] = $indexA;
  HEAP32[$this$s2 + 15] = $indexB;
  HEAP32[$this$s2 + 31] = 0;
  var $m_prev = $this + 8 | 0;
  HEAP32[$this$s2 + 32] = 0;
  var $m_friction = $fA + 16 | 0;
  var $1 = $m_prev;
  for (var $$dest = $1 >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  var $mul_i = HEAPF32[$m_friction >> 2] * HEAPF32[$fB + 16 >> 2];
  var $call_i_i = _sqrtf($mul_i);
  HEAPF32[$this$s2 + 34] = $call_i_i;
  var $4 = HEAPF32[$fA + 20 >> 2];
  var $5 = HEAPF32[$fB + 20 >> 2];
  var $cond_i = $4 > $5 ? $4 : $5;
  HEAPF32[$this$s2 + 35] = $cond_i;
  return;
  return;
}

function __ZN9b2Contact6UpdateEP17b2ContactListener($this, $listener) {
  var $22$s2;
  var $21$s2;
  var $20$s2;
  var $19$s2;
  var $m_flags$s2;
  var $oldManifold$s2;
  var $input_i$s2;
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 192;
  var $input_i = __stackBase__, $input_i$s2 = $input_i >> 2;
  var $cache_i = __stackBase__ + 92;
  var $output_i = __stackBase__ + 104;
  var $oldManifold = __stackBase__ + 128, $oldManifold$s2 = $oldManifold >> 2;
  var $m_manifold = $this + 64 | 0;
  var $0 = $oldManifold;
  var $1 = $m_manifold;
  for (var $$src = $1 >> 2, $$dest = $0 >> 2, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  var $m_flags$s2 = ($this + 4 | 0) >> 2;
  var $2 = HEAPU32[$m_flags$s2];
  HEAP32[$m_flags$s2] = $2 | 4;
  var $and = $2 >>> 1;
  var $3 = HEAPU32[$this$s2 + 12];
  var $5 = HEAPU32[$this$s2 + 13];
  var $9 = ((HEAP8[$5 + 38 | 0] | HEAP8[$3 + 38 | 0]) & 1) << 24 >> 24 != 0;
  var $10 = HEAPU32[$3 + 8 >> 2];
  var $11 = HEAPU32[$5 + 8 >> 2];
  var $m_xf_i = $10 + 12 | 0;
  var $m_xf_i17 = $11 + 12 | 0;
  do {
    if ($9) {
      var $12 = HEAP32[$3 + 12 >> 2];
      var $13 = HEAP32[$5 + 12 >> 2];
      var $14 = HEAP32[$this$s2 + 14];
      var $15 = HEAP32[$this$s2 + 15];
      HEAP32[$input_i$s2 + 4] = 0;
      HEAP32[$input_i$s2 + 5] = 0;
      HEAPF32[$input_i$s2 + 6] = 0;
      HEAP32[$input_i$s2 + 11] = 0;
      HEAP32[$input_i$s2 + 12] = 0;
      HEAPF32[$input_i$s2 + 13] = 0;
      var $proxyA_i = $input_i | 0;
      __ZN15b2DistanceProxy3SetEPK7b2Shapei($proxyA_i, $12, $14);
      var $proxyB_i = $input_i + 28 | 0;
      __ZN15b2DistanceProxy3SetEPK7b2Shapei($proxyB_i, $13, $15);
      var $19$s2 = ($input_i + 56 | 0) >> 2;
      var $20$s2 = $m_xf_i >> 2;
      HEAP32[$19$s2] = HEAP32[$20$s2];
      HEAP32[$19$s2 + 1] = HEAP32[$20$s2 + 1];
      HEAP32[$19$s2 + 2] = HEAP32[$20$s2 + 2];
      HEAP32[$19$s2 + 3] = HEAP32[$20$s2 + 3];
      var $21$s2 = ($input_i + 72 | 0) >> 2;
      var $22$s2 = $m_xf_i17 >> 2;
      HEAP32[$21$s2] = HEAP32[$22$s2];
      HEAP32[$21$s2 + 1] = HEAP32[$22$s2 + 1];
      HEAP32[$21$s2 + 2] = HEAP32[$22$s2 + 2];
      HEAP32[$21$s2 + 3] = HEAP32[$22$s2 + 3];
      HEAP8[$input_i + 88 | 0] = 1;
      HEAP16[$cache_i + 4 >> 1] = 0;
      __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output_i, $cache_i, $input_i);
      var $frombool20 = HEAPF32[$output_i + 16 >> 2] < 11920928955078125e-22 & 1;
      HEAP32[$this$s2 + 31] = 0;
      var $touching_0 = $frombool20;
      var $_pre_phi = $and & 1;
    } else {
      var $25 = HEAP32[HEAP32[$this$s2] >> 2];
      FUNCTION_TABLE[$25]($this, $m_manifold, $m_xf_i, $m_xf_i17);
      var $pointCount24 = $this + 124 | 0;
      var $cmp25 = (HEAP32[$pointCount24 >> 2] | 0) > 0;
      var $frombool26 = $cmp25 & 1;
      $for_body_lr_ph$$for_end48$54 : do {
        if ($cmp25) {
          var $27 = HEAP32[$oldManifold$s2 + 15];
          var $i_021 = 0;
          while (1) {
            var $i_021;
            var $normalImpulse = $this + $i_021 * 20 + 72 | 0;
            HEAPF32[$normalImpulse >> 2] = 0;
            var $tangentImpulse = $this + $i_021 * 20 + 76 | 0;
            HEAPF32[$tangentImpulse >> 2] = 0;
            var $tmp = HEAP32[$this$s2 + ($i_021 * 5 | 0) + 20];
            var $j_0 = 0;
            while (1) {
              var $j_0;
              if (($j_0 | 0) >= ($27 | 0)) {
                break;
              }
              if ((HEAP32[$oldManifold$s2 + ($j_0 * 5 | 0) + 4] | 0) == ($tmp | 0)) {
                var $29 = HEAPF32[$oldManifold$s2 + ($j_0 * 5 | 0) + 2];
                HEAPF32[$normalImpulse >> 2] = $29;
                var $30 = HEAPF32[$oldManifold$s2 + ($j_0 * 5 | 0) + 3];
                HEAPF32[$tangentImpulse >> 2] = $30;
                break;
              }
              var $j_0 = $j_0 + 1 | 0;
            }
            var $inc47 = $i_021 + 1 | 0;
            if (($inc47 | 0) >= (HEAP32[$pointCount24 >> 2] | 0)) {
              break $for_body_lr_ph$$for_end48$54;
            }
            var $i_021 = $inc47;
          }
        }
      } while (0);
      var $32 = $and & 1;
      if (($cmp25 & 1 | 0) == ($32 | 0)) {
        var $touching_0 = $frombool26;
        var $_pre_phi = $32;
        break;
      }
      var $33 = $10 + 4 | 0;
      var $34 = HEAP16[$33 >> 1];
      if (($34 & 2) << 16 >> 16 == 0) {
        var $or_i12 = $34 | 2;
        HEAP16[$33 >> 1] = $or_i12;
        HEAPF32[$10 + 144 >> 2] = 0;
      }
      var $36 = $11 + 4 | 0;
      var $37 = HEAP16[$36 >> 1];
      if (($37 & 2) << 16 >> 16 != 0) {
        var $touching_0 = $frombool26;
        var $_pre_phi = $32;
        break;
      }
      var $or_i = $37 | 2;
      HEAP16[$36 >> 1] = $or_i;
      HEAPF32[$11 + 144 >> 2] = 0;
      var $touching_0 = $frombool26;
      var $_pre_phi = $32;
    }
  } while (0);
  var $_pre_phi;
  var $touching_0;
  var $tobool56 = $touching_0 << 24 >> 24 != 0;
  var $39 = HEAP32[$m_flags$s2];
  var $storemerge = $tobool56 ? $39 | 2 : $39 & -3;
  HEAP32[$m_flags$s2] = $storemerge;
  var $tobool56_not = $tobool56 ^ 1;
  var $tobool71 = ($listener | 0) == 0;
  if (!(($_pre_phi | 0) != 0 | $tobool56_not | $tobool71)) {
    var $41 = HEAP32[HEAP32[$listener >> 2] + 8 >> 2];
    FUNCTION_TABLE[$41]($listener, $this);
  }
  if (!($tobool56 | ($_pre_phi | 0) == 0 | $tobool71)) {
    var $43 = HEAP32[HEAP32[$listener >> 2] + 12 >> 2];
    FUNCTION_TABLE[$43]($listener, $this);
  }
  if (!($9 | $tobool56_not | $tobool71)) {
    var $45 = HEAP32[HEAP32[$listener >> 2] + 16 >> 2];
    FUNCTION_TABLE[$45]($listener, $this, $oldManifold);
  }
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN9b2ContactD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN15b2ContactSolverC2EP18b2ContactSolverDef($this, $def) {
  var $55$s2;
  var $54$s2;
  var $39$s2;
  var $29$s2;
  var $m_index_i7$s2;
  var $m_entryCount_i1$s2;
  var $m_index_i$s2;
  var $m_entryCount_i$s2;
  var $m_count$s2;
  var $1$s2;
  var $0$s2;
  var $def$s2 = $def >> 2;
  var $0$s2 = $this >> 2;
  var $1$s2 = $def >> 2;
  HEAP32[$0$s2] = HEAP32[$1$s2];
  HEAP32[$0$s2 + 1] = HEAP32[$1$s2 + 1];
  HEAP32[$0$s2 + 2] = HEAP32[$1$s2 + 2];
  HEAP32[$0$s2 + 3] = HEAP32[$1$s2 + 3];
  HEAP32[$0$s2 + 4] = HEAP32[$1$s2 + 4];
  HEAP32[$0$s2 + 5] = HEAP32[$1$s2 + 5];
  var $2 = HEAP32[$def$s2 + 10];
  var $m_allocator = $this + 32 | 0;
  HEAP32[$m_allocator >> 2] = $2;
  var $3 = HEAP32[$def$s2 + 7];
  var $m_count$s2 = ($this + 48 | 0) >> 2;
  HEAP32[$m_count$s2] = $3;
  var $mul = $3 * 88 | 0;
  var $m_entryCount_i$s2 = ($2 + 102796 | 0) >> 2;
  var $4 = HEAP32[$m_entryCount_i$s2];
  if (($4 | 0) < 32) {
    var $5 = $4;
  } else {
    ___assert_func(STRING_TABLE.__str72 | 0, 38, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator8AllocateEi | 0, STRING_TABLE.__str375 | 0);
    var $5 = HEAP32[$m_entryCount_i$s2];
  }
  var $5;
  var $add_ptr_i = $2 + $5 * 12 + 102412 | 0;
  var $size4_i = $2 + $5 * 12 + 102416 | 0;
  HEAP32[$size4_i >> 2] = $mul;
  var $m_index_i$s2 = ($2 + 102400 | 0) >> 2;
  var $6 = HEAP32[$m_index_i$s2];
  if (($6 + $mul | 0) > 102400) {
    var $call_i_i = _malloc($mul);
    var $data_i = $add_ptr_i | 0;
    HEAP32[$data_i >> 2] = $call_i_i;
    HEAP8[$2 + $5 * 12 + 102420 | 0] = 1;
  } else {
    var $add_ptr8_i = $2 + $6 | 0;
    var $data9_i = $add_ptr_i | 0;
    HEAP32[$data9_i >> 2] = $add_ptr8_i;
    HEAP8[$2 + $5 * 12 + 102420 | 0] = 0;
    var $add12_i = HEAP32[$m_index_i$s2] + $mul | 0;
    HEAP32[$m_index_i$s2] = $add12_i;
  }
  var $m_allocation_i = $2 + 102404 | 0;
  var $add13_i = HEAP32[$m_allocation_i >> 2] + $mul | 0;
  HEAP32[$m_allocation_i >> 2] = $add13_i;
  var $m_maxAllocation_i = $2 + 102408 | 0;
  var $9 = HEAP32[$m_maxAllocation_i >> 2];
  var $cond_i_i = ($9 | 0) > ($add13_i | 0) ? $9 : $add13_i;
  HEAP32[$m_maxAllocation_i >> 2] = $cond_i_i;
  var $inc_i = HEAP32[$m_entryCount_i$s2] + 1 | 0;
  HEAP32[$m_entryCount_i$s2] = $inc_i;
  var $12 = HEAP32[$add_ptr_i >> 2];
  var $m_positionConstraints = $this + 36 | 0;
  HEAP32[$m_positionConstraints >> 2] = $12;
  var $13 = HEAP32[$m_allocator >> 2];
  var $mul7 = HEAP32[$m_count$s2] * 152 | 0;
  var $m_entryCount_i1$s2 = ($13 + 102796 | 0) >> 2;
  var $15 = HEAP32[$m_entryCount_i1$s2];
  if (($15 | 0) < 32) {
    var $16 = $15;
  } else {
    ___assert_func(STRING_TABLE.__str72 | 0, 38, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator8AllocateEi | 0, STRING_TABLE.__str375 | 0);
    var $16 = HEAP32[$m_entryCount_i1$s2];
  }
  var $16;
  var $add_ptr_i5 = $13 + $16 * 12 + 102412 | 0;
  var $size4_i6 = $13 + $16 * 12 + 102416 | 0;
  HEAP32[$size4_i6 >> 2] = $mul7;
  var $m_index_i7$s2 = ($13 + 102400 | 0) >> 2;
  var $17 = HEAP32[$m_index_i7$s2];
  if (($17 + $mul7 | 0) > 102400) {
    var $call_i_i11 = _malloc($mul7);
    var $data_i12 = $add_ptr_i5 | 0;
    HEAP32[$data_i12 >> 2] = $call_i_i11;
    HEAP8[$13 + $16 * 12 + 102420 | 0] = 1;
  } else {
    var $add_ptr8_i15 = $13 + $17 | 0;
    var $data9_i16 = $add_ptr_i5 | 0;
    HEAP32[$data9_i16 >> 2] = $add_ptr8_i15;
    HEAP8[$13 + $16 * 12 + 102420 | 0] = 0;
    var $add12_i18 = HEAP32[$m_index_i7$s2] + $mul7 | 0;
    HEAP32[$m_index_i7$s2] = $add12_i18;
  }
  var $m_allocation_i20 = $13 + 102404 | 0;
  var $add13_i21 = HEAP32[$m_allocation_i20 >> 2] + $mul7 | 0;
  HEAP32[$m_allocation_i20 >> 2] = $add13_i21;
  var $m_maxAllocation_i22 = $13 + 102408 | 0;
  var $20 = HEAP32[$m_maxAllocation_i22 >> 2];
  var $cond_i_i24 = ($20 | 0) > ($add13_i21 | 0) ? $20 : $add13_i21;
  HEAP32[$m_maxAllocation_i22 >> 2] = $cond_i_i24;
  var $inc_i25 = HEAP32[$m_entryCount_i1$s2] + 1 | 0;
  HEAP32[$m_entryCount_i1$s2] = $inc_i25;
  var $23 = HEAP32[$add_ptr_i5 >> 2];
  var $m_velocityConstraints = $this + 40 | 0;
  HEAP32[$m_velocityConstraints >> 2] = $23;
  var $24 = HEAP32[$def$s2 + 8];
  HEAP32[$this + 24 >> 2] = $24;
  var $25 = HEAP32[$def$s2 + 9];
  HEAP32[$this + 28 >> 2] = $25;
  var $26 = HEAP32[$def$s2 + 6];
  var $m_contacts = $this + 44 | 0;
  HEAP32[$m_contacts >> 2] = $26;
  var $cmp40 = (HEAP32[$m_count$s2] | 0) > 0;
  $for_body_lr_ph$$for_end68$98 : do {
    if ($cmp40) {
      var $warmStarting = $this + 20 | 0;
      var $dtRatio = $this + 8 | 0;
      var $i_041 = 0;
      var $28 = $26;
      while (1) {
        var $28;
        var $i_041;
        var $29 = HEAP32[$28 + ($i_041 << 2) >> 2], $29$s2 = $29 >> 2;
        var $30 = HEAP32[$29$s2 + 12];
        var $31 = HEAP32[$29$s2 + 13];
        var $34 = HEAPF32[HEAP32[$30 + 12 >> 2] + 8 >> 2];
        var $35 = HEAPF32[HEAP32[$31 + 12 >> 2] + 8 >> 2];
        var $36 = HEAP32[$30 + 8 >> 2];
        var $37 = HEAP32[$31 + 8 >> 2];
        var $38 = HEAP32[$29$s2 + 31];
        var $cmp18 = ($38 | 0) > 0;
        if (!$cmp18) {
          ___assert_func(STRING_TABLE.__str230 | 0, 71, STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolverC2EP18b2ContactSolverDef | 0, STRING_TABLE.__str1231 | 0);
        }
        var $39 = HEAP32[$m_velocityConstraints >> 2], $39$s2 = $39 >> 2;
        var $40 = HEAPF32[$29$s2 + 34];
        HEAPF32[$39$s2 + ($i_041 * 38 | 0) + 34] = $40;
        var $41 = HEAPF32[$29$s2 + 35];
        HEAPF32[$39$s2 + ($i_041 * 38 | 0) + 35] = $41;
        var $42 = $36 + 8 | 0;
        var $43 = HEAP32[$42 >> 2];
        var $indexA = $39 + $i_041 * 152 + 112 | 0;
        HEAP32[$indexA >> 2] = $43;
        var $44 = $37 + 8 | 0;
        var $45 = HEAP32[$44 >> 2];
        var $indexB = $39 + $i_041 * 152 + 116 | 0;
        HEAP32[$indexB >> 2] = $45;
        var $46 = $36 + 120 | 0;
        var $47 = HEAPF32[$46 >> 2];
        HEAPF32[$39$s2 + ($i_041 * 38 | 0) + 30] = $47;
        var $48 = $37 + 120 | 0;
        var $49 = HEAPF32[$48 >> 2];
        HEAPF32[$39$s2 + ($i_041 * 38 | 0) + 31] = $49;
        var $50 = $36 + 128 | 0;
        var $51 = HEAPF32[$50 >> 2];
        HEAPF32[$39$s2 + ($i_041 * 38 | 0) + 32] = $51;
        var $52 = $37 + 128 | 0;
        var $53 = HEAPF32[$52 >> 2];
        HEAPF32[$39$s2 + ($i_041 * 38 | 0) + 33] = $53;
        var $contactIndex = $39 + $i_041 * 152 + 148 | 0;
        HEAP32[$contactIndex >> 2] = $i_041;
        var $pointCount23 = $39 + $i_041 * 152 + 144 | 0;
        HEAP32[$pointCount23 >> 2] = $38;
        var $54$s2 = ($39 + $i_041 * 152 + 80 | 0) >> 2;
        HEAP32[$54$s2] = 0;
        HEAP32[$54$s2 + 1] = 0;
        HEAP32[$54$s2 + 2] = 0;
        HEAP32[$54$s2 + 3] = 0;
        HEAP32[$54$s2 + 4] = 0;
        HEAP32[$54$s2 + 5] = 0;
        HEAP32[$54$s2 + 6] = 0;
        HEAP32[$54$s2 + 7] = 0;
        var $55 = HEAP32[$m_positionConstraints >> 2], $55$s2 = $55 >> 2;
        var $56 = HEAP32[$42 >> 2];
        var $indexA27 = $55 + $i_041 * 88 + 32 | 0;
        HEAP32[$indexA27 >> 2] = $56;
        var $57 = HEAP32[$44 >> 2];
        var $indexB29 = $55 + $i_041 * 88 + 36 | 0;
        HEAP32[$indexB29 >> 2] = $57;
        var $58 = HEAPF32[$46 >> 2];
        HEAPF32[$55$s2 + ($i_041 * 22 | 0) + 10] = $58;
        var $59 = HEAPF32[$48 >> 2];
        HEAPF32[$55$s2 + ($i_041 * 22 | 0) + 11] = $59;
        var $60 = $36 + 28 | 0;
        var $61 = $55 + $i_041 * 88 + 48 | 0;
        var $62$0 = HEAP32[$60 >> 2];
        var $62$1 = HEAP32[$60 + 4 >> 2];
        var $st$61$0 = $61 | 0;
        HEAP32[$st$61$0 >> 2] = $62$0;
        var $st$61$1 = $61 + 4 | 0;
        HEAP32[$st$61$1 >> 2] = $62$1;
        var $63 = $37 + 28 | 0;
        var $64 = $55 + $i_041 * 88 + 56 | 0;
        var $65$0 = HEAP32[$63 >> 2];
        var $65$1 = HEAP32[$63 + 4 >> 2];
        var $st$73$0 = $64 | 0;
        HEAP32[$st$73$0 >> 2] = $65$0;
        var $st$73$1 = $64 + 4 | 0;
        HEAP32[$st$73$1 >> 2] = $65$1;
        var $66 = HEAPF32[$50 >> 2];
        HEAPF32[$55$s2 + ($i_041 * 22 | 0) + 16] = $66;
        var $67 = HEAPF32[$52 >> 2];
        HEAPF32[$55$s2 + ($i_041 * 22 | 0) + 17] = $67;
        var $68 = $29 + 104 | 0;
        var $69 = $55 + $i_041 * 88 + 16 | 0;
        var $70$0 = HEAP32[$68 >> 2];
        var $70$1 = HEAP32[$68 + 4 >> 2];
        var $st$91$0 = $69 | 0;
        HEAP32[$st$91$0 >> 2] = $70$0;
        var $st$91$1 = $69 + 4 | 0;
        HEAP32[$st$91$1 >> 2] = $70$1;
        var $71 = $29 + 112 | 0;
        var $72 = $55 + $i_041 * 88 + 24 | 0;
        var $73$0 = HEAP32[$71 >> 2];
        var $73$1 = HEAP32[$71 + 4 >> 2];
        var $st$103$0 = $72 | 0;
        HEAP32[$st$103$0 >> 2] = $73$0;
        var $st$103$1 = $72 + 4 | 0;
        HEAP32[$st$103$1 >> 2] = $73$1;
        var $pointCount42 = $55 + $i_041 * 88 + 84 | 0;
        HEAP32[$pointCount42 >> 2] = $38;
        HEAPF32[$55$s2 + ($i_041 * 22 | 0) + 19] = $34;
        HEAPF32[$55$s2 + ($i_041 * 22 | 0) + 20] = $35;
        var $74 = HEAP32[$29$s2 + 30];
        var $type45 = $55 + $i_041 * 88 + 72 | 0;
        HEAP32[$type45 >> 2] = $74;
        $for_body48$$for_inc66$105 : do {
          if ($cmp18) {
            var $j_039 = 0;
            while (1) {
              var $j_039;
              var $add_ptr49 = $29 + $j_039 * 20 + 64 | 0;
              if ((HEAP8[$warmStarting] & 1) << 24 >> 24 == 0) {
                HEAPF32[$39$s2 + ($i_041 * 38 | 0) + ($j_039 * 9 | 0) + 4] = 0;
                HEAPF32[$39$s2 + ($i_041 * 38 | 0) + ($j_039 * 9 | 0) + 5] = 0;
              } else {
                var $mul55 = HEAPF32[$dtRatio >> 2] * HEAPF32[$29$s2 + ($j_039 * 5 | 0) + 18];
                HEAPF32[$39$s2 + ($i_041 * 38 | 0) + ($j_039 * 9 | 0) + 4] = $mul55;
                var $mul59 = HEAPF32[$dtRatio >> 2] * HEAPF32[$29$s2 + ($j_039 * 5 | 0) + 19];
                HEAPF32[$39$s2 + ($i_041 * 38 | 0) + ($j_039 * 9 | 0) + 5] = $mul59;
              }
              HEAPF32[$39$s2 + ($i_041 * 38 | 0) + ($j_039 * 9 | 0)] = 0;
              HEAPF32[$39$s2 + ($i_041 * 38 | 0) + ($j_039 * 9 | 0) + 1] = 0;
              HEAPF32[$39$s2 + ($i_041 * 38 | 0) + ($j_039 * 9 | 0) + 2] = 0;
              HEAPF32[$39$s2 + ($i_041 * 38 | 0) + ($j_039 * 9 | 0) + 3] = 0;
              HEAPF32[$39$s2 + ($i_041 * 38 | 0) + ($j_039 * 9 | 0) + 6] = 0;
              HEAPF32[$39$s2 + ($i_041 * 38 | 0) + ($j_039 * 9 | 0) + 7] = 0;
              HEAPF32[$39$s2 + ($i_041 * 38 | 0) + ($j_039 * 9 | 0) + 8] = 0;
              var $81 = $add_ptr49;
              var $82 = ($j_039 << 3) + $55 + $i_041 * 88 | 0;
              var $83$0 = HEAP32[$81 >> 2];
              var $83$1 = HEAP32[$81 + 4 >> 2];
              var $st$21$0 = $82 | 0;
              HEAP32[$st$21$0 >> 2] = $83$0;
              var $st$21$1 = $82 + 4 | 0;
              HEAP32[$st$21$1 >> 2] = $83$1;
              var $inc = $j_039 + 1 | 0;
              if (($inc | 0) == ($38 | 0)) {
                break $for_body48$$for_inc66$105;
              }
              var $j_039 = $inc;
            }
          }
        } while (0);
        var $inc67 = $i_041 + 1 | 0;
        if (($inc67 | 0) >= (HEAP32[$m_count$s2] | 0)) {
          break $for_body_lr_ph$$for_end68$98;
        }
        var $i_041 = $inc67;
        var $28 = HEAP32[$m_contacts >> 2];
      }
    }
  } while (0);
  return;
  return;
}

function __ZN15b2ContactSolver9WarmStartEv($this) {
  var $1$s2;
  var $m_velocities$s2;
  var $m_count = $this + 48 | 0;
  var $cmp65 = (HEAP32[$m_count >> 2] | 0) > 0;
  $for_body_lr_ph$$for_end37$34 : do {
    if ($cmp65) {
      var $m_velocityConstraints = $this + 40 | 0;
      var $m_velocities$s2 = ($this + 28 | 0) >> 2;
      var $i_066 = 0;
      while (1) {
        var $i_066;
        var $1 = HEAP32[$m_velocityConstraints >> 2], $1$s2 = $1 >> 2;
        var $2 = HEAP32[$1$s2 + ($i_066 * 38 | 0) + 28];
        var $3 = HEAP32[$1$s2 + ($i_066 * 38 | 0) + 29];
        var $4 = HEAPF32[$1$s2 + ($i_066 * 38 | 0) + 30];
        var $5 = HEAPF32[$1$s2 + ($i_066 * 38 | 0) + 32];
        var $6 = HEAPF32[$1$s2 + ($i_066 * 38 | 0) + 31];
        var $7 = HEAPF32[$1$s2 + ($i_066 * 38 | 0) + 33];
        var $8 = HEAP32[$1$s2 + ($i_066 * 38 | 0) + 36];
        var $9 = HEAP32[$m_velocities$s2];
        var $10 = $9 + $2 * 12 | 0;
        var $11$1 = HEAP32[$10 + 4 >> 2];
        var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
        var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
        var $16 = HEAPF32[($9 + 8 >> 2) + ($2 * 3 | 0)];
        var $17 = $9 + $3 * 12 | 0;
        var $18$1 = HEAP32[$17 + 4 >> 2];
        var $20 = (tempDoubleI32[0] = HEAP32[$17 >> 2], tempDoubleF32[0]);
        var $22 = (tempDoubleI32[0] = $18$1, tempDoubleF32[0]);
        var $23 = HEAPF32[($9 + 8 >> 2) + ($3 * 3 | 0)];
        var $24 = $1 + $i_066 * 152 + 72 | 0;
        var $25$1 = HEAP32[$24 + 4 >> 2];
        var $27 = (tempDoubleI32[0] = HEAP32[$24 >> 2], tempDoubleF32[0]);
        var $29 = (tempDoubleI32[0] = $25$1, tempDoubleF32[0]);
        var $mul1_i = $27 * -1;
        var $cmp1556 = ($8 | 0) > 0;
        $for_body16$$for_end$38 : do {
          if ($cmp1556) {
            var $33 = $22;
            var $32 = $20;
            var $31 = $15;
            var $30 = $13;
            var $wA_057 = $16;
            var $wB_058 = $23;
            var $j_059 = 0;
            while (1) {
              var $j_059;
              var $wB_058;
              var $wA_057;
              var $30;
              var $31;
              var $32;
              var $33;
              var $34 = HEAPF32[$1$s2 + ($i_066 * 38 | 0) + ($j_059 * 9 | 0) + 4];
              var $35 = HEAPF32[$1$s2 + ($i_066 * 38 | 0) + ($j_059 * 9 | 0) + 5];
              var $add_i32 = $27 * $34 + $29 * $35;
              var $add3_i = $29 * $34 + $mul1_i * $35;
              var $sub = $wA_057 - $5 * (HEAPF32[$1$s2 + ($i_066 * 38 | 0) + ($j_059 * 9 | 0)] * $add3_i - HEAPF32[$1$s2 + ($i_066 * 38 | 0) + ($j_059 * 9 | 0) + 1] * $add_i32);
              var $sub_i15 = $30 - $add_i32 * $4;
              var $sub4_i = $31 - $add3_i * $4;
              var $add = $wB_058 + $7 * (HEAPF32[$1$s2 + ($i_066 * 38 | 0) + ($j_059 * 9 | 0) + 2] * $add3_i - HEAPF32[$1$s2 + ($i_066 * 38 | 0) + ($j_059 * 9 | 0) + 3] * $add_i32);
              var $add_i = $32 + $add_i32 * $6;
              var $add4_i = $33 + $add3_i * $6;
              var $inc = $j_059 + 1 | 0;
              if (($inc | 0) == ($8 | 0)) {
                var $_lcssa = $add4_i;
                var $_lcssa53 = $add_i;
                var $_lcssa54 = $sub4_i;
                var $_lcssa55 = $sub_i15;
                var $wA_0_lcssa = $sub;
                var $wB_0_lcssa = $add;
                break $for_body16$$for_end$38;
              }
              var $33 = $add4_i;
              var $32 = $add_i;
              var $31 = $sub4_i;
              var $30 = $sub_i15;
              var $wA_057 = $sub;
              var $wB_058 = $add;
              var $j_059 = $inc;
            }
          } else {
            var $_lcssa = $22;
            var $_lcssa53 = $20;
            var $_lcssa54 = $15;
            var $_lcssa55 = $13;
            var $wA_0_lcssa = $16;
            var $wB_0_lcssa = $23;
          }
        } while (0);
        var $wB_0_lcssa;
        var $wA_0_lcssa;
        var $_lcssa55;
        var $_lcssa54;
        var $_lcssa53;
        var $_lcssa;
        var $40 = (tempDoubleF32[0] = $_lcssa55, tempDoubleI32[0]);
        var $41$0 = $40;
        var $42 = (tempDoubleF32[0] = $_lcssa54, tempDoubleI32[0]);
        var $45$1 = $42 | 0;
        var $st$16$0 = $10 | 0;
        HEAP32[$st$16$0 >> 2] = 0 | $41$0;
        var $st$16$1 = $10 + 4 | 0;
        HEAP32[$st$16$1 >> 2] = $45$1;
        HEAPF32[(HEAP32[$m_velocities$s2] + 8 >> 2) + ($2 * 3 | 0)] = $wA_0_lcssa;
        var $48 = HEAP32[$m_velocities$s2] + $3 * 12 | 0;
        var $49 = (tempDoubleF32[0] = $_lcssa53, tempDoubleI32[0]);
        var $50$0 = $49;
        var $51 = (tempDoubleF32[0] = $_lcssa, tempDoubleI32[0]);
        var $54$1 = $51 | 0;
        var $st$36$0 = $48 | 0;
        HEAP32[$st$36$0 >> 2] = 0 | $50$0;
        var $st$36$1 = $48 + 4 | 0;
        HEAP32[$st$36$1 >> 2] = $54$1;
        HEAPF32[(HEAP32[$m_velocities$s2] + 8 >> 2) + ($3 * 3 | 0)] = $wB_0_lcssa;
        var $inc36 = $i_066 + 1 | 0;
        if (($inc36 | 0) >= (HEAP32[$m_count >> 2] | 0)) {
          break $for_body_lr_ph$$for_end37$34;
        }
        var $i_066 = $inc36;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN15b2ContactSolverD2Ev($this) {
  var $m_allocator = $this + 32 | 0;
  var $0 = HEAP32[$m_allocator >> 2];
  var $2 = HEAP32[$this + 40 >> 2];
  __ZN16b2StackAllocator4FreeEPv($0, $2);
  var $3 = HEAP32[$m_allocator >> 2];
  var $5 = HEAP32[$this + 36 >> 2];
  __ZN16b2StackAllocator4FreeEPv($3, $5);
  return;
  return;
}

function __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($this) {
  var $x2_i99$s2;
  var $y_i96$s2;
  var $pointCount37$s2;
  var $5$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 56;
  var $xfA = __stackBase__;
  var $xfB = __stackBase__ + 16;
  var $worldManifold = __stackBase__ + 32;
  var $m_count = $this + 48 | 0;
  var $cmp181 = (HEAP32[$m_count >> 2] | 0) > 0;
  $for_body_lr_ph$$for_end151$3 : do {
    if ($cmp181) {
      var $m_velocityConstraints = $this + 40 | 0;
      var $m_positionConstraints = $this + 36 | 0;
      var $m_contacts = $this + 44 | 0;
      var $m_positions = $this + 24 | 0;
      var $m_velocities = $this + 28 | 0;
      var $s_i158 = $xfA + 8 | 0;
      var $c_i160 = $xfA + 12 | 0;
      var $s_i155 = $xfB + 8 | 0;
      var $c_i156 = $xfB + 12 | 0;
      var $1 = $xfA;
      var $2 = $xfB;
      var $3 = $worldManifold;
      var $4 = $worldManifold;
      var $i_0182 = 0;
      while (1) {
        var $i_0182;
        var $5 = HEAPU32[$m_velocityConstraints >> 2], $5$s2 = $5 >> 2;
        var $6 = HEAP32[$m_positionConstraints >> 2];
        var $7 = HEAPF32[($6 + 76 >> 2) + ($i_0182 * 22 | 0)];
        var $8 = HEAPF32[($6 + 80 >> 2) + ($i_0182 * 22 | 0)];
        var $11 = HEAP32[HEAP32[$m_contacts >> 2] + (HEAP32[$5$s2 + ($i_0182 * 38 | 0) + 37] << 2) >> 2];
        var $m_manifold_i = $11 + 64 | 0;
        var $12 = HEAP32[$5$s2 + ($i_0182 * 38 | 0) + 28];
        var $13 = HEAP32[$5$s2 + ($i_0182 * 38 | 0) + 29];
        var $14 = HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 30];
        var $15 = HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 31];
        var $16 = HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 32];
        var $17 = HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 33];
        var $18 = $6 + $i_0182 * 88 + 48 | 0;
        var $19$1 = HEAP32[$18 + 4 >> 2];
        var $21 = (tempDoubleI32[0] = HEAP32[$18 >> 2], tempDoubleF32[0]);
        var $23 = (tempDoubleI32[0] = $19$1, tempDoubleF32[0]);
        var $24 = $6 + $i_0182 * 88 + 56 | 0;
        var $25$1 = HEAP32[$24 + 4 >> 2];
        var $27 = (tempDoubleI32[0] = HEAP32[$24 >> 2], tempDoubleF32[0]);
        var $29 = (tempDoubleI32[0] = $25$1, tempDoubleF32[0]);
        var $30 = HEAP32[$m_positions >> 2];
        var $31 = $30 + $12 * 12 | 0;
        var $st$56$0 = $31 | 0;
        var $st$56$1 = $31 + 4 | 0;
        var $32$1 = HEAP32[$st$56$1 >> 2];
        var $34 = (tempDoubleI32[0] = HEAP32[$st$56$0 >> 2], tempDoubleF32[0]);
        var $36 = (tempDoubleI32[0] = $32$1, tempDoubleF32[0]);
        var $37 = HEAPF32[($30 + 8 >> 2) + ($12 * 3 | 0)];
        var $38 = HEAP32[$m_velocities >> 2];
        var $39 = $38 + $12 * 12 | 0;
        var $40$1 = HEAP32[$39 + 4 >> 2];
        var $42 = (tempDoubleI32[0] = HEAP32[$39 >> 2], tempDoubleF32[0]);
        var $44 = (tempDoubleI32[0] = $40$1, tempDoubleF32[0]);
        var $45 = HEAPF32[($38 + 8 >> 2) + ($12 * 3 | 0)];
        var $46 = $30 + $13 * 12 | 0;
        var $47$1 = HEAP32[$46 + 4 >> 2];
        var $49 = (tempDoubleI32[0] = HEAP32[$46 >> 2], tempDoubleF32[0]);
        var $51 = (tempDoubleI32[0] = $47$1, tempDoubleF32[0]);
        var $52 = HEAPF32[($30 + 8 >> 2) + ($13 * 3 | 0)];
        var $53 = $38 + $13 * 12 | 0;
        var $54$1 = HEAP32[$53 + 4 >> 2];
        var $56 = (tempDoubleI32[0] = HEAP32[$53 >> 2], tempDoubleF32[0]);
        var $58 = (tempDoubleI32[0] = $54$1, tempDoubleF32[0]);
        var $59 = HEAPF32[($38 + 8 >> 2) + ($13 * 3 | 0)];
        if ((HEAP32[$11 + 124 >> 2] | 0) <= 0) {
          ___assert_func(STRING_TABLE.__str230 | 0, 168, STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolver29InitializeVelocityConstraintsEv | 0, STRING_TABLE.__str2232 | 0);
        }
        var $call_i157 = _sinf($37);
        HEAPF32[$s_i158 >> 2] = $call_i157;
        var $call2_i159 = _cosf($37);
        HEAPF32[$c_i160 >> 2] = $call2_i159;
        var $call_i = _sinf($52);
        HEAPF32[$s_i155 >> 2] = $call_i;
        var $call2_i = _cosf($52);
        HEAPF32[$c_i156 >> 2] = $call2_i;
        var $sub_i137 = $34 - ($call2_i159 * $21 - $call_i157 * $23);
        var $sub3_i140 = $36 - ($call_i157 * $21 + $call2_i159 * $23);
        var $61 = (tempDoubleF32[0] = $sub_i137, tempDoubleI32[0]);
        var $62$0 = $61;
        var $63 = (tempDoubleF32[0] = $sub3_i140, tempDoubleI32[0]);
        var $66$0 = 0 | $62$0;
        var $66$1 = $63 | 0;
        HEAP32[$1 >> 2] = $66$0;
        HEAP32[$1 + 4 >> 2] = $66$1;
        var $sub_i120 = $49 - ($call2_i * $27 - $call_i * $29);
        var $sub3_i123 = $51 - ($call_i * $27 + $call2_i * $29);
        var $67 = (tempDoubleF32[0] = $sub_i120, tempDoubleI32[0]);
        var $68$0 = $67;
        var $69 = (tempDoubleF32[0] = $sub3_i123, tempDoubleI32[0]);
        var $72$0 = 0 | $68$0;
        var $72$1 = $69 | 0;
        HEAP32[$2 >> 2] = $72$0;
        HEAP32[$2 + 4 >> 2] = $72$1;
        var $73 = $m_manifold_i;
        __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($3, $73, $xfA, $7, $xfB, $8);
        var $normal = $5 + $i_0182 * 152 + 72 | 0;
        var $74 = $normal;
        var $st$56$0 = $4 | 0;
        var $75$0 = HEAP32[$st$56$0 >> 2];
        var $st$56$1 = $4 + 4 | 0;
        var $75$1 = HEAP32[$st$56$1 >> 2];
        HEAP32[$74 >> 2] = $75$0;
        HEAP32[$74 + 4 >> 2] = $75$1;
        var $pointCount37$s2 = ($5 + $i_0182 * 152 + 144 | 0) >> 2;
        var $76 = HEAP32[$pointCount37$s2];
        var $cmp39179 = ($76 | 0) > 0;
        do {
          if ($cmp39179) {
            var $y_i96$s2 = ($5 + $i_0182 * 152 + 76 | 0) >> 2;
            var $x2_i99$s2 = ($normal | 0) >> 2;
            var $add = $14 + $15;
            var $sub_i61 = -$59;
            var $sub_i40 = -$45;
            var $restitution = $5 + $i_0182 * 152 + 140 | 0;
            var $j_0180 = 0;
            while (1) {
              var $j_0180;
              var $77 = HEAPF32[$worldManifold + ($j_0180 << 3) + 8 >> 2];
              var $sub_i112 = $77 - $34;
              var $78 = HEAPF32[$worldManifold + ($j_0180 << 3) + 12 >> 2];
              var $sub3_i115 = $78 - $36;
              var $79 = $5 + $i_0182 * 152 + $j_0180 * 36 | 0;
              var $80 = (tempDoubleF32[0] = $sub_i112, tempDoubleI32[0]);
              var $81$0 = $80;
              var $82 = (tempDoubleF32[0] = $sub3_i115, tempDoubleI32[0]);
              var $85$0 = 0 | $81$0;
              var $85$1 = $82 | 0;
              HEAP32[$79 >> 2] = $85$0;
              HEAP32[$79 + 4 >> 2] = $85$1;
              var $sub_i104 = $77 - $49;
              var $sub3_i107 = $78 - $51;
              var $86 = $5 + $i_0182 * 152 + $j_0180 * 36 + 8 | 0;
              var $87 = (tempDoubleF32[0] = $sub_i104, tempDoubleI32[0]);
              var $88$0 = $87;
              var $89 = (tempDoubleF32[0] = $sub3_i107, tempDoubleI32[0]);
              var $92$0 = 0 | $88$0;
              var $92$1 = $89 | 0;
              HEAP32[$86 >> 2] = $92$0;
              HEAP32[$86 + 4 >> 2] = $92$1;
              var $93 = HEAPF32[$y_i96$s2];
              var $94 = HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + ($j_0180 * 9 | 0) + 1];
              var $95 = HEAPF32[$x2_i99$s2];
              var $sub_i101 = $sub_i112 * $93 - $94 * $95;
              var $96 = HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + ($j_0180 * 9 | 0) + 3];
              var $sub_i94 = $sub_i104 * $93 - $96 * $95;
              var $add58 = $add + $16 * $sub_i101 * $sub_i101 + $17 * $sub_i94 * $sub_i94;
              if ($add58 > 0) {
                var $cond = 1 / $add58;
              } else {
                var $cond = 0;
              }
              var $cond;
              HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + ($j_0180 * 9 | 0) + 6] = $cond;
              var $97 = HEAPF32[$y_i96$s2];
              var $mul1_i85 = HEAPF32[$x2_i99$s2] * -1;
              var $sub_i81 = $sub_i112 * $mul1_i85 - $94 * $97;
              var $sub_i74 = $sub_i104 * $mul1_i85 - $96 * $97;
              var $add74 = $add + $16 * $sub_i81 * $sub_i81 + $17 * $sub_i74 * $sub_i74;
              if ($add74 > 0) {
                var $cond80 = 1 / $add74;
              } else {
                var $cond80 = 0;
              }
              var $cond80;
              HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + ($j_0180 * 9 | 0) + 7] = $cond80;
              var $velocityBias = $5 + $i_0182 * 152 + $j_0180 * 36 + 32 | 0;
              HEAPF32[$velocityBias >> 2] = 0;
              var $add_i = HEAPF32[$x2_i99$s2] * ($56 + $96 * $sub_i61 - $42 - $94 * $sub_i40) + HEAPF32[$y_i96$s2] * ($58 + $sub_i104 * $59 - $44 - $sub_i112 * $45);
              if ($add_i < -1) {
                var $mul91 = $add_i * -HEAPF32[$restitution >> 2];
                HEAPF32[$velocityBias >> 2] = $mul91;
              }
              var $inc = $j_0180 + 1 | 0;
              if (($inc | 0) == ($76 | 0)) {
                break;
              }
              var $j_0180 = $inc;
            }
            if ((HEAP32[$pointCount37$s2] | 0) != 2) {
              break;
            }
            var $103 = HEAPF32[$y_i96$s2];
            var $105 = HEAPF32[$x2_i99$s2];
            var $sub_i30 = HEAPF32[$5$s2 + ($i_0182 * 38 | 0)] * $103 - HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 1] * $105;
            var $sub_i23 = HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 2] * $103 - HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 3] * $105;
            var $sub_i16 = HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 9] * $103 - HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 10] * $105;
            var $sub_i9 = HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 11] * $103 - HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 12] * $105;
            var $mul115 = $16 * $sub_i30;
            var $mul118 = $17 * $sub_i23;
            var $add120 = $add + $mul115 * $sub_i30 + $mul118 * $sub_i23;
            var $add127 = $add + $16 * $sub_i16 * $sub_i16 + $17 * $sub_i9 * $sub_i9;
            var $add134 = $add + $mul115 * $sub_i16 + $mul118 * $sub_i9;
            var $sub138 = $add120 * $add127 - $add134 * $add134;
            if ($add120 * $add120 < $sub138 * 1e3) {
              HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 24] = $add120;
              HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 25] = $add134;
              HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 26] = $add134;
              HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 27] = $add127;
              if ($sub138 != 0) {
                var $det_0_i = 1 / $sub138;
              } else {
                var $det_0_i = $sub138;
              }
              var $det_0_i;
              var $mul7_i = $det_0_i * $add127;
              var $mul11_i = $add134 * -$det_0_i;
              var $mul18_i = $det_0_i * $add120;
              HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 20] = $mul7_i;
              HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 21] = $mul11_i;
              HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 22] = $mul11_i;
              HEAPF32[$5$s2 + ($i_0182 * 38 | 0) + 23] = $mul18_i;
            } else {
              HEAP32[$pointCount37$s2] = 1;
            }
          }
        } while (0);
        var $inc150 = $i_0182 + 1 | 0;
        if (($inc150 | 0) >= (HEAP32[$m_count >> 2] | 0)) {
          break $for_body_lr_ph$$for_end151$3;
        }
        var $i_0182 = $inc150;
      }
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN15b2ContactSolver13StoreImpulsesEv($this) {
  var $2$s2;
  var $m_count = $this + 48 | 0;
  var $0 = HEAP32[$m_count >> 2];
  var $cmp4 = ($0 | 0) > 0;
  $for_body_lr_ph$$for_end16$34 : do {
    if ($cmp4) {
      var $m_velocityConstraints = $this + 40 | 0;
      var $m_contacts = $this + 44 | 0;
      var $i_05 = 0;
      var $1 = $0;
      while (1) {
        var $1;
        var $i_05;
        var $2 = HEAP32[$m_velocityConstraints >> 2], $2$s2 = $2 >> 2;
        var $5 = HEAP32[HEAP32[$m_contacts >> 2] + (HEAP32[$2$s2 + ($i_05 * 38 | 0) + 37] << 2) >> 2];
        var $pointCount = $2 + $i_05 * 152 + 144 | 0;
        if ((HEAP32[$pointCount >> 2] | 0) > 0) {
          var $j_02 = 0;
          while (1) {
            var $j_02;
            var $7 = HEAPF32[$2$s2 + ($i_05 * 38 | 0) + ($j_02 * 9 | 0) + 4];
            HEAPF32[($5 + 72 >> 2) + ($j_02 * 5 | 0)] = $7;
            var $8 = HEAPF32[$2$s2 + ($i_05 * 38 | 0) + ($j_02 * 9 | 0) + 5];
            HEAPF32[($5 + 76 >> 2) + ($j_02 * 5 | 0)] = $8;
            var $inc = $j_02 + 1 | 0;
            if (($inc | 0) >= (HEAP32[$pointCount >> 2] | 0)) {
              break;
            }
            var $j_02 = $inc;
          }
          var $10 = HEAP32[$m_count >> 2];
        } else {
          var $10 = $1;
        }
        var $10;
        var $inc15 = $i_05 + 1 | 0;
        if (($inc15 | 0) >= ($10 | 0)) {
          break $for_body_lr_ph$$for_end16$34;
        }
        var $i_05 = $inc15;
        var $1 = $10;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN15b2ContactSolver24SolveVelocityConstraintsEv($this) {
  var $normalImpulse83$s2;
  var $normalImpulse82$s2;
  var $1$s2;
  var $m_velocities$s2;
  var $m_count = $this + 48 | 0;
  var $cmp660 = (HEAP32[$m_count >> 2] | 0) > 0;
  $for_body_lr_ph$$for_end297$2 : do {
    if ($cmp660) {
      var $m_velocityConstraints = $this + 40 | 0;
      var $m_velocities$s2 = ($this + 28 | 0) >> 2;
      var $i_0661 = 0;
      while (1) {
        var $i_0661;
        var $1 = HEAPU32[$m_velocityConstraints >> 2], $1$s2 = $1 >> 2;
        var $add_ptr = $1 + $i_0661 * 152 | 0;
        var $2 = HEAPU32[$1$s2 + ($i_0661 * 38 | 0) + 28];
        var $3 = HEAPU32[$1$s2 + ($i_0661 * 38 | 0) + 29];
        var $4 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 30];
        var $5 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 32];
        var $6 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 31];
        var $7 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 33];
        var $pointCount4 = $1 + $i_0661 * 152 + 144 | 0;
        var $8 = HEAPU32[$pointCount4 >> 2];
        var $9 = HEAP32[$m_velocities$s2];
        var $10 = $9 + $2 * 12 | 0;
        var $11$1 = HEAP32[$10 + 4 >> 2];
        var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
        var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
        var $16 = HEAPF32[($9 + 8 >> 2) + ($2 * 3 | 0)];
        var $17 = $9 + $3 * 12 | 0;
        var $18$1 = HEAP32[$17 + 4 >> 2];
        var $20 = (tempDoubleI32[0] = HEAP32[$17 >> 2], tempDoubleF32[0]);
        var $22 = (tempDoubleI32[0] = $18$1, tempDoubleF32[0]);
        var $23 = HEAPF32[($9 + 8 >> 2) + ($3 * 3 | 0)];
        var $24 = $1 + $i_0661 * 152 + 72 | 0;
        var $25$1 = HEAP32[$24 + 4 >> 2];
        var $27 = (tempDoubleI32[0] = HEAP32[$24 >> 2], tempDoubleF32[0]);
        var $29 = (tempDoubleI32[0] = $25$1, tempDoubleF32[0]);
        var $mul1_i = $27 * -1;
        var $30 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 34];
        if (($8 - 1 | 0) >>> 0 >= 2) {
          ___assert_func(STRING_TABLE.__str230 | 0, 311, STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolver24SolveVelocityConstraintsEv | 0, STRING_TABLE.__str3233 | 0);
        }
        var $cmp18651 = ($8 | 0) > 0;
        $for_body19$$for_end$9 : do {
          if ($cmp18651) {
            var $35 = $22;
            var $34 = $20;
            var $33 = $15;
            var $32 = $13;
            var $wA_0652 = $16;
            var $wB_0653 = $23;
            var $j_0654 = 0;
            while (1) {
              var $j_0654;
              var $wB_0653;
              var $wA_0652;
              var $32;
              var $33;
              var $34;
              var $35;
              var $36 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + ($j_0654 * 9 | 0) + 3];
              var $37 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + ($j_0654 * 9 | 0) + 2];
              var $38 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + ($j_0654 * 9 | 0) + 1];
              var $39 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + ($j_0654 * 9 | 0)];
              var $mul24 = $30 * HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + ($j_0654 * 9 | 0) + 4];
              var $tangentImpulse = $1 + $i_0661 * 152 + $j_0654 * 36 + 20 | 0;
              var $42 = HEAPF32[$tangentImpulse >> 2];
              var $add = $42 + HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + ($j_0654 * 9 | 0) + 7] * -(($34 + $36 * -$wB_0653 - $32 - $38 * -$wA_0652) * $29 + ($35 + $37 * $wB_0653 - $33 - $39 * $wA_0652) * $mul1_i);
              var $sub25 = -$mul24;
              var $cond_i_i = $add < $mul24 ? $add : $mul24;
              var $cond_i2_i = $cond_i_i < $sub25 ? $sub25 : $cond_i_i;
              var $sub28 = $cond_i2_i - $42;
              HEAPF32[$tangentImpulse >> 2] = $cond_i2_i;
              var $mul_i591 = $29 * $sub28;
              var $mul1_i593 = $mul1_i * $sub28;
              var $sub_i580 = $32 - $mul_i591 * $4;
              var $sub4_i583 = $33 - $mul1_i593 * $4;
              var $sub34 = $wA_0652 - $5 * ($39 * $mul1_i593 - $38 * $mul_i591);
              var $add_i561 = $34 + $mul_i591 * $6;
              var $add4_i564 = $35 + $mul1_i593 * $6;
              var $add39 = $wB_0653 + $7 * ($37 * $mul1_i593 - $36 * $mul_i591);
              var $inc = $j_0654 + 1 | 0;
              if (($inc | 0) == ($8 | 0)) {
                var $_lcssa = $add4_i564;
                var $_lcssa648 = $add_i561;
                var $_lcssa649 = $sub4_i583;
                var $_lcssa650 = $sub_i580;
                var $wA_0_lcssa = $sub34;
                var $wB_0_lcssa = $add39;
                break $for_body19$$for_end$9;
              }
              var $35 = $add4_i564;
              var $34 = $add_i561;
              var $33 = $sub4_i583;
              var $32 = $sub_i580;
              var $wA_0652 = $sub34;
              var $wB_0653 = $add39;
              var $j_0654 = $inc;
            }
          } else {
            var $_lcssa = $22;
            var $_lcssa648 = $20;
            var $_lcssa649 = $15;
            var $_lcssa650 = $13;
            var $wA_0_lcssa = $16;
            var $wB_0_lcssa = $23;
          }
        } while (0);
        var $wB_0_lcssa;
        var $wA_0_lcssa;
        var $_lcssa650;
        var $_lcssa649;
        var $_lcssa648;
        var $_lcssa;
        var $cmp41 = (HEAP32[$pointCount4 >> 2] | 0) == 1;
        $if_then$$if_else$13 : do {
          if ($cmp41) {
            var $44 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 3];
            var $45 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 2];
            var $46 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 1];
            var $47 = HEAPF32[$add_ptr >> 2];
            var $normalImpulse59 = $1 + $i_0661 * 152 + 16 | 0;
            var $50 = HEAPF32[$normalImpulse59 >> 2];
            var $add60 = $50 + (($_lcssa648 + $44 * -$wB_0_lcssa - $_lcssa650 - $46 * -$wA_0_lcssa) * $27 + ($_lcssa + $45 * $wB_0_lcssa - $_lcssa649 - $47 * $wA_0_lcssa) * $29 - HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 8]) * -HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 6];
            var $cond_i = $add60 > 0 ? $add60 : 0;
            var $sub63 = $cond_i - $50;
            HEAPF32[$normalImpulse59 >> 2] = $cond_i;
            var $mul_i502 = $27 * $sub63;
            var $mul1_i504 = $29 * $sub63;
            var $wB_1 = $wB_0_lcssa + $7 * ($45 * $mul1_i504 - $44 * $mul_i502);
            var $wA_1 = $wA_0_lcssa - $5 * ($47 * $mul1_i504 - $46 * $mul_i502);
            var $76 = $_lcssa650 - $mul_i502 * $4;
            var $75 = $_lcssa649 - $mul1_i504 * $4;
            var $74 = $_lcssa648 + $mul_i502 * $6;
            var $73 = $_lcssa + $mul1_i504 * $6;
          } else {
            var $normalImpulse82$s2 = ($1 + $i_0661 * 152 + 16 | 0) >> 2;
            var $51 = HEAPF32[$normalImpulse82$s2];
            var $normalImpulse83$s2 = ($1 + $i_0661 * 152 + 52 | 0) >> 2;
            var $52 = HEAPF32[$normalImpulse83$s2];
            if ($51 < 0 | $52 < 0) {
              ___assert_func(STRING_TABLE.__str230 | 0, 406, STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolver24SolveVelocityConstraintsEv | 0, STRING_TABLE.__str4234 | 0);
            }
            var $sub_i456 = -$wB_0_lcssa;
            var $53 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 3];
            var $54 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 2];
            var $sub_i433 = -$wA_0_lcssa;
            var $55 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 1];
            var $56 = HEAPF32[$add_ptr >> 2];
            var $57 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 12];
            var $58 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 11];
            var $59 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 10];
            var $60 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 9];
            var $64 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 26];
            var $65 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 25];
            var $sub_i355 = ($_lcssa648 + $53 * $sub_i456 - $_lcssa650 - $55 * $sub_i433) * $27 + ($_lcssa + $54 * $wB_0_lcssa - $_lcssa649 - $56 * $wA_0_lcssa) * $29 - HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 8] - (HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 24] * $51 + $64 * $52);
            var $sub4_i358 = ($_lcssa648 + $57 * $sub_i456 - $_lcssa650 - $59 * $sub_i433) * $27 + ($_lcssa + $58 * $wB_0_lcssa - $_lcssa649 - $60 * $wA_0_lcssa) * $29 - HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 17] - ($65 * $51 + HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 27] * $52);
            var $add_i350 = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 20] * $sub_i355 + HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 22] * $sub4_i358;
            var $add12_i = HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 21] * $sub_i355 + HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 23] * $sub4_i358;
            var $sub_i342 = -$add_i350;
            var $sub2_i = -$add12_i;
            if ($add_i350 > 0 | $add12_i > 0) {
              var $mul149 = $sub_i355 * -HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 6];
              var $cmp159 = $mul149 < 0;
              do {
                if (!$cmp159) {
                  if ($65 * $mul149 + $sub4_i358 < 0) {
                    break;
                  }
                  var $sub_i247 = $mul149 - $51;
                  var $sub3_i250 = -$52;
                  var $mul_i240 = $27 * $sub_i247;
                  var $mul1_i242 = $29 * $sub_i247;
                  var $mul_i234 = $27 * $sub3_i250;
                  var $mul1_i236 = $29 * $sub3_i250;
                  var $add_i227 = $mul_i240 + $mul_i234;
                  var $add3_i230 = $mul1_i242 + $mul1_i236;
                  var $sub_i215 = $_lcssa650 - $add_i227 * $4;
                  var $sub4_i218 = $_lcssa649 - $add3_i230 * $4;
                  var $sub179 = $wA_0_lcssa - $5 * ($56 * $mul1_i242 - $55 * $mul_i240 + ($60 * $mul1_i236 - $59 * $mul_i234));
                  var $add_i181 = $_lcssa648 + $add_i227 * $6;
                  var $add4_i184 = $_lcssa + $add3_i230 * $6;
                  var $add188 = $wB_0_lcssa + $7 * ($54 * $mul1_i242 - $53 * $mul_i240 + ($58 * $mul1_i236 - $57 * $mul_i234));
                  HEAPF32[$normalImpulse82$s2] = $mul149;
                  HEAPF32[$normalImpulse83$s2] = 0;
                  var $wB_1 = $add188;
                  var $wA_1 = $sub179;
                  var $76 = $sub_i215;
                  var $75 = $sub4_i218;
                  var $74 = $add_i181;
                  var $73 = $add4_i184;
                  break $if_then$$if_else$13;
                }
              } while (0);
              var $mul198 = $sub4_i358 * -HEAPF32[$1$s2 + ($i_0661 * 38 | 0) + 15];
              var $cmp207 = $mul198 < 0;
              do {
                if (!$cmp207) {
                  if ($64 * $mul198 + $sub_i355 < 0) {
                    break;
                  }
                  var $sub_i159 = -$51;
                  var $sub3_i162 = $mul198 - $52;
                  var $mul_i152 = $27 * $sub_i159;
                  var $mul1_i154 = $29 * $sub_i159;
                  var $mul_i146 = $27 * $sub3_i162;
                  var $mul1_i148 = $29 * $sub3_i162;
                  var $add_i139 = $mul_i152 + $mul_i146;
                  var $add3_i142 = $mul1_i154 + $mul1_i148;
                  var $sub_i127 = $_lcssa650 - $add_i139 * $4;
                  var $sub4_i130 = $_lcssa649 - $add3_i142 * $4;
                  var $sub227 = $wA_0_lcssa - $5 * ($56 * $mul1_i154 - $55 * $mul_i152 + ($60 * $mul1_i148 - $59 * $mul_i146));
                  var $add_i93 = $_lcssa648 + $add_i139 * $6;
                  var $add4_i96 = $_lcssa + $add3_i142 * $6;
                  var $add236 = $wB_0_lcssa + $7 * ($54 * $mul1_i154 - $53 * $mul_i152 + ($58 * $mul1_i148 - $57 * $mul_i146));
                  HEAPF32[$normalImpulse82$s2] = 0;
                  HEAPF32[$normalImpulse83$s2] = $mul198;
                  var $wB_1 = $add236;
                  var $wA_1 = $sub227;
                  var $76 = $sub_i127;
                  var $75 = $sub4_i130;
                  var $74 = $add_i93;
                  var $73 = $add4_i96;
                  break $if_then$$if_else$13;
                }
              } while (0);
              if ($sub_i355 < 0 | $sub4_i358 < 0) {
                var $wB_1 = $wB_0_lcssa;
                var $wA_1 = $wA_0_lcssa;
                var $76 = $_lcssa650;
                var $75 = $_lcssa649;
                var $74 = $_lcssa648;
                var $73 = $_lcssa;
                break;
              }
              var $sub_i72 = -$51;
              var $sub3_i = -$52;
              var $mul_i65 = $27 * $sub_i72;
              var $mul1_i67 = $29 * $sub_i72;
              var $mul_i59 = $27 * $sub3_i;
              var $mul1_i61 = $29 * $sub3_i;
              var $add_i52 = $mul_i65 + $mul_i59;
              var $add3_i55 = $mul1_i67 + $mul1_i61;
              var $sub_i41 = $_lcssa650 - $add_i52 * $4;
              var $sub4_i = $_lcssa649 - $add3_i55 * $4;
              var $sub266 = $wA_0_lcssa - $5 * ($56 * $mul1_i67 - $55 * $mul_i65 + ($60 * $mul1_i61 - $59 * $mul_i59));
              var $add_i = $_lcssa648 + $add_i52 * $6;
              var $add4_i = $_lcssa + $add3_i55 * $6;
              var $add275 = $wB_0_lcssa + $7 * ($54 * $mul1_i67 - $53 * $mul_i65 + ($58 * $mul1_i61 - $57 * $mul_i59));
              HEAPF32[$normalImpulse82$s2] = 0;
              HEAPF32[$normalImpulse83$s2] = 0;
              var $wB_1 = $add275;
              var $wA_1 = $sub266;
              var $76 = $sub_i41;
              var $75 = $sub4_i;
              var $74 = $add_i;
              var $73 = $add4_i;
            } else {
              var $sub_i335 = $sub_i342 - $51;
              var $sub3_i338 = $sub2_i - $52;
              var $mul_i328 = $27 * $sub_i335;
              var $mul1_i330 = $29 * $sub_i335;
              var $mul_i322 = $27 * $sub3_i338;
              var $mul1_i324 = $29 * $sub3_i338;
              var $add_i315 = $mul_i328 + $mul_i322;
              var $add3_i318 = $mul1_i330 + $mul1_i324;
              var $sub_i303 = $_lcssa650 - $add_i315 * $4;
              var $sub4_i306 = $_lcssa649 - $add3_i318 * $4;
              var $sub132 = $wA_0_lcssa - $5 * ($56 * $mul1_i330 - $55 * $mul_i328 + ($60 * $mul1_i324 - $59 * $mul_i322));
              var $add_i269 = $_lcssa648 + $add_i315 * $6;
              var $add4_i272 = $_lcssa + $add3_i318 * $6;
              var $add141 = $wB_0_lcssa + $7 * ($54 * $mul1_i330 - $53 * $mul_i328 + ($58 * $mul1_i324 - $57 * $mul_i322));
              HEAPF32[$normalImpulse82$s2] = $sub_i342;
              HEAPF32[$normalImpulse83$s2] = $sub2_i;
              var $wB_1 = $add141;
              var $wA_1 = $sub132;
              var $76 = $sub_i303;
              var $75 = $sub4_i306;
              var $74 = $add_i269;
              var $73 = $add4_i272;
            }
          }
        } while (0);
        var $73;
        var $74;
        var $75;
        var $76;
        var $wA_1;
        var $wB_1;
        var $78 = HEAP32[$m_velocities$s2] + $2 * 12 | 0;
        var $79 = (tempDoubleF32[0] = $76, tempDoubleI32[0]);
        var $80$0 = $79;
        var $81 = (tempDoubleF32[0] = $75, tempDoubleI32[0]);
        var $84$1 = $81 | 0;
        var $st$19$0 = $78 | 0;
        HEAP32[$st$19$0 >> 2] = 0 | $80$0;
        var $st$19$1 = $78 + 4 | 0;
        HEAP32[$st$19$1 >> 2] = $84$1;
        HEAPF32[(HEAP32[$m_velocities$s2] + 8 >> 2) + ($2 * 3 | 0)] = $wA_1;
        var $87 = HEAP32[$m_velocities$s2] + $3 * 12 | 0;
        var $88 = (tempDoubleF32[0] = $74, tempDoubleI32[0]);
        var $89$0 = $88;
        var $90 = (tempDoubleF32[0] = $73, tempDoubleI32[0]);
        var $93$1 = $90 | 0;
        var $st$39$0 = $87 | 0;
        HEAP32[$st$39$0 >> 2] = 0 | $89$0;
        var $st$39$1 = $87 + 4 | 0;
        HEAP32[$st$39$1 >> 2] = $93$1;
        HEAPF32[(HEAP32[$m_velocities$s2] + 8 >> 2) + ($3 * 3 | 0)] = $wB_1;
        var $inc296 = $i_0661 + 1 | 0;
        if (($inc296 | 0) >= (HEAP32[$m_count >> 2] | 0)) {
          break $for_body_lr_ph$$for_end297$2;
        }
        var $i_0661 = $inc296;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN15b2ContactSolver24SolvePositionConstraintsEv($this) {
  var $5$s2;
  var $m_positions$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 52;
  var $xfA = __stackBase__;
  var $xfB = __stackBase__ + 16;
  var $psm = __stackBase__ + 32;
  var $m_count = $this + 48 | 0;
  var $cmp126 = (HEAP32[$m_count >> 2] | 0) > 0;
  $for_body_lr_ph$$for_end61$45 : do {
    if ($cmp126) {
      var $m_positionConstraints = $this + 36 | 0;
      var $m_positions$s2 = ($this + 24 | 0) >> 2;
      var $s_i97 = $xfA + 8 | 0;
      var $c_i99 = $xfA + 12 | 0;
      var $s_i94 = $xfB + 8 | 0;
      var $c_i95 = $xfB + 12 | 0;
      var $1 = $xfA;
      var $2 = $xfB;
      var $3 = $psm;
      var $4 = $psm + 8 | 0;
      var $separation27 = $psm + 16 | 0;
      var $i_0127 = 0;
      var $minSeparation_0128 = 0;
      while (1) {
        var $minSeparation_0128;
        var $i_0127;
        var $5 = HEAP32[$m_positionConstraints >> 2], $5$s2 = $5 >> 2;
        var $add_ptr = $5 + $i_0127 * 88 | 0;
        var $6 = HEAP32[$5$s2 + ($i_0127 * 22 | 0) + 8];
        var $7 = HEAP32[$5$s2 + ($i_0127 * 22 | 0) + 9];
        var $8 = $5 + $i_0127 * 88 + 48 | 0;
        var $9$1 = HEAP32[$8 + 4 >> 2];
        var $11 = (tempDoubleI32[0] = HEAP32[$8 >> 2], tempDoubleF32[0]);
        var $13 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
        var $14 = HEAPF32[$5$s2 + ($i_0127 * 22 | 0) + 10];
        var $15 = HEAPF32[$5$s2 + ($i_0127 * 22 | 0) + 16];
        var $16 = $5 + $i_0127 * 88 + 56 | 0;
        var $17$1 = HEAP32[$16 + 4 >> 2];
        var $19 = (tempDoubleI32[0] = HEAP32[$16 >> 2], tempDoubleF32[0]);
        var $21 = (tempDoubleI32[0] = $17$1, tempDoubleF32[0]);
        var $22 = HEAPF32[$5$s2 + ($i_0127 * 22 | 0) + 11];
        var $23 = HEAPF32[$5$s2 + ($i_0127 * 22 | 0) + 17];
        var $24 = HEAP32[$5$s2 + ($i_0127 * 22 | 0) + 21];
        var $25 = HEAP32[$m_positions$s2];
        var $26 = $25 + $6 * 12 | 0;
        var $27$1 = HEAP32[$26 + 4 >> 2];
        var $29 = (tempDoubleI32[0] = HEAP32[$26 >> 2], tempDoubleF32[0]);
        var $31 = (tempDoubleI32[0] = $27$1, tempDoubleF32[0]);
        var $32 = HEAPF32[($25 + 8 >> 2) + ($6 * 3 | 0)];
        var $33 = $25 + $7 * 12 | 0;
        var $34$1 = HEAP32[$33 + 4 >> 2];
        var $36 = (tempDoubleI32[0] = HEAP32[$33 >> 2], tempDoubleF32[0]);
        var $38 = (tempDoubleI32[0] = $34$1, tempDoubleF32[0]);
        var $39 = HEAPF32[($25 + 8 >> 2) + ($7 * 3 | 0)];
        if (($24 | 0) > 0) {
          var $add31 = $14 + $22;
          var $43 = $38;
          var $42 = $36;
          var $41 = $31;
          var $40 = $29;
          var $aA_0116 = $32;
          var $aB_0117 = $39;
          var $minSeparation_1118 = $minSeparation_0128;
          var $j_0119 = 0;
          while (1) {
            var $j_0119;
            var $minSeparation_1118;
            var $aB_0117;
            var $aA_0116;
            var $40;
            var $41;
            var $42;
            var $43;
            var $call_i96 = _sinf($aA_0116);
            HEAPF32[$s_i97 >> 2] = $call_i96;
            var $call2_i98 = _cosf($aA_0116);
            HEAPF32[$c_i99 >> 2] = $call2_i98;
            var $call_i = _sinf($aB_0117);
            HEAPF32[$s_i94 >> 2] = $call_i;
            var $call2_i = _cosf($aB_0117);
            HEAPF32[$c_i95 >> 2] = $call2_i;
            var $sub_i76 = $40 - ($call2_i98 * $11 - $call_i96 * $13);
            var $sub3_i79 = $41 - ($call_i96 * $11 + $call2_i98 * $13);
            var $44 = (tempDoubleF32[0] = $sub_i76, tempDoubleI32[0]);
            var $45$0 = $44;
            var $46 = (tempDoubleF32[0] = $sub3_i79, tempDoubleI32[0]);
            var $49$0 = 0 | $45$0;
            var $49$1 = $46 | 0;
            HEAP32[$1 >> 2] = $49$0;
            HEAP32[$1 + 4 >> 2] = $49$1;
            var $sub_i60 = $42 - ($call2_i * $19 - $call_i * $21);
            var $sub3_i63 = $43 - ($call_i * $19 + $call2_i * $21);
            var $50 = (tempDoubleF32[0] = $sub_i60, tempDoubleI32[0]);
            var $51$0 = $50;
            var $52 = (tempDoubleF32[0] = $sub3_i63, tempDoubleI32[0]);
            var $55$0 = 0 | $51$0;
            var $55$1 = $52 | 0;
            HEAP32[$2 >> 2] = $55$0;
            HEAP32[$2 + 4 >> 2] = $55$1;
            __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm, $add_ptr, $xfA, $xfB, $j_0119);
            var $56$1 = HEAP32[$3 + 4 >> 2];
            var $58 = (tempDoubleI32[0] = HEAP32[$3 >> 2], tempDoubleF32[0]);
            var $60 = (tempDoubleI32[0] = $56$1, tempDoubleF32[0]);
            var $61$1 = HEAP32[$4 + 4 >> 2];
            var $63 = (tempDoubleI32[0] = HEAP32[$4 >> 2], tempDoubleF32[0]);
            var $65 = (tempDoubleI32[0] = $61$1, tempDoubleF32[0]);
            var $66 = HEAPF32[$separation27 >> 2];
            var $sub_i52 = $63 - $40;
            var $sub3_i55 = $65 - $41;
            var $sub_i46 = $63 - $42;
            var $sub3_i = $65 - $43;
            var $cond_i = $minSeparation_1118 < $66 ? $minSeparation_1118 : $66;
            var $mul = ($66 + .004999999888241291) * .20000000298023224;
            var $cond_i_i = $mul < 0 ? $mul : 0;
            var $sub_i44 = $sub_i52 * $60 - $sub3_i55 * $58;
            var $sub_i37 = $sub_i46 * $60 - $sub3_i * $58;
            var $add37 = $add31 + $15 * $sub_i44 * $sub_i44 + $23 * $sub_i37 * $sub_i37;
            if ($add37 > 0) {
              var $cond_i2_i = $cond_i_i < -.20000000298023224 ? -.20000000298023224 : $cond_i_i;
              var $cond = -$cond_i2_i / $add37;
            } else {
              var $cond = 0;
            }
            var $cond;
            var $mul_i26 = $58 * $cond;
            var $mul1_i28 = $60 * $cond;
            var $sub_i16 = $40 - $mul_i26 * $14;
            var $sub4_i = $41 - $mul1_i28 * $14;
            var $sub42 = $aA_0116 - $15 * ($sub_i52 * $mul1_i28 - $sub3_i55 * $mul_i26);
            var $add_i = $42 + $mul_i26 * $22;
            var $add4_i = $43 + $mul1_i28 * $22;
            var $add46 = $aB_0117 + $23 * ($sub_i46 * $mul1_i28 - $sub3_i * $mul_i26);
            var $inc = $j_0119 + 1 | 0;
            if (($inc | 0) == ($24 | 0)) {
              break;
            }
            var $43 = $add4_i;
            var $42 = $add_i;
            var $41 = $sub4_i;
            var $40 = $sub_i16;
            var $aA_0116 = $sub42;
            var $aB_0117 = $add46;
            var $minSeparation_1118 = $cond_i;
            var $j_0119 = $inc;
          }
          var $_lcssa = $add4_i;
          var $_lcssa112 = $add_i;
          var $_lcssa113 = $sub4_i;
          var $_lcssa114 = $sub_i16;
          var $aA_0_lcssa = $sub42;
          var $aB_0_lcssa = $add46;
          var $minSeparation_1_lcssa = $cond_i;
          var $67 = HEAP32[$m_positions$s2];
        } else {
          var $_lcssa = $38;
          var $_lcssa112 = $36;
          var $_lcssa113 = $31;
          var $_lcssa114 = $29;
          var $aA_0_lcssa = $32;
          var $aB_0_lcssa = $39;
          var $minSeparation_1_lcssa = $minSeparation_0128;
          var $67 = $25;
        }
        var $67;
        var $minSeparation_1_lcssa;
        var $aB_0_lcssa;
        var $aA_0_lcssa;
        var $_lcssa114;
        var $_lcssa113;
        var $_lcssa112;
        var $_lcssa;
        var $68 = $67 + $6 * 12 | 0;
        var $69 = (tempDoubleF32[0] = $_lcssa114, tempDoubleI32[0]);
        var $70$0 = $69;
        var $71 = (tempDoubleF32[0] = $_lcssa113, tempDoubleI32[0]);
        var $74$1 = $71 | 0;
        var $st$20$0 = $68 | 0;
        HEAP32[$st$20$0 >> 2] = 0 | $70$0;
        var $st$20$1 = $68 + 4 | 0;
        HEAP32[$st$20$1 >> 2] = $74$1;
        HEAPF32[(HEAP32[$m_positions$s2] + 8 >> 2) + ($6 * 3 | 0)] = $aA_0_lcssa;
        var $77 = HEAP32[$m_positions$s2] + $7 * 12 | 0;
        var $78 = (tempDoubleF32[0] = $_lcssa112, tempDoubleI32[0]);
        var $79$0 = $78;
        var $80 = (tempDoubleF32[0] = $_lcssa, tempDoubleI32[0]);
        var $83$1 = $80 | 0;
        var $st$40$0 = $77 | 0;
        HEAP32[$st$40$0 >> 2] = 0 | $79$0;
        var $st$40$1 = $77 + 4 | 0;
        HEAP32[$st$40$1 >> 2] = $83$1;
        HEAPF32[(HEAP32[$m_positions$s2] + 8 >> 2) + ($7 * 3 | 0)] = $aB_0_lcssa;
        var $inc60 = $i_0127 + 1 | 0;
        if (($inc60 | 0) >= (HEAP32[$m_count >> 2] | 0)) {
          var $minSeparation_0_lcssa = $minSeparation_1_lcssa;
          break $for_body_lr_ph$$for_end61$45;
        }
        var $i_0127 = $inc60;
        var $minSeparation_0128 = $minSeparation_1_lcssa;
      }
    } else {
      var $minSeparation_0_lcssa = 0;
    }
  } while (0);
  var $minSeparation_0_lcssa;
  STACKTOP = __stackBase__;
  return $minSeparation_0_lcssa >= -.014999999664723873;
  return null;
}

function __ZN22b2EdgeAndCircleContactD1Ev($this) {
  return;
  return;
}

function __ZN23b2EdgeAndPolygonContactD1Ev($this) {
  return;
  return;
}

function __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($this, $pc, $xfA, $xfB, $index) {
  var $xfB$s2 = $xfB >> 2;
  var $xfA$s2 = $xfA >> 2;
  var $pc$s2 = $pc >> 2;
  if ((HEAP32[$pc$s2 + 21] | 0) <= 0) {
    ___assert_func(STRING_TABLE.__str230 | 0, 617, STRING_TABLE.___PRETTY_FUNCTION____ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i | 0, STRING_TABLE.__str5235 | 0);
  }
  var $1 = HEAP32[$pc$s2 + 18];
  if ($1 == 0) {
    var $2 = HEAPF32[$xfA$s2 + 3];
    var $3 = HEAPF32[$pc$s2 + 6];
    var $4 = HEAPF32[$xfA$s2 + 2];
    var $5 = HEAPF32[$pc$s2 + 7];
    var $add_i = $2 * $3 - $4 * $5 + HEAPF32[$xfA$s2];
    var $add17_i = $4 * $3 + $2 * $5 + HEAPF32[$xfA$s2 + 1];
    var $8 = HEAPF32[$xfB$s2 + 3];
    var $9 = HEAPF32[$pc$s2];
    var $10 = HEAPF32[$xfB$s2 + 2];
    var $11 = HEAPF32[$pc$s2 + 1];
    var $add_i155 = $8 * $9 - $10 * $11 + HEAPF32[$xfB$s2];
    var $add17_i160 = $10 * $9 + $8 * $11 + HEAPF32[$xfB$s2 + 1];
    var $sub_i165 = $add_i155 - $add_i;
    var $sub3_i168 = $add17_i160 - $add17_i;
    var $14 = $this;
    var $15 = (tempDoubleF32[0] = $sub_i165, tempDoubleI32[0]);
    var $16$0 = $15;
    var $17 = (tempDoubleF32[0] = $sub3_i168, tempDoubleI32[0]);
    var $20$1 = $17 | 0;
    HEAP32[$14 >> 2] = 0 | $16$0;
    HEAP32[$14 + 4 >> 2] = $20$1;
    var $add_i_i = $sub_i165 * $sub_i165 + $sub3_i168 * $sub3_i168;
    var $call_i_i_i = _sqrtf($add_i_i);
    if ($call_i_i_i < 1.1920928955078125e-7) {
      var $22 = $sub_i165;
      var $21 = $sub3_i168;
    } else {
      var $y_i_i145 = $this + 4 | 0;
      var $div_i = 1 / $call_i_i_i;
      var $mul_i146 = $sub_i165 * $div_i;
      HEAPF32[$this >> 2] = $mul_i146;
      var $mul2_i = $sub3_i168 * $div_i;
      HEAPF32[$y_i_i145 >> 2] = $mul2_i;
      var $22 = $mul_i146;
      var $21 = $mul2_i;
    }
    var $21;
    var $22;
    var $mul1_i134 = ($add17_i + $add17_i160) * .5;
    var $23 = $this + 8 | 0;
    var $24 = (tempDoubleF32[0] = ($add_i + $add_i155) * .5, tempDoubleI32[0]);
    var $25$0 = $24;
    var $26 = (tempDoubleF32[0] = $mul1_i134, tempDoubleI32[0]);
    var $29$1 = $26 | 0;
    HEAP32[$23 >> 2] = 0 | $25$0;
    HEAP32[$23 + 4 >> 2] = $29$1;
    var $sub8 = $sub_i165 * $22 + $sub3_i168 * $21 - HEAPF32[$pc$s2 + 19] - HEAPF32[$pc$s2 + 20];
    HEAPF32[$this + 16 >> 2] = $sub8;
  } else if ($1 == 1) {
    var $c_i104 = $xfA + 12 | 0;
    var $32 = HEAPF32[$c_i104 >> 2];
    var $33 = HEAPF32[$pc$s2 + 4];
    var $s_i107 = $xfA + 8 | 0;
    var $34 = HEAPF32[$s_i107 >> 2];
    var $35 = HEAPF32[$pc$s2 + 5];
    var $sub_i110 = $32 * $33 - $34 * $35;
    var $add_i113 = $34 * $33 + $32 * $35;
    var $36 = $this;
    var $37 = (tempDoubleF32[0] = $sub_i110, tempDoubleI32[0]);
    var $38$0 = $37;
    var $39 = (tempDoubleF32[0] = $add_i113, tempDoubleI32[0]);
    var $42$1 = $39 | 0;
    var $st$25$0 = $36 | 0;
    HEAP32[$st$25$0 >> 2] = 0 | $38$0;
    var $st$25$1 = $36 + 4 | 0;
    HEAP32[$st$25$1 >> 2] = $42$1;
    var $43 = HEAPF32[$c_i104 >> 2];
    var $44 = HEAPF32[$pc$s2 + 6];
    var $45 = HEAPF32[$s_i107 >> 2];
    var $46 = HEAPF32[$pc$s2 + 7];
    var $49 = HEAPF32[$xfB$s2 + 3];
    var $50 = HEAPF32[($index << 3 >> 2) + $pc$s2];
    var $51 = HEAPF32[$xfB$s2 + 2];
    var $52 = HEAPF32[(($index << 3) + 4 >> 2) + $pc$s2];
    var $add_i80 = $49 * $50 - $51 * $52 + HEAPF32[$xfB$s2];
    var $add17_i85 = $51 * $50 + $49 * $52 + HEAPF32[$xfB$s2 + 1];
    var $sub21 = ($add_i80 - ($43 * $44 - $45 * $46 + HEAPF32[$xfA$s2])) * $sub_i110 + ($add17_i85 - ($45 * $44 + $43 * $46 + HEAPF32[$xfA$s2 + 1])) * $add_i113 - HEAPF32[$pc$s2 + 19] - HEAPF32[$pc$s2 + 20];
    HEAPF32[$this + 16 >> 2] = $sub21;
    var $57 = $this + 8 | 0;
    var $58 = (tempDoubleF32[0] = $add_i80, tempDoubleI32[0]);
    var $59$0 = $58;
    var $60 = (tempDoubleF32[0] = $add17_i85, tempDoubleI32[0]);
    var $63$1 = $60 | 0;
    var $st$92$0 = $57 | 0;
    HEAP32[$st$92$0 >> 2] = 0 | $59$0;
    var $st$92$1 = $57 + 4 | 0;
    HEAP32[$st$92$1 >> 2] = $63$1;
  } else if ($1 == 2) {
    var $c_i48 = $xfB + 12 | 0;
    var $64 = HEAPF32[$c_i48 >> 2];
    var $65 = HEAPF32[$pc$s2 + 4];
    var $s_i51 = $xfB + 8 | 0;
    var $66 = HEAPF32[$s_i51 >> 2];
    var $67 = HEAPF32[$pc$s2 + 5];
    var $sub_i53 = $64 * $65 - $66 * $67;
    var $add_i54 = $66 * $65 + $64 * $67;
    var $68 = $this;
    var $69 = (tempDoubleF32[0] = $sub_i53, tempDoubleI32[0]);
    var $70$0 = $69;
    var $71 = (tempDoubleF32[0] = $add_i54, tempDoubleI32[0]);
    var $74$1 = $71 | 0;
    var $st$25$0 = $68 | 0;
    HEAP32[$st$25$0 >> 2] = 0 | $70$0;
    var $st$25$1 = $68 + 4 | 0;
    HEAP32[$st$25$1 >> 2] = $74$1;
    var $75 = HEAPF32[$c_i48 >> 2];
    var $76 = HEAPF32[$pc$s2 + 6];
    var $77 = HEAPF32[$s_i51 >> 2];
    var $78 = HEAPF32[$pc$s2 + 7];
    var $81 = HEAPF32[$xfA$s2 + 3];
    var $82 = HEAPF32[($index << 3 >> 2) + $pc$s2];
    var $83 = HEAPF32[$xfA$s2 + 2];
    var $84 = HEAPF32[(($index << 3) + 4 >> 2) + $pc$s2];
    var $add_i24 = $81 * $82 - $83 * $84 + HEAPF32[$xfA$s2];
    var $add17_i29 = $83 * $82 + $81 * $84 + HEAPF32[$xfA$s2 + 1];
    var $sub40 = ($add_i24 - ($75 * $76 - $77 * $78 + HEAPF32[$xfB$s2])) * $sub_i53 + ($add17_i29 - ($77 * $76 + $75 * $78 + HEAPF32[$xfB$s2 + 1])) * $add_i54 - HEAPF32[$pc$s2 + 19] - HEAPF32[$pc$s2 + 20];
    HEAPF32[$this + 16 >> 2] = $sub40;
    var $89 = $this + 8 | 0;
    var $90 = (tempDoubleF32[0] = $add_i24, tempDoubleI32[0]);
    var $91$0 = $90;
    var $92 = (tempDoubleF32[0] = $add17_i29, tempDoubleI32[0]);
    var $95$1 = $92 | 0;
    var $st$92$0 = $89 | 0;
    HEAP32[$st$92$0 >> 2] = 0 | $91$0;
    var $st$92$1 = $89 + 4 | 0;
    HEAP32[$st$92$1 >> 2] = $95$1;
    var $sub2_i = -$add_i54;
    var $96 = (tempDoubleF32[0] = -$sub_i53, tempDoubleI32[0]);
    var $97$0 = $96;
    var $98 = (tempDoubleF32[0] = $sub2_i, tempDoubleI32[0]);
    var $101$1 = $98 | 0;
    HEAP32[$68 >> 2] = 0 | $97$0;
    HEAP32[$68 + 4 >> 2] = $101$1;
  }
  return;
  return;
}

function __ZN15b2ContactSolver27SolveTOIPositionConstraintsEii($this, $toiIndexA, $toiIndexB) {
  var $5$s2;
  var $m_positions$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 52;
  var $xfA = __stackBase__;
  var $xfB = __stackBase__ + 16;
  var $psm = __stackBase__ + 32;
  var $m_count = $this + 48 | 0;
  var $cmp127 = (HEAP32[$m_count >> 2] | 0) > 0;
  $for_body_lr_ph$$for_end70$14 : do {
    if ($cmp127) {
      var $m_positionConstraints = $this + 36 | 0;
      var $m_positions$s2 = ($this + 24 | 0) >> 2;
      var $s_i98 = $xfA + 8 | 0;
      var $c_i100 = $xfA + 12 | 0;
      var $s_i95 = $xfB + 8 | 0;
      var $c_i96 = $xfB + 12 | 0;
      var $1 = $xfA;
      var $2 = $xfB;
      var $3 = $psm;
      var $4 = $psm + 8 | 0;
      var $separation36 = $psm + 16 | 0;
      var $i_0128 = 0;
      var $minSeparation_0129 = 0;
      while (1) {
        var $minSeparation_0129;
        var $i_0128;
        var $5 = HEAP32[$m_positionConstraints >> 2], $5$s2 = $5 >> 2;
        var $add_ptr = $5 + $i_0128 * 88 | 0;
        var $6 = HEAP32[$5$s2 + ($i_0128 * 22 | 0) + 8];
        var $7 = HEAP32[$5$s2 + ($i_0128 * 22 | 0) + 9];
        var $8 = $5 + $i_0128 * 88 + 48 | 0;
        var $9$1 = HEAP32[$8 + 4 >> 2];
        var $11 = (tempDoubleI32[0] = HEAP32[$8 >> 2], tempDoubleF32[0]);
        var $13 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
        var $14 = $5 + $i_0128 * 88 + 56 | 0;
        var $15$1 = HEAP32[$14 + 4 >> 2];
        var $17 = (tempDoubleI32[0] = HEAP32[$14 >> 2], tempDoubleF32[0]);
        var $19 = (tempDoubleI32[0] = $15$1, tempDoubleF32[0]);
        var $20 = HEAP32[$5$s2 + ($i_0128 * 22 | 0) + 21];
        if (($6 | 0) == ($toiIndexA | 0) | ($6 | 0) == ($toiIndexB | 0)) {
          var $iA_0 = HEAPF32[$5$s2 + ($i_0128 * 22 | 0) + 16];
          var $mA_0 = HEAPF32[$5$s2 + ($i_0128 * 22 | 0) + 10];
        } else {
          var $iA_0 = 0;
          var $mA_0 = 0;
        }
        var $mA_0;
        var $iA_0;
        var $iB_0 = HEAPF32[$5$s2 + ($i_0128 * 22 | 0) + 17];
        var $mB_0 = HEAPF32[$5$s2 + ($i_0128 * 22 | 0) + 11];
        var $23 = HEAP32[$m_positions$s2];
        var $24 = $23 + $6 * 12 | 0;
        var $25$1 = HEAP32[$24 + 4 >> 2];
        var $27 = (tempDoubleI32[0] = HEAP32[$24 >> 2], tempDoubleF32[0]);
        var $29 = (tempDoubleI32[0] = $25$1, tempDoubleF32[0]);
        var $30 = HEAPF32[($23 + 8 >> 2) + ($6 * 3 | 0)];
        var $31 = $23 + $7 * 12 | 0;
        var $32$1 = HEAP32[$31 + 4 >> 2];
        var $34 = (tempDoubleI32[0] = HEAP32[$31 >> 2], tempDoubleF32[0]);
        var $36 = (tempDoubleI32[0] = $32$1, tempDoubleF32[0]);
        var $37 = HEAPF32[($23 + 8 >> 2) + ($7 * 3 | 0)];
        if (($20 | 0) > 0) {
          var $add40 = $mA_0 + $mB_0;
          var $41 = $36;
          var $40 = $34;
          var $39 = $29;
          var $38 = $27;
          var $minSeparation_1117 = $minSeparation_0129;
          var $aA_0118 = $30;
          var $aB_0119 = $37;
          var $j_0120 = 0;
          while (1) {
            var $j_0120;
            var $aB_0119;
            var $aA_0118;
            var $minSeparation_1117;
            var $38;
            var $39;
            var $40;
            var $41;
            var $call_i97 = _sinf($aA_0118);
            HEAPF32[$s_i98 >> 2] = $call_i97;
            var $call2_i99 = _cosf($aA_0118);
            HEAPF32[$c_i100 >> 2] = $call2_i99;
            var $call_i = _sinf($aB_0119);
            HEAPF32[$s_i95 >> 2] = $call_i;
            var $call2_i = _cosf($aB_0119);
            HEAPF32[$c_i96 >> 2] = $call2_i;
            var $sub_i77 = $38 - ($call2_i99 * $11 - $call_i97 * $13);
            var $sub3_i80 = $39 - ($call_i97 * $11 + $call2_i99 * $13);
            var $42 = (tempDoubleF32[0] = $sub_i77, tempDoubleI32[0]);
            var $43$0 = $42;
            var $44 = (tempDoubleF32[0] = $sub3_i80, tempDoubleI32[0]);
            var $47$0 = 0 | $43$0;
            var $47$1 = $44 | 0;
            HEAP32[$1 >> 2] = $47$0;
            HEAP32[$1 + 4 >> 2] = $47$1;
            var $sub_i61 = $40 - ($call2_i * $17 - $call_i * $19);
            var $sub3_i64 = $41 - ($call_i * $17 + $call2_i * $19);
            var $48 = (tempDoubleF32[0] = $sub_i61, tempDoubleI32[0]);
            var $49$0 = $48;
            var $50 = (tempDoubleF32[0] = $sub3_i64, tempDoubleI32[0]);
            var $53$0 = 0 | $49$0;
            var $53$1 = $50 | 0;
            HEAP32[$2 >> 2] = $53$0;
            HEAP32[$2 + 4 >> 2] = $53$1;
            __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm, $add_ptr, $xfA, $xfB, $j_0120);
            var $54$1 = HEAP32[$3 + 4 >> 2];
            var $56 = (tempDoubleI32[0] = HEAP32[$3 >> 2], tempDoubleF32[0]);
            var $58 = (tempDoubleI32[0] = $54$1, tempDoubleF32[0]);
            var $59$1 = HEAP32[$4 + 4 >> 2];
            var $61 = (tempDoubleI32[0] = HEAP32[$4 >> 2], tempDoubleF32[0]);
            var $63 = (tempDoubleI32[0] = $59$1, tempDoubleF32[0]);
            var $64 = HEAPF32[$separation36 >> 2];
            var $sub_i53 = $61 - $38;
            var $sub3_i56 = $63 - $39;
            var $sub_i47 = $61 - $40;
            var $sub3_i = $63 - $41;
            var $cond_i = $minSeparation_1117 < $64 ? $minSeparation_1117 : $64;
            var $mul = ($64 + .004999999888241291) * .75;
            var $cond_i_i = $mul < 0 ? $mul : 0;
            var $sub_i45 = $sub_i53 * $58 - $sub3_i56 * $56;
            var $sub_i38 = $sub_i47 * $58 - $sub3_i * $56;
            var $add46 = $add40 + $iA_0 * $sub_i45 * $sub_i45 + $iB_0 * $sub_i38 * $sub_i38;
            if ($add46 > 0) {
              var $cond_i2_i = $cond_i_i < -.20000000298023224 ? -.20000000298023224 : $cond_i_i;
              var $cond = -$cond_i2_i / $add46;
            } else {
              var $cond = 0;
            }
            var $cond;
            var $mul_i27 = $56 * $cond;
            var $mul1_i29 = $58 * $cond;
            var $sub_i17 = $38 - $mul_i27 * $mA_0;
            var $sub4_i = $39 - $mul1_i29 * $mA_0;
            var $sub51 = $aA_0118 - $iA_0 * ($sub_i53 * $mul1_i29 - $sub3_i56 * $mul_i27);
            var $add_i = $40 + $mul_i27 * $mB_0;
            var $add4_i = $41 + $mul1_i29 * $mB_0;
            var $add55 = $aB_0119 + $iB_0 * ($sub_i47 * $mul1_i29 - $sub3_i * $mul_i27);
            var $inc = $j_0120 + 1 | 0;
            if (($inc | 0) == ($20 | 0)) {
              break;
            }
            var $41 = $add4_i;
            var $40 = $add_i;
            var $39 = $sub4_i;
            var $38 = $sub_i17;
            var $minSeparation_1117 = $cond_i;
            var $aA_0118 = $sub51;
            var $aB_0119 = $add55;
            var $j_0120 = $inc;
          }
          var $_lcssa = $add4_i;
          var $_lcssa113 = $add_i;
          var $_lcssa114 = $sub4_i;
          var $_lcssa115 = $sub_i17;
          var $minSeparation_1_lcssa = $cond_i;
          var $aA_0_lcssa = $sub51;
          var $aB_0_lcssa = $add55;
          var $65 = HEAP32[$m_positions$s2];
        } else {
          var $_lcssa = $36;
          var $_lcssa113 = $34;
          var $_lcssa114 = $29;
          var $_lcssa115 = $27;
          var $minSeparation_1_lcssa = $minSeparation_0129;
          var $aA_0_lcssa = $30;
          var $aB_0_lcssa = $37;
          var $65 = $23;
        }
        var $65;
        var $aB_0_lcssa;
        var $aA_0_lcssa;
        var $minSeparation_1_lcssa;
        var $_lcssa115;
        var $_lcssa114;
        var $_lcssa113;
        var $_lcssa;
        var $66 = $65 + $6 * 12 | 0;
        var $67 = (tempDoubleF32[0] = $_lcssa115, tempDoubleI32[0]);
        var $68$0 = $67;
        var $69 = (tempDoubleF32[0] = $_lcssa114, tempDoubleI32[0]);
        var $72$1 = $69 | 0;
        var $st$20$0 = $66 | 0;
        HEAP32[$st$20$0 >> 2] = 0 | $68$0;
        var $st$20$1 = $66 + 4 | 0;
        HEAP32[$st$20$1 >> 2] = $72$1;
        HEAPF32[(HEAP32[$m_positions$s2] + 8 >> 2) + ($6 * 3 | 0)] = $aA_0_lcssa;
        var $75 = HEAP32[$m_positions$s2] + $7 * 12 | 0;
        var $76 = (tempDoubleF32[0] = $_lcssa113, tempDoubleI32[0]);
        var $77$0 = $76;
        var $78 = (tempDoubleF32[0] = $_lcssa, tempDoubleI32[0]);
        var $81$1 = $78 | 0;
        var $st$40$0 = $75 | 0;
        HEAP32[$st$40$0 >> 2] = 0 | $77$0;
        var $st$40$1 = $75 + 4 | 0;
        HEAP32[$st$40$1 >> 2] = $81$1;
        HEAPF32[(HEAP32[$m_positions$s2] + 8 >> 2) + ($7 * 3 | 0)] = $aB_0_lcssa;
        var $inc69 = $i_0128 + 1 | 0;
        if (($inc69 | 0) >= (HEAP32[$m_count >> 2] | 0)) {
          var $minSeparation_0_lcssa = $minSeparation_1_lcssa;
          break $for_body_lr_ph$$for_end70$14;
        }
        var $i_0128 = $inc69;
        var $minSeparation_0129 = $minSeparation_1_lcssa;
      }
    } else {
      var $minSeparation_0_lcssa = 0;
    }
  } while (0);
  var $minSeparation_0_lcssa;
  STACKTOP = __stackBase__;
  return $minSeparation_0_lcssa >= -.007499999832361937;
  return null;
}

function __ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  var $call$s2;
  var $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144), $call$s2 = $call >> 2;
  var $new_isnull = ($call | 0) == 0;
  do {
    if ($new_isnull) {
      var $22 = 0;
    } else {
      var $2 = $call;
      var $3 = $call;
      HEAP32[$3 >> 2] = __ZTV9b2Contact + 8 | 0;
      HEAP32[$call$s2 + 1] = 4;
      HEAP32[$call$s2 + 12] = $fixtureA;
      var $6 = $call + 52 | 0;
      HEAP32[$6 >> 2] = $fixtureB;
      HEAP32[$call$s2 + 14] = 0;
      HEAP32[$call$s2 + 15] = 0;
      HEAP32[$call$s2 + 31] = 0;
      var $m_prev_i_i = $call + 8 | 0;
      HEAP32[$call$s2 + 32] = 0;
      var $m_friction_i_i = $fixtureA + 16 | 0;
      for (var $$dest = $m_prev_i_i >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0;
      }
      var $mul_i_i_i = HEAPF32[$m_friction_i_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
      var $call_i_i_i_i = _sqrtf($mul_i_i_i);
      HEAPF32[$call$s2 + 34] = $call_i_i_i_i;
      var $14 = HEAPF32[$fixtureA + 20 >> 2];
      var $15 = HEAPF32[$fixtureB + 20 >> 2];
      var $cond_i_i_i = $14 > $15 ? $14 : $15;
      HEAPF32[$call$s2 + 35] = $cond_i_i_i;
      HEAP32[$3 >> 2] = __ZTV22b2EdgeAndCircleContact + 8 | 0;
      if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 1) {
        var $19 = $fixtureB;
      } else {
        ___assert_func(STRING_TABLE.__str252 | 0, 41, STRING_TABLE.___PRETTY_FUNCTION____ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str1260 | 0);
        var $19 = HEAP32[$6 >> 2];
      }
      var $19;
      if ((HEAP32[HEAP32[$19 + 12 >> 2] + 4 >> 2] | 0) == 0) {
        var $22 = $2;
        break;
      }
      ___assert_func(STRING_TABLE.__str252 | 0, 42, STRING_TABLE.___PRETTY_FUNCTION____ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str2268 | 0);
      var $22 = $2;
    }
  } while (0);
  var $22;
  return $22 | 0;
  return null;
}

function __ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var $0 = $contact;
  var $2 = HEAP32[HEAP32[$contact >> 2] + 4 >> 2];
  FUNCTION_TABLE[$2]($0);
  var $3 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 144 | 0];
  var $conv_i = $3 & 255;
  if (($3 & 255) >= 14) {
    ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
  }
  var $4 = $contact;
  var $arrayidx11_i = ($conv_i << 2) + $allocator + 12 | 0;
  var $_c = HEAP32[$arrayidx11_i >> 2];
  HEAP32[$contact >> 2] = $_c;
  HEAP32[$arrayidx11_i >> 2] = $4;
  return;
  return;
}

function __ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV9b2Contact + 8 | 0;
  HEAP32[$this$s2 + 1] = 4;
  HEAP32[$this$s2 + 12] = $fixtureA;
  var $m_fixtureB_i = $this + 52 | 0;
  HEAP32[$m_fixtureB_i >> 2] = $fixtureB;
  HEAP32[$this$s2 + 14] = 0;
  HEAP32[$this$s2 + 15] = 0;
  HEAP32[$this$s2 + 31] = 0;
  var $m_prev_i = $this + 8 | 0;
  HEAP32[$this$s2 + 32] = 0;
  var $m_friction_i = $fixtureA + 16 | 0;
  var $1 = $m_prev_i;
  for (var $$dest = $1 >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  var $mul_i_i = HEAPF32[$m_friction_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
  var $call_i_i_i = _sqrtf($mul_i_i);
  HEAPF32[$this$s2 + 34] = $call_i_i_i;
  var $4 = HEAPF32[$fixtureA + 20 >> 2];
  var $5 = HEAPF32[$fixtureB + 20 >> 2];
  var $cond_i_i = $4 > $5 ? $4 : $5;
  HEAPF32[$this$s2 + 35] = $cond_i_i;
  HEAP32[$0 >> 2] = __ZTV22b2EdgeAndCircleContact + 8 | 0;
  if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 1) {
    var $8 = $fixtureB;
  } else {
    ___assert_func(STRING_TABLE.__str252 | 0, 41, STRING_TABLE.___PRETTY_FUNCTION____ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str1260 | 0);
    var $8 = HEAP32[$m_fixtureB_i >> 2];
  }
  var $8;
  if ((HEAP32[HEAP32[$8 + 12 >> 2] + 4 >> 2] | 0) != 0) {
    ___assert_func(STRING_TABLE.__str252 | 0, 42, STRING_TABLE.___PRETTY_FUNCTION____ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str2268 | 0);
  }
  return;
  return;
}

function __ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var $4 = $manifold;
  var $5 = HEAP32[HEAP32[$this + 48 >> 2] + 12 >> 2];
  var $6 = HEAP32[HEAP32[$this + 52 >> 2] + 12 >> 2];
  __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($4, $5, $xfA, $6, $xfB);
  return;
  return;
}

function __ZN22b2EdgeAndCircleContactD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  var $call$s2;
  var $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144), $call$s2 = $call >> 2;
  var $new_isnull = ($call | 0) == 0;
  do {
    if ($new_isnull) {
      var $22 = 0;
    } else {
      var $2 = $call;
      var $3 = $call;
      HEAP32[$3 >> 2] = __ZTV9b2Contact + 8 | 0;
      HEAP32[$call$s2 + 1] = 4;
      HEAP32[$call$s2 + 12] = $fixtureA;
      var $6 = $call + 52 | 0;
      HEAP32[$6 >> 2] = $fixtureB;
      HEAP32[$call$s2 + 14] = 0;
      HEAP32[$call$s2 + 15] = 0;
      HEAP32[$call$s2 + 31] = 0;
      var $m_prev_i_i = $call + 8 | 0;
      HEAP32[$call$s2 + 32] = 0;
      var $m_friction_i_i = $fixtureA + 16 | 0;
      for (var $$dest = $m_prev_i_i >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0;
      }
      var $mul_i_i_i = HEAPF32[$m_friction_i_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
      var $call_i_i_i_i = _sqrtf($mul_i_i_i);
      HEAPF32[$call$s2 + 34] = $call_i_i_i_i;
      var $14 = HEAPF32[$fixtureA + 20 >> 2];
      var $15 = HEAPF32[$fixtureB + 20 >> 2];
      var $cond_i_i_i = $14 > $15 ? $14 : $15;
      HEAPF32[$call$s2 + 35] = $cond_i_i_i;
      HEAP32[$3 >> 2] = __ZTV23b2EdgeAndPolygonContact + 8 | 0;
      if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 1) {
        var $19 = $fixtureB;
      } else {
        ___assert_func(STRING_TABLE.__str259 | 0, 41, STRING_TABLE.___PRETTY_FUNCTION____ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str1260 | 0);
        var $19 = HEAP32[$6 >> 2];
      }
      var $19;
      if ((HEAP32[HEAP32[$19 + 12 >> 2] + 4 >> 2] | 0) == 2) {
        var $22 = $2;
        break;
      }
      ___assert_func(STRING_TABLE.__str259 | 0, 42, STRING_TABLE.___PRETTY_FUNCTION____ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str2275 | 0);
      var $22 = $2;
    }
  } while (0);
  var $22;
  return $22 | 0;
  return null;
}

function __ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var $0 = $contact;
  var $2 = HEAP32[HEAP32[$contact >> 2] + 4 >> 2];
  FUNCTION_TABLE[$2]($0);
  var $3 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 144 | 0];
  var $conv_i = $3 & 255;
  if (($3 & 255) >= 14) {
    ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
  }
  var $4 = $contact;
  var $arrayidx11_i = ($conv_i << 2) + $allocator + 12 | 0;
  var $_c = HEAP32[$arrayidx11_i >> 2];
  HEAP32[$contact >> 2] = $_c;
  HEAP32[$arrayidx11_i >> 2] = $4;
  return;
  return;
}

function __ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV9b2Contact + 8 | 0;
  HEAP32[$this$s2 + 1] = 4;
  HEAP32[$this$s2 + 12] = $fixtureA;
  var $m_fixtureB_i = $this + 52 | 0;
  HEAP32[$m_fixtureB_i >> 2] = $fixtureB;
  HEAP32[$this$s2 + 14] = 0;
  HEAP32[$this$s2 + 15] = 0;
  HEAP32[$this$s2 + 31] = 0;
  var $m_prev_i = $this + 8 | 0;
  HEAP32[$this$s2 + 32] = 0;
  var $m_friction_i = $fixtureA + 16 | 0;
  var $1 = $m_prev_i;
  for (var $$dest = $1 >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  var $mul_i_i = HEAPF32[$m_friction_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
  var $call_i_i_i = _sqrtf($mul_i_i);
  HEAPF32[$this$s2 + 34] = $call_i_i_i;
  var $4 = HEAPF32[$fixtureA + 20 >> 2];
  var $5 = HEAPF32[$fixtureB + 20 >> 2];
  var $cond_i_i = $4 > $5 ? $4 : $5;
  HEAPF32[$this$s2 + 35] = $cond_i_i;
  HEAP32[$0 >> 2] = __ZTV23b2EdgeAndPolygonContact + 8 | 0;
  if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 1) {
    var $8 = $fixtureB;
  } else {
    ___assert_func(STRING_TABLE.__str259 | 0, 41, STRING_TABLE.___PRETTY_FUNCTION____ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str1260 | 0);
    var $8 = HEAP32[$m_fixtureB_i >> 2];
  }
  var $8;
  if ((HEAP32[HEAP32[$8 + 12 >> 2] + 4 >> 2] | 0) != 2) {
    ___assert_func(STRING_TABLE.__str259 | 0, 42, STRING_TABLE.___PRETTY_FUNCTION____ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str2275 | 0);
  }
  return;
  return;
}

function __ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 252;
  var $collider_i = __stackBase__;
  var $4 = $manifold;
  var $5 = HEAP32[HEAP32[$this + 48 >> 2] + 12 >> 2];
  var $6 = HEAP32[HEAP32[$this + 52 >> 2] + 12 >> 2];
  __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($collider_i, $4, $5, $xfA, $6, $xfB);
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN23b2EdgeAndPolygonContactD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN25b2PolygonAndCircleContactD1Ev($this) {
  return;
  return;
}

function __ZN16b2PolygonContactD1Ev($this) {
  return;
  return;
}

function __ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  var $call$s2;
  var $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144), $call$s2 = $call >> 2;
  var $new_isnull = ($call | 0) == 0;
  do {
    if ($new_isnull) {
      var $22 = 0;
    } else {
      var $2 = $call;
      var $3 = $call;
      HEAP32[$3 >> 2] = __ZTV9b2Contact + 8 | 0;
      HEAP32[$call$s2 + 1] = 4;
      HEAP32[$call$s2 + 12] = $fixtureA;
      var $6 = $call + 52 | 0;
      HEAP32[$6 >> 2] = $fixtureB;
      HEAP32[$call$s2 + 14] = 0;
      HEAP32[$call$s2 + 15] = 0;
      HEAP32[$call$s2 + 31] = 0;
      var $m_prev_i_i = $call + 8 | 0;
      HEAP32[$call$s2 + 32] = 0;
      var $m_friction_i_i = $fixtureA + 16 | 0;
      for (var $$dest = $m_prev_i_i >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0;
      }
      var $mul_i_i_i = HEAPF32[$m_friction_i_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
      var $call_i_i_i_i = _sqrtf($mul_i_i_i);
      HEAPF32[$call$s2 + 34] = $call_i_i_i_i;
      var $14 = HEAPF32[$fixtureA + 20 >> 2];
      var $15 = HEAPF32[$fixtureB + 20 >> 2];
      var $cond_i_i_i = $14 > $15 ? $14 : $15;
      HEAPF32[$call$s2 + 35] = $cond_i_i_i;
      HEAP32[$3 >> 2] = __ZTV25b2PolygonAndCircleContact + 8 | 0;
      if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 2) {
        var $19 = $fixtureB;
      } else {
        ___assert_func(STRING_TABLE.__str266 | 0, 41, STRING_TABLE.___PRETTY_FUNCTION____ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str1274 | 0);
        var $19 = HEAP32[$6 >> 2];
      }
      var $19;
      if ((HEAP32[HEAP32[$19 + 12 >> 2] + 4 >> 2] | 0) == 0) {
        var $22 = $2;
        break;
      }
      ___assert_func(STRING_TABLE.__str266 | 0, 42, STRING_TABLE.___PRETTY_FUNCTION____ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str2268 | 0);
      var $22 = $2;
    }
  } while (0);
  var $22;
  return $22 | 0;
  return null;
}

function __ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var $0 = $contact;
  var $2 = HEAP32[HEAP32[$contact >> 2] + 4 >> 2];
  FUNCTION_TABLE[$2]($0);
  var $3 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 144 | 0];
  var $conv_i = $3 & 255;
  if (($3 & 255) >= 14) {
    ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
  }
  var $4 = $contact;
  var $arrayidx11_i = ($conv_i << 2) + $allocator + 12 | 0;
  var $_c = HEAP32[$arrayidx11_i >> 2];
  HEAP32[$contact >> 2] = $_c;
  HEAP32[$arrayidx11_i >> 2] = $4;
  return;
  return;
}

function __ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV9b2Contact + 8 | 0;
  HEAP32[$this$s2 + 1] = 4;
  HEAP32[$this$s2 + 12] = $fixtureA;
  var $m_fixtureB_i = $this + 52 | 0;
  HEAP32[$m_fixtureB_i >> 2] = $fixtureB;
  HEAP32[$this$s2 + 14] = 0;
  HEAP32[$this$s2 + 15] = 0;
  HEAP32[$this$s2 + 31] = 0;
  var $m_prev_i = $this + 8 | 0;
  HEAP32[$this$s2 + 32] = 0;
  var $m_friction_i = $fixtureA + 16 | 0;
  var $1 = $m_prev_i;
  for (var $$dest = $1 >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  var $mul_i_i = HEAPF32[$m_friction_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
  var $call_i_i_i = _sqrtf($mul_i_i);
  HEAPF32[$this$s2 + 34] = $call_i_i_i;
  var $4 = HEAPF32[$fixtureA + 20 >> 2];
  var $5 = HEAPF32[$fixtureB + 20 >> 2];
  var $cond_i_i = $4 > $5 ? $4 : $5;
  HEAPF32[$this$s2 + 35] = $cond_i_i;
  HEAP32[$0 >> 2] = __ZTV25b2PolygonAndCircleContact + 8 | 0;
  if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 2) {
    var $8 = $fixtureB;
  } else {
    ___assert_func(STRING_TABLE.__str266 | 0, 41, STRING_TABLE.___PRETTY_FUNCTION____ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str1274 | 0);
    var $8 = HEAP32[$m_fixtureB_i >> 2];
  }
  var $8;
  if ((HEAP32[HEAP32[$8 + 12 >> 2] + 4 >> 2] | 0) != 0) {
    ___assert_func(STRING_TABLE.__str266 | 0, 42, STRING_TABLE.___PRETTY_FUNCTION____ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str2268 | 0);
  }
  return;
  return;
}

function __ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var $4 = $manifold;
  var $5 = HEAP32[HEAP32[$this + 48 >> 2] + 12 >> 2];
  var $6 = HEAP32[HEAP32[$this + 52 >> 2] + 12 >> 2];
  __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($4, $5, $xfA, $6, $xfB);
  return;
  return;
}

function __ZN25b2PolygonAndCircleContactD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  var $call$s2;
  var $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144), $call$s2 = $call >> 2;
  var $new_isnull = ($call | 0) == 0;
  do {
    if ($new_isnull) {
      var $22 = 0;
    } else {
      var $2 = $call;
      var $3 = $call;
      HEAP32[$3 >> 2] = __ZTV9b2Contact + 8 | 0;
      HEAP32[$call$s2 + 1] = 4;
      HEAP32[$call$s2 + 12] = $fixtureA;
      var $6 = $call + 52 | 0;
      HEAP32[$6 >> 2] = $fixtureB;
      HEAP32[$call$s2 + 14] = 0;
      HEAP32[$call$s2 + 15] = 0;
      HEAP32[$call$s2 + 31] = 0;
      var $m_prev_i_i = $call + 8 | 0;
      HEAP32[$call$s2 + 32] = 0;
      var $m_friction_i_i = $fixtureA + 16 | 0;
      for (var $$dest = $m_prev_i_i >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0;
      }
      var $mul_i_i_i = HEAPF32[$m_friction_i_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
      var $call_i_i_i_i = _sqrtf($mul_i_i_i);
      HEAPF32[$call$s2 + 34] = $call_i_i_i_i;
      var $14 = HEAPF32[$fixtureA + 20 >> 2];
      var $15 = HEAPF32[$fixtureB + 20 >> 2];
      var $cond_i_i_i = $14 > $15 ? $14 : $15;
      HEAPF32[$call$s2 + 35] = $cond_i_i_i;
      HEAP32[$3 >> 2] = __ZTV16b2PolygonContact + 8 | 0;
      if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 2) {
        var $19 = $fixtureB;
      } else {
        ___assert_func(STRING_TABLE.__str273 | 0, 44, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PolygonContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str1274 | 0);
        var $19 = HEAP32[$6 >> 2];
      }
      var $19;
      if ((HEAP32[HEAP32[$19 + 12 >> 2] + 4 >> 2] | 0) == 2) {
        var $22 = $2;
        break;
      }
      ___assert_func(STRING_TABLE.__str273 | 0, 45, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PolygonContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str2275 | 0);
      var $22 = $2;
    }
  } while (0);
  var $22;
  return $22 | 0;
  return null;
}

function __ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var $0 = $contact;
  var $2 = HEAP32[HEAP32[$contact >> 2] + 4 >> 2];
  FUNCTION_TABLE[$2]($0);
  var $3 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 144 | 0];
  var $conv_i = $3 & 255;
  if (($3 & 255) >= 14) {
    ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
  }
  var $4 = $contact;
  var $arrayidx11_i = ($conv_i << 2) + $allocator + 12 | 0;
  var $_c = HEAP32[$arrayidx11_i >> 2];
  HEAP32[$contact >> 2] = $_c;
  HEAP32[$arrayidx11_i >> 2] = $4;
  return;
  return;
}

function __ZN16b2PolygonContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV9b2Contact + 8 | 0;
  HEAP32[$this$s2 + 1] = 4;
  HEAP32[$this$s2 + 12] = $fixtureA;
  var $m_fixtureB_i = $this + 52 | 0;
  HEAP32[$m_fixtureB_i >> 2] = $fixtureB;
  HEAP32[$this$s2 + 14] = 0;
  HEAP32[$this$s2 + 15] = 0;
  HEAP32[$this$s2 + 31] = 0;
  var $m_prev_i = $this + 8 | 0;
  HEAP32[$this$s2 + 32] = 0;
  var $m_friction_i = $fixtureA + 16 | 0;
  var $1 = $m_prev_i;
  for (var $$dest = $1 >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  var $mul_i_i = HEAPF32[$m_friction_i >> 2] * HEAPF32[$fixtureB + 16 >> 2];
  var $call_i_i_i = _sqrtf($mul_i_i);
  HEAPF32[$this$s2 + 34] = $call_i_i_i;
  var $4 = HEAPF32[$fixtureA + 20 >> 2];
  var $5 = HEAPF32[$fixtureB + 20 >> 2];
  var $cond_i_i = $4 > $5 ? $4 : $5;
  HEAPF32[$this$s2 + 35] = $cond_i_i;
  HEAP32[$0 >> 2] = __ZTV16b2PolygonContact + 8 | 0;
  if ((HEAP32[HEAP32[$fixtureA + 12 >> 2] + 4 >> 2] | 0) == 2) {
    var $8 = $fixtureB;
  } else {
    ___assert_func(STRING_TABLE.__str273 | 0, 44, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PolygonContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str1274 | 0);
    var $8 = HEAP32[$m_fixtureB_i >> 2];
  }
  var $8;
  if ((HEAP32[HEAP32[$8 + 12 >> 2] + 4 >> 2] | 0) != 2) {
    ___assert_func(STRING_TABLE.__str273 | 0, 45, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PolygonContactC2EP9b2FixtureS1_ | 0, STRING_TABLE.__str2275 | 0);
  }
  return;
  return;
}

function __ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var $4 = $manifold;
  var $5 = HEAP32[HEAP32[$this + 48 >> 2] + 12 >> 2];
  var $6 = HEAP32[HEAP32[$this + 52 >> 2] + 12 >> 2];
  __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($4, $5, $xfA, $6, $xfB);
  return;
  return;
}

function __ZN16b2PolygonContactD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN18b2DistanceJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($this, $b1, $b2, $anchor1, $anchor2) {
  HEAP32[$this + 8 >> 2] = $b1;
  HEAP32[$this + 12 >> 2] = $b2;
  var $x_i_i = $anchor1 | 0;
  var $sub_i_i = HEAPF32[$x_i_i >> 2] - HEAPF32[$b1 + 12 >> 2];
  var $y_i_i = $anchor1 + 4 | 0;
  var $sub4_i_i = HEAPF32[$y_i_i >> 2] - HEAPF32[$b1 + 16 >> 2];
  var $4 = HEAPF32[$b1 + 24 >> 2];
  var $5 = HEAPF32[$b1 + 20 >> 2];
  var $add16_i_i = $sub_i_i * -$5 + $4 * $sub4_i_i;
  var $6 = $this + 20 | 0;
  var $7 = (tempDoubleF32[0] = $4 * $sub_i_i + $5 * $sub4_i_i, tempDoubleI32[0]);
  var $8$0 = $7;
  var $9 = (tempDoubleF32[0] = $add16_i_i, tempDoubleI32[0]);
  var $12$1 = $9 | 0;
  HEAP32[$6 >> 2] = 0 | $8$0;
  HEAP32[$6 + 4 >> 2] = $12$1;
  var $x_i_i1 = $anchor2 | 0;
  var $sub_i_i3 = HEAPF32[$x_i_i1 >> 2] - HEAPF32[$b2 + 12 >> 2];
  var $y_i_i4 = $anchor2 + 4 | 0;
  var $sub4_i_i6 = HEAPF32[$y_i_i4 >> 2] - HEAPF32[$b2 + 16 >> 2];
  var $17 = HEAPF32[$b2 + 24 >> 2];
  var $18 = HEAPF32[$b2 + 20 >> 2];
  var $add16_i_i15 = $sub_i_i3 * -$18 + $17 * $sub4_i_i6;
  var $19 = $this + 28 | 0;
  var $20 = (tempDoubleF32[0] = $17 * $sub_i_i3 + $18 * $sub4_i_i6, tempDoubleI32[0]);
  var $21$0 = $20;
  var $22 = (tempDoubleF32[0] = $add16_i_i15, tempDoubleI32[0]);
  var $25$1 = $22 | 0;
  HEAP32[$19 >> 2] = 0 | $21$0;
  HEAP32[$19 + 4 >> 2] = $25$1;
  var $sub_i = HEAPF32[$x_i_i1 >> 2] - HEAPF32[$x_i_i >> 2];
  var $sub3_i = HEAPF32[$y_i_i4 >> 2] - HEAPF32[$y_i_i >> 2];
  var $add_i = $sub_i * $sub_i + $sub3_i * $sub3_i;
  var $call_i_i = _sqrtf($add_i);
  HEAPF32[$this + 36 >> 2] = $call_i_i;
  return;
  return;
}

function __ZN15b2DistanceJointC2EPK18b2DistanceJointDef($this, $def) {
  var $16$s2;
  var $def$s2 = $def >> 2;
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV7b2Joint + 8 | 0;
  var $bodyA_i = $def + 8 | 0;
  var $bodyB_i = $def + 12 | 0;
  if ((HEAP32[$bodyA_i >> 2] | 0) == (HEAP32[$bodyB_i >> 2] | 0)) {
    ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
  }
  var $3 = HEAP32[$def$s2];
  HEAP32[$this$s2 + 1] = $3;
  HEAP32[$this$s2 + 2] = 0;
  HEAP32[$this$s2 + 3] = 0;
  var $5 = HEAP32[$bodyA_i >> 2];
  HEAP32[$this$s2 + 12] = $5;
  var $6 = HEAP32[$bodyB_i >> 2];
  HEAP32[$this$s2 + 13] = $6;
  HEAP32[$this$s2 + 14] = 0;
  var $10 = HEAP8[$def + 16 | 0] & 1;
  HEAP8[$this + 61 | 0] = $10;
  HEAP8[$this + 60 | 0] = 0;
  var $14 = HEAP32[$def$s2 + 1];
  HEAP32[$this$s2 + 16] = $14;
  var $16$s2 = ($this + 16 | 0) >> 2;
  HEAP32[$16$s2] = 0;
  HEAP32[$16$s2 + 1] = 0;
  HEAP32[$16$s2 + 2] = 0;
  HEAP32[$16$s2 + 3] = 0;
  HEAP32[$16$s2 + 4] = 0;
  HEAP32[$16$s2 + 5] = 0;
  HEAP32[$16$s2 + 6] = 0;
  HEAP32[$16$s2 + 7] = 0;
  HEAP32[$0 >> 2] = __ZTV15b2DistanceJoint + 8 | 0;
  var $m_localAnchorB = $this + 88 | 0;
  var $17 = $def + 20 | 0;
  var $18 = $this + 80 | 0;
  var $19$0 = HEAP32[$17 >> 2];
  var $19$1 = HEAP32[$17 + 4 >> 2];
  HEAP32[$18 >> 2] = $19$0;
  HEAP32[$18 + 4 >> 2] = $19$1;
  var $20 = $def + 28 | 0;
  var $21 = $m_localAnchorB;
  var $22$0 = HEAP32[$20 >> 2];
  var $22$1 = HEAP32[$20 + 4 >> 2];
  HEAP32[$21 >> 2] = $22$0;
  HEAP32[$21 + 4 >> 2] = $22$1;
  var $23 = HEAPF32[$def$s2 + 9];
  HEAPF32[$this$s2 + 26] = $23;
  var $24 = HEAPF32[$def$s2 + 10];
  HEAPF32[$this$s2 + 17] = $24;
  var $25 = HEAPF32[$def$s2 + 11];
  HEAPF32[$this$s2 + 18] = $25;
  HEAPF32[$this$s2 + 25] = 0;
  HEAPF32[$this$s2 + 24] = 0;
  HEAPF32[$this$s2 + 19] = 0;
  return;
  return;
}

function __ZN15b2DistanceJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var $velocities$s2;
  var $m_indexB$s2;
  var $2$s2;
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $0 = HEAP32[$this$s2 + 12], $0$s2 = $0 >> 2;
  var $1 = HEAPU32[$0$s2 + 2];
  var $m_indexA = $this + 108 | 0;
  HEAP32[$m_indexA >> 2] = $1;
  var $2 = HEAP32[$this$s2 + 13], $2$s2 = $2 >> 2;
  var $3 = HEAP32[$2$s2 + 2];
  var $m_indexB$s2 = ($this + 112 | 0) >> 2;
  HEAP32[$m_indexB$s2] = $3;
  var $4 = $0 + 28 | 0;
  var $5 = $this + 140 | 0;
  var $6$0 = HEAP32[$4 >> 2];
  var $6$1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 >> 2] = $6$0;
  HEAP32[$5 + 4 >> 2] = $6$1;
  var $7 = $2 + 28 | 0;
  var $8 = $this + 148 | 0;
  var $9$0 = HEAP32[$7 >> 2];
  var $9$1 = HEAP32[$7 + 4 >> 2];
  HEAP32[$8 >> 2] = $9$0;
  HEAP32[$8 + 4 >> 2] = $9$1;
  var $10 = HEAPF32[$0$s2 + 30];
  HEAPF32[$this$s2 + 39] = $10;
  var $11 = HEAPF32[$2$s2 + 30];
  HEAPF32[$this$s2 + 40] = $11;
  var $12 = HEAPF32[$0$s2 + 32];
  HEAPF32[$this$s2 + 41] = $12;
  var $13 = HEAPF32[$2$s2 + 32];
  HEAPF32[$this$s2 + 42] = $13;
  var $14 = HEAP32[$data + 24 >> 2];
  var $15 = $14 + $1 * 12 | 0;
  var $16$1 = HEAP32[$15 + 4 >> 2];
  var $18 = (tempDoubleI32[0] = HEAP32[$15 >> 2], tempDoubleF32[0]);
  var $20 = (tempDoubleI32[0] = $16$1, tempDoubleF32[0]);
  var $21 = HEAPF32[($14 + 8 >> 2) + ($1 * 3 | 0)];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $22 = HEAP32[$velocities$s2];
  var $23 = $22 + $1 * 12 | 0;
  var $24$1 = HEAP32[$23 + 4 >> 2];
  var $26 = (tempDoubleI32[0] = HEAP32[$23 >> 2], tempDoubleF32[0]);
  var $28 = (tempDoubleI32[0] = $24$1, tempDoubleF32[0]);
  var $29 = HEAPF32[($22 + 8 >> 2) + ($1 * 3 | 0)];
  var $30 = $14 + $3 * 12 | 0;
  var $31$1 = HEAP32[$30 + 4 >> 2];
  var $33 = (tempDoubleI32[0] = HEAP32[$30 >> 2], tempDoubleF32[0]);
  var $35 = (tempDoubleI32[0] = $31$1, tempDoubleF32[0]);
  var $36 = HEAPF32[($14 + 8 >> 2) + ($3 * 3 | 0)];
  var $37 = $22 + $3 * 12 | 0;
  var $38$1 = HEAP32[$37 + 4 >> 2];
  var $40 = (tempDoubleI32[0] = HEAP32[$37 >> 2], tempDoubleF32[0]);
  var $42 = (tempDoubleI32[0] = $38$1, tempDoubleF32[0]);
  var $43 = HEAPF32[($22 + 8 >> 2) + ($3 * 3 | 0)];
  var $call_i_i = _sinf($21);
  var $call2_i_i = _cosf($21);
  var $call_i_i1 = _sinf($36);
  var $call2_i_i3 = _cosf($36);
  var $m_rA = $this + 124 | 0;
  var $44 = HEAPF32[$this$s2 + 20];
  var $bitcast = (tempDoubleI32[0] = $6$0, tempDoubleF32[0]);
  var $sub_i = $44 - $bitcast;
  var $45 = HEAPF32[$this$s2 + 21];
  var $48 = (tempDoubleI32[0] = $6$1, tempDoubleF32[0]);
  var $sub3_i = $45 - $48;
  var $sub_i7 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $49 = $m_rA;
  var $50 = (tempDoubleF32[0] = $sub_i7, tempDoubleI32[0]);
  var $51$0 = $50;
  var $52 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $55$0 = 0 | $51$0;
  var $55$1 = $52 | 0;
  HEAP32[$49 >> 2] = $55$0;
  HEAP32[$49 + 4 >> 2] = $55$1;
  var $m_rB = $this + 132 | 0;
  var $56 = HEAPF32[$this$s2 + 22];
  var $bitcast129 = (tempDoubleI32[0] = $9$0, tempDoubleF32[0]);
  var $sub_i12 = $56 - $bitcast129;
  var $57 = HEAPF32[$this$s2 + 23];
  var $60 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
  var $sub3_i15 = $57 - $60;
  var $sub_i87 = $call2_i_i3 * $sub_i12 - $call_i_i1 * $sub3_i15;
  var $add_i90 = $call_i_i1 * $sub_i12 + $call2_i_i3 * $sub3_i15;
  var $61 = $m_rB;
  var $62 = (tempDoubleF32[0] = $sub_i87, tempDoubleI32[0]);
  var $63$0 = $62;
  var $64 = (tempDoubleF32[0] = $add_i90, tempDoubleI32[0]);
  var $67$0 = 0 | $63$0;
  var $67$1 = $64 | 0;
  HEAP32[$61 >> 2] = $67$0;
  HEAP32[$61 + 4 >> 2] = $67$1;
  var $m_u = $this + 116 | 0;
  var $sub_i95 = $33 + $sub_i87 - $18 - $sub_i7;
  var $sub3_i98 = $35 + $add_i90 - $20 - $add_i;
  var $68 = $m_u;
  var $69 = (tempDoubleF32[0] = $sub_i95, tempDoubleI32[0]);
  var $70$0 = $69;
  var $71 = (tempDoubleF32[0] = $sub3_i98, tempDoubleI32[0]);
  var $74$0 = 0 | $70$0;
  var $74$1 = $71 | 0;
  HEAP32[$68 >> 2] = $74$0;
  HEAP32[$68 + 4 >> 2] = $74$1;
  var $x_i75 = $m_u | 0;
  var $y_i77 = $this + 120 | 0;
  var $add_i79 = $sub_i95 * $sub_i95 + $sub3_i98 * $sub3_i98;
  var $call_i_i80 = _sqrtf($add_i79);
  if ($call_i_i80 > .004999999888241291) {
    var $div = 1 / $call_i_i80;
    var $mul_i73 = $sub_i95 * $div;
    HEAPF32[$x_i75 >> 2] = $mul_i73;
    var $76 = $sub3_i98 * $div;
    var $75 = $mul_i73;
  } else {
    HEAPF32[$x_i75 >> 2] = 0;
    var $76 = 0;
    var $75 = 0;
  }
  var $75;
  var $76;
  HEAPF32[$y_i77 >> 2] = $76;
  var $sub_i69 = $sub_i7 * $76 - $add_i * $75;
  var $sub_i62 = $sub_i87 * $76 - $add_i90 * $75;
  var $add65 = $10 + $12 * $sub_i69 * $sub_i69 + $11 + $13 * $sub_i62 * $sub_i62;
  if ($add65 != 0) {
    var $cond = 1 / $add65;
  } else {
    var $cond = 0;
  }
  var $cond;
  var $m_mass = $this + 172 | 0;
  HEAPF32[$m_mass >> 2] = $cond;
  var $77 = HEAPF32[$this$s2 + 17];
  if ($77 > 0) {
    var $sub = $call_i_i80 - HEAPF32[$this$s2 + 26];
    var $mul71 = $77 * 6.2831854820251465;
    var $mul78 = $cond * $mul71 * $mul71;
    var $80 = HEAPF32[$data >> 2];
    var $mul81 = $80 * ($cond * 2 * HEAPF32[$this$s2 + 18] * $mul71 + $80 * $mul78);
    var $m_gamma = $this + 96 | 0;
    HEAPF32[$m_gamma >> 2] = $mul81;
    if ($mul81 != 0) {
      var $cond89 = 1 / $mul81;
    } else {
      var $cond89 = 0;
    }
    var $cond89;
    HEAPF32[$m_gamma >> 2] = $cond89;
    var $mul94 = $sub * $80 * $mul78 * $cond89;
    HEAPF32[$this$s2 + 19] = $mul94;
    var $add96 = $add65 + $cond89;
    if ($add96 != 0) {
      var $cond102 = 1 / $add96;
    } else {
      var $cond102 = 0;
    }
    var $cond102;
    HEAPF32[$m_mass >> 2] = $cond102;
  } else {
    HEAPF32[$this$s2 + 24] = 0;
    HEAPF32[$this$s2 + 19] = 0;
  }
  if ((HEAP8[$data + 20 | 0] & 1) << 24 >> 24 == 0) {
    HEAPF32[$this$s2 + 25] = 0;
    var $wB_0 = $43;
    var $wA_0 = $29;
    var $88 = $26;
    var $87 = $28;
    var $86 = $40;
    var $85 = $42;
  } else {
    var $m_impulse = $this + 100 | 0;
    var $mul111 = HEAPF32[$m_impulse >> 2] * HEAPF32[$data + 8 >> 2];
    HEAPF32[$m_impulse >> 2] = $mul111;
    var $mul_i51 = $75 * $mul111;
    var $mul1_i53 = $76 * $mul111;
    var $wB_0 = $43 + $13 * ($sub_i87 * $mul1_i53 - $add_i90 * $mul_i51);
    var $wA_0 = $29 - $12 * ($sub_i7 * $mul1_i53 - $add_i * $mul_i51);
    var $88 = $26 - $mul_i51 * $10;
    var $87 = $28 - $mul1_i53 * $10;
    var $86 = $40 + $mul_i51 * $11;
    var $85 = $42 + $mul1_i53 * $11;
  }
  var $85;
  var $86;
  var $87;
  var $88;
  var $wA_0;
  var $wB_0;
  var $90 = HEAP32[$velocities$s2] + $1 * 12 | 0;
  var $91 = (tempDoubleF32[0] = $88, tempDoubleI32[0]);
  var $92$0 = $91;
  var $93 = (tempDoubleF32[0] = $87, tempDoubleI32[0]);
  var $96$1 = $93 | 0;
  var $st$19$0 = $90 | 0;
  HEAP32[$st$19$0 >> 2] = 0 | $92$0;
  var $st$19$1 = $90 + 4 | 0;
  HEAP32[$st$19$1 >> 2] = $96$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $wA_0;
  var $101 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $102 = (tempDoubleF32[0] = $86, tempDoubleI32[0]);
  var $103$0 = $102;
  var $104 = (tempDoubleF32[0] = $85, tempDoubleI32[0]);
  var $107$1 = $104 | 0;
  var $st$41$0 = $101 | 0;
  HEAP32[$st$41$0 >> 2] = 0 | $103$0;
  var $st$41$1 = $101 + 4 | 0;
  HEAP32[$st$41$1 >> 2] = $107$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $wB_0;
  return;
  return;
}

function __ZNK15b2DistanceJoint17GetReactionTorqueEf($this, $inv_dt) {
  return 0;
  return null;
}

function __ZN15b2DistanceJointD1Ev($this) {
  return;
  return;
}

function __ZN15b2DistanceJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var $m_indexB$s2;
  var $velocities$s2;
  var $this$s2 = $this >> 2;
  var $m_indexA = $this + 108 | 0;
  var $0 = HEAP32[$m_indexA >> 2];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $1 = HEAP32[$velocities$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $m_indexB$s2 = ($this + 112 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[($1 + 8 >> 2) + ($9 * 3 | 0)];
  var $17 = HEAPF32[$this$s2 + 32];
  var $18 = HEAPF32[$this$s2 + 31];
  var $19 = HEAPF32[$this$s2 + 34];
  var $20 = HEAPF32[$this$s2 + 33];
  var $21 = HEAPF32[$this$s2 + 29];
  var $22 = HEAPF32[$this$s2 + 30];
  var $m_impulse = $this + 100 | 0;
  var $26 = HEAPF32[$m_impulse >> 2];
  var $mul15 = ($21 * ($13 + $19 * -$16 - ($5 + $17 * -$8)) + $22 * ($15 + $20 * $16 - ($7 + $18 * $8)) + HEAPF32[$this$s2 + 19] + HEAPF32[$this$s2 + 24] * $26) * -HEAPF32[$this$s2 + 43];
  var $add17 = $26 + $mul15;
  HEAPF32[$m_impulse >> 2] = $add17;
  var $mul_i33 = $21 * $mul15;
  var $mul1_i35 = $22 * $mul15;
  var $27 = HEAPF32[$this$s2 + 39];
  var $sub_i23 = $5 - $mul_i33 * $27;
  var $sub4_i = $7 - $mul1_i35 * $27;
  var $sub23 = $8 - HEAPF32[$this$s2 + 41] * ($18 * $mul1_i35 - $17 * $mul_i33);
  var $29 = HEAPF32[$this$s2 + 40];
  var $add_i = $13 + $mul_i33 * $29;
  var $add4_i = $15 + $mul1_i35 * $29;
  var $add28 = $16 + HEAPF32[$this$s2 + 42] * ($20 * $mul1_i35 - $19 * $mul_i33);
  var $32 = HEAP32[$velocities$s2] + $0 * 12 | 0;
  var $33 = (tempDoubleF32[0] = $sub_i23, tempDoubleI32[0]);
  var $34$0 = $33;
  var $35 = (tempDoubleF32[0] = $sub4_i, tempDoubleI32[0]);
  var $38$0 = 0 | $34$0;
  var $38$1 = $35 | 0;
  var $st$121$0 = $32 | 0;
  HEAP32[$st$121$0 >> 2] = $38$0;
  var $st$121$1 = $32 + 4 | 0;
  HEAP32[$st$121$1 >> 2] = $38$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $sub23;
  var $43 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $44 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $45$0 = $44;
  var $46 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
  var $49$0 = 0 | $45$0;
  var $49$1 = $46 | 0;
  var $st$143$0 = $43 | 0;
  HEAP32[$st$143$0 >> 2] = $49$0;
  var $st$143$1 = $43 + 4 | 0;
  HEAP32[$st$143$1 >> 2] = $49$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $add28;
  return;
  return;
}

function __ZNK15b2DistanceJoint10GetAnchorAEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 48 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 80 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 84 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK15b2DistanceJoint10GetAnchorBEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 52 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 88 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 92 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK15b2DistanceJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var $mul = HEAPF32[$this + 100 >> 2] * $inv_dt;
  var $mul_i = HEAPF32[$this + 116 >> 2] * $mul;
  var $mul1_i = HEAPF32[$this + 120 >> 2] * $mul;
  HEAPF32[$agg_result >> 2] = $mul_i;
  HEAPF32[$agg_result + 4 >> 2] = $mul1_i;
  return;
  return;
}

function __ZN18b2FrictionJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($this, $bA, $bB, $anchor) {
  HEAP32[$this + 8 >> 2] = $bA;
  HEAP32[$this + 12 >> 2] = $bB;
  var $x_i_i = $anchor | 0;
  var $sub_i_i = HEAPF32[$x_i_i >> 2] - HEAPF32[$bA + 12 >> 2];
  var $y_i_i = $anchor + 4 | 0;
  var $sub4_i_i = HEAPF32[$y_i_i >> 2] - HEAPF32[$bA + 16 >> 2];
  var $4 = HEAPF32[$bA + 24 >> 2];
  var $5 = HEAPF32[$bA + 20 >> 2];
  var $add16_i_i = $sub_i_i * -$5 + $4 * $sub4_i_i;
  var $6 = $this + 20 | 0;
  var $7 = (tempDoubleF32[0] = $4 * $sub_i_i + $5 * $sub4_i_i, tempDoubleI32[0]);
  var $8$0 = $7;
  var $9 = (tempDoubleF32[0] = $add16_i_i, tempDoubleI32[0]);
  var $12$1 = $9 | 0;
  HEAP32[$6 >> 2] = 0 | $8$0;
  HEAP32[$6 + 4 >> 2] = $12$1;
  var $sub_i_i3 = HEAPF32[$x_i_i >> 2] - HEAPF32[$bB + 12 >> 2];
  var $sub4_i_i6 = HEAPF32[$y_i_i >> 2] - HEAPF32[$bB + 16 >> 2];
  var $17 = HEAPF32[$bB + 24 >> 2];
  var $18 = HEAPF32[$bB + 20 >> 2];
  var $add16_i_i15 = $sub_i_i3 * -$18 + $17 * $sub4_i_i6;
  var $19 = $this + 28 | 0;
  var $20 = (tempDoubleF32[0] = $17 * $sub_i_i3 + $18 * $sub4_i_i6, tempDoubleI32[0]);
  var $21$0 = $20;
  var $22 = (tempDoubleF32[0] = $add16_i_i15, tempDoubleI32[0]);
  var $25$1 = $22 | 0;
  HEAP32[$19 >> 2] = 0 | $21$0;
  HEAP32[$19 + 4 >> 2] = $25$1;
  return;
  return;
}

function __ZN15b2DistanceJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var $m_indexB$s2;
  var $positions$s2;
  var $this$s2 = $this >> 2;
  if (HEAPF32[$this$s2 + 17] > 0) {
    var $retval_0 = 1;
  } else {
    var $m_indexA = $this + 108 | 0;
    var $1 = HEAP32[$m_indexA >> 2];
    var $positions$s2 = ($data + 24 | 0) >> 2;
    var $2 = HEAP32[$positions$s2];
    var $3 = $2 + $1 * 12 | 0;
    var $4$1 = HEAP32[$3 + 4 >> 2];
    var $6 = (tempDoubleI32[0] = HEAP32[$3 >> 2], tempDoubleF32[0]);
    var $8 = (tempDoubleI32[0] = $4$1, tempDoubleF32[0]);
    var $9 = HEAPF32[($2 + 8 >> 2) + ($1 * 3 | 0)];
    var $m_indexB$s2 = ($this + 112 | 0) >> 2;
    var $10 = HEAP32[$m_indexB$s2];
    var $11 = $2 + $10 * 12 | 0;
    var $12$1 = HEAP32[$11 + 4 >> 2];
    var $14 = (tempDoubleI32[0] = HEAP32[$11 >> 2], tempDoubleF32[0]);
    var $16 = (tempDoubleI32[0] = $12$1, tempDoubleF32[0]);
    var $17 = HEAPF32[($2 + 8 >> 2) + ($10 * 3 | 0)];
    var $call_i_i = _sinf($9);
    var $call2_i_i = _cosf($9);
    var $call_i_i1 = _sinf($17);
    var $call2_i_i3 = _cosf($17);
    var $sub_i = HEAPF32[$this$s2 + 20] - HEAPF32[$this$s2 + 35];
    var $sub3_i = HEAPF32[$this$s2 + 21] - HEAPF32[$this$s2 + 36];
    var $sub_i7 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
    var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
    var $sub_i12 = HEAPF32[$this$s2 + 22] - HEAPF32[$this$s2 + 37];
    var $sub3_i15 = HEAPF32[$this$s2 + 23] - HEAPF32[$this$s2 + 38];
    var $sub_i65 = $call2_i_i3 * $sub_i12 - $call_i_i1 * $sub3_i15;
    var $add_i68 = $call_i_i1 * $sub_i12 + $call2_i_i3 * $sub3_i15;
    var $sub_i73 = $14 + $sub_i65 - $6 - $sub_i7;
    var $sub3_i76 = $16 + $add_i68 - $8 - $add_i;
    var $add_i_i = $sub_i73 * $sub_i73 + $sub3_i76 * $sub3_i76;
    var $call_i_i_i = _sqrtf($add_i_i);
    if ($call_i_i_i < 1.1920928955078125e-7) {
      var $retval_0_i = 0;
      var $27 = $sub_i73;
      var $26 = $sub3_i76;
    } else {
      var $div_i = 1 / $call_i_i_i;
      var $retval_0_i = $call_i_i_i;
      var $27 = $sub_i73 * $div_i;
      var $26 = $sub3_i76 * $div_i;
    }
    var $26;
    var $27;
    var $retval_0_i;
    var $sub = $retval_0_i - HEAPF32[$this$s2 + 26];
    var $cond_i_i = $sub < .20000000298023224 ? $sub : .20000000298023224;
    var $cond_i2_i = $cond_i_i < -.20000000298023224 ? -.20000000298023224 : $cond_i_i;
    var $mul = $cond_i2_i * -HEAPF32[$this$s2 + 43];
    var $mul_i52 = $27 * $mul;
    var $mul1_i54 = $26 * $mul;
    var $30 = HEAPF32[$this$s2 + 39];
    var $sub_i42 = $6 - $mul_i52 * $30;
    var $sub4_i = $8 - $mul1_i54 * $30;
    var $sub20 = $9 - HEAPF32[$this$s2 + 41] * ($sub_i7 * $mul1_i54 - $add_i * $mul_i52);
    var $32 = HEAPF32[$this$s2 + 40];
    var $add_i25 = $14 + $mul_i52 * $32;
    var $add4_i = $16 + $mul1_i54 * $32;
    var $add = $17 + HEAPF32[$this$s2 + 42] * ($sub_i65 * $mul1_i54 - $add_i68 * $mul_i52);
    var $34 = (tempDoubleF32[0] = $sub_i42, tempDoubleI32[0]);
    var $35$0 = $34;
    var $36 = (tempDoubleF32[0] = $sub4_i, tempDoubleI32[0]);
    var $39$0 = 0 | $35$0;
    var $39$1 = $36 | 0;
    var $st$52$0 = $3 | 0;
    HEAP32[$st$52$0 >> 2] = $39$0;
    var $st$52$1 = $3 + 4 | 0;
    HEAP32[$st$52$1 >> 2] = $39$1;
    HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $sub20;
    var $44 = HEAP32[$positions$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
    var $45 = (tempDoubleF32[0] = $add_i25, tempDoubleI32[0]);
    var $46$0 = $45;
    var $47 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
    var $50$0 = 0 | $46$0;
    var $50$1 = $47 | 0;
    var $st$74$0 = $44 | 0;
    HEAP32[$st$74$0 >> 2] = $50$0;
    var $st$74$1 = $44 + 4 | 0;
    HEAP32[$st$74$1 >> 2] = $50$1;
    HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $add;
    if ($cond_i2_i > 0) {
      var $cond_i = $cond_i2_i;
    } else {
      var $cond_i = -$cond_i2_i;
    }
    var $cond_i;
    var $retval_0 = $cond_i < .004999999888241291;
  }
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZN15b2DistanceJoint4DumpEv($this) {
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  var $1 = HEAP32[HEAP32[$this$s2 + 12] + 8 >> 2];
  var $3 = HEAP32[HEAP32[$this$s2 + 13] + 8 >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str281 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str1415 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $1, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str2416 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $3, tempInt));
  var $conv = HEAP8[$this + 61 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str3417 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv, tempInt));
  var $conv3 = HEAPF32[$this$s2 + 20];
  var $conv5 = HEAPF32[$this$s2 + 21];
  __Z5b2LogPKcz(STRING_TABLE.__str4418 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv3, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv5, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv7 = HEAPF32[$this$s2 + 22];
  var $conv10 = HEAPF32[$this$s2 + 23];
  __Z5b2LogPKcz(STRING_TABLE.__str5419 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv7, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv10, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv11 = HEAPF32[$this$s2 + 26];
  __Z5b2LogPKcz(STRING_TABLE.__str6287 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv11, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv12 = HEAPF32[$this$s2 + 17];
  __Z5b2LogPKcz(STRING_TABLE.__str10424 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv12, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv13 = HEAPF32[$this$s2 + 18];
  __Z5b2LogPKcz(STRING_TABLE.__str11425 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv13, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $13 = HEAP32[$this$s2 + 14];
  __Z5b2LogPKcz(STRING_TABLE.__str12426 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $13, tempInt));
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN15b2DistanceJointD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN15b2FrictionJointC2EPK18b2FrictionJointDef($this, $def) {
  var $16$s2;
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV7b2Joint + 8 | 0;
  var $bodyA_i = $def + 8 | 0;
  var $bodyB_i = $def + 12 | 0;
  if ((HEAP32[$bodyA_i >> 2] | 0) == (HEAP32[$bodyB_i >> 2] | 0)) {
    ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
  }
  var $3 = HEAP32[$def >> 2];
  HEAP32[$this$s2 + 1] = $3;
  HEAP32[$this$s2 + 2] = 0;
  HEAP32[$this$s2 + 3] = 0;
  var $5 = HEAP32[$bodyA_i >> 2];
  HEAP32[$this$s2 + 12] = $5;
  var $6 = HEAP32[$bodyB_i >> 2];
  HEAP32[$this$s2 + 13] = $6;
  HEAP32[$this$s2 + 14] = 0;
  var $10 = HEAP8[$def + 16 | 0] & 1;
  HEAP8[$this + 61 | 0] = $10;
  HEAP8[$this + 60 | 0] = 0;
  var $14 = HEAP32[$def + 4 >> 2];
  HEAP32[$this$s2 + 16] = $14;
  var $16$s2 = ($this + 16 | 0) >> 2;
  HEAP32[$16$s2] = 0;
  HEAP32[$16$s2 + 1] = 0;
  HEAP32[$16$s2 + 2] = 0;
  HEAP32[$16$s2 + 3] = 0;
  HEAP32[$16$s2 + 4] = 0;
  HEAP32[$16$s2 + 5] = 0;
  HEAP32[$16$s2 + 6] = 0;
  HEAP32[$16$s2 + 7] = 0;
  HEAP32[$0 >> 2] = __ZTV15b2FrictionJoint + 8 | 0;
  var $m_localAnchorB = $this + 76 | 0;
  var $17 = $def + 20 | 0;
  var $18 = $this + 68 | 0;
  var $19$0 = HEAP32[$17 >> 2];
  var $19$1 = HEAP32[$17 + 4 >> 2];
  HEAP32[$18 >> 2] = $19$0;
  HEAP32[$18 + 4 >> 2] = $19$1;
  var $20 = $def + 28 | 0;
  var $21 = $m_localAnchorB;
  var $22$0 = HEAP32[$20 >> 2];
  var $22$1 = HEAP32[$20 + 4 >> 2];
  HEAP32[$21 >> 2] = $22$0;
  HEAP32[$21 + 4 >> 2] = $22$1;
  HEAPF32[$this$s2 + 21] = 0;
  HEAPF32[$this$s2 + 22] = 0;
  HEAPF32[$this$s2 + 23] = 0;
  var $23 = HEAPF32[$def + 36 >> 2];
  HEAPF32[$this$s2 + 24] = $23;
  var $24 = HEAPF32[$def + 40 >> 2];
  HEAPF32[$this$s2 + 25] = $24;
  return;
  return;
}

function __ZN15b2FrictionJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var $velocities$s2;
  var $m_indexB$s2;
  var $2$s2;
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $0 = HEAP32[$this$s2 + 12], $0$s2 = $0 >> 2;
  var $1 = HEAPU32[$0$s2 + 2];
  var $m_indexA = $this + 104 | 0;
  HEAP32[$m_indexA >> 2] = $1;
  var $2 = HEAP32[$this$s2 + 13], $2$s2 = $2 >> 2;
  var $3 = HEAP32[$2$s2 + 2];
  var $m_indexB$s2 = ($this + 108 | 0) >> 2;
  HEAP32[$m_indexB$s2] = $3;
  var $4 = $0 + 28 | 0;
  var $5 = $this + 128 | 0;
  var $6$0 = HEAP32[$4 >> 2];
  var $6$1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 >> 2] = $6$0;
  HEAP32[$5 + 4 >> 2] = $6$1;
  var $7 = $2 + 28 | 0;
  var $8 = $this + 136 | 0;
  var $9$0 = HEAP32[$7 >> 2];
  var $9$1 = HEAP32[$7 + 4 >> 2];
  HEAP32[$8 >> 2] = $9$0;
  HEAP32[$8 + 4 >> 2] = $9$1;
  var $10 = HEAPF32[$0$s2 + 30];
  HEAPF32[$this$s2 + 36] = $10;
  var $11 = HEAPF32[$2$s2 + 30];
  HEAPF32[$this$s2 + 37] = $11;
  var $12 = HEAPF32[$0$s2 + 32];
  HEAPF32[$this$s2 + 38] = $12;
  var $13 = HEAPF32[$2$s2 + 32];
  HEAPF32[$this$s2 + 39] = $13;
  var $14 = HEAP32[$data + 24 >> 2];
  var $15 = HEAPF32[($14 + 8 >> 2) + ($1 * 3 | 0)];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $16 = HEAP32[$velocities$s2];
  var $17 = $16 + $1 * 12 | 0;
  var $18$1 = HEAP32[$17 + 4 >> 2];
  var $20 = (tempDoubleI32[0] = HEAP32[$17 >> 2], tempDoubleF32[0]);
  var $22 = (tempDoubleI32[0] = $18$1, tempDoubleF32[0]);
  var $23 = HEAPF32[($16 + 8 >> 2) + ($1 * 3 | 0)];
  var $24 = HEAPF32[($14 + 8 >> 2) + ($3 * 3 | 0)];
  var $25 = $16 + $3 * 12 | 0;
  var $26$1 = HEAP32[$25 + 4 >> 2];
  var $28 = (tempDoubleI32[0] = HEAP32[$25 >> 2], tempDoubleF32[0]);
  var $30 = (tempDoubleI32[0] = $26$1, tempDoubleF32[0]);
  var $31 = HEAPF32[($16 + 8 >> 2) + ($3 * 3 | 0)];
  var $call_i_i = _sinf($15);
  var $call2_i_i = _cosf($15);
  var $call_i_i1 = _sinf($24);
  var $call2_i_i3 = _cosf($24);
  var $m_rA = $this + 112 | 0;
  var $32 = HEAPF32[$this$s2 + 17];
  var $bitcast = (tempDoubleI32[0] = $6$0, tempDoubleF32[0]);
  var $sub_i = $32 - $bitcast;
  var $33 = HEAPF32[$this$s2 + 18];
  var $36 = (tempDoubleI32[0] = $6$1, tempDoubleF32[0]);
  var $sub3_i = $33 - $36;
  var $sub_i7 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $37 = $m_rA;
  var $38 = (tempDoubleF32[0] = $sub_i7, tempDoubleI32[0]);
  var $39$0 = $38;
  var $40 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $43$0 = 0 | $39$0;
  var $43$1 = $40 | 0;
  HEAP32[$37 >> 2] = $43$0;
  HEAP32[$37 + 4 >> 2] = $43$1;
  var $m_rB = $this + 120 | 0;
  var $44 = HEAPF32[$this$s2 + 19];
  var $bitcast92 = (tempDoubleI32[0] = $9$0, tempDoubleF32[0]);
  var $sub_i12 = $44 - $bitcast92;
  var $45 = HEAPF32[$this$s2 + 20];
  var $48 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
  var $sub3_i15 = $45 - $48;
  var $sub_i67 = $call2_i_i3 * $sub_i12 - $call_i_i1 * $sub3_i15;
  var $add_i70 = $call_i_i1 * $sub_i12 + $call2_i_i3 * $sub3_i15;
  var $49 = $m_rB;
  var $50 = (tempDoubleF32[0] = $sub_i67, tempDoubleI32[0]);
  var $51$0 = $50;
  var $52 = (tempDoubleF32[0] = $add_i70, tempDoubleI32[0]);
  var $55$0 = 0 | $51$0;
  var $55$1 = $52 | 0;
  HEAP32[$49 >> 2] = $55$0;
  HEAP32[$49 + 4 >> 2] = $55$1;
  var $add = $10 + $11;
  var $add51 = $add + $12 * $add_i * $add_i + $13 * $add_i70 * $add_i70;
  var $mul60 = $13 * $sub_i67;
  var $sub64 = $sub_i7 * -$12 * $add_i - $mul60 * $add_i70;
  var $add84 = $add + $12 * $sub_i7 * $sub_i7 + $mul60 * $sub_i67;
  var $sub_i59 = $add51 * $add84 - $sub64 * $sub64;
  if ($sub_i59 != 0) {
    var $det_0_i = 1 / $sub_i59;
  } else {
    var $det_0_i = $sub_i59;
  }
  var $det_0_i;
  var $mul7_i60 = $det_0_i * $add84;
  var $mul11_i = $sub64 * -$det_0_i;
  var $mul18_i = $det_0_i * $add51;
  HEAPF32[$this$s2 + 40] = $mul7_i60;
  HEAPF32[$this$s2 + 41] = $mul11_i;
  HEAPF32[$this$s2 + 42] = $mul11_i;
  HEAPF32[$this$s2 + 43] = $mul18_i;
  var $add88 = $12 + $13;
  if ($add88 > 0) {
    var $storemerge = 1 / $add88;
  } else {
    var $storemerge = $add88;
  }
  var $storemerge;
  HEAPF32[$this$s2 + 44] = $storemerge;
  var $m_linearImpulse = $this + 84 | 0;
  if ((HEAP8[$data + 20 | 0] & 1) << 24 >> 24 == 0) {
    HEAPF32[$m_linearImpulse >> 2] = 0;
    HEAPF32[$this$s2 + 22] = 0;
    HEAPF32[$this$s2 + 23] = 0;
    var $wB_0 = $31;
    var $wA_0 = $23;
    var $66 = $20;
    var $65 = $22;
    var $64 = $28;
    var $63 = $30;
  } else {
    var $dtRatio = $data + 8 | 0;
    var $58 = HEAPF32[$dtRatio >> 2];
    var $x_i52 = $m_linearImpulse | 0;
    var $mul_i53 = HEAPF32[$x_i52 >> 2] * $58;
    HEAPF32[$x_i52 >> 2] = $mul_i53;
    var $y_i54 = $this + 88 | 0;
    var $mul2_i = HEAPF32[$y_i54 >> 2] * $58;
    HEAPF32[$y_i54 >> 2] = $mul2_i;
    var $m_angularImpulse = $this + 92 | 0;
    var $mul96 = HEAPF32[$m_angularImpulse >> 2] * HEAPF32[$dtRatio >> 2];
    HEAPF32[$m_angularImpulse >> 2] = $mul96;
    var $wB_0 = $31 + $13 * ($sub_i67 * $mul2_i - $add_i70 * $mul_i53 + $mul96);
    var $wA_0 = $23 - $12 * ($sub_i7 * $mul2_i - $add_i * $mul_i53 + $mul96);
    var $66 = $20 - $mul_i53 * $10;
    var $65 = $22 - $mul2_i * $10;
    var $64 = $28 + $mul_i53 * $11;
    var $63 = $30 + $mul2_i * $11;
  }
  var $63;
  var $64;
  var $65;
  var $66;
  var $wA_0;
  var $wB_0;
  var $68 = HEAP32[$velocities$s2] + $1 * 12 | 0;
  var $69 = (tempDoubleF32[0] = $66, tempDoubleI32[0]);
  var $70$0 = $69;
  var $71 = (tempDoubleF32[0] = $65, tempDoubleI32[0]);
  var $74$1 = $71 | 0;
  var $st$19$0 = $68 | 0;
  HEAP32[$st$19$0 >> 2] = 0 | $70$0;
  var $st$19$1 = $68 + 4 | 0;
  HEAP32[$st$19$1 >> 2] = $74$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $wA_0;
  var $79 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $80 = (tempDoubleF32[0] = $64, tempDoubleI32[0]);
  var $81$0 = $80;
  var $82 = (tempDoubleF32[0] = $63, tempDoubleI32[0]);
  var $85$1 = $82 | 0;
  var $st$41$0 = $79 | 0;
  HEAP32[$st$41$0 >> 2] = 0 | $81$0;
  var $st$41$1 = $79 + 4 | 0;
  HEAP32[$st$41$1 >> 2] = $85$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $wB_0;
  return;
  return;
}

function __ZN15b2FrictionJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  return 1;
  return null;
}

function __ZN15b2FrictionJointD1Ev($this) {
  return;
  return;
}

function __ZNK15b2FrictionJoint10GetAnchorAEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 48 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 68 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 72 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK15b2FrictionJoint10GetAnchorBEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 52 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 76 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 80 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK15b2FrictionJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var $mul_i = HEAPF32[$this + 84 >> 2] * $inv_dt;
  var $mul1_i = HEAPF32[$this + 88 >> 2] * $inv_dt;
  HEAPF32[$agg_result >> 2] = $mul_i;
  HEAPF32[$agg_result + 4 >> 2] = $mul1_i;
  return;
  return;
}

function __ZNK15b2FrictionJoint17GetReactionTorqueEf($this, $inv_dt) {
  return HEAPF32[$this + 92 >> 2] * $inv_dt;
  return null;
}

function __ZNK15b2FrictionJoint11GetMaxForceEv($this) {
  return HEAPF32[$this + 96 >> 2];
  return null;
}

function __ZNK15b2FrictionJoint12GetMaxTorqueEv($this) {
  return HEAPF32[$this + 100 >> 2];
  return null;
}

function __ZN15b2FrictionJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var $y3_i50$s2;
  var $x2_i47$s2;
  var $m_indexB$s2;
  var $velocities$s2;
  var $this$s2 = $this >> 2;
  var $m_indexA = $this + 104 | 0;
  var $0 = HEAP32[$m_indexA >> 2];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $1 = HEAP32[$velocities$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $m_indexB$s2 = ($this + 108 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[($1 + 8 >> 2) + ($9 * 3 | 0)];
  var $17 = HEAPF32[$this$s2 + 36];
  var $18 = HEAPF32[$this$s2 + 37];
  var $19 = HEAPF32[$this$s2 + 38];
  var $20 = HEAPF32[$this$s2 + 39];
  var $21 = HEAPF32[$data >> 2];
  var $m_angularImpulse = $this + 92 | 0;
  var $23 = HEAPF32[$m_angularImpulse >> 2];
  var $mul13 = $21 * HEAPF32[$this$s2 + 25];
  var $add = $23 + ($16 - $8) * -HEAPF32[$this$s2 + 44];
  var $sub15 = -$mul13;
  var $cond_i_i = $add < $mul13 ? $add : $mul13;
  var $cond_i2_i = $cond_i_i < $sub15 ? $sub15 : $cond_i_i;
  HEAPF32[$m_angularImpulse >> 2] = $cond_i2_i;
  var $sub18 = $cond_i2_i - $23;
  var $sub20 = $8 - $19 * $sub18;
  var $add22 = $16 + $20 * $sub18;
  var $25 = HEAPF32[$this$s2 + 31];
  var $26 = HEAPF32[$this$s2 + 30];
  var $27 = HEAPF32[$this$s2 + 29];
  var $28 = HEAPF32[$this$s2 + 28];
  var $sub_i68 = $13 + $25 * -$add22 - $5 - $27 * -$sub20;
  var $sub3_i71 = $15 + $26 * $add22 - $7 - $28 * $sub20;
  var $add_i63 = HEAPF32[$this$s2 + 40] * $sub_i68 + HEAPF32[$this$s2 + 42] * $sub3_i71;
  var $add12_i = HEAPF32[$this$s2 + 41] * $sub_i68 + HEAPF32[$this$s2 + 43] * $sub3_i71;
  var $m_linearImpulse = $this + 84 | 0;
  var $33 = $m_linearImpulse;
  var $34$1 = HEAP32[$33 + 4 >> 2];
  var $36 = (tempDoubleI32[0] = HEAP32[$33 >> 2], tempDoubleF32[0]);
  var $38 = (tempDoubleI32[0] = $34$1, tempDoubleF32[0]);
  var $x2_i47$s2 = ($m_linearImpulse | 0) >> 2;
  var $add_i48 = $36 - $add_i63;
  HEAPF32[$x2_i47$s2] = $add_i48;
  var $y3_i50$s2 = ($this + 88 | 0) >> 2;
  var $add4_i51 = HEAPF32[$y3_i50$s2] - $add12_i;
  HEAPF32[$y3_i50$s2] = $add4_i51;
  var $mul33 = $21 * HEAPF32[$this$s2 + 24];
  var $add_i45 = $add_i48 * $add_i48 + $add4_i51 * $add4_i51;
  if ($add_i45 > $mul33 * $mul33) {
    var $call_i_i_i = _sqrtf($add_i45);
    if ($call_i_i_i < 1.1920928955078125e-7) {
      var $42 = $add_i48;
      var $41 = $add4_i51;
    } else {
      var $div_i = 1 / $call_i_i_i;
      var $mul_i33 = $add_i48 * $div_i;
      HEAPF32[$x2_i47$s2] = $mul_i33;
      var $mul2_i34 = $add4_i51 * $div_i;
      HEAPF32[$y3_i50$s2] = $mul2_i34;
      var $42 = $mul_i33;
      var $41 = $mul2_i34;
    }
    var $41;
    var $42;
    var $mul_i31 = $42 * $mul33;
    HEAPF32[$x2_i47$s2] = $mul_i31;
    var $mul2_i = $41 * $mul33;
    HEAPF32[$y3_i50$s2] = $mul2_i;
    var $44 = $mul_i31;
    var $43 = $mul2_i;
  } else {
    var $44 = $add_i48;
    var $43 = $add4_i51;
  }
  var $43;
  var $44;
  var $sub_i26 = $44 - $36;
  var $sub3_i = $43 - $38;
  var $sub_i16 = $5 - $sub_i26 * $17;
  var $sub4_i = $7 - $sub3_i * $17;
  var $sub46 = $sub20 - $19 * ($28 * $sub3_i - $27 * $sub_i26);
  var $add_i = $13 + $sub_i26 * $18;
  var $add4_i = $15 + $sub3_i * $18;
  var $add51 = $add22 + $20 * ($26 * $sub3_i - $25 * $sub_i26);
  var $46 = HEAP32[$velocities$s2] + $0 * 12 | 0;
  var $47 = (tempDoubleF32[0] = $sub_i16, tempDoubleI32[0]);
  var $48$0 = $47;
  var $49 = (tempDoubleF32[0] = $sub4_i, tempDoubleI32[0]);
  var $52$0 = 0 | $48$0;
  var $52$1 = $49 | 0;
  var $st$35$0 = $46 | 0;
  HEAP32[$st$35$0 >> 2] = $52$0;
  var $st$35$1 = $46 + 4 | 0;
  HEAP32[$st$35$1 >> 2] = $52$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $sub46;
  var $57 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $58 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $59$0 = $58;
  var $60 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
  var $63$0 = 0 | $59$0;
  var $63$1 = $60 | 0;
  var $st$57$0 = $57 | 0;
  HEAP32[$st$57$0 >> 2] = $63$0;
  var $st$57$1 = $57 + 4 | 0;
  HEAP32[$st$57$1 >> 2] = $63$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $add51;
  return;
  return;
}

function __ZN15b2FrictionJoint11SetMaxForceEf($this, $force) {
  var __label__;
  var $cmp_i = !isNaN($force) && !isNaN(0);
  var $or_cond_i = $cmp_i & $force > -Infinity;
  do {
    if ($or_cond_i) {
      if ($force < Infinity & $force >= 0) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str291 | 0, 217, STRING_TABLE.___PRETTY_FUNCTION____ZN15b2FrictionJoint11SetMaxForceEf | 0, STRING_TABLE.__str1292 | 0);
  }
  HEAPF32[$this + 96 >> 2] = $force;
  return;
  return;
}

function __ZN15b2FrictionJoint12SetMaxTorqueEf($this, $torque) {
  var __label__;
  var $cmp_i = !isNaN($torque) && !isNaN(0);
  var $or_cond_i = $cmp_i & $torque > -Infinity;
  do {
    if ($or_cond_i) {
      if ($torque < Infinity & $torque >= 0) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str291 | 0, 228, STRING_TABLE.___PRETTY_FUNCTION____ZN15b2FrictionJoint12SetMaxTorqueEf | 0, STRING_TABLE.__str2293 | 0);
  }
  HEAPF32[$this + 100 >> 2] = $torque;
  return;
  return;
}

function __ZN15b2FrictionJoint4DumpEv($this) {
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  var $1 = HEAP32[HEAP32[$this$s2 + 12] + 8 >> 2];
  var $3 = HEAP32[HEAP32[$this$s2 + 13] + 8 >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str3294 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str1415 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $1, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str2416 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $3, tempInt));
  var $conv = HEAP8[$this + 61 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str3417 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv, tempInt));
  var $conv3 = HEAPF32[$this$s2 + 17];
  var $conv5 = HEAPF32[$this$s2 + 18];
  __Z5b2LogPKcz(STRING_TABLE.__str4418 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv3, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv5, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv7 = HEAPF32[$this$s2 + 19];
  var $conv10 = HEAPF32[$this$s2 + 20];
  __Z5b2LogPKcz(STRING_TABLE.__str5419 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv7, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv10, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv11 = HEAPF32[$this$s2 + 24];
  __Z5b2LogPKcz(STRING_TABLE.__str9300 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv11, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv12 = HEAPF32[$this$s2 + 25];
  __Z5b2LogPKcz(STRING_TABLE.__str10301 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv12, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $12 = HEAP32[$this$s2 + 14];
  __Z5b2LogPKcz(STRING_TABLE.__str12426 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $12, tempInt));
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN15b2FrictionJointD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN11b2GearJointC2EPK14b2GearJointDef($this, $def) {
  var $62$s2;
  var $61$s2;
  var $st$22$1$s2;
  var $st$22$0$s2;
  var $st$11$1$s2;
  var $st$11$0$s2;
  var $26$s2;
  var $25$s2;
  var $m_typeB$s2;
  var $16$s2;
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV7b2Joint + 8 | 0;
  var $bodyA_i = $def + 8 | 0;
  var $bodyB_i = $def + 12 | 0;
  if ((HEAP32[$bodyA_i >> 2] | 0) == (HEAP32[$bodyB_i >> 2] | 0)) {
    ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
  }
  var $3 = HEAP32[$def >> 2];
  HEAP32[$this$s2 + 1] = $3;
  HEAP32[$this$s2 + 2] = 0;
  HEAP32[$this$s2 + 3] = 0;
  var $5 = HEAP32[$bodyA_i >> 2];
  var $m_bodyA_i = $this + 48 | 0;
  HEAP32[$m_bodyA_i >> 2] = $5;
  var $6 = HEAP32[$bodyB_i >> 2];
  var $m_bodyB_i = $this + 52 | 0;
  HEAP32[$m_bodyB_i >> 2] = $6;
  HEAP32[$this$s2 + 14] = 0;
  var $10 = HEAP8[$def + 16 | 0] & 1;
  HEAP8[$this + 61 | 0] = $10;
  HEAP8[$this + 60 | 0] = 0;
  var $14 = HEAP32[$def + 4 >> 2];
  HEAP32[$this$s2 + 16] = $14;
  var $16$s2 = ($this + 16 | 0) >> 2;
  HEAP32[$16$s2] = 0;
  HEAP32[$16$s2 + 1] = 0;
  HEAP32[$16$s2 + 2] = 0;
  HEAP32[$16$s2 + 3] = 0;
  HEAP32[$16$s2 + 4] = 0;
  HEAP32[$16$s2 + 5] = 0;
  HEAP32[$16$s2 + 6] = 0;
  HEAP32[$16$s2 + 7] = 0;
  HEAP32[$0 >> 2] = __ZTV11b2GearJoint + 8 | 0;
  var $m_localAnchorA = $this + 92 | 0;
  var $m_localAnchorB = $this + 100 | 0;
  var $m_localAnchorC = $this + 108 | 0;
  var $m_localAnchorD = $this + 116 | 0;
  var $m_localAxisC = $this + 124 | 0;
  var $m_localAxisD = $this + 132 | 0;
  var $joint1 = $def + 20 | 0;
  var $17 = HEAP32[$joint1 >> 2];
  var $m_joint1 = $this + 68 | 0;
  HEAP32[$m_joint1 >> 2] = $17;
  var $joint2 = $def + 24 | 0;
  var $18 = HEAP32[$joint2 >> 2];
  var $m_joint2 = $this + 72 | 0;
  HEAP32[$m_joint2 >> 2] = $18;
  var $20 = HEAP32[$17 + 4 >> 2];
  var $m_typeA = $this + 76 | 0;
  HEAP32[$m_typeA >> 2] = $20;
  var $22 = HEAPU32[$18 + 4 >> 2];
  var $m_typeB$s2 = ($this + 80 | 0) >> 2;
  HEAP32[$m_typeB$s2] = $22;
  if (($20 - 1 | 0) >>> 0 < 2) {
    var $23 = $22;
  } else {
    ___assert_func(STRING_TABLE.__str303 | 0, 53, STRING_TABLE.___PRETTY_FUNCTION____ZN11b2GearJointC2EPK14b2GearJointDef | 0, STRING_TABLE.__str1304 | 0);
    var $23 = HEAP32[$m_typeB$s2];
  }
  var $23;
  if (($23 - 1 | 0) >>> 0 >= 2) {
    ___assert_func(STRING_TABLE.__str303 | 0, 54, STRING_TABLE.___PRETTY_FUNCTION____ZN11b2GearJointC2EPK14b2GearJointDef | 0, STRING_TABLE.__str2305 | 0);
  }
  var $24 = HEAPU32[$m_joint1 >> 2];
  var $25 = HEAPU32[$24 + 48 >> 2], $25$s2 = $25 >> 2;
  HEAP32[$this$s2 + 21] = $25;
  var $26 = HEAPU32[$24 + 52 >> 2], $26$s2 = $26 >> 2;
  HEAP32[$m_bodyA_i >> 2] = $26;
  var $tmp124 = HEAPF32[$26$s2 + 5];
  var $tmp125 = HEAPF32[$26$s2 + 6];
  var $tmp118 = HEAPF32[$25$s2 + 5];
  var $tmp119 = HEAPF32[$25$s2 + 6];
  var $28 = HEAPU32[$joint1 >> 2];
  if ((HEAP32[$m_typeA >> 2] | 0) == 1) {
    var $29 = HEAPF32[$26$s2 + 14];
    var $30 = HEAPF32[$25$s2 + 14];
    var $31 = $28 + 68 | 0;
    var $32 = $m_localAnchorC;
    var $st$7$0 = $31 | 0;
    var $33$0 = HEAP32[$st$7$0 >> 2];
    var $st$7$1 = $31 + 4 | 0;
    var $33$1 = HEAP32[$st$7$1 >> 2];
    var $st$11$0 = $32 | 0, $st$11$0$s2 = $st$11$0 >> 2;
    HEAP32[$st$11$0$s2] = $33$0;
    var $st$11$1 = $32 + 4 | 0, $st$11$1$s2 = $st$11$1 >> 2;
    HEAP32[$st$11$1$s2] = $33$1;
    var $34 = $28 + 76 | 0;
    var $35 = $m_localAnchorA;
    var $st$18$0 = $34 | 0;
    var $36$0 = HEAP32[$st$18$0 >> 2];
    var $st$18$1 = $34 + 4 | 0;
    var $36$1 = HEAP32[$st$18$1 >> 2];
    var $st$22$0 = $35 | 0, $st$22$0$s2 = $st$22$0 >> 2;
    HEAP32[$st$22$0$s2] = $36$0;
    var $st$22$1 = $35 + 4 | 0, $st$22$1$s2 = $st$22$1 >> 2;
    HEAP32[$st$22$1$s2] = $36$1;
    var $38 = HEAPF32[$28 + 116 >> 2];
    HEAPF32[$this$s2 + 35] = $38;
    HEAPF32[$m_localAxisC >> 2] = 0;
    HEAPF32[$this$s2 + 32] = 0;
    var $coordinateA_0 = $29 - $30 - $38;
  } else {
    var $tmp122 = HEAPF32[$25$s2 + 4];
    var $tmp121 = HEAPF32[$25$s2 + 3];
    var $tmp129 = HEAPF32[$26$s2 + 4];
    var $tmp127 = HEAPF32[$26$s2 + 3];
    var $39 = $28 + 68 | 0;
    var $40 = $m_localAnchorC;
    var $st$11$0 = $39 | 0, $st$11$0$s2 = $st$11$0 >> 2;
    var $41$0 = HEAP32[$st$11$0$s2];
    var $st$11$1 = $39 + 4 | 0, $st$11$1$s2 = $st$11$1 >> 2;
    var $41$1 = HEAP32[$st$11$1$s2];
    var $st$15$0 = $40 | 0;
    HEAP32[$st$15$0 >> 2] = $41$0;
    var $st$15$1 = $40 + 4 | 0;
    HEAP32[$st$15$1 >> 2] = $41$1;
    var $42 = $28 + 76 | 0;
    var $43 = $m_localAnchorA;
    var $st$22$0 = $42 | 0, $st$22$0$s2 = $st$22$0 >> 2;
    var $44$0 = HEAP32[$st$22$0$s2];
    var $st$22$1 = $42 + 4 | 0, $st$22$1$s2 = $st$22$1 >> 2;
    var $44$1 = HEAP32[$st$22$1$s2];
    var $st$26$0 = $43 | 0;
    HEAP32[$st$26$0 >> 2] = $44$0;
    var $st$26$1 = $43 + 4 | 0;
    HEAP32[$st$26$1 >> 2] = $44$1;
    var $46 = HEAPF32[$28 + 100 >> 2];
    HEAPF32[$this$s2 + 35] = $46;
    var $47 = $28 + 84 | 0;
    var $48 = $m_localAxisC;
    var $st$38$0 = $47 | 0;
    var $49$0 = HEAP32[$st$38$0 >> 2];
    var $st$38$1 = $47 + 4 | 0;
    var $49$1 = HEAP32[$st$38$1 >> 2];
    var $st$42$0 = $48 | 0;
    HEAP32[$st$42$0 >> 2] = $49$0;
    var $st$42$1 = $48 + 4 | 0;
    HEAP32[$st$42$1 >> 2] = $49$1;
    var $51 = (tempDoubleI32[0] = $41$0, tempDoubleF32[0]);
    var $53 = (tempDoubleI32[0] = $41$1, tempDoubleF32[0]);
    var $bitcast133 = (tempDoubleI32[0] = $44$0, tempDoubleF32[0]);
    var $mul_i91 = $tmp125 * $bitcast133;
    var $56 = (tempDoubleI32[0] = $44$1, tempDoubleF32[0]);
    var $add_i75 = $mul_i91 - $tmp124 * $56 + ($tmp127 - $tmp121);
    var $add3_i78 = $tmp124 * $bitcast133 + $tmp125 * $56 + ($tmp129 - $tmp122);
    var $sub_i54 = $tmp119 * $add_i75 + $tmp118 * $add3_i78 - $51;
    var $sub3_i57 = $add_i75 * -$tmp118 + $tmp119 * $add3_i78 - $53;
    var $bitcast135 = (tempDoubleI32[0] = $49$0, tempDoubleF32[0]);
    var $mul_i47 = $sub_i54 * $bitcast135;
    var $59 = (tempDoubleI32[0] = $49$1, tempDoubleF32[0]);
    var $coordinateA_0 = $mul_i47 + $sub3_i57 * $59;
  }
  var $coordinateA_0;
  var $60 = HEAP32[$m_joint2 >> 2];
  var $61 = HEAP32[$60 + 48 >> 2], $61$s2 = $61 >> 2;
  HEAP32[$this$s2 + 22] = $61;
  var $62 = HEAP32[$60 + 52 >> 2], $62$s2 = $62 >> 2;
  HEAP32[$m_bodyB_i >> 2] = $62;
  var $tmp111 = HEAPF32[$62$s2 + 5];
  var $tmp112 = HEAPF32[$62$s2 + 6];
  var $tmp = HEAPF32[$61$s2 + 5];
  var $tmp107 = HEAPF32[$61$s2 + 6];
  var $64 = HEAP32[$joint2 >> 2];
  if ((HEAP32[$m_typeB$s2] | 0) == 1) {
    var $65 = HEAPF32[$62$s2 + 14];
    var $66 = HEAPF32[$61$s2 + 14];
    var $67 = $64 + 68 | 0;
    var $68 = $m_localAnchorD;
    var $st$7$0 = $67 | 0;
    var $69$0 = HEAP32[$st$7$0 >> 2];
    var $st$7$1 = $67 + 4 | 0;
    var $69$1 = HEAP32[$st$7$1 >> 2];
    var $st$11$0 = $68 | 0, $st$11$0$s2 = $st$11$0 >> 2;
    HEAP32[$st$11$0$s2] = $69$0;
    var $st$11$1 = $68 + 4 | 0, $st$11$1$s2 = $st$11$1 >> 2;
    HEAP32[$st$11$1$s2] = $69$1;
    var $70 = $64 + 76 | 0;
    var $71 = $m_localAnchorB;
    var $st$18$0 = $70 | 0;
    var $72$0 = HEAP32[$st$18$0 >> 2];
    var $st$18$1 = $70 + 4 | 0;
    var $72$1 = HEAP32[$st$18$1 >> 2];
    var $st$22$0 = $71 | 0, $st$22$0$s2 = $st$22$0 >> 2;
    HEAP32[$st$22$0$s2] = $72$0;
    var $st$22$1 = $71 + 4 | 0, $st$22$1$s2 = $st$22$1 >> 2;
    HEAP32[$st$22$1$s2] = $72$1;
    var $74 = HEAPF32[$64 + 116 >> 2];
    HEAPF32[$this$s2 + 36] = $74;
    HEAPF32[$m_localAxisD >> 2] = 0;
    HEAPF32[$this$s2 + 34] = 0;
    var $coordinateB_0 = $65 - $66 - $74;
  } else {
    var $tmp110 = HEAPF32[$61$s2 + 4];
    var $tmp109 = HEAPF32[$61$s2 + 3];
    var $tmp116 = HEAPF32[$62$s2 + 4];
    var $tmp114 = HEAPF32[$62$s2 + 3];
    var $75 = $64 + 68 | 0;
    var $76 = $m_localAnchorD;
    var $st$11$0 = $75 | 0, $st$11$0$s2 = $st$11$0 >> 2;
    var $77$0 = HEAP32[$st$11$0$s2];
    var $st$11$1 = $75 + 4 | 0, $st$11$1$s2 = $st$11$1 >> 2;
    var $77$1 = HEAP32[$st$11$1$s2];
    var $st$15$0 = $76 | 0;
    HEAP32[$st$15$0 >> 2] = $77$0;
    var $st$15$1 = $76 + 4 | 0;
    HEAP32[$st$15$1 >> 2] = $77$1;
    var $78 = $64 + 76 | 0;
    var $79 = $m_localAnchorB;
    var $st$22$0 = $78 | 0, $st$22$0$s2 = $st$22$0 >> 2;
    var $80$0 = HEAP32[$st$22$0$s2];
    var $st$22$1 = $78 + 4 | 0, $st$22$1$s2 = $st$22$1 >> 2;
    var $80$1 = HEAP32[$st$22$1$s2];
    var $st$26$0 = $79 | 0;
    HEAP32[$st$26$0 >> 2] = $80$0;
    var $st$26$1 = $79 + 4 | 0;
    HEAP32[$st$26$1 >> 2] = $80$1;
    var $82 = HEAPF32[$64 + 100 >> 2];
    HEAPF32[$this$s2 + 36] = $82;
    var $83 = $64 + 84 | 0;
    var $84 = $m_localAxisD;
    var $st$38$0 = $83 | 0;
    var $85$0 = HEAP32[$st$38$0 >> 2];
    var $st$38$1 = $83 + 4 | 0;
    var $85$1 = HEAP32[$st$38$1 >> 2];
    var $st$42$0 = $84 | 0;
    HEAP32[$st$42$0 >> 2] = $85$0;
    var $st$42$1 = $84 + 4 | 0;
    HEAP32[$st$42$1 >> 2] = $85$1;
    var $87 = (tempDoubleI32[0] = $77$0, tempDoubleF32[0]);
    var $89 = (tempDoubleI32[0] = $77$1, tempDoubleF32[0]);
    var $bitcast = (tempDoubleI32[0] = $80$0, tempDoubleF32[0]);
    var $mul_i31 = $tmp112 * $bitcast;
    var $92 = (tempDoubleI32[0] = $80$1, tempDoubleF32[0]);
    var $add_i16 = $mul_i31 - $tmp111 * $92 + ($tmp114 - $tmp109);
    var $add3_i = $tmp111 * $bitcast + $tmp112 * $92 + ($tmp116 - $tmp110);
    var $sub_i = $tmp107 * $add_i16 + $tmp * $add3_i - $87;
    var $sub3_i = $add_i16 * -$tmp + $tmp107 * $add3_i - $89;
    var $bitcast131 = (tempDoubleI32[0] = $85$0, tempDoubleF32[0]);
    var $mul_i = $sub_i * $bitcast131;
    var $95 = (tempDoubleI32[0] = $85$1, tempDoubleF32[0]);
    var $coordinateB_0 = $mul_i + $sub3_i * $95;
  }
  var $coordinateB_0;
  var $96 = HEAPF32[$def + 28 >> 2];
  HEAPF32[$this$s2 + 38] = $96;
  var $add = $coordinateA_0 + $96 * $coordinateB_0;
  HEAPF32[$this$s2 + 37] = $add;
  HEAPF32[$this$s2 + 39] = 0;
  return;
  return;
}

function __ZN11b2GearJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var $m_indexD$s2;
  var $m_indexC$s2;
  var $m_indexB$s2;
  var $1$s2;
  var $velocities$s2;
  var $this$s2 = $this >> 2;
  var $m_indexA = $this + 160 | 0;
  var $0 = HEAP32[$m_indexA >> 2];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $1 = HEAP32[$velocities$s2], $1$s2 = $1 >> 2;
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[$1$s2 + ($0 * 3 | 0) + 2];
  var $m_indexB$s2 = ($this + 164 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[$1$s2 + ($9 * 3 | 0) + 2];
  var $m_indexC$s2 = ($this + 168 | 0) >> 2;
  var $17 = HEAP32[$m_indexC$s2];
  var $18 = $1 + $17 * 12 | 0;
  var $19$1 = HEAP32[$18 + 4 >> 2];
  var $21 = (tempDoubleI32[0] = HEAP32[$18 >> 2], tempDoubleF32[0]);
  var $23 = (tempDoubleI32[0] = $19$1, tempDoubleF32[0]);
  var $24 = HEAPF32[$1$s2 + ($17 * 3 | 0) + 2];
  var $m_indexD$s2 = ($this + 172 | 0) >> 2;
  var $25 = HEAP32[$m_indexD$s2];
  var $26 = $1 + $25 * 12 | 0;
  var $27$1 = HEAP32[$26 + 4 >> 2];
  var $29 = (tempDoubleI32[0] = HEAP32[$26 >> 2], tempDoubleF32[0]);
  var $31 = (tempDoubleI32[0] = $27$1, tempDoubleF32[0]);
  var $32 = HEAPF32[$1$s2 + ($25 * 3 | 0) + 2];
  var $33 = HEAPF32[$this$s2 + 60];
  var $34 = HEAPF32[$this$s2 + 61];
  var $35 = HEAPF32[$this$s2 + 62];
  var $36 = HEAPF32[$this$s2 + 63];
  var $37 = HEAPF32[$this$s2 + 64];
  var $38 = HEAPF32[$this$s2 + 66];
  var $39 = HEAPF32[$this$s2 + 65];
  var $40 = HEAPF32[$this$s2 + 67];
  var $mul35 = ($33 * ($5 - $21) + $34 * ($7 - $23) + $35 * ($13 - $29) + $36 * ($15 - $31) + ($37 * $8 - $38 * $24) + ($39 * $16 - $40 * $32)) * -HEAPF32[$this$s2 + 68];
  var $m_impulse = $this + 156 | 0;
  var $add36 = HEAPF32[$m_impulse >> 2] + $mul35;
  HEAPF32[$m_impulse >> 2] = $add36;
  var $mul38 = HEAPF32[$this$s2 + 52] * $mul35;
  var $add_i32 = $5 + $33 * $mul38;
  var $add4_i35 = $7 + $34 * $mul38;
  var $add43 = $8 + HEAPF32[$this$s2 + 56] * $mul35 * $37;
  var $mul45 = HEAPF32[$this$s2 + 53] * $mul35;
  var $add_i = $13 + $35 * $mul45;
  var $add4_i = $15 + $36 * $mul45;
  var $add50 = $16 + HEAPF32[$this$s2 + 57] * $mul35 * $39;
  var $mul52 = HEAPF32[$this$s2 + 54] * $mul35;
  var $sub_i10 = $21 - $33 * $mul52;
  var $sub4_i13 = $23 - $34 * $mul52;
  var $sub57 = $24 - HEAPF32[$this$s2 + 58] * $mul35 * $38;
  var $mul59 = HEAPF32[$this$s2 + 55] * $mul35;
  var $sub_i2 = $29 - $35 * $mul59;
  var $sub4_i = $31 - $36 * $mul59;
  var $sub64 = $32 - HEAPF32[$this$s2 + 59] * $mul35 * $40;
  var $52 = HEAP32[$velocities$s2] + $0 * 12 | 0;
  var $53 = (tempDoubleF32[0] = $add_i32, tempDoubleI32[0]);
  var $54$0 = $53;
  var $55 = (tempDoubleF32[0] = $add4_i35, tempDoubleI32[0]);
  var $58$0 = 0 | $54$0;
  var $58$1 = $55 | 0;
  var $st$178$0 = $52 | 0;
  HEAP32[$st$178$0 >> 2] = $58$0;
  var $st$178$1 = $52 + 4 | 0;
  HEAP32[$st$178$1 >> 2] = $58$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $add43;
  var $63 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $64 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $65$0 = $64;
  var $66 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
  var $69$0 = 0 | $65$0;
  var $69$1 = $66 | 0;
  var $st$200$0 = $63 | 0;
  HEAP32[$st$200$0 >> 2] = $69$0;
  var $st$200$1 = $63 + 4 | 0;
  HEAP32[$st$200$1 >> 2] = $69$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $add50;
  var $74 = HEAP32[$velocities$s2] + HEAP32[$m_indexC$s2] * 12 | 0;
  var $75 = (tempDoubleF32[0] = $sub_i10, tempDoubleI32[0]);
  var $76$0 = $75;
  var $77 = (tempDoubleF32[0] = $sub4_i13, tempDoubleI32[0]);
  var $80$0 = 0 | $76$0;
  var $80$1 = $77 | 0;
  var $st$222$0 = $74 | 0;
  HEAP32[$st$222$0 >> 2] = $80$0;
  var $st$222$1 = $74 + 4 | 0;
  HEAP32[$st$222$1 >> 2] = $80$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexC$s2] * 3 | 0)] = $sub57;
  var $85 = HEAP32[$velocities$s2] + HEAP32[$m_indexD$s2] * 12 | 0;
  var $86 = (tempDoubleF32[0] = $sub_i2, tempDoubleI32[0]);
  var $87$0 = $86;
  var $88 = (tempDoubleF32[0] = $sub4_i, tempDoubleI32[0]);
  var $91$0 = 0 | $87$0;
  var $91$1 = $88 | 0;
  var $st$244$0 = $85 | 0;
  HEAP32[$st$244$0 >> 2] = $91$0;
  var $st$244$1 = $85 + 4 | 0;
  HEAP32[$st$244$1 >> 2] = $91$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexD$s2] * 3 | 0)] = $sub64;
  return;
  return;
}

function __ZN11b2GearJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var $m_mass$s2;
  var $30$s2;
  var $velocities$s2;
  var $28$s2;
  var $m_indexD$s2;
  var $6$s2;
  var $m_indexC$s2;
  var $4$s2;
  var $m_indexB$s2;
  var $2$s2;
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $0 = HEAP32[$this$s2 + 12], $0$s2 = $0 >> 2;
  var $1 = HEAP32[$0$s2 + 2];
  var $m_indexA = $this + 160 | 0;
  HEAP32[$m_indexA >> 2] = $1;
  var $2 = HEAP32[$this$s2 + 13], $2$s2 = $2 >> 2;
  var $3 = HEAP32[$2$s2 + 2];
  var $m_indexB$s2 = ($this + 164 | 0) >> 2;
  HEAP32[$m_indexB$s2] = $3;
  var $4 = HEAP32[$this$s2 + 21], $4$s2 = $4 >> 2;
  var $5 = HEAP32[$4$s2 + 2];
  var $m_indexC$s2 = ($this + 168 | 0) >> 2;
  HEAP32[$m_indexC$s2] = $5;
  var $6 = HEAP32[$this$s2 + 22], $6$s2 = $6 >> 2;
  var $7 = HEAP32[$6$s2 + 2];
  var $m_indexD$s2 = ($this + 172 | 0) >> 2;
  HEAP32[$m_indexD$s2] = $7;
  var $8 = $0 + 28 | 0;
  var $9 = $this + 176 | 0;
  var $10$0 = HEAP32[$8 >> 2];
  var $10$1 = HEAP32[$8 + 4 >> 2];
  HEAP32[$9 >> 2] = $10$0;
  HEAP32[$9 + 4 >> 2] = $10$1;
  var $11 = $2 + 28 | 0;
  var $12 = $this + 184 | 0;
  var $13$0 = HEAP32[$11 >> 2];
  var $13$1 = HEAP32[$11 + 4 >> 2];
  HEAP32[$12 >> 2] = $13$0;
  HEAP32[$12 + 4 >> 2] = $13$1;
  var $14 = $4 + 28 | 0;
  var $15 = $this + 192 | 0;
  var $16$0 = HEAP32[$14 >> 2];
  var $16$1 = HEAP32[$14 + 4 >> 2];
  HEAP32[$15 >> 2] = $16$0;
  HEAP32[$15 + 4 >> 2] = $16$1;
  var $17 = $6 + 28 | 0;
  var $18 = $this + 200 | 0;
  var $19$0 = HEAP32[$17 >> 2];
  var $19$1 = HEAP32[$17 + 4 >> 2];
  HEAP32[$18 >> 2] = $19$0;
  HEAP32[$18 + 4 >> 2] = $19$1;
  var $20 = HEAPF32[$0$s2 + 30];
  HEAPF32[$this$s2 + 52] = $20;
  var $21 = HEAPF32[$2$s2 + 30];
  HEAPF32[$this$s2 + 53] = $21;
  var $22 = HEAPF32[$4$s2 + 30];
  HEAPF32[$this$s2 + 54] = $22;
  var $23 = HEAPF32[$6$s2 + 30];
  HEAPF32[$this$s2 + 55] = $23;
  var $24 = HEAPF32[$0$s2 + 32];
  HEAPF32[$this$s2 + 56] = $24;
  var $25 = HEAPF32[$2$s2 + 32];
  HEAPF32[$this$s2 + 57] = $25;
  var $26 = HEAPF32[$4$s2 + 32];
  HEAPF32[$this$s2 + 58] = $26;
  var $27 = HEAPF32[$6$s2 + 32];
  HEAPF32[$this$s2 + 59] = $27;
  var $28$s2 = HEAP32[$data + 24 >> 2] >> 2;
  var $29 = HEAPF32[$28$s2 + ($1 * 3 | 0) + 2];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $30 = HEAP32[$velocities$s2], $30$s2 = $30 >> 2;
  var $31 = $30 + $1 * 12 | 0;
  var $32$1 = HEAP32[$31 + 4 >> 2];
  var $34 = (tempDoubleI32[0] = HEAP32[$31 >> 2], tempDoubleF32[0]);
  var $36 = (tempDoubleI32[0] = $32$1, tempDoubleF32[0]);
  var $37 = HEAPF32[$30$s2 + ($1 * 3 | 0) + 2];
  var $38 = HEAPF32[$28$s2 + ($3 * 3 | 0) + 2];
  var $39 = $30 + $3 * 12 | 0;
  var $40$1 = HEAP32[$39 + 4 >> 2];
  var $42 = (tempDoubleI32[0] = HEAP32[$39 >> 2], tempDoubleF32[0]);
  var $44 = (tempDoubleI32[0] = $40$1, tempDoubleF32[0]);
  var $45 = HEAPF32[$30$s2 + ($3 * 3 | 0) + 2];
  var $46 = HEAPF32[$28$s2 + ($5 * 3 | 0) + 2];
  var $47 = $30 + $5 * 12 | 0;
  var $48$1 = HEAP32[$47 + 4 >> 2];
  var $50 = (tempDoubleI32[0] = HEAP32[$47 >> 2], tempDoubleF32[0]);
  var $52 = (tempDoubleI32[0] = $48$1, tempDoubleF32[0]);
  var $53 = HEAPF32[$30$s2 + ($5 * 3 | 0) + 2];
  var $54 = HEAPF32[$28$s2 + ($7 * 3 | 0) + 2];
  var $55 = $30 + $7 * 12 | 0;
  var $56$1 = HEAP32[$55 + 4 >> 2];
  var $58 = (tempDoubleI32[0] = HEAP32[$55 >> 2], tempDoubleF32[0]);
  var $60 = (tempDoubleI32[0] = $56$1, tempDoubleF32[0]);
  var $61 = HEAPF32[$30$s2 + ($7 * 3 | 0) + 2];
  var $call_i_i = _sinf($29);
  var $call2_i_i = _cosf($29);
  var $call_i_i13 = _sinf($38);
  var $call2_i_i15 = _cosf($38);
  var $call_i_i17 = _sinf($46);
  var $call2_i_i19 = _cosf($46);
  var $call_i_i21 = _sinf($54);
  var $call2_i_i23 = _cosf($54);
  var $m_mass$s2 = ($this + 272 | 0) >> 2;
  HEAPF32[$m_mass$s2] = 0;
  var $cmp = (HEAP32[$this$s2 + 19] | 0) == 1;
  var $64 = (tempDoubleI32[0] = $19$0, tempDoubleF32[0]);
  var $67 = (tempDoubleI32[0] = $19$1, tempDoubleF32[0]);
  var $69 = (tempDoubleI32[0] = $13$0, tempDoubleF32[0]);
  var $72 = (tempDoubleI32[0] = $13$1, tempDoubleF32[0]);
  if ($cmp) {
    HEAPF32[$this$s2 + 60] = 0;
    HEAPF32[$this$s2 + 61] = 0;
    HEAPF32[$this$s2 + 64] = 1;
    HEAPF32[$this$s2 + 66] = 1;
    var $_in = $24 + $26;
    var $99 = 0;
    var $98 = 0;
    var $97 = 1;
    var $96 = 1;
  } else {
    var $76 = $10$0;
    var $77 = $16$1;
    var $78 = $16$0;
    var $79 = (tempDoubleI32[0] = $10$1, tempDoubleF32[0]);
    var $80 = (tempDoubleI32[0] = $76, tempDoubleF32[0]);
    var $81 = (tempDoubleI32[0] = $77, tempDoubleF32[0]);
    var $82 = (tempDoubleI32[0] = $78, tempDoubleF32[0]);
    var $83 = HEAPF32[$this$s2 + 31];
    var $84 = HEAPF32[$this$s2 + 32];
    var $sub_i = $call2_i_i19 * $83 - $call_i_i17 * $84;
    var $add_i = $call_i_i17 * $83 + $call2_i_i19 * $84;
    var $sub_i28 = HEAPF32[$this$s2 + 27] - $82;
    var $sub3_i = HEAPF32[$this$s2 + 28] - $81;
    var $sub_i38 = $call2_i_i19 * $sub_i28 - $call_i_i17 * $sub3_i;
    var $add_i41 = $call_i_i17 * $sub_i28 + $call2_i_i19 * $sub3_i;
    var $sub_i46 = HEAPF32[$this$s2 + 23] - $80;
    var $sub3_i49 = HEAPF32[$this$s2 + 24] - $79;
    var $sub_i188 = $call2_i_i * $sub_i46 - $call_i_i * $sub3_i49;
    var $add_i191 = $call_i_i * $sub_i46 + $call2_i_i * $sub3_i49;
    var $89 = $this + 240 | 0;
    var $90 = (tempDoubleF32[0] = $sub_i, tempDoubleI32[0]);
    var $91$0 = $90;
    var $92 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
    var $95$0 = 0 | $91$0;
    var $95$1 = $92 | 0;
    HEAP32[$89 >> 2] = $95$0;
    HEAP32[$89 + 4 >> 2] = $95$1;
    var $sub_i181 = $sub_i38 * $add_i - $add_i41 * $sub_i;
    HEAPF32[$this$s2 + 66] = $sub_i181;
    var $sub_i174 = $sub_i188 * $add_i - $add_i191 * $sub_i;
    HEAPF32[$this$s2 + 64] = $sub_i174;
    var $_in = $22 + $20 + $26 * $sub_i181 * $sub_i181 + $24 * $sub_i174 * $sub_i174;
    var $99 = $sub_i;
    var $98 = $add_i;
    var $97 = $sub_i174;
    var $96 = $sub_i181;
  }
  var $96;
  var $97;
  var $98;
  var $99;
  var $_in;
  var $100 = $_in;
  HEAPF32[$m_mass$s2] = $100;
  if ((HEAP32[$this$s2 + 20] | 0) == 1) {
    HEAPF32[$this$s2 + 62] = 0;
    HEAPF32[$this$s2 + 63] = 0;
    var $102 = HEAPF32[$this$s2 + 38];
    HEAPF32[$this$s2 + 65] = $102;
    HEAPF32[$this$s2 + 67] = $102;
    var $add160_pn = $102 * $102 * ($25 + $27);
    var $120 = 0;
    var $119 = 0;
    var $118 = $102;
    var $117 = $102;
  } else {
    var $103 = HEAPF32[$this$s2 + 33];
    var $104 = HEAPF32[$this$s2 + 34];
    var $sub_i160 = $call2_i_i23 * $103 - $call_i_i21 * $104;
    var $add_i163 = $call_i_i21 * $103 + $call2_i_i23 * $104;
    var $sub_i148 = HEAPF32[$this$s2 + 29] - $64;
    var $sub3_i151 = HEAPF32[$this$s2 + 30] - $67;
    var $sub_i140 = $call2_i_i23 * $sub_i148 - $call_i_i21 * $sub3_i151;
    var $add_i143 = $call_i_i21 * $sub_i148 + $call2_i_i23 * $sub3_i151;
    var $sub_i128 = HEAPF32[$this$s2 + 25] - $69;
    var $sub3_i131 = HEAPF32[$this$s2 + 26] - $72;
    var $sub_i120 = $call2_i_i15 * $sub_i128 - $call_i_i13 * $sub3_i131;
    var $add_i123 = $call_i_i13 * $sub_i128 + $call2_i_i15 * $sub3_i131;
    var $109 = HEAPF32[$this$s2 + 38];
    var $mul_i109 = $sub_i160 * $109;
    var $mul1_i111 = $add_i163 * $109;
    var $110 = $this + 248 | 0;
    var $111 = (tempDoubleF32[0] = $mul_i109, tempDoubleI32[0]);
    var $112$0 = $111;
    var $113 = (tempDoubleF32[0] = $mul1_i111, tempDoubleI32[0]);
    var $116$0 = 0 | $112$0;
    var $116$1 = $113 | 0;
    HEAP32[$110 >> 2] = $116$0;
    HEAP32[$110 + 4 >> 2] = $116$1;
    var $mul136 = $109 * ($sub_i140 * $add_i163 - $add_i143 * $sub_i160);
    HEAPF32[$this$s2 + 67] = $mul136;
    var $mul140 = $109 * ($sub_i120 * $add_i163 - $add_i123 * $sub_i160);
    HEAPF32[$this$s2 + 65] = $mul140;
    var $add160_pn = $109 * $109 * ($23 + $21) + $27 * $mul136 * $mul136 + $25 * $mul140 * $mul140;
    var $120 = $mul_i109;
    var $119 = $mul1_i111;
    var $118 = $mul140;
    var $117 = $mul136;
  }
  var $117;
  var $118;
  var $119;
  var $120;
  var $add160_pn;
  var $storemerge12 = $100 + $add160_pn;
  HEAPF32[$m_mass$s2] = $storemerge12;
  if ($storemerge12 > 0) {
    var $cond = 1 / $storemerge12;
  } else {
    var $cond = 0;
  }
  var $cond;
  HEAPF32[$m_mass$s2] = $cond;
  var $m_impulse212 = $this + 156 | 0;
  if ((HEAP8[$data + 20 | 0] & 1) << 24 >> 24 == 0) {
    HEAPF32[$m_impulse212 >> 2] = 0;
    var $wD_0 = $61;
    var $wC_0 = $53;
    var $wB_0 = $45;
    var $wA_0 = $37;
    var $131 = $34;
    var $130 = $36;
    var $129 = $42;
    var $128 = $44;
    var $127 = $50;
    var $126 = $52;
    var $125 = $58;
    var $124 = $60;
  } else {
    var $123 = HEAPF32[$m_impulse212 >> 2];
    var $mul171 = $20 * $123;
    var $mul182 = $21 * $123;
    var $mul193 = $22 * $123;
    var $mul203 = $23 * $123;
    var $wD_0 = $61 - $27 * $123 * $117;
    var $wC_0 = $53 - $26 * $123 * $96;
    var $wB_0 = $45 + $25 * $123 * $118;
    var $wA_0 = $37 + $24 * $123 * $97;
    var $131 = $34 + $99 * $mul171;
    var $130 = $36 + $98 * $mul171;
    var $129 = $42 + $120 * $mul182;
    var $128 = $44 + $119 * $mul182;
    var $127 = $50 - $99 * $mul193;
    var $126 = $52 - $98 * $mul193;
    var $125 = $58 - $120 * $mul203;
    var $124 = $60 - $119 * $mul203;
  }
  var $124;
  var $125;
  var $126;
  var $127;
  var $128;
  var $129;
  var $130;
  var $131;
  var $wA_0;
  var $wB_0;
  var $wC_0;
  var $wD_0;
  var $133 = HEAP32[$velocities$s2] + $1 * 12 | 0;
  var $134 = (tempDoubleF32[0] = $131, tempDoubleI32[0]);
  var $135$0 = $134;
  var $136 = (tempDoubleF32[0] = $130, tempDoubleI32[0]);
  var $139$1 = $136 | 0;
  var $st$25$0 = $133 | 0;
  HEAP32[$st$25$0 >> 2] = 0 | $135$0;
  var $st$25$1 = $133 + 4 | 0;
  HEAP32[$st$25$1 >> 2] = $139$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $wA_0;
  var $144 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $145 = (tempDoubleF32[0] = $129, tempDoubleI32[0]);
  var $146$0 = $145;
  var $147 = (tempDoubleF32[0] = $128, tempDoubleI32[0]);
  var $150$1 = $147 | 0;
  var $st$47$0 = $144 | 0;
  HEAP32[$st$47$0 >> 2] = 0 | $146$0;
  var $st$47$1 = $144 + 4 | 0;
  HEAP32[$st$47$1 >> 2] = $150$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $wB_0;
  var $155 = HEAP32[$velocities$s2] + HEAP32[$m_indexC$s2] * 12 | 0;
  var $156 = (tempDoubleF32[0] = $127, tempDoubleI32[0]);
  var $157$0 = $156;
  var $158 = (tempDoubleF32[0] = $126, tempDoubleI32[0]);
  var $161$1 = $158 | 0;
  var $st$69$0 = $155 | 0;
  HEAP32[$st$69$0 >> 2] = 0 | $157$0;
  var $st$69$1 = $155 + 4 | 0;
  HEAP32[$st$69$1 >> 2] = $161$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexC$s2] * 3 | 0)] = $wC_0;
  var $166 = HEAP32[$velocities$s2] + HEAP32[$m_indexD$s2] * 12 | 0;
  var $167 = (tempDoubleF32[0] = $125, tempDoubleI32[0]);
  var $168$0 = $167;
  var $169 = (tempDoubleF32[0] = $124, tempDoubleI32[0]);
  var $172$1 = $169 | 0;
  var $st$91$0 = $166 | 0;
  HEAP32[$st$91$0 >> 2] = 0 | $168$0;
  var $st$91$1 = $166 + 4 | 0;
  HEAP32[$st$91$1 >> 2] = $172$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexD$s2] * 3 | 0)] = $wD_0;
  return;
  return;
}

function __ZN11b2GearJointD1Ev($this) {
  return;
  return;
}

function __ZNK11b2GearJoint10GetAnchorAEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 48 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 92 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 96 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK11b2GearJoint10GetAnchorBEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 52 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 100 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 104 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK11b2GearJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var $0 = HEAPF32[$this + 156 >> 2];
  var $mul_i2 = HEAPF32[$this + 240 >> 2] * $0 * $inv_dt;
  var $mul1_i4 = HEAPF32[$this + 244 >> 2] * $0 * $inv_dt;
  HEAPF32[$agg_result >> 2] = $mul_i2;
  HEAPF32[$agg_result + 4 >> 2] = $mul1_i4;
  return;
  return;
}

function __ZNK11b2GearJoint17GetReactionTorqueEf($this, $inv_dt) {
  return HEAPF32[$this + 156 >> 2] * HEAPF32[$this + 256 >> 2] * $inv_dt;
  return null;
}

function __ZNK11b2GearJoint8GetRatioEv($this) {
  return HEAPF32[$this + 152 >> 2];
  return null;
}

function __ZN11b2GearJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var $m_indexD$s2;
  var $m_indexC$s2;
  var $m_indexB$s2;
  var $1$s2;
  var $positions$s2;
  var $this$s2 = $this >> 2;
  var $m_indexA = $this + 160 | 0;
  var $0 = HEAP32[$m_indexA >> 2];
  var $positions$s2 = ($data + 24 | 0) >> 2;
  var $1 = HEAP32[$positions$s2], $1$s2 = $1 >> 2;
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[$1$s2 + ($0 * 3 | 0) + 2];
  var $m_indexB$s2 = ($this + 164 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[$1$s2 + ($9 * 3 | 0) + 2];
  var $m_indexC$s2 = ($this + 168 | 0) >> 2;
  var $17 = HEAP32[$m_indexC$s2];
  var $18 = $1 + $17 * 12 | 0;
  var $19$1 = HEAP32[$18 + 4 >> 2];
  var $21 = (tempDoubleI32[0] = HEAP32[$18 >> 2], tempDoubleF32[0]);
  var $23 = (tempDoubleI32[0] = $19$1, tempDoubleF32[0]);
  var $24 = HEAPF32[$1$s2 + ($17 * 3 | 0) + 2];
  var $m_indexD$s2 = ($this + 172 | 0) >> 2;
  var $25 = HEAP32[$m_indexD$s2];
  var $26 = $1 + $25 * 12 | 0;
  var $27$1 = HEAP32[$26 + 4 >> 2];
  var $29 = (tempDoubleI32[0] = HEAP32[$26 >> 2], tempDoubleF32[0]);
  var $31 = (tempDoubleI32[0] = $27$1, tempDoubleF32[0]);
  var $32 = HEAPF32[$1$s2 + ($25 * 3 | 0) + 2];
  var $call_i_i = _sinf($8);
  var $call2_i_i = _cosf($8);
  var $call_i_i1 = _sinf($16);
  var $call2_i_i3 = _cosf($16);
  var $call_i_i5 = _sinf($24);
  var $call2_i_i7 = _cosf($24);
  var $call_i_i9 = _sinf($32);
  var $call2_i_i11 = _cosf($32);
  if ((HEAP32[$this$s2 + 19] | 0) == 1) {
    var $34 = HEAPF32[$this$s2 + 56];
    var $35 = HEAPF32[$this$s2 + 58];
    var $mass_0_in = $34 + $35;
    var $coordinateA_0 = $8 - $24 - HEAPF32[$this$s2 + 35];
    var $JwA_0 = 1;
    var $JwC_0 = 1;
    var $54 = 0;
    var $53 = 0;
    var $52 = $34;
    var $51 = $35;
  } else {
    var $37 = HEAPF32[$this$s2 + 31];
    var $38 = HEAPF32[$this$s2 + 32];
    var $sub_i = $call2_i_i7 * $37 - $call_i_i5 * $38;
    var $add_i = $call_i_i5 * $37 + $call2_i_i7 * $38;
    var $sub_i16 = HEAPF32[$this$s2 + 27] - HEAPF32[$this$s2 + 48];
    var $sub3_i = HEAPF32[$this$s2 + 28] - HEAPF32[$this$s2 + 49];
    var $sub_i266 = HEAPF32[$this$s2 + 23] - HEAPF32[$this$s2 + 44];
    var $sub3_i269 = HEAPF32[$this$s2 + 24] - HEAPF32[$this$s2 + 45];
    var $sub_i258 = $call2_i_i * $sub_i266 - $call_i_i * $sub3_i269;
    var $add_i261 = $call_i_i * $sub_i266 + $call2_i_i * $sub3_i269;
    var $sub_i251 = ($call2_i_i7 * $sub_i16 - $call_i_i5 * $sub3_i) * $add_i - ($call_i_i5 * $sub_i16 + $call2_i_i7 * $sub3_i) * $sub_i;
    var $sub_i244 = $sub_i258 * $add_i - $add_i261 * $sub_i;
    var $49 = HEAPF32[$this$s2 + 58];
    var $50 = HEAPF32[$this$s2 + 56];
    var $add_i216 = $sub_i258 + ($5 - $21);
    var $add3_i219 = $add_i261 + ($7 - $23);
    var $mass_0_in = HEAPF32[$this$s2 + 54] + HEAPF32[$this$s2 + 52] + $49 * $sub_i251 * $sub_i251 + $50 * $sub_i244 * $sub_i244;
    var $coordinateA_0 = ($call2_i_i7 * $add_i216 + $call_i_i5 * $add3_i219 - $sub_i16) * $37 + ($add_i216 * -$call_i_i5 + $call2_i_i7 * $add3_i219 - $sub3_i) * $38;
    var $JwA_0 = $sub_i244;
    var $JwC_0 = $sub_i251;
    var $54 = $sub_i;
    var $53 = $add_i;
    var $52 = $50;
    var $51 = $49;
  }
  var $51;
  var $52;
  var $53;
  var $54;
  var $JwC_0;
  var $JwA_0;
  var $coordinateA_0;
  var $mass_0_in;
  if ((HEAP32[$this$s2 + 20] | 0) == 1) {
    var $56 = HEAPF32[$this$s2 + 38];
    var $57 = HEAPF32[$this$s2 + 57];
    var $58 = HEAPF32[$this$s2 + 59];
    var $mul53_pn = $56 * $56 * ($57 + $58);
    var $JwD_0 = $56;
    var $coordinateB_0 = $16 - $32 - HEAPF32[$this$s2 + 36];
    var $JwB_0 = $56;
    var $79 = 0;
    var $78 = 0;
    var $77 = $56;
    var $76 = $57;
    var $75 = $58;
  } else {
    var $60 = HEAPF32[$this$s2 + 33];
    var $61 = HEAPF32[$this$s2 + 34];
    var $sub_i178 = $call2_i_i11 * $60 - $call_i_i9 * $61;
    var $add_i181 = $call_i_i9 * $60 + $call2_i_i11 * $61;
    var $sub_i166 = HEAPF32[$this$s2 + 29] - HEAPF32[$this$s2 + 50];
    var $sub3_i169 = HEAPF32[$this$s2 + 30] - HEAPF32[$this$s2 + 51];
    var $sub_i146 = HEAPF32[$this$s2 + 25] - HEAPF32[$this$s2 + 46];
    var $sub3_i149 = HEAPF32[$this$s2 + 26] - HEAPF32[$this$s2 + 47];
    var $sub_i138 = $call2_i_i3 * $sub_i146 - $call_i_i1 * $sub3_i149;
    var $add_i141 = $call_i_i1 * $sub_i146 + $call2_i_i3 * $sub3_i149;
    var $70 = HEAPF32[$this$s2 + 38];
    var $mul65 = $70 * (($call2_i_i11 * $sub_i166 - $call_i_i9 * $sub3_i169) * $add_i181 - ($call_i_i9 * $sub_i166 + $call2_i_i11 * $sub3_i169) * $sub_i178);
    var $mul68 = $70 * ($sub_i138 * $add_i181 - $add_i141 * $sub_i178);
    var $73 = HEAPF32[$this$s2 + 59];
    var $74 = HEAPF32[$this$s2 + 57];
    var $add_i92 = $sub_i138 + ($13 - $29);
    var $add3_i = $add_i141 + ($15 - $31);
    var $mul53_pn = $70 * $70 * (HEAPF32[$this$s2 + 55] + HEAPF32[$this$s2 + 53]) + $73 * $mul65 * $mul65 + $74 * $mul68 * $mul68;
    var $JwD_0 = $mul65;
    var $coordinateB_0 = ($call2_i_i11 * $add_i92 + $call_i_i9 * $add3_i - $sub_i166) * $60 + ($add_i92 * -$call_i_i9 + $call2_i_i11 * $add3_i - $sub3_i169) * $61;
    var $JwB_0 = $mul68;
    var $79 = $sub_i178 * $70;
    var $78 = $add_i181 * $70;
    var $77 = $70;
    var $76 = $74;
    var $75 = $73;
  }
  var $75;
  var $76;
  var $77;
  var $78;
  var $79;
  var $JwB_0;
  var $coordinateB_0;
  var $JwD_0;
  var $mul53_pn;
  var $mass_1 = $mass_0_in + $mul53_pn;
  if ($mass_1 > 0) {
    var $impulse_0 = -($coordinateA_0 + $77 * $coordinateB_0 - HEAPF32[$this$s2 + 37]) / $mass_1;
  } else {
    var $impulse_0 = 0;
  }
  var $impulse_0;
  var $mul101 = HEAPF32[$this$s2 + 52] * $impulse_0;
  var $add_i54 = $5 + $54 * $mul101;
  var $add4_i57 = $7 + $53 * $mul101;
  var $add105 = $8 + $52 * $impulse_0 * $JwA_0;
  var $mul108 = HEAPF32[$this$s2 + 53] * $impulse_0;
  var $add_i43 = $13 + $79 * $mul108;
  var $add4_i = $15 + $78 * $mul108;
  var $add112 = $16 + $76 * $impulse_0 * $JwB_0;
  var $mul115 = HEAPF32[$this$s2 + 54] * $impulse_0;
  var $sub_i31 = $21 - $54 * $mul115;
  var $sub4_i34 = $23 - $53 * $mul115;
  var $sub119 = $24 - $51 * $impulse_0 * $JwC_0;
  var $mul122 = HEAPF32[$this$s2 + 55] * $impulse_0;
  var $sub_i21 = $29 - $79 * $mul122;
  var $sub4_i = $31 - $78 * $mul122;
  var $sub126 = $32 - $75 * $impulse_0 * $JwD_0;
  var $85 = (tempDoubleF32[0] = $add_i54, tempDoubleI32[0]);
  var $86$0 = $85;
  var $87 = (tempDoubleF32[0] = $add4_i57, tempDoubleI32[0]);
  var $90$0 = 0 | $86$0;
  var $90$1 = $87 | 0;
  var $st$51$0 = $2 | 0;
  HEAP32[$st$51$0 >> 2] = $90$0;
  var $st$51$1 = $2 + 4 | 0;
  HEAP32[$st$51$1 >> 2] = $90$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $add105;
  var $95 = HEAP32[$positions$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $96 = (tempDoubleF32[0] = $add_i43, tempDoubleI32[0]);
  var $97$0 = $96;
  var $98 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
  var $101$0 = 0 | $97$0;
  var $101$1 = $98 | 0;
  var $st$73$0 = $95 | 0;
  HEAP32[$st$73$0 >> 2] = $101$0;
  var $st$73$1 = $95 + 4 | 0;
  HEAP32[$st$73$1 >> 2] = $101$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $add112;
  var $106 = HEAP32[$positions$s2] + HEAP32[$m_indexC$s2] * 12 | 0;
  var $107 = (tempDoubleF32[0] = $sub_i31, tempDoubleI32[0]);
  var $108$0 = $107;
  var $109 = (tempDoubleF32[0] = $sub4_i34, tempDoubleI32[0]);
  var $112$0 = 0 | $108$0;
  var $112$1 = $109 | 0;
  var $st$95$0 = $106 | 0;
  HEAP32[$st$95$0 >> 2] = $112$0;
  var $st$95$1 = $106 + 4 | 0;
  HEAP32[$st$95$1 >> 2] = $112$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexC$s2] * 3 | 0)] = $sub119;
  var $117 = HEAP32[$positions$s2] + HEAP32[$m_indexD$s2] * 12 | 0;
  var $118 = (tempDoubleF32[0] = $sub_i21, tempDoubleI32[0]);
  var $119$0 = $118;
  var $120 = (tempDoubleF32[0] = $sub4_i, tempDoubleI32[0]);
  var $123$0 = 0 | $119$0;
  var $123$1 = $120 | 0;
  var $st$117$0 = $117 | 0;
  HEAP32[$st$117$0 >> 2] = $123$0;
  var $st$117$1 = $117 + 4 | 0;
  HEAP32[$st$117$1 >> 2] = $123$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexD$s2] * 3 | 0)] = $sub126;
  return 1;
  return null;
}

function __ZN11b2GearJoint8SetRatioEf($this, $ratio) {
  var $cmp_i = !isNaN($ratio) && !isNaN(0);
  if (!($cmp_i & $ratio > -Infinity & $ratio < Infinity)) {
    ___assert_func(STRING_TABLE.__str303 | 0, 398, STRING_TABLE.___PRETTY_FUNCTION____ZN11b2GearJoint8SetRatioEf | 0, STRING_TABLE.__str3306 | 0);
  }
  HEAPF32[$this + 152 >> 2] = $ratio;
  return;
  return;
}

function __ZN11b2GearJoint4DumpEv($this) {
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  var $1 = HEAP32[HEAP32[$this$s2 + 12] + 8 >> 2];
  var $3 = HEAP32[HEAP32[$this$s2 + 13] + 8 >> 2];
  var $5 = HEAP32[HEAP32[$this$s2 + 17] + 56 >> 2];
  var $7 = HEAP32[HEAP32[$this$s2 + 18] + 56 >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str4307 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str1415 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $1, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str2416 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $3, tempInt));
  var $conv = HEAP8[$this + 61 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str3417 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str8311 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $5, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str9312 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $7, tempInt));
  var $conv4 = HEAPF32[$this$s2 + 38];
  __Z5b2LogPKcz(STRING_TABLE.__str13366 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv4, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $11 = HEAP32[$this$s2 + 14];
  __Z5b2LogPKcz(STRING_TABLE.__str12426 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $11, tempInt));
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN11b2GearJointD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN7b2JointD1Ev($this) {
  return;
  return;
}

function __ZNK7b2Joint8IsActiveEv($this) {
  if ((HEAP16[HEAP32[$this + 48 >> 2] + 4 >> 1] & 32) << 16 >> 16 == 0) {
    var $6 = 0;
  } else {
    var $6 = (HEAP16[HEAP32[$this + 52 >> 2] + 4 >> 1] & 32) << 16 >> 16 != 0;
  }
  var $6;
  return $6;
  return null;
}

function __ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator($def, $allocator) {
  var $other_i_i44$s2;
  var $call51$s2;
  var $other_i_i28$s2;
  var $call45$s2;
  var $other_i_i10$s2;
  var $call39$s2;
  var $st$58$1$s2;
  var $st$58$0$s2;
  var $st$54$1$s2;
  var $st$54$0$s2;
  var $st$47$1$s2;
  var $st$47$0$s2;
  var $st$43$1$s2;
  var $st$43$0$s2;
  var $other_i_i$s2;
  var $call$s2;
  var $type$s2;
  var $def$s2 = $def >> 2;
  var $type$s2 = ($def | 0) >> 2;
  var $0 = HEAP32[$type$s2];
  if ($0 == 3) {
    var $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 176), $call$s2 = $call >> 2;
    if (($call | 0) == 0) {
      var $45 = 0;
    } else {
      var $1 = $call;
      var $2 = $call;
      HEAP32[$2 >> 2] = __ZTV7b2Joint + 8 | 0;
      var $bodyA_i_i = $def + 8 | 0;
      var $bodyB_i_i = $def + 12 | 0;
      if ((HEAP32[$bodyA_i_i >> 2] | 0) == (HEAP32[$bodyB_i_i >> 2] | 0)) {
        ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
      }
      var $5 = HEAP32[$type$s2];
      HEAP32[$call$s2 + 1] = $5;
      HEAP32[$call$s2 + 2] = 0;
      HEAP32[$call$s2 + 3] = 0;
      var $11 = HEAP32[$bodyA_i_i >> 2];
      HEAP32[$call$s2 + 12] = $11;
      var $14 = HEAP32[$bodyB_i_i >> 2];
      HEAP32[$call$s2 + 13] = $14;
      HEAP32[$call$s2 + 14] = 0;
      var $20 = HEAP8[$def + 16 | 0] & 1;
      HEAP8[$call + 61 | 0] = $20;
      HEAP8[$call + 60 | 0] = 0;
      var $24 = HEAP32[$def$s2 + 1];
      HEAP32[$call$s2 + 16] = $24;
      var $other_i_i$s2 = ($call + 16 | 0) >> 2;
      HEAP32[$other_i_i$s2] = 0;
      HEAP32[$other_i_i$s2 + 1] = 0;
      HEAP32[$other_i_i$s2 + 2] = 0;
      HEAP32[$other_i_i$s2 + 3] = 0;
      HEAP32[$other_i_i$s2 + 4] = 0;
      HEAP32[$other_i_i$s2 + 5] = 0;
      HEAP32[$other_i_i$s2 + 6] = 0;
      HEAP32[$other_i_i$s2 + 7] = 0;
      HEAP32[$2 >> 2] = __ZTV15b2DistanceJoint + 8 | 0;
      var $m_localAnchorB_i = $call + 88 | 0;
      var $27 = $def + 20 | 0;
      var $28 = $call + 80 | 0;
      var $st$43$0 = $27 | 0, $st$43$0$s2 = $st$43$0 >> 2;
      var $29$0 = HEAP32[$st$43$0$s2];
      var $st$43$1 = $27 + 4 | 0, $st$43$1$s2 = $st$43$1 >> 2;
      var $29$1 = HEAP32[$st$43$1$s2];
      var $st$47$0 = $28 | 0, $st$47$0$s2 = $st$47$0 >> 2;
      HEAP32[$st$47$0$s2] = $29$0;
      var $st$47$1 = $28 + 4 | 0, $st$47$1$s2 = $st$47$1 >> 2;
      HEAP32[$st$47$1$s2] = $29$1;
      var $30 = $def + 28 | 0;
      var $31 = $m_localAnchorB_i;
      var $st$54$0 = $30 | 0, $st$54$0$s2 = $st$54$0 >> 2;
      var $32$0 = HEAP32[$st$54$0$s2];
      var $st$54$1 = $30 + 4 | 0, $st$54$1$s2 = $st$54$1 >> 2;
      var $32$1 = HEAP32[$st$54$1$s2];
      var $st$58$0 = $31 | 0, $st$58$0$s2 = $st$58$0 >> 2;
      HEAP32[$st$58$0$s2] = $32$0;
      var $st$58$1 = $31 + 4 | 0, $st$58$1$s2 = $st$58$1 >> 2;
      HEAP32[$st$58$1$s2] = $32$1;
      var $34 = HEAPF32[$def$s2 + 9];
      HEAPF32[$call$s2 + 26] = $34;
      var $37 = HEAPF32[$def$s2 + 10];
      HEAPF32[$call$s2 + 17] = $37;
      var $40 = HEAPF32[$def$s2 + 11];
      HEAPF32[$call$s2 + 18] = $40;
      HEAPF32[$call$s2 + 25] = 0;
      HEAPF32[$call$s2 + 24] = 0;
      HEAPF32[$call$s2 + 19] = 0;
      var $45 = $1;
    }
    var $45;
    var $joint_0 = $45 | 0;
  } else if ($0 == 5) {
    var $call3 = __ZN16b2BlockAllocator8AllocateEi($allocator, 168);
    if (($call3 | 0) == 0) {
      var $50 = 0;
    } else {
      var $47 = $call3;
      var $48 = $call3;
      var $49 = $def;
      __ZN12b2MouseJointC2EPK15b2MouseJointDef($48, $49);
      var $50 = $47;
    }
    var $50;
    var $joint_0 = $50 | 0;
  } else if ($0 == 2) {
    var $call9 = __ZN16b2BlockAllocator8AllocateEi($allocator, 256);
    if (($call9 | 0) == 0) {
      var $55 = 0;
    } else {
      var $52 = $call9;
      var $53 = $call9;
      var $54 = $def;
      __ZN16b2PrismaticJointC2EPK19b2PrismaticJointDef($53, $54);
      var $55 = $52;
    }
    var $55;
    var $joint_0 = $55 | 0;
  } else if ($0 == 1) {
    var $call15 = __ZN16b2BlockAllocator8AllocateEi($allocator, 228);
    if (($call15 | 0) == 0) {
      var $60 = 0;
    } else {
      var $57 = $call15;
      var $58 = $call15;
      var $59 = $def;
      __ZN15b2RevoluteJointC2EPK18b2RevoluteJointDef($58, $59);
      var $60 = $57;
    }
    var $60;
    var $joint_0 = $60 | 0;
  } else if ($0 == 4) {
    var $call21 = __ZN16b2BlockAllocator8AllocateEi($allocator, 196);
    if (($call21 | 0) == 0) {
      var $65 = 0;
    } else {
      var $62 = $call21;
      var $63 = $call21;
      var $64 = $def;
      __ZN13b2PulleyJointC2EPK16b2PulleyJointDef($63, $64);
      var $65 = $62;
    }
    var $65;
    var $joint_0 = $65 | 0;
  } else if ($0 == 6) {
    var $call27 = __ZN16b2BlockAllocator8AllocateEi($allocator, 276);
    if (($call27 | 0) == 0) {
      var $70 = 0;
    } else {
      var $67 = $call27;
      var $68 = $call27;
      var $69 = $def;
      __ZN11b2GearJointC2EPK14b2GearJointDef($68, $69);
      var $70 = $67;
    }
    var $70;
    var $joint_0 = $70 | 0;
  } else if ($0 == 7) {
    var $call33 = __ZN16b2BlockAllocator8AllocateEi($allocator, 224);
    if (($call33 | 0) == 0) {
      var $75 = 0;
    } else {
      var $72 = $call33;
      var $73 = $call33;
      var $74 = $def;
      __ZN12b2WheelJointC2EPK15b2WheelJointDef($73, $74);
      var $75 = $72;
    }
    var $75;
    var $joint_0 = $75 | 0;
  } else if ($0 == 8) {
    var $call39 = __ZN16b2BlockAllocator8AllocateEi($allocator, 208), $call39$s2 = $call39 >> 2;
    if (($call39 | 0) == 0) {
      var $121 = 0;
    } else {
      var $77 = $call39;
      var $78 = $call39;
      HEAP32[$78 >> 2] = __ZTV7b2Joint + 8 | 0;
      var $bodyA_i_i1 = $def + 8 | 0;
      var $bodyB_i_i2 = $def + 12 | 0;
      if ((HEAP32[$bodyA_i_i1 >> 2] | 0) == (HEAP32[$bodyB_i_i2 >> 2] | 0)) {
        ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
      }
      var $81 = HEAP32[$type$s2];
      HEAP32[$call39$s2 + 1] = $81;
      HEAP32[$call39$s2 + 2] = 0;
      HEAP32[$call39$s2 + 3] = 0;
      var $87 = HEAP32[$bodyA_i_i1 >> 2];
      HEAP32[$call39$s2 + 12] = $87;
      var $90 = HEAP32[$bodyB_i_i2 >> 2];
      HEAP32[$call39$s2 + 13] = $90;
      HEAP32[$call39$s2 + 14] = 0;
      var $96 = HEAP8[$def + 16 | 0] & 1;
      HEAP8[$call39 + 61 | 0] = $96;
      HEAP8[$call39 + 60 | 0] = 0;
      var $100 = HEAP32[$def$s2 + 1];
      HEAP32[$call39$s2 + 16] = $100;
      var $other_i_i10$s2 = ($call39 + 16 | 0) >> 2;
      HEAP32[$other_i_i10$s2] = 0;
      HEAP32[$other_i_i10$s2 + 1] = 0;
      HEAP32[$other_i_i10$s2 + 2] = 0;
      HEAP32[$other_i_i10$s2 + 3] = 0;
      HEAP32[$other_i_i10$s2 + 4] = 0;
      HEAP32[$other_i_i10$s2 + 5] = 0;
      HEAP32[$other_i_i10$s2 + 6] = 0;
      HEAP32[$other_i_i10$s2 + 7] = 0;
      HEAP32[$78 >> 2] = __ZTV11b2WeldJoint + 8 | 0;
      var $m_localAnchorB_i12 = $call39 + 88 | 0;
      var $103 = $def + 20 | 0;
      var $104 = $call39 + 80 | 0;
      var $st$43$0 = $103 | 0, $st$43$0$s2 = $st$43$0 >> 2;
      var $105$0 = HEAP32[$st$43$0$s2];
      var $st$43$1 = $103 + 4 | 0, $st$43$1$s2 = $st$43$1 >> 2;
      var $105$1 = HEAP32[$st$43$1$s2];
      var $st$47$0 = $104 | 0, $st$47$0$s2 = $st$47$0 >> 2;
      HEAP32[$st$47$0$s2] = $105$0;
      var $st$47$1 = $104 + 4 | 0, $st$47$1$s2 = $st$47$1 >> 2;
      HEAP32[$st$47$1$s2] = $105$1;
      var $106 = $def + 28 | 0;
      var $107 = $m_localAnchorB_i12;
      var $st$54$0 = $106 | 0, $st$54$0$s2 = $st$54$0 >> 2;
      var $108$0 = HEAP32[$st$54$0$s2];
      var $st$54$1 = $106 + 4 | 0, $st$54$1$s2 = $st$54$1 >> 2;
      var $108$1 = HEAP32[$st$54$1$s2];
      var $st$58$0 = $107 | 0, $st$58$0$s2 = $st$58$0 >> 2;
      HEAP32[$st$58$0$s2] = $108$0;
      var $st$58$1 = $107 + 4 | 0, $st$58$1$s2 = $st$58$1 >> 2;
      HEAP32[$st$58$1$s2] = $108$1;
      var $110 = HEAPF32[$def$s2 + 9];
      HEAPF32[$call39$s2 + 24] = $110;
      var $113 = HEAPF32[$def$s2 + 10];
      HEAPF32[$call39$s2 + 17] = $113;
      var $116 = HEAPF32[$def$s2 + 11];
      HEAPF32[$call39$s2 + 18] = $116;
      HEAPF32[$call39$s2 + 26] = 0;
      HEAPF32[$call39$s2 + 27] = 0;
      HEAPF32[$call39$s2 + 28] = 0;
      var $121 = $77;
    }
    var $121;
    var $joint_0 = $121 | 0;
  } else if ($0 == 9) {
    var $call45 = __ZN16b2BlockAllocator8AllocateEi($allocator, 180), $call45$s2 = $call45 >> 2;
    if (($call45 | 0) == 0) {
      var $164 = 0;
    } else {
      var $123 = $call45;
      var $124 = $call45;
      HEAP32[$124 >> 2] = __ZTV7b2Joint + 8 | 0;
      var $bodyA_i_i19 = $def + 8 | 0;
      var $bodyB_i_i20 = $def + 12 | 0;
      if ((HEAP32[$bodyA_i_i19 >> 2] | 0) == (HEAP32[$bodyB_i_i20 >> 2] | 0)) {
        ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
      }
      var $127 = HEAP32[$type$s2];
      HEAP32[$call45$s2 + 1] = $127;
      HEAP32[$call45$s2 + 2] = 0;
      HEAP32[$call45$s2 + 3] = 0;
      var $133 = HEAP32[$bodyA_i_i19 >> 2];
      HEAP32[$call45$s2 + 12] = $133;
      var $136 = HEAP32[$bodyB_i_i20 >> 2];
      HEAP32[$call45$s2 + 13] = $136;
      HEAP32[$call45$s2 + 14] = 0;
      var $142 = HEAP8[$def + 16 | 0] & 1;
      HEAP8[$call45 + 61 | 0] = $142;
      HEAP8[$call45 + 60 | 0] = 0;
      var $146 = HEAP32[$def$s2 + 1];
      HEAP32[$call45$s2 + 16] = $146;
      var $other_i_i28$s2 = ($call45 + 16 | 0) >> 2;
      HEAP32[$other_i_i28$s2] = 0;
      HEAP32[$other_i_i28$s2 + 1] = 0;
      HEAP32[$other_i_i28$s2 + 2] = 0;
      HEAP32[$other_i_i28$s2 + 3] = 0;
      HEAP32[$other_i_i28$s2 + 4] = 0;
      HEAP32[$other_i_i28$s2 + 5] = 0;
      HEAP32[$other_i_i28$s2 + 6] = 0;
      HEAP32[$other_i_i28$s2 + 7] = 0;
      HEAP32[$124 >> 2] = __ZTV15b2FrictionJoint + 8 | 0;
      var $m_localAnchorB_i30 = $call45 + 76 | 0;
      var $149 = $def + 20 | 0;
      var $150 = $call45 + 68 | 0;
      var $st$43$0 = $149 | 0, $st$43$0$s2 = $st$43$0 >> 2;
      var $151$0 = HEAP32[$st$43$0$s2];
      var $st$43$1 = $149 + 4 | 0, $st$43$1$s2 = $st$43$1 >> 2;
      var $151$1 = HEAP32[$st$43$1$s2];
      var $st$47$0 = $150 | 0, $st$47$0$s2 = $st$47$0 >> 2;
      HEAP32[$st$47$0$s2] = $151$0;
      var $st$47$1 = $150 + 4 | 0, $st$47$1$s2 = $st$47$1 >> 2;
      HEAP32[$st$47$1$s2] = $151$1;
      var $152 = $def + 28 | 0;
      var $153 = $m_localAnchorB_i30;
      var $st$54$0 = $152 | 0, $st$54$0$s2 = $st$54$0 >> 2;
      var $154$0 = HEAP32[$st$54$0$s2];
      var $st$54$1 = $152 + 4 | 0, $st$54$1$s2 = $st$54$1 >> 2;
      var $154$1 = HEAP32[$st$54$1$s2];
      var $st$58$0 = $153 | 0, $st$58$0$s2 = $st$58$0 >> 2;
      HEAP32[$st$58$0$s2] = $154$0;
      var $st$58$1 = $153 + 4 | 0, $st$58$1$s2 = $st$58$1 >> 2;
      HEAP32[$st$58$1$s2] = $154$1;
      HEAPF32[$call45$s2 + 21] = 0;
      HEAPF32[$call45$s2 + 22] = 0;
      HEAPF32[$call45$s2 + 23] = 0;
      var $159 = HEAPF32[$def$s2 + 9];
      HEAPF32[$call45$s2 + 24] = $159;
      var $162 = HEAPF32[$def$s2 + 10];
      HEAPF32[$call45$s2 + 25] = $162;
      var $164 = $123;
    }
    var $164;
    var $joint_0 = $164 | 0;
  } else if ($0 == 10) {
    var $call51 = __ZN16b2BlockAllocator8AllocateEi($allocator, 168), $call51$s2 = $call51 >> 2;
    if (($call51 | 0) == 0) {
      var $202 = 0;
    } else {
      var $166 = $call51;
      var $167 = $call51;
      HEAP32[$167 >> 2] = __ZTV7b2Joint + 8 | 0;
      var $168 = $def + 8 | 0;
      var $170 = $def + 12 | 0;
      if ((HEAP32[$168 >> 2] | 0) == (HEAP32[$170 >> 2] | 0)) {
        ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
      }
      var $172 = HEAP32[$type$s2];
      HEAP32[$call51$s2 + 1] = $172;
      HEAP32[$call51$s2 + 2] = 0;
      HEAP32[$call51$s2 + 3] = 0;
      var $176 = HEAP32[$168 >> 2];
      HEAP32[$call51$s2 + 12] = $176;
      var $178 = HEAP32[$170 >> 2];
      HEAP32[$call51$s2 + 13] = $178;
      HEAP32[$call51$s2 + 14] = 0;
      var $183 = HEAP8[$def + 16 | 0] & 1;
      HEAP8[$call51 + 61 | 0] = $183;
      HEAP8[$call51 + 60 | 0] = 0;
      var $187 = HEAP32[$def$s2 + 1];
      HEAP32[$call51$s2 + 16] = $187;
      var $other_i_i44$s2 = ($call51 + 16 | 0) >> 2;
      HEAP32[$other_i_i44$s2] = 0;
      HEAP32[$other_i_i44$s2 + 1] = 0;
      HEAP32[$other_i_i44$s2 + 2] = 0;
      HEAP32[$other_i_i44$s2 + 3] = 0;
      HEAP32[$other_i_i44$s2 + 4] = 0;
      HEAP32[$other_i_i44$s2 + 5] = 0;
      HEAP32[$other_i_i44$s2 + 6] = 0;
      HEAP32[$other_i_i44$s2 + 7] = 0;
      HEAP32[$167 >> 2] = __ZTV11b2RopeJoint + 8 | 0;
      var $m_localAnchorB_i46 = $call51 + 76 | 0;
      var $189 = $def + 20 | 0;
      var $190 = $call51 + 68 | 0;
      var $191$0 = HEAP32[$189 >> 2];
      var $191$1 = HEAP32[$189 + 4 >> 2];
      HEAP32[$190 >> 2] = $191$0;
      HEAP32[$190 + 4 >> 2] = $191$1;
      var $192 = $def + 28 | 0;
      var $193 = $m_localAnchorB_i46;
      var $194$0 = HEAP32[$192 >> 2];
      var $194$1 = HEAP32[$192 + 4 >> 2];
      HEAP32[$193 >> 2] = $194$0;
      HEAP32[$193 + 4 >> 2] = $194$1;
      var $196 = HEAPF32[$def$s2 + 9];
      HEAPF32[$call51$s2 + 21] = $196;
      HEAPF32[$call51$s2 + 40] = 0;
      HEAPF32[$call51$s2 + 23] = 0;
      HEAP32[$call51$s2 + 41] = 0;
      HEAPF32[$call51$s2 + 22] = 0;
      var $202 = $166;
    }
    var $202;
    var $joint_0 = $202 | 0;
  } else {
    ___assert_func(STRING_TABLE.__str315 | 0, 113, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator | 0, STRING_TABLE.__str1316 | 0);
    var $joint_0 = 0;
  }
  var $joint_0;
  return $joint_0;
  return null;
}

function __ZN7b2Joint7DestroyEPS_P16b2BlockAllocator($joint, $allocator) {
  var $joint$s2 = $joint >> 2;
  var $1 = HEAP32[HEAP32[$joint$s2] + 20 >> 2];
  FUNCTION_TABLE[$1]($joint);
  var $2 = HEAP32[$joint$s2 + 1];
  if ($2 == 3) {
    var $3 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 176 | 0];
    var $conv_i = $3 & 255;
    if (($3 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $4 = $joint;
    var $arrayidx11_i = ($conv_i << 2) + $allocator + 12 | 0;
    var $_c63 = HEAP32[$arrayidx11_i >> 2];
    HEAP32[$joint$s2] = $_c63;
    HEAP32[$arrayidx11_i >> 2] = $4;
  } else if ($2 == 5) {
    var $7 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 168 | 0];
    var $conv_i1 = $7 & 255;
    if (($7 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $8 = $joint;
    var $arrayidx11_i4 = ($conv_i1 << 2) + $allocator + 12 | 0;
    var $_c62 = HEAP32[$arrayidx11_i4 >> 2];
    HEAP32[$joint$s2] = $_c62;
    HEAP32[$arrayidx11_i4 >> 2] = $8;
  } else if ($2 == 2) {
    var $11 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 256 | 0];
    var $conv_i7 = $11 & 255;
    if (($11 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $12 = $joint;
    var $arrayidx11_i10 = ($conv_i7 << 2) + $allocator + 12 | 0;
    var $_c61 = HEAP32[$arrayidx11_i10 >> 2];
    HEAP32[$joint$s2] = $_c61;
    HEAP32[$arrayidx11_i10 >> 2] = $12;
  } else if ($2 == 1) {
    var $15 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 228 | 0];
    var $conv_i13 = $15 & 255;
    if (($15 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $16 = $joint;
    var $arrayidx11_i16 = ($conv_i13 << 2) + $allocator + 12 | 0;
    var $_c60 = HEAP32[$arrayidx11_i16 >> 2];
    HEAP32[$joint$s2] = $_c60;
    HEAP32[$arrayidx11_i16 >> 2] = $16;
  } else if ($2 == 4) {
    var $19 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 196 | 0];
    var $conv_i19 = $19 & 255;
    if (($19 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $20 = $joint;
    var $arrayidx11_i22 = ($conv_i19 << 2) + $allocator + 12 | 0;
    var $_c59 = HEAP32[$arrayidx11_i22 >> 2];
    HEAP32[$joint$s2] = $_c59;
    HEAP32[$arrayidx11_i22 >> 2] = $20;
  } else if ($2 == 6) {
    var $23 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 276 | 0];
    var $conv_i25 = $23 & 255;
    if (($23 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $24 = $joint;
    var $arrayidx11_i28 = ($conv_i25 << 2) + $allocator + 12 | 0;
    var $_c58 = HEAP32[$arrayidx11_i28 >> 2];
    HEAP32[$joint$s2] = $_c58;
    HEAP32[$arrayidx11_i28 >> 2] = $24;
  } else if ($2 == 7) {
    var $27 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 224 | 0];
    var $conv_i31 = $27 & 255;
    if (($27 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $28 = $joint;
    var $arrayidx11_i34 = ($conv_i31 << 2) + $allocator + 12 | 0;
    var $_c57 = HEAP32[$arrayidx11_i34 >> 2];
    HEAP32[$joint$s2] = $_c57;
    HEAP32[$arrayidx11_i34 >> 2] = $28;
  } else if ($2 == 8) {
    var $31 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 208 | 0];
    var $conv_i37 = $31 & 255;
    if (($31 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $32 = $joint;
    var $arrayidx11_i40 = ($conv_i37 << 2) + $allocator + 12 | 0;
    var $_c56 = HEAP32[$arrayidx11_i40 >> 2];
    HEAP32[$joint$s2] = $_c56;
    HEAP32[$arrayidx11_i40 >> 2] = $32;
  } else if ($2 == 9) {
    var $35 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 180 | 0];
    var $conv_i43 = $35 & 255;
    if (($35 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $36 = $joint;
    var $arrayidx11_i46 = ($conv_i43 << 2) + $allocator + 12 | 0;
    var $_c55 = HEAP32[$arrayidx11_i46 >> 2];
    HEAP32[$joint$s2] = $_c55;
    HEAP32[$arrayidx11_i46 >> 2] = $36;
  } else if ($2 == 10) {
    var $39 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + 168 | 0];
    var $conv_i49 = $39 & 255;
    if (($39 & 255) >= 14) {
      ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
    }
    var $40 = $joint;
    var $arrayidx11_i52 = ($conv_i49 << 2) + $allocator + 12 | 0;
    var $_c = HEAP32[$arrayidx11_i52 >> 2];
    HEAP32[$joint$s2] = $_c;
    HEAP32[$arrayidx11_i52 >> 2] = $40;
  } else {
    ___assert_func(STRING_TABLE.__str315 | 0, 166, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Joint7DestroyEPS_P16b2BlockAllocator | 0, STRING_TABLE.__str1316 | 0);
  }
  return;
  return;
}

function __ZN7b2JointC2EPK10b2JointDef($this, $def) {
  var $9$s2;
  var $this$s2 = $this >> 2;
  HEAP32[$this$s2] = __ZTV7b2Joint + 8 | 0;
  var $bodyA = $def + 8 | 0;
  var $bodyB = $def + 12 | 0;
  if ((HEAP32[$bodyA >> 2] | 0) == (HEAP32[$bodyB >> 2] | 0)) {
    ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
  }
  var $3 = HEAP32[$def >> 2];
  HEAP32[$this$s2 + 1] = $3;
  HEAP32[$this$s2 + 2] = 0;
  HEAP32[$this$s2 + 3] = 0;
  var $4 = HEAP32[$bodyA >> 2];
  HEAP32[$this$s2 + 12] = $4;
  var $5 = HEAP32[$bodyB >> 2];
  HEAP32[$this$s2 + 13] = $5;
  HEAP32[$this$s2 + 14] = 0;
  var $7 = HEAP8[$def + 16 | 0] & 1;
  HEAP8[$this + 61 | 0] = $7;
  HEAP8[$this + 60 | 0] = 0;
  var $8 = HEAP32[$def + 4 >> 2];
  HEAP32[$this$s2 + 16] = $8;
  var $9$s2 = ($this + 16 | 0) >> 2;
  HEAP32[$9$s2] = 0;
  HEAP32[$9$s2 + 1] = 0;
  HEAP32[$9$s2 + 2] = 0;
  HEAP32[$9$s2 + 3] = 0;
  HEAP32[$9$s2 + 4] = 0;
  HEAP32[$9$s2 + 5] = 0;
  HEAP32[$9$s2 + 6] = 0;
  HEAP32[$9$s2 + 7] = 0;
  return;
  return;
}

function __ZN7b2Joint4DumpEv($this) {
  var __stackBase__ = STACKTOP;
  __Z5b2LogPKcz(STRING_TABLE.__str3318 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN7b2JointD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN12b2MouseJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  return 1;
  return null;
}

function __ZN12b2MouseJointD1Ev($this) {
  return;
  return;
}

function __ZNK12b2MouseJoint17GetReactionTorqueEf($this, $inv_dt) {
  return 0;
  return null;
}

function __ZN12b2MouseJoint9SetTargetERK6b2Vec2($this, $target) {
  var $0 = HEAP32[$this + 52 >> 2];
  var $1 = $0 + 4 | 0;
  var $2 = HEAP16[$1 >> 1];
  if (($2 & 2) << 16 >> 16 == 0) {
    var $or_i = $2 | 2;
    HEAP16[$1 >> 1] = $or_i;
    HEAPF32[$0 + 144 >> 2] = 0;
  }
  var $4 = $target;
  var $5 = $this + 76 | 0;
  var $6$0 = HEAP32[$4 >> 2];
  var $6$1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 >> 2] = $6$0;
  HEAP32[$5 + 4 >> 2] = $6$1;
  return;
  return;
}

function __ZNK12b2MouseJoint9GetTargetEv($this) {
  return $this + 76 | 0;
  return null;
}

function __ZN12b2MouseJoint11SetMaxForceEf($this, $force) {
  HEAPF32[$this + 104 >> 2] = $force;
  return;
  return;
}

function __ZNK12b2MouseJoint11GetMaxForceEv($this) {
  return HEAPF32[$this + 104 >> 2];
  return null;
}

function __ZN12b2MouseJoint12SetFrequencyEf($this, $hz) {
  HEAPF32[$this + 84 >> 2] = $hz;
  return;
  return;
}

function __ZNK12b2MouseJoint12GetFrequencyEv($this) {
  return HEAPF32[$this + 84 >> 2];
  return null;
}

function __ZN12b2MouseJoint15SetDampingRatioEf($this, $ratio) {
  HEAPF32[$this + 88 >> 2] = $ratio;
  return;
  return;
}

function __ZNK12b2MouseJoint15GetDampingRatioEv($this) {
  return HEAPF32[$this + 88 >> 2];
  return null;
}

function __ZNK12b2MouseJoint10GetAnchorAEv($agg_result, $this) {
  var $0 = $this + 76 | 0;
  var $1 = $agg_result;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function __ZNK12b2MouseJoint10GetAnchorBEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 52 >> 2] >> 2;
  var $2 = HEAPF32[$0$s2 + 6];
  var $3 = HEAPF32[$this + 68 >> 2];
  var $5 = HEAPF32[$0$s2 + 5];
  var $6 = HEAPF32[$this + 72 >> 2];
  var $add_i_i = $2 * $3 - $5 * $6 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $5 * $3 + $2 * $6 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK12b2MouseJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var $mul_i = HEAPF32[$this + 96 >> 2] * $inv_dt;
  var $mul1_i = HEAPF32[$this + 100 >> 2] * $inv_dt;
  HEAPF32[$agg_result >> 2] = $mul_i;
  HEAPF32[$agg_result + 4 >> 2] = $mul1_i;
  return;
  return;
}

function __ZN19b2PrismaticJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($this, $bA, $bB, $anchor, $axis) {
  var $bB$s2 = $bB >> 2;
  HEAP32[$this + 8 >> 2] = $bA;
  HEAP32[$this + 12 >> 2] = $bB;
  var $x_i_i = $anchor | 0;
  var $sub_i_i = HEAPF32[$x_i_i >> 2] - HEAPF32[$bA + 12 >> 2];
  var $y_i_i = $anchor + 4 | 0;
  var $sub4_i_i = HEAPF32[$y_i_i >> 2] - HEAPF32[$bA + 16 >> 2];
  var $c_i_i = $bA + 24 | 0;
  var $4 = HEAPF32[$c_i_i >> 2];
  var $s_i_i = $bA + 20 | 0;
  var $5 = HEAPF32[$s_i_i >> 2];
  var $add16_i_i = $sub_i_i * -$5 + $4 * $sub4_i_i;
  var $6 = $this + 20 | 0;
  var $7 = (tempDoubleF32[0] = $4 * $sub_i_i + $5 * $sub4_i_i, tempDoubleI32[0]);
  var $8$0 = $7;
  var $9 = (tempDoubleF32[0] = $add16_i_i, tempDoubleI32[0]);
  var $12$1 = $9 | 0;
  HEAP32[$6 >> 2] = 0 | $8$0;
  HEAP32[$6 + 4 >> 2] = $12$1;
  var $sub_i_i14 = HEAPF32[$x_i_i >> 2] - HEAPF32[$bB$s2 + 3];
  var $sub4_i_i17 = HEAPF32[$y_i_i >> 2] - HEAPF32[$bB$s2 + 4];
  var $17 = HEAPF32[$bB$s2 + 6];
  var $18 = HEAPF32[$bB$s2 + 5];
  var $add16_i_i26 = $sub_i_i14 * -$18 + $17 * $sub4_i_i17;
  var $19 = $this + 28 | 0;
  var $20 = (tempDoubleF32[0] = $17 * $sub_i_i14 + $18 * $sub4_i_i17, tempDoubleI32[0]);
  var $21$0 = $20;
  var $22 = (tempDoubleF32[0] = $add16_i_i26, tempDoubleI32[0]);
  var $25$1 = $22 | 0;
  HEAP32[$19 >> 2] = 0 | $21$0;
  HEAP32[$19 + 4 >> 2] = $25$1;
  var $26 = HEAPF32[$c_i_i >> 2];
  var $27 = HEAPF32[$axis >> 2];
  var $28 = HEAPF32[$s_i_i >> 2];
  var $29 = HEAPF32[$axis + 4 >> 2];
  var $add8_i_i = $27 * -$28 + $26 * $29;
  var $30 = $this + 36 | 0;
  var $31 = (tempDoubleF32[0] = $26 * $27 + $28 * $29, tempDoubleI32[0]);
  var $32$0 = $31;
  var $33 = (tempDoubleF32[0] = $add8_i_i, tempDoubleI32[0]);
  var $36$1 = $33 | 0;
  HEAP32[$30 >> 2] = 0 | $32$0;
  HEAP32[$30 + 4 >> 2] = $36$1;
  var $sub = HEAPF32[$bB$s2 + 14] - HEAPF32[$bA + 56 >> 2];
  HEAPF32[$this + 44 >> 2] = $sub;
  return;
  return;
}

function __ZN12b2MouseJointC2EPK15b2MouseJointDef($this, $def) {
  var $18$s2;
  var $9$s2;
  var $this$s2 = $this >> 2;
  var __label__;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV7b2Joint + 8 | 0;
  var $bodyA_i = $def + 8 | 0;
  var $bodyB_i = $def + 12 | 0;
  if ((HEAP32[$bodyA_i >> 2] | 0) == (HEAP32[$bodyB_i >> 2] | 0)) {
    ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
  }
  var $3 = HEAP32[$def >> 2];
  HEAP32[$this$s2 + 1] = $3;
  HEAP32[$this$s2 + 2] = 0;
  HEAP32[$this$s2 + 3] = 0;
  var $4 = HEAP32[$bodyA_i >> 2];
  HEAP32[$this$s2 + 12] = $4;
  var $5 = HEAP32[$bodyB_i >> 2];
  var $m_bodyB_i = $this + 52 | 0;
  HEAP32[$m_bodyB_i >> 2] = $5;
  HEAP32[$this$s2 + 14] = 0;
  var $7 = HEAP8[$def + 16 | 0] & 1;
  HEAP8[$this + 61 | 0] = $7;
  HEAP8[$this + 60 | 0] = 0;
  var $8 = HEAP32[$def + 4 >> 2];
  HEAP32[$this$s2 + 16] = $8;
  var $9$s2 = ($this + 16 | 0) >> 2;
  HEAP32[$9$s2] = 0;
  HEAP32[$9$s2 + 1] = 0;
  HEAP32[$9$s2 + 2] = 0;
  HEAP32[$9$s2 + 3] = 0;
  HEAP32[$9$s2 + 4] = 0;
  HEAP32[$9$s2 + 5] = 0;
  HEAP32[$9$s2 + 6] = 0;
  HEAP32[$9$s2 + 7] = 0;
  HEAP32[$0 >> 2] = __ZTV12b2MouseJoint + 8 | 0;
  var $m_localAnchorB = $this + 68 | 0;
  var $m_targetA = $this + 76 | 0;
  var $target = $def + 20 | 0;
  var $10 = HEAPF32[$target >> 2];
  var $cmp_i_i = !isNaN($10) && !isNaN(0);
  var $or_cond_i19 = $cmp_i_i & $10 > -Infinity & $10 < Infinity;
  do {
    if ($or_cond_i19) {
      var $11 = HEAPF32[$def + 24 >> 2];
      var $cmp_i1_i = !isNaN($11) && !isNaN(0);
      if ($cmp_i1_i & $11 > -Infinity & $11 < Infinity) {
        __label__ = 5;
        break;
      }
      __label__ = 4;
      break;
    } else {
      __label__ = 4;
    }
  } while (0);
  if (__label__ == 4) {
    ___assert_func(STRING_TABLE.__str325 | 0, 34, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJointC2EPK15b2MouseJointDef | 0, STRING_TABLE.__str1326 | 0);
  }
  var $maxForce = $def + 28 | 0;
  var $12 = HEAPF32[$maxForce >> 2];
  var $cmp_i11 = !isNaN($12) && !isNaN(0);
  if ($12 < 0 | $cmp_i11 & $12 > -Infinity & $12 < Infinity ^ 1) {
    ___assert_func(STRING_TABLE.__str325 | 0, 35, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJointC2EPK15b2MouseJointDef | 0, STRING_TABLE.__str2327 | 0);
  }
  var $frequencyHz = $def + 32 | 0;
  var $13 = HEAPF32[$frequencyHz >> 2];
  var $cmp_i4 = !isNaN($13) && !isNaN(0);
  if ($13 < 0 | $cmp_i4 & $13 > -Infinity & $13 < Infinity ^ 1) {
    ___assert_func(STRING_TABLE.__str325 | 0, 36, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJointC2EPK15b2MouseJointDef | 0, STRING_TABLE.__str3328 | 0);
  }
  var $dampingRatio = $def + 36 | 0;
  var $14 = HEAPF32[$dampingRatio >> 2];
  var $cmp_i3 = !isNaN($14) && !isNaN(0);
  if ($14 < 0 | $cmp_i3 & $14 > -Infinity & $14 < Infinity ^ 1) {
    ___assert_func(STRING_TABLE.__str325 | 0, 37, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJointC2EPK15b2MouseJointDef | 0, STRING_TABLE.__str4329 | 0);
  }
  var $15 = $target;
  var $16 = $m_targetA;
  var $17$0 = HEAPU32[$15 >> 2];
  var $17$1 = HEAPU32[$15 + 4 >> 2];
  HEAP32[$16 >> 2] = $17$0;
  HEAP32[$16 + 4 >> 2] = $17$1;
  var $18$s2 = HEAPU32[$m_bodyB_i >> 2] >> 2;
  var $bitcast = (tempDoubleI32[0] = $17$0, tempDoubleF32[0]);
  var $sub_i = $bitcast - HEAPF32[$18$s2 + 3];
  var $22 = (tempDoubleI32[0] = $17$1, tempDoubleF32[0]);
  var $sub4_i = $22 - HEAPF32[$18$s2 + 4];
  var $24 = HEAPF32[$18$s2 + 6];
  var $25 = HEAPF32[$18$s2 + 5];
  var $add_i = $24 * $sub_i + $25 * $sub4_i;
  var $add16_i = $sub_i * -$25 + $24 * $sub4_i;
  var $26 = $m_localAnchorB;
  var $27 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $28$0 = $27;
  var $29 = (tempDoubleF32[0] = $add16_i, tempDoubleI32[0]);
  var $32$1 = $29 | 0;
  HEAP32[$26 >> 2] = 0 | $28$0;
  HEAP32[$26 + 4 >> 2] = $32$1;
  var $33 = HEAPF32[$maxForce >> 2];
  HEAPF32[$this$s2 + 26] = $33;
  HEAPF32[$this$s2 + 24] = 0;
  HEAPF32[$this$s2 + 25] = 0;
  var $34 = HEAPF32[$frequencyHz >> 2];
  HEAPF32[$this$s2 + 21] = $34;
  var $35 = HEAPF32[$dampingRatio >> 2];
  HEAPF32[$this$s2 + 22] = $35;
  HEAPF32[$this$s2 + 23] = 0;
  HEAPF32[$this$s2 + 27] = 0;
  return;
  return;
}

function __ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var $velocities$s2;
  var $m_indexB$s2;
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $0 = HEAP32[$this$s2 + 13], $0$s2 = $0 >> 2;
  var $1 = HEAP32[$0$s2 + 2];
  var $m_indexB$s2 = ($this + 116 | 0) >> 2;
  HEAP32[$m_indexB$s2] = $1;
  var $m_localCenterB = $this + 128 | 0;
  var $2 = $0 + 28 | 0;
  var $3 = $m_localCenterB;
  var $4$0 = HEAP32[$2 >> 2];
  var $4$1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 >> 2] = $4$0;
  HEAP32[$3 + 4 >> 2] = $4$1;
  var $5 = HEAPF32[$0$s2 + 30];
  var $m_invMassB = $this + 136 | 0;
  HEAPF32[$m_invMassB >> 2] = $5;
  var $6 = HEAPF32[$0$s2 + 32];
  var $m_invIB = $this + 140 | 0;
  HEAPF32[$m_invIB >> 2] = $6;
  var $7 = HEAP32[$data + 24 >> 2];
  var $8 = $7 + $1 * 12 | 0;
  var $9$1 = HEAP32[$8 + 4 >> 2];
  var $11 = (tempDoubleI32[0] = HEAP32[$8 >> 2], tempDoubleF32[0]);
  var $13 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
  var $14 = HEAPF32[($7 + 8 >> 2) + ($1 * 3 | 0)];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $15 = HEAP32[$velocities$s2];
  var $16 = $15 + $1 * 12 | 0;
  var $17$1 = HEAP32[$16 + 4 >> 2];
  var $19 = (tempDoubleI32[0] = HEAP32[$16 >> 2], tempDoubleF32[0]);
  var $21 = (tempDoubleI32[0] = $17$1, tempDoubleF32[0]);
  var $22 = HEAPF32[($15 + 8 >> 2) + ($1 * 3 | 0)];
  var $call_i_i = _sinf($14);
  var $call2_i_i = _cosf($14);
  var $23 = HEAPF32[$0$s2 + 29];
  var $mul = HEAPF32[$this$s2 + 21] * 6.2831854820251465;
  var $26 = HEAPF32[$data >> 2];
  var $mul20 = $26 * $23 * $mul * $mul;
  var $add = $23 * 2 * HEAPF32[$this$s2 + 22] * $mul + $mul20;
  if ($add <= 1.1920928955078125e-7) {
    ___assert_func(STRING_TABLE.__str325 | 0, 125, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData | 0, STRING_TABLE.__str5330 | 0);
  }
  var $mul23 = $26 * $add;
  if ($mul23 != 0) {
    var $storemerge = 1 / $mul23;
  } else {
    var $storemerge = $mul23;
  }
  var $storemerge;
  HEAPF32[$this$s2 + 27] = $storemerge;
  var $mul30 = $mul20 * $storemerge;
  HEAPF32[$this$s2 + 23] = $mul30;
  var $sub_i = HEAPF32[$this$s2 + 17] - HEAPF32[$m_localCenterB >> 2];
  var $sub3_i = HEAPF32[$this$s2 + 18] - HEAPF32[$this$s2 + 33];
  var $sub_i45 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i47 = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $31 = $this + 120 | 0;
  var $32 = (tempDoubleF32[0] = $sub_i45, tempDoubleI32[0]);
  var $33$0 = $32;
  var $34 = (tempDoubleF32[0] = $add_i47, tempDoubleI32[0]);
  var $37$0 = 0 | $33$0;
  var $37$1 = $34 | 0;
  var $st$33$0 = $31 | 0;
  HEAP32[$st$33$0 >> 2] = $37$0;
  var $st$33$1 = $31 + 4 | 0;
  HEAP32[$st$33$1 >> 2] = $37$1;
  var $38 = HEAPF32[$m_invMassB >> 2];
  var $39 = HEAPF32[$m_invIB >> 2];
  var $add42 = $38 + $39 * $add_i47 * $add_i47 + $storemerge;
  var $mul49 = $sub_i45 * -$39 * $add_i47;
  var $add65 = $38 + $39 * $sub_i45 * $sub_i45 + $storemerge;
  var $sub_i40 = $add42 * $add65 - $mul49 * $mul49;
  if ($sub_i40 != 0) {
    var $det_0_i = 1 / $sub_i40;
  } else {
    var $det_0_i = $sub_i40;
  }
  var $det_0_i;
  var $mul7_i = $det_0_i * $add65;
  var $mul11_i = $mul49 * -$det_0_i;
  var $mul18_i = $det_0_i * $add42;
  HEAPF32[$this$s2 + 36] = $mul7_i;
  HEAPF32[$this$s2 + 37] = $mul11_i;
  HEAPF32[$this$s2 + 38] = $mul11_i;
  HEAPF32[$this$s2 + 39] = $mul18_i;
  var $m_C = $this + 160 | 0;
  var $sub_i23 = $11 + $sub_i45 - HEAPF32[$this$s2 + 19];
  var $sub3_i26 = $13 + $add_i47 - HEAPF32[$this$s2 + 20];
  var $42 = $m_C;
  var $43 = (tempDoubleF32[0] = $sub_i23, tempDoubleI32[0]);
  var $44$0 = $43;
  var $45 = (tempDoubleF32[0] = $sub3_i26, tempDoubleI32[0]);
  var $48$0 = 0 | $44$0;
  var $48$1 = $45 | 0;
  var $st$33$0 = $42 | 0;
  HEAP32[$st$33$0 >> 2] = $48$0;
  var $st$33$1 = $42 + 4 | 0;
  HEAP32[$st$33$1 >> 2] = $48$1;
  var $mul_i18 = $sub_i23 * $mul30;
  HEAPF32[$m_C >> 2] = $mul_i18;
  var $mul2_i20 = $sub3_i26 * $mul30;
  HEAPF32[$this$s2 + 41] = $mul2_i20;
  var $mul74 = $22 * .9800000190734863;
  var $m_impulse = $this + 96 | 0;
  if ((HEAP8[$data + 20 | 0] & 1) << 24 >> 24 == 0) {
    HEAPF32[$m_impulse >> 2] = 0;
    HEAPF32[$this$s2 + 25] = 0;
    var $wB_0 = $mul74;
    var $55 = $19;
    var $54 = $21;
  } else {
    var $51 = HEAPF32[$data + 8 >> 2];
    var $x_i14 = $m_impulse | 0;
    var $mul_i15 = HEAPF32[$x_i14 >> 2] * $51;
    HEAPF32[$x_i14 >> 2] = $mul_i15;
    var $y_i16 = $this + 100 | 0;
    var $mul2_i = HEAPF32[$y_i16 >> 2] * $51;
    HEAPF32[$y_i16 >> 2] = $mul2_i;
    var $wB_0 = $mul74 + $39 * ($sub_i45 * $mul2_i - $add_i47 * $mul_i15);
    var $55 = $19 + $mul_i15 * $38;
    var $54 = $21 + $mul2_i * $38;
  }
  var $54;
  var $55;
  var $wB_0;
  var $58 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $59 = (tempDoubleF32[0] = $55, tempDoubleI32[0]);
  var $60$0 = $59;
  var $61 = (tempDoubleF32[0] = $54, tempDoubleI32[0]);
  var $64$1 = $61 | 0;
  var $st$17$0 = $58 | 0;
  HEAP32[$st$17$0 >> 2] = 0 | $60$0;
  var $st$17$1 = $58 + 4 | 0;
  HEAP32[$st$17$1 >> 2] = $64$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $wB_0;
  return;
  return;
}

function __ZN12b2MouseJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var $y_i66$s2;
  var $x_i64$s2;
  var $velocities$s2;
  var $this$s2 = $this >> 2;
  var $m_indexB = $this + 116 | 0;
  var $0 = HEAP32[$m_indexB >> 2];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $1 = HEAP32[$velocities$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $9 = HEAPF32[$this$s2 + 31];
  var $10 = HEAPF32[$this$s2 + 30];
  var $13 = HEAPF32[$this$s2 + 27];
  var $m_impulse = $this + 96 | 0;
  var $x_i64$s2 = ($m_impulse | 0) >> 2;
  var $14 = HEAPF32[$x_i64$s2];
  var $y_i66$s2 = ($this + 100 | 0) >> 2;
  var $15 = HEAPF32[$y_i66$s2];
  var $sub_i54 = -($5 + $9 * -$8 + HEAPF32[$this$s2 + 40] + $14 * $13);
  var $sub2_i = -($7 + $10 * $8 + HEAPF32[$this$s2 + 41] + $15 * $13);
  var $add_i50 = HEAPF32[$this$s2 + 36] * $sub_i54 + HEAPF32[$this$s2 + 38] * $sub2_i;
  var $add12_i = HEAPF32[$this$s2 + 37] * $sub_i54 + HEAPF32[$this$s2 + 39] * $sub2_i;
  var $20 = $m_impulse;
  var $21$1 = HEAP32[$20 + 4 >> 2];
  var $23 = (tempDoubleI32[0] = HEAP32[$20 >> 2], tempDoubleF32[0]);
  var $25 = (tempDoubleI32[0] = $21$1, tempDoubleF32[0]);
  var $add_i40 = $14 + $add_i50;
  HEAPF32[$x_i64$s2] = $add_i40;
  var $add4_i43 = $15 + $add12_i;
  HEAPF32[$y_i66$s2] = $add4_i43;
  var $mul = HEAPF32[$data >> 2] * HEAPF32[$this$s2 + 26];
  var $add_i37 = $add_i40 * $add_i40 + $add4_i43 * $add4_i43;
  if ($add_i37 > $mul * $mul) {
    var $call_i_i = _sqrtf($add_i37);
    var $div = $mul / $call_i_i;
    var $mul_i20 = $add_i40 * $div;
    HEAPF32[$x_i64$s2] = $mul_i20;
    var $mul2_i = $add4_i43 * $div;
    HEAPF32[$y_i66$s2] = $mul2_i;
    var $29 = $mul_i20;
    var $28 = $mul2_i;
  } else {
    var $29 = $add_i40;
    var $28 = $add4_i43;
  }
  var $28;
  var $29;
  var $sub_i15 = $29 - $23;
  var $sub3_i = $28 - $25;
  var $30 = HEAPF32[$this$s2 + 34];
  var $add_i = $5 + $sub_i15 * $30;
  var $add4_i = $7 + $sub3_i * $30;
  var $add = $8 + HEAPF32[$this$s2 + 35] * ($10 * $sub3_i - $9 * $sub_i15);
  var $33 = HEAP32[$velocities$s2] + $0 * 12 | 0;
  var $34 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $35$0 = $34;
  var $36 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
  var $39$0 = 0 | $35$0;
  var $39$1 = $36 | 0;
  var $st$30$0 = $33 | 0;
  HEAP32[$st$30$0 >> 2] = $39$0;
  var $st$30$1 = $33 + 4 | 0;
  HEAP32[$st$30$1 >> 2] = $39$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB >> 2] * 3 | 0)] = $add;
  return;
  return;
}

function __ZN12b2MouseJoint4DumpEv($this) {
  var __stackBase__ = STACKTOP;
  __Z5b2LogPKcz(STRING_TABLE.__str6331 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN12b2MouseJointD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN16b2PrismaticJointC2EPK19b2PrismaticJointDef($this, $def) {
  var $16$s2;
  var $def$s2 = $def >> 2;
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV7b2Joint + 8 | 0;
  var $bodyA_i = $def + 8 | 0;
  var $bodyB_i = $def + 12 | 0;
  if ((HEAP32[$bodyA_i >> 2] | 0) == (HEAP32[$bodyB_i >> 2] | 0)) {
    ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
  }
  var $3 = HEAP32[$def$s2];
  HEAP32[$this$s2 + 1] = $3;
  HEAP32[$this$s2 + 2] = 0;
  HEAP32[$this$s2 + 3] = 0;
  var $5 = HEAP32[$bodyA_i >> 2];
  HEAP32[$this$s2 + 12] = $5;
  var $6 = HEAP32[$bodyB_i >> 2];
  HEAP32[$this$s2 + 13] = $6;
  HEAP32[$this$s2 + 14] = 0;
  var $10 = HEAP8[$def + 16 | 0] & 1;
  HEAP8[$this + 61 | 0] = $10;
  HEAP8[$this + 60 | 0] = 0;
  var $14 = HEAP32[$def$s2 + 1];
  HEAP32[$this$s2 + 16] = $14;
  var $16$s2 = ($this + 16 | 0) >> 2;
  HEAP32[$16$s2] = 0;
  HEAP32[$16$s2 + 1] = 0;
  HEAP32[$16$s2 + 2] = 0;
  HEAP32[$16$s2 + 3] = 0;
  HEAP32[$16$s2 + 4] = 0;
  HEAP32[$16$s2 + 5] = 0;
  HEAP32[$16$s2 + 6] = 0;
  HEAP32[$16$s2 + 7] = 0;
  HEAP32[$0 >> 2] = __ZTV16b2PrismaticJoint + 8 | 0;
  var $m_localAnchorB = $this + 76 | 0;
  var $m_localXAxisA = $this + 84 | 0;
  var $m_localYAxisA = $this + 92 | 0;
  var $17 = $def + 20 | 0;
  var $18 = $this + 68 | 0;
  var $19$0 = HEAP32[$17 >> 2];
  var $19$1 = HEAP32[$17 + 4 >> 2];
  HEAP32[$18 >> 2] = $19$0;
  HEAP32[$18 + 4 >> 2] = $19$1;
  var $20 = $def + 28 | 0;
  var $21 = $m_localAnchorB;
  var $22$0 = HEAP32[$20 >> 2];
  var $22$1 = HEAP32[$20 + 4 >> 2];
  HEAP32[$21 >> 2] = $22$0;
  HEAP32[$21 + 4 >> 2] = $22$1;
  var $23 = $def + 36 | 0;
  var $24 = $m_localXAxisA;
  var $25$0 = HEAP32[$23 >> 2];
  var $25$1 = HEAP32[$23 + 4 >> 2];
  HEAP32[$24 >> 2] = $25$0;
  HEAP32[$24 + 4 >> 2] = $25$1;
  var $bitcast = (tempDoubleI32[0] = $25$0, tempDoubleF32[0]);
  var $mul_i_i = $bitcast * $bitcast;
  var $28 = (tempDoubleI32[0] = $25$1, tempDoubleF32[0]);
  var $add_i_i = $mul_i_i + $28 * $28;
  var $call_i_i_i = _sqrtf($add_i_i);
  if ($call_i_i_i < 1.1920928955078125e-7) {
    var $30 = $28;
    var $29 = $bitcast;
  } else {
    var $y_i_i = $this + 88 | 0;
    var $div_i = 1 / $call_i_i_i;
    var $mul_i8 = $bitcast * $div_i;
    HEAPF32[$m_localXAxisA >> 2] = $mul_i8;
    var $mul2_i = $28 * $div_i;
    HEAPF32[$y_i_i >> 2] = $mul2_i;
    var $30 = $mul2_i;
    var $29 = $mul_i8;
  }
  var $29;
  var $30;
  var $31 = $m_localYAxisA;
  var $32 = (tempDoubleF32[0] = $30 * -1, tempDoubleI32[0]);
  var $33$0 = $32;
  var $34 = (tempDoubleF32[0] = $29, tempDoubleI32[0]);
  var $37$1 = $34 | 0;
  HEAP32[$31 >> 2] = 0 | $33$0;
  HEAP32[$31 + 4 >> 2] = $37$1;
  var $38 = HEAPF32[$def$s2 + 11];
  HEAPF32[$this$s2 + 25] = $38;
  HEAPF32[$this$s2 + 26] = 0;
  HEAPF32[$this$s2 + 27] = 0;
  HEAPF32[$this$s2 + 28] = 0;
  HEAPF32[$this$s2 + 63] = 0;
  HEAPF32[$this$s2 + 29] = 0;
  var $39 = HEAPF32[$def$s2 + 13];
  HEAPF32[$this$s2 + 30] = $39;
  var $40 = HEAPF32[$def$s2 + 14];
  HEAPF32[$this$s2 + 31] = $40;
  var $41 = HEAPF32[$def$s2 + 16];
  HEAPF32[$this$s2 + 32] = $41;
  var $42 = HEAPF32[$def$s2 + 17];
  HEAPF32[$this$s2 + 33] = $42;
  var $44 = HEAP8[$def + 48 | 0] & 1;
  HEAP8[$this + 136 | 0] = $44;
  var $46 = HEAP8[$def + 60 | 0] & 1;
  HEAP8[$this + 137 | 0] = $46;
  HEAP32[$this$s2 + 35] = 0;
  HEAPF32[$this$s2 + 46] = 0;
  HEAPF32[$this$s2 + 47] = 0;
  HEAPF32[$this$s2 + 48] = 0;
  HEAPF32[$this$s2 + 49] = 0;
  return;
  return;
}

function __ZN16b2PrismaticJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var $m_limitState135$s2;
  var $velocities$s2;
  var $m_indexB$s2;
  var $2$s2;
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $0 = HEAP32[$this$s2 + 12], $0$s2 = $0 >> 2;
  var $1 = HEAPU32[$0$s2 + 2];
  var $m_indexA = $this + 144 | 0;
  HEAP32[$m_indexA >> 2] = $1;
  var $2 = HEAP32[$this$s2 + 13], $2$s2 = $2 >> 2;
  var $3 = HEAP32[$2$s2 + 2];
  var $m_indexB$s2 = ($this + 148 | 0) >> 2;
  HEAP32[$m_indexB$s2] = $3;
  var $4 = $0 + 28 | 0;
  var $5 = $this + 152 | 0;
  var $6$0 = HEAP32[$4 >> 2];
  var $6$1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 >> 2] = $6$0;
  HEAP32[$5 + 4 >> 2] = $6$1;
  var $7 = $2 + 28 | 0;
  var $8 = $this + 160 | 0;
  var $9$0 = HEAP32[$7 >> 2];
  var $9$1 = HEAP32[$7 + 4 >> 2];
  HEAP32[$8 >> 2] = $9$0;
  HEAP32[$8 + 4 >> 2] = $9$1;
  var $10 = HEAPF32[$0$s2 + 30];
  HEAPF32[$this$s2 + 42] = $10;
  var $11 = HEAPF32[$2$s2 + 30];
  HEAPF32[$this$s2 + 43] = $11;
  var $12 = HEAPF32[$0$s2 + 32];
  HEAPF32[$this$s2 + 44] = $12;
  var $13 = HEAPF32[$2$s2 + 32];
  HEAPF32[$this$s2 + 45] = $13;
  var $14 = HEAP32[$data + 24 >> 2];
  var $15 = $14 + $1 * 12 | 0;
  var $16$1 = HEAP32[$15 + 4 >> 2];
  var $18 = (tempDoubleI32[0] = HEAP32[$15 >> 2], tempDoubleF32[0]);
  var $20 = (tempDoubleI32[0] = $16$1, tempDoubleF32[0]);
  var $21 = HEAPF32[($14 + 8 >> 2) + ($1 * 3 | 0)];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $22 = HEAP32[$velocities$s2];
  var $23 = $22 + $1 * 12 | 0;
  var $24$1 = HEAP32[$23 + 4 >> 2];
  var $26 = (tempDoubleI32[0] = HEAP32[$23 >> 2], tempDoubleF32[0]);
  var $28 = (tempDoubleI32[0] = $24$1, tempDoubleF32[0]);
  var $29 = HEAPF32[($22 + 8 >> 2) + ($1 * 3 | 0)];
  var $30 = $14 + $3 * 12 | 0;
  var $31$1 = HEAP32[$30 + 4 >> 2];
  var $33 = (tempDoubleI32[0] = HEAP32[$30 >> 2], tempDoubleF32[0]);
  var $35 = (tempDoubleI32[0] = $31$1, tempDoubleF32[0]);
  var $36 = HEAPF32[($14 + 8 >> 2) + ($3 * 3 | 0)];
  var $37 = $22 + $3 * 12 | 0;
  var $38$1 = HEAP32[$37 + 4 >> 2];
  var $40 = (tempDoubleI32[0] = HEAP32[$37 >> 2], tempDoubleF32[0]);
  var $42 = (tempDoubleI32[0] = $38$1, tempDoubleF32[0]);
  var $43 = HEAPF32[($22 + 8 >> 2) + ($3 * 3 | 0)];
  var $call_i_i = _sinf($21);
  var $call2_i_i = _cosf($21);
  var $call_i_i1 = _sinf($36);
  var $call2_i_i3 = _cosf($36);
  var $44 = HEAPF32[$this$s2 + 17];
  var $bitcast = (tempDoubleI32[0] = $6$0, tempDoubleF32[0]);
  var $sub_i = $44 - $bitcast;
  var $45 = HEAPF32[$this$s2 + 18];
  var $48 = (tempDoubleI32[0] = $6$1, tempDoubleF32[0]);
  var $sub3_i = $45 - $48;
  var $sub_i7 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $49 = HEAPF32[$this$s2 + 19];
  var $bitcast194 = (tempDoubleI32[0] = $9$0, tempDoubleF32[0]);
  var $sub_i12 = $49 - $bitcast194;
  var $50 = HEAPF32[$this$s2 + 20];
  var $53 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
  var $sub3_i15 = $50 - $53;
  var $sub_i177 = $call2_i_i3 * $sub_i12 - $call_i_i1 * $sub3_i15;
  var $add_i180 = $call_i_i1 * $sub_i12 + $call2_i_i3 * $sub3_i15;
  var $sub_i149 = $33 - $18 + $sub_i177 - $sub_i7;
  var $sub3_i152 = $35 - $20 + $add_i180 - $add_i;
  var $54 = HEAPF32[$this$s2 + 21];
  var $55 = HEAPF32[$this$s2 + 22];
  var $sub_i141 = $call2_i_i * $54 - $call_i_i * $55;
  var $add_i144 = $call_i_i * $54 + $call2_i_i * $55;
  var $56 = $this + 184 | 0;
  var $57 = (tempDoubleF32[0] = $sub_i141, tempDoubleI32[0]);
  var $58$0 = $57;
  var $59 = (tempDoubleF32[0] = $add_i144, tempDoubleI32[0]);
  var $62$0 = 0 | $58$0;
  var $62$1 = $59 | 0;
  HEAP32[$56 >> 2] = $62$0;
  HEAP32[$56 + 4 >> 2] = $62$1;
  var $add_i129 = $sub_i149 + $sub_i7;
  var $add3_i132 = $sub3_i152 + $add_i;
  var $sub_i126 = $add_i129 * $add_i144 - $add3_i132 * $sub_i141;
  HEAPF32[$this$s2 + 52] = $sub_i126;
  var $sub_i119 = $sub_i177 * $add_i144 - $add_i180 * $sub_i141;
  HEAPF32[$this$s2 + 53] = $sub_i119;
  var $add = $10 + $11;
  var $mul = $12 * $sub_i126;
  var $mul57 = $13 * $sub_i119;
  var $add60 = $add + $mul * $sub_i126 + $mul57 * $sub_i119;
  if ($add60 > 0) {
    var $storemerge = 1 / $add60;
  } else {
    var $storemerge = $add60;
  }
  var $storemerge;
  HEAPF32[$this$s2 + 63] = $storemerge;
  var $63 = HEAPF32[$this$s2 + 23];
  var $64 = HEAPF32[$this$s2 + 24];
  var $sub_i107 = $call2_i_i * $63 - $call_i_i * $64;
  var $add_i110 = $call_i_i * $63 + $call2_i_i * $64;
  var $65 = $this + 192 | 0;
  var $66 = (tempDoubleF32[0] = $sub_i107, tempDoubleI32[0]);
  var $67$0 = $66;
  var $68 = (tempDoubleF32[0] = $add_i110, tempDoubleI32[0]);
  var $71$0 = 0 | $67$0;
  var $71$1 = $68 | 0;
  HEAP32[$65 >> 2] = $71$0;
  HEAP32[$65 + 4 >> 2] = $71$1;
  var $sub_i92 = $add_i129 * $add_i110 - $add3_i132 * $sub_i107;
  HEAPF32[$this$s2 + 50] = $sub_i92;
  var $sub_i85 = $sub_i177 * $add_i110 - $add_i180 * $sub_i107;
  HEAPF32[$this$s2 + 51] = $sub_i85;
  var $mul72 = $12 * $sub_i92;
  var $mul77 = $13 * $sub_i85;
  var $add80 = $add + $mul72 * $sub_i92 + $mul77 * $sub_i85;
  var $add85 = $mul72 + $mul77;
  var $add94 = $mul72 * $sub_i126 + $mul77 * $sub_i119;
  var $add95 = $12 + $13;
  var $k22_0 = $add95 == 0 ? 1 : $add95;
  var $add103 = $mul + $mul57;
  HEAPF32[$this$s2 + 54] = $add80;
  HEAPF32[$this$s2 + 55] = $add85;
  HEAPF32[$this$s2 + 56] = $add94;
  HEAPF32[$this$s2 + 57] = $add85;
  HEAPF32[$this$s2 + 58] = $k22_0;
  HEAPF32[$this$s2 + 59] = $add103;
  HEAPF32[$this$s2 + 60] = $add94;
  HEAPF32[$this$s2 + 61] = $add103;
  HEAPF32[$this$s2 + 62] = $add60;
  var $tobool = (HEAP8[$this + 136 | 0] & 1) << 24 >> 24 == 0;
  do {
    if ($tobool) {
      HEAP32[$this$s2 + 35] = 0;
      HEAPF32[$this$s2 + 28] = 0;
    } else {
      var $add_i70 = $sub_i141 * $sub_i149 + $add_i144 * $sub3_i152;
      var $74 = HEAPF32[$this$s2 + 31];
      var $75 = HEAPF32[$this$s2 + 30];
      var $sub = $74 - $75;
      if ($sub > 0) {
        var $cond_i = $sub;
      } else {
        var $cond_i = -$sub;
      }
      var $cond_i;
      if ($cond_i < .009999999776482582) {
        HEAP32[$this$s2 + 35] = 3;
      } else {
        if ($add_i70 > $75) {
          var $m_limitState135$s2 = ($this + 140 | 0) >> 2;
          if ($add_i70 < $74) {
            HEAP32[$m_limitState135$s2] = 0;
            HEAPF32[$this$s2 + 28] = 0;
          } else {
            if ((HEAP32[$m_limitState135$s2] | 0) == 2) {
              break;
            }
            HEAP32[$m_limitState135$s2] = 2;
            HEAPF32[$this$s2 + 28] = 0;
          }
        } else {
          var $m_limitState126 = $this + 140 | 0;
          if ((HEAP32[$m_limitState126 >> 2] | 0) == 1) {
            break;
          }
          HEAP32[$m_limitState126 >> 2] = 1;
          HEAPF32[$this$s2 + 28] = 0;
        }
      }
    }
  } while (0);
  if ((HEAP8[$this + 137 | 0] & 1) << 24 >> 24 == 0) {
    HEAPF32[$this$s2 + 29] = 0;
  }
  var $m_impulse160 = $this + 104 | 0;
  if ((HEAP8[$data + 20 | 0] & 1) << 24 >> 24 == 0) {
    HEAPF32[$m_impulse160 >> 2] = 0;
    HEAPF32[$this$s2 + 27] = 0;
    HEAPF32[$this$s2 + 28] = 0;
    HEAPF32[$this$s2 + 29] = 0;
    var $wB_0 = $43;
    var $wA_0 = $29;
    var $91 = $26;
    var $90 = $28;
    var $89 = $40;
    var $88 = $42;
  } else {
    var $dtRatio = $data + 8 | 0;
    var $82 = HEAPF32[$dtRatio >> 2];
    var $x_i59 = $m_impulse160 | 0;
    var $mul_i60 = HEAPF32[$x_i59 >> 2] * $82;
    HEAPF32[$x_i59 >> 2] = $mul_i60;
    var $y_i61 = $this + 108 | 0;
    var $mul2_i = HEAPF32[$y_i61 >> 2] * $82;
    HEAPF32[$y_i61 >> 2] = $mul2_i;
    var $z_i62 = $this + 112 | 0;
    var $mul3_i = HEAPF32[$z_i62 >> 2] * $82;
    HEAPF32[$z_i62 >> 2] = $mul3_i;
    var $m_motorImpulse164 = $this + 116 | 0;
    var $mul165 = HEAPF32[$m_motorImpulse164 >> 2] * HEAPF32[$dtRatio >> 2];
    HEAPF32[$m_motorImpulse164 >> 2] = $mul165;
    var $add173 = $mul165 + $mul3_i;
    var $add_i42 = $sub_i107 * $mul_i60 + $sub_i141 * $add173;
    var $add3_i = $add_i110 * $mul_i60 + $add_i144 * $add173;
    var $wB_0 = $43 + $13 * ($mul_i60 * $sub_i85 + $mul2_i + $add173 * $sub_i119);
    var $wA_0 = $29 - $12 * ($mul_i60 * $sub_i92 + $mul2_i + $add173 * $sub_i126);
    var $91 = $26 - $add_i42 * $10;
    var $90 = $28 - $add3_i * $10;
    var $89 = $40 + $add_i42 * $11;
    var $88 = $42 + $add3_i * $11;
  }
  var $88;
  var $89;
  var $90;
  var $91;
  var $wA_0;
  var $wB_0;
  var $93 = HEAP32[$velocities$s2] + $1 * 12 | 0;
  var $94 = (tempDoubleF32[0] = $91, tempDoubleI32[0]);
  var $95$0 = $94;
  var $96 = (tempDoubleF32[0] = $90, tempDoubleI32[0]);
  var $99$1 = $96 | 0;
  var $st$19$0 = $93 | 0;
  HEAP32[$st$19$0 >> 2] = 0 | $95$0;
  var $st$19$1 = $93 + 4 | 0;
  HEAP32[$st$19$1 >> 2] = $99$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $wA_0;
  var $104 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $105 = (tempDoubleF32[0] = $89, tempDoubleI32[0]);
  var $106$0 = $105;
  var $107 = (tempDoubleF32[0] = $88, tempDoubleI32[0]);
  var $110$1 = $107 | 0;
  var $st$41$0 = $104 | 0;
  HEAP32[$st$41$0 >> 2] = 0 | $106$0;
  var $st$41$1 = $104 + 4 | 0;
  HEAP32[$st$41$1 >> 2] = $110$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $wB_0;
  return;
  return;
}

function __ZN16b2PrismaticJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var $m_impulse_2$s2;
  var $m_impulse_1$s2;
  var $m_impulse_0$s2;
  var $m_indexB$s2;
  var $velocities$s2;
  var $m_indexA$s2;
  var $ref_tmp58$s2;
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  var $df = __stackBase__;
  var $ref_tmp58 = __stackBase__ + 12, $ref_tmp58$s2 = $ref_tmp58 >> 2;
  var $m_indexA$s2 = ($this + 144 | 0) >> 2;
  var $0 = HEAPU32[$m_indexA$s2];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $1 = HEAP32[$velocities$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $m_indexB$s2 = ($this + 148 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[($1 + 8 >> 2) + ($9 * 3 | 0)];
  var $17 = HEAPF32[$this$s2 + 42];
  var $18 = HEAPF32[$this$s2 + 43];
  var $19 = HEAPF32[$this$s2 + 44];
  var $20 = HEAPF32[$this$s2 + 45];
  var $tobool = (HEAP8[$this + 137 | 0] & 1) << 24 >> 24 == 0;
  do {
    if ($tobool) {
      var $wB_0 = $16;
      var $wA_0 = $8;
      var $36 = $5;
      var $35 = $7;
      var $34 = $13;
      var $33 = $15;
    } else {
      if ((HEAP32[$this$s2 + 35] | 0) == 3) {
        var $wB_0 = $16;
        var $wA_0 = $8;
        var $36 = $5;
        var $35 = $7;
        var $34 = $13;
        var $33 = $15;
        break;
      }
      var $24 = HEAPF32[$this$s2 + 46];
      var $25 = HEAPF32[$this$s2 + 47];
      var $26 = HEAPF32[$this$s2 + 53];
      var $27 = HEAPF32[$this$s2 + 52];
      var $m_motorImpulse = $this + 116 | 0;
      var $30 = HEAPF32[$m_motorImpulse >> 2];
      var $mul15 = HEAPF32[$data >> 2] * HEAPF32[$this$s2 + 32];
      var $add17 = $30 + HEAPF32[$this$s2 + 63] * (HEAPF32[$this$s2 + 33] - ($24 * ($13 - $5) + $25 * ($15 - $7) + $26 * $16 - $27 * $8));
      var $sub18 = -$mul15;
      var $cond_i_i = $add17 < $mul15 ? $add17 : $mul15;
      var $cond_i2_i = $cond_i_i < $sub18 ? $sub18 : $cond_i_i;
      HEAPF32[$m_motorImpulse >> 2] = $cond_i2_i;
      var $sub22 = $cond_i2_i - $30;
      var $mul_i253 = $24 * $sub22;
      var $mul1_i255 = $25 * $sub22;
      var $wB_0 = $16 + $20 * $sub22 * $26;
      var $wA_0 = $8 - $19 * $sub22 * $27;
      var $36 = $5 - $mul_i253 * $17;
      var $35 = $7 - $mul1_i255 * $17;
      var $34 = $13 + $mul_i253 * $18;
      var $33 = $15 + $mul1_i255 * $18;
    }
  } while (0);
  var $33;
  var $34;
  var $35;
  var $36;
  var $wA_0;
  var $wB_0;
  var $sub_i222 = $34 - $36;
  var $sub3_i225 = $33 - $35;
  var $x_i213 = $this + 192 | 0;
  var $37 = HEAPF32[$x_i213 >> 2];
  var $y_i216 = $this + 196 | 0;
  var $38 = HEAPF32[$y_i216 >> 2];
  var $m_s2 = $this + 204 | 0;
  var $39 = HEAPF32[$m_s2 >> 2];
  var $m_s1 = $this + 200 | 0;
  var $40 = HEAPF32[$m_s1 >> 2];
  var $sub39 = $37 * $sub_i222 + $38 * $sub3_i225 + $39 * $wB_0 - $40 * $wA_0;
  var $sub40 = $wB_0 - $wA_0;
  var $tobool41 = (HEAP8[$this + 136 | 0] & 1) << 24 >> 24 == 0;
  do {
    if (!$tobool41) {
      var $m_limitState43 = $this + 140 | 0;
      if ((HEAP32[$m_limitState43 >> 2] | 0) == 0) {
        __label__ = 11;
        break;
      }
      var $x_i198 = $this + 184 | 0;
      var $y_i201 = $this + 188 | 0;
      var $m_a249 = $this + 212 | 0;
      var $m_a152 = $this + 208 | 0;
      var $m_impulse_0$s2 = ($this + 104 | 0) >> 2;
      var $tmp260 = HEAPF32[$m_impulse_0$s2];
      var $m_impulse_1$s2 = ($this + 108 | 0) >> 2;
      var $tmp261 = HEAPF32[$m_impulse_1$s2];
      var $m_impulse_2$s2 = ($this + 112 | 0) >> 2;
      var $tmp262 = HEAPF32[$m_impulse_2$s2];
      var $m_K = $this + 216 | 0;
      var $sub_i189 = -$sub39;
      var $sub2_i191 = -$sub40;
      var $sub3_i193 = -(HEAPF32[$x_i198 >> 2] * $sub_i222 + HEAPF32[$y_i201 >> 2] * $sub3_i225 + HEAPF32[$m_a249 >> 2] * $wB_0 - HEAPF32[$m_a152 >> 2] * $wA_0);
      HEAPF32[$ref_tmp58$s2] = $sub_i189;
      HEAPF32[$ref_tmp58$s2 + 1] = $sub2_i191;
      HEAPF32[$ref_tmp58$s2 + 2] = $sub3_i193;
      __ZNK7b2Mat337Solve33ERK6b2Vec3($df, $m_K, $ref_tmp58);
      var $x_i174 = $df | 0;
      var $add_i176 = HEAPF32[$m_impulse_0$s2] + HEAPF32[$x_i174 >> 2];
      HEAPF32[$m_impulse_0$s2] = $add_i176;
      var $y_i177 = $df + 4 | 0;
      var $add4_i179 = HEAPF32[$m_impulse_1$s2] + HEAPF32[$y_i177 >> 2];
      HEAPF32[$m_impulse_1$s2] = $add4_i179;
      var $z_i180 = $df + 8 | 0;
      var $add6_i = HEAPF32[$m_impulse_2$s2] + HEAPF32[$z_i180 >> 2];
      HEAPF32[$m_impulse_2$s2] = $add6_i;
      var $54 = HEAP32[$m_limitState43 >> 2];
      if ($54 == 1) {
        var $cond_i173 = $add6_i > 0 ? $add6_i : 0;
        HEAPF32[$m_impulse_2$s2] = $cond_i173;
        var $55 = $cond_i173;
      } else if ($54 == 2) {
        var $cond_i171 = $add6_i < 0 ? $add6_i : 0;
        HEAPF32[$m_impulse_2$s2] = $cond_i171;
        var $55 = $cond_i171;
      } else {
        var $55 = $add6_i;
      }
      var $55;
      var $sub82 = $55 - $tmp262;
      var $sub_i150 = $sub_i189 - HEAPF32[$this$s2 + 60] * $sub82;
      var $sub3_i153 = $sub2_i191 - HEAPF32[$this$s2 + 61] * $sub82;
      var $58 = HEAPF32[$m_K >> 2];
      var $59 = HEAPF32[$this$s2 + 57];
      var $60 = HEAPF32[$this$s2 + 55];
      var $61 = HEAPF32[$this$s2 + 58];
      var $sub_i130 = $58 * $61 - $59 * $60;
      if ($sub_i130 != 0) {
        var $det_0_i134 = 1 / $sub_i130;
      } else {
        var $det_0_i134 = $sub_i130;
      }
      var $det_0_i134;
      var $add_i118 = $det_0_i134 * ($61 * $sub_i150 - $59 * $sub3_i153) + $tmp260;
      var $add3_i121 = $det_0_i134 * ($58 * $sub3_i153 - $60 * $sub_i150) + $tmp261;
      HEAPF32[$m_impulse_0$s2] = $add_i118;
      HEAPF32[$m_impulse_1$s2] = $add3_i121;
      var $sub_i110 = $add_i118 - $tmp260;
      var $sub3_i113 = $add3_i121 - $tmp261;
      HEAPF32[$x_i174 >> 2] = $sub_i110;
      HEAPF32[$y_i177 >> 2] = $sub3_i113;
      HEAPF32[$z_i180 >> 2] = $sub82;
      var $add128_pn = $sub_i110 * HEAPF32[$m_s2 >> 2] + $sub3_i113 + $sub82 * HEAPF32[$m_a249 >> 2];
      var $add118_pn = $sub_i110 * HEAPF32[$m_s1 >> 2] + $sub3_i113 + $sub82 * HEAPF32[$m_a152 >> 2];
      var $add_i91_pn = HEAPF32[$x_i213 >> 2] * $sub_i110 + HEAPF32[$x_i198 >> 2] * $sub82;
      var $add3_i_pn = HEAPF32[$y_i216 >> 2] * $sub_i110 + HEAPF32[$y_i201 >> 2] * $sub82;
      var $76 = HEAP32[$m_indexA$s2];
      __label__ = 14;
      break;
    }
    __label__ = 11;
  } while (0);
  if (__label__ == 11) {
    var $sub_i63 = -$sub39;
    var $sub2_i = -$sub40;
    var $70 = HEAPF32[$this$s2 + 54];
    var $71 = HEAPF32[$this$s2 + 57];
    var $72 = HEAPF32[$this$s2 + 55];
    var $73 = HEAPF32[$this$s2 + 58];
    var $sub_i59 = $70 * $73 - $71 * $72;
    if ($sub_i59 != 0) {
      var $det_0_i = 1 / $sub_i59;
    } else {
      var $det_0_i = $sub_i59;
    }
    var $det_0_i;
    var $mul12_i = $det_0_i * ($73 * $sub_i63 - $71 * $sub2_i);
    var $mul19_i = $det_0_i * ($70 * $sub2_i - $72 * $sub_i63);
    var $x141 = $this + 104 | 0;
    var $add142 = HEAPF32[$x141 >> 2] + $mul12_i;
    HEAPF32[$x141 >> 2] = $add142;
    var $y145 = $this + 108 | 0;
    var $add146 = HEAPF32[$y145 >> 2] + $mul19_i;
    HEAPF32[$y145 >> 2] = $add146;
    var $add128_pn = $mul12_i * $39 + $mul19_i;
    var $add118_pn = $mul12_i * $40 + $mul19_i;
    var $add_i91_pn = $37 * $mul12_i;
    var $add3_i_pn = $38 * $mul12_i;
    var $76 = $0;
  }
  var $76;
  var $add3_i_pn;
  var $add_i91_pn;
  var $add118_pn;
  var $add128_pn;
  var $wB_1 = $wB_0 + $20 * $add128_pn;
  var $wA_1 = $wA_0 - $19 * $add118_pn;
  var $78 = $35 - $add3_i_pn * $17;
  var $79 = $34 + $add_i91_pn * $18;
  var $80 = $33 + $add3_i_pn * $18;
  var $82 = HEAP32[$velocities$s2] + $76 * 12 | 0;
  var $83 = (tempDoubleF32[0] = $36 - $add_i91_pn * $17, tempDoubleI32[0]);
  var $84$0 = $83;
  var $85 = (tempDoubleF32[0] = $78, tempDoubleI32[0]);
  var $88$1 = $85 | 0;
  var $st$30$0 = $82 | 0;
  HEAP32[$st$30$0 >> 2] = 0 | $84$0;
  var $st$30$1 = $82 + 4 | 0;
  HEAP32[$st$30$1 >> 2] = $88$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA$s2] * 3 | 0)] = $wA_1;
  var $93 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $94 = (tempDoubleF32[0] = $79, tempDoubleI32[0]);
  var $95$0 = $94;
  var $96 = (tempDoubleF32[0] = $80, tempDoubleI32[0]);
  var $99$1 = $96 | 0;
  var $st$52$0 = $93 | 0;
  HEAP32[$st$52$0 >> 2] = 0 | $95$0;
  var $st$52$1 = $93 + 4 | 0;
  HEAP32[$st$52$1 >> 2] = $99$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $wB_1;
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZNK16b2PrismaticJoint10GetAnchorAEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 48 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 68 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 72 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK16b2PrismaticJoint10GetAnchorBEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 52 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 76 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 80 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK16b2PrismaticJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var $this$s2 = $this >> 2;
  var $0 = HEAPF32[$this$s2 + 26];
  var $add = HEAPF32[$this$s2 + 29] + HEAPF32[$this$s2 + 28];
  var $mul_i2 = (HEAPF32[$this$s2 + 48] * $0 + HEAPF32[$this$s2 + 46] * $add) * $inv_dt;
  var $mul1_i4 = (HEAPF32[$this$s2 + 49] * $0 + HEAPF32[$this$s2 + 47] * $add) * $inv_dt;
  HEAPF32[$agg_result >> 2] = $mul_i2;
  HEAPF32[$agg_result + 4 >> 2] = $mul1_i4;
  return;
  return;
}

function __ZNK16b2PrismaticJoint17GetReactionTorqueEf($this, $inv_dt) {
  return HEAPF32[$this + 108 >> 2] * $inv_dt;
  return null;
}

function __ZNK16b2PrismaticJoint19GetJointTranslationEv($this) {
  var $7$s2;
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $0$s2 = HEAP32[$this$s2 + 12] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this$s2 + 17];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this$s2 + 18];
  var $7$s2 = HEAP32[$this$s2 + 13] >> 2;
  var $8 = HEAPF32[$7$s2 + 6];
  var $9 = HEAPF32[$this$s2 + 19];
  var $10 = HEAPF32[$7$s2 + 5];
  var $11 = HEAPF32[$this$s2 + 20];
  var $14 = HEAPF32[$this$s2 + 21];
  var $15 = HEAPF32[$this$s2 + 22];
  return ($8 * $9 - $10 * $11 + HEAPF32[$7$s2 + 3] - ($1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3])) * ($1 * $14 - $3 * $15) + ($10 * $9 + $8 * $11 + HEAPF32[$7$s2 + 4] - ($3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4])) * ($3 * $14 + $1 * $15);
  return null;
}

function __ZNK16b2PrismaticJoint13GetJointSpeedEv($this) {
  var $1$s2;
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $0 = HEAP32[$this$s2 + 12], $0$s2 = $0 >> 2;
  var $1 = HEAP32[$this$s2 + 13], $1$s2 = $1 >> 2;
  var $sub_i = HEAPF32[$this$s2 + 17] - HEAPF32[$0$s2 + 7];
  var $sub3_i = HEAPF32[$this$s2 + 18] - HEAPF32[$0$s2 + 8];
  var $6 = HEAPF32[$0$s2 + 6];
  var $7 = HEAPF32[$0$s2 + 5];
  var $sub_i113 = $6 * $sub_i - $7 * $sub3_i;
  var $add_i116 = $7 * $sub_i + $6 * $sub3_i;
  var $sub_i101 = HEAPF32[$this$s2 + 19] - HEAPF32[$1$s2 + 7];
  var $sub3_i104 = HEAPF32[$this$s2 + 20] - HEAPF32[$1$s2 + 8];
  var $12 = HEAPF32[$1$s2 + 6];
  var $13 = HEAPF32[$1$s2 + 5];
  var $sub_i93 = $12 * $sub_i101 - $13 * $sub3_i104;
  var $add_i96 = $13 * $sub_i101 + $12 * $sub3_i104;
  var $sub_i65 = HEAPF32[$1$s2 + 11] + $sub_i93 - (HEAPF32[$0$s2 + 11] + $sub_i113);
  var $sub3_i68 = HEAPF32[$1$s2 + 12] + $add_i96 - (HEAPF32[$0$s2 + 12] + $add_i116);
  var $18 = HEAPF32[$this$s2 + 21];
  var $19 = HEAPF32[$this$s2 + 22];
  var $sub_i59 = $6 * $18 - $7 * $19;
  var $add_i60 = $7 * $18 + $6 * $19;
  var $20 = $0 + 64 | 0;
  var $21$1 = HEAP32[$20 + 4 >> 2];
  var $23 = (tempDoubleI32[0] = HEAP32[$20 >> 2], tempDoubleF32[0]);
  var $25 = (tempDoubleI32[0] = $21$1, tempDoubleF32[0]);
  var $26 = $1 + 64 | 0;
  var $27$1 = HEAP32[$26 + 4 >> 2];
  var $29 = (tempDoubleI32[0] = HEAP32[$26 >> 2], tempDoubleF32[0]);
  var $31 = (tempDoubleI32[0] = $27$1, tempDoubleF32[0]);
  var $32 = HEAPF32[$0$s2 + 18];
  var $33 = HEAPF32[$1$s2 + 18];
  var $sub_i48 = -$32;
  return $sub_i65 * $add_i60 * $sub_i48 + $sub3_i68 * $sub_i59 * $32 + $sub_i59 * ($29 + $add_i96 * -$33 - $23 - $add_i116 * $sub_i48) + $add_i60 * ($31 + $sub_i93 * $33 - $25 - $sub_i113 * $32);
  return null;
}

function __ZNK16b2PrismaticJoint14IsLimitEnabledEv($this) {
  return (HEAP8[$this + 136 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function __ZN16b2PrismaticJoint11EnableLimitEb($this, $flag) {
  var $m_enableLimit = $this + 136 | 0;
  if (($flag & 1 | 0) != (HEAP8[$m_enableLimit] & 1 & 255 | 0)) {
    var $2 = HEAPU32[$this + 48 >> 2];
    var $3 = $2 + 4 | 0;
    var $4 = HEAP16[$3 >> 1];
    if (($4 & 2) << 16 >> 16 == 0) {
      var $or_i = $4 | 2;
      HEAP16[$3 >> 1] = $or_i;
      HEAPF32[$2 + 144 >> 2] = 0;
    }
    var $6 = HEAP32[$this + 52 >> 2];
    var $7 = $6 + 4 | 0;
    var $8 = HEAP16[$7 >> 1];
    if (($8 & 2) << 16 >> 16 == 0) {
      var $or_i4 = $8 | 2;
      HEAP16[$7 >> 1] = $or_i4;
      HEAPF32[$6 + 144 >> 2] = 0;
    }
    HEAP8[$m_enableLimit] = $flag & 1;
    HEAPF32[$this + 112 >> 2] = 0;
  }
  return;
  return;
}

function __ZNK16b2PrismaticJoint13GetLowerLimitEv($this) {
  return HEAPF32[$this + 120 >> 2];
  return null;
}

function __ZNK16b2PrismaticJoint13GetUpperLimitEv($this) {
  return HEAPF32[$this + 124 >> 2];
  return null;
}

function __ZNK16b2PrismaticJoint14IsMotorEnabledEv($this) {
  return (HEAP8[$this + 137 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function __ZN16b2PrismaticJoint11EnableMotorEb($this, $flag) {
  var $0 = HEAP32[$this + 48 >> 2];
  var $1 = $0 + 4 | 0;
  var $2 = HEAP16[$1 >> 1];
  if (($2 & 2) << 16 >> 16 == 0) {
    var $or_i = $2 | 2;
    HEAP16[$1 >> 1] = $or_i;
    HEAPF32[$0 + 144 >> 2] = 0;
  }
  var $4 = HEAP32[$this + 52 >> 2];
  var $5 = $4 + 4 | 0;
  var $6 = HEAP16[$5 >> 1];
  if (($6 & 2) << 16 >> 16 == 0) {
    var $or_i4 = $6 | 2;
    HEAP16[$5 >> 1] = $or_i4;
    HEAPF32[$4 + 144 >> 2] = 0;
  }
  HEAP8[$this + 137 | 0] = $flag & 1;
  return;
  return;
}

function __ZN16b2PrismaticJoint13SetMotorSpeedEf($this, $speed) {
  var $0 = HEAP32[$this + 48 >> 2];
  var $1 = $0 + 4 | 0;
  var $2 = HEAP16[$1 >> 1];
  if (($2 & 2) << 16 >> 16 == 0) {
    var $or_i = $2 | 2;
    HEAP16[$1 >> 1] = $or_i;
    HEAPF32[$0 + 144 >> 2] = 0;
  }
  var $4 = HEAP32[$this + 52 >> 2];
  var $5 = $4 + 4 | 0;
  var $6 = HEAP16[$5 >> 1];
  if (($6 & 2) << 16 >> 16 == 0) {
    var $or_i4 = $6 | 2;
    HEAP16[$5 >> 1] = $or_i4;
    HEAPF32[$4 + 144 >> 2] = 0;
  }
  HEAPF32[$this + 132 >> 2] = $speed;
  return;
  return;
}

function __ZN16b2PrismaticJoint16SetMaxMotorForceEf($this, $force) {
  var $0 = HEAP32[$this + 48 >> 2];
  var $1 = $0 + 4 | 0;
  var $2 = HEAP16[$1 >> 1];
  if (($2 & 2) << 16 >> 16 == 0) {
    var $or_i = $2 | 2;
    HEAP16[$1 >> 1] = $or_i;
    HEAPF32[$0 + 144 >> 2] = 0;
  }
  var $4 = HEAP32[$this + 52 >> 2];
  var $5 = $4 + 4 | 0;
  var $6 = HEAP16[$5 >> 1];
  if (($6 & 2) << 16 >> 16 == 0) {
    var $or_i4 = $6 | 2;
    HEAP16[$5 >> 1] = $or_i4;
    HEAPF32[$4 + 144 >> 2] = 0;
  }
  HEAPF32[$this + 128 >> 2] = $force;
  return;
  return;
}

function __ZNK16b2PrismaticJoint13GetMotorForceEf($this, $inv_dt) {
  return HEAPF32[$this + 116 >> 2] * $inv_dt;
  return null;
}

function __ZN16b2PrismaticJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var $m_indexB$s2;
  var $positions$s2;
  var $this$s2 = $this >> 2;
  var $m_indexA = $this + 144 | 0;
  var $0 = HEAP32[$m_indexA >> 2];
  var $positions$s2 = ($data + 24 | 0) >> 2;
  var $1 = HEAP32[$positions$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $m_indexB$s2 = ($this + 148 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[($1 + 8 >> 2) + ($9 * 3 | 0)];
  var $call_i_i = _sinf($8);
  var $call2_i_i = _cosf($8);
  var $call_i_i1 = _sinf($16);
  var $call2_i_i3 = _cosf($16);
  var $17 = HEAPF32[$this$s2 + 42];
  var $18 = HEAPF32[$this$s2 + 43];
  var $19 = HEAPF32[$this$s2 + 44];
  var $20 = HEAPF32[$this$s2 + 45];
  var $sub_i = HEAPF32[$this$s2 + 17] - HEAPF32[$this$s2 + 38];
  var $sub3_i = HEAPF32[$this$s2 + 18] - HEAPF32[$this$s2 + 39];
  var $sub_i7 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $sub_i12 = HEAPF32[$this$s2 + 19] - HEAPF32[$this$s2 + 40];
  var $sub3_i15 = HEAPF32[$this$s2 + 20] - HEAPF32[$this$s2 + 41];
  var $sub_i239 = $call2_i_i3 * $sub_i12 - $call_i_i1 * $sub3_i15;
  var $add_i242 = $call_i_i1 * $sub_i12 + $call2_i_i3 * $sub3_i15;
  var $sub_i211 = $13 + $sub_i239 - $5 - $sub_i7;
  var $sub3_i214 = $15 + $add_i242 - $7 - $add_i;
  var $29 = HEAPF32[$this$s2 + 21];
  var $30 = HEAPF32[$this$s2 + 22];
  var $sub_i203 = $call2_i_i * $29 - $call_i_i * $30;
  var $add_i206 = $call_i_i * $29 + $call2_i_i * $30;
  var $add_i191 = $sub_i211 + $sub_i7;
  var $add3_i194 = $sub3_i214 + $add_i;
  var $sub_i188 = $add_i191 * $add_i206 - $add3_i194 * $sub_i203;
  var $sub_i181 = $sub_i239 * $add_i206 - $add_i242 * $sub_i203;
  var $31 = HEAPF32[$this$s2 + 23];
  var $32 = HEAPF32[$this$s2 + 24];
  var $sub_i169 = $call2_i_i * $31 - $call_i_i * $32;
  var $add_i172 = $call_i_i * $31 + $call2_i_i * $32;
  var $sub_i154 = $add_i191 * $add_i172 - $add3_i194 * $sub_i169;
  var $sub_i147 = $sub_i239 * $add_i172 - $add_i242 * $sub_i169;
  var $add_i141 = $sub_i169 * $sub_i211 + $add_i172 * $sub3_i214;
  var $sub21 = $16 - $8 - HEAPF32[$this$s2 + 25];
  if ($add_i141 > 0) {
    var $cond_i133 = $add_i141;
  } else {
    var $cond_i133 = -$add_i141;
  }
  var $cond_i133;
  if ($sub21 > 0) {
    var $cond_i128 = $sub21;
  } else {
    var $cond_i128 = -$sub21;
  }
  var $cond_i128;
  var $tobool = (HEAP8[$this + 136 | 0] & 1) << 24 >> 24 == 0;
  do {
    if ($tobool) {
      var $C2_0 = 0;
      var $active_0 = 0;
      var $linearError_0 = $cond_i133;
    } else {
      var $add_i124 = $sub_i203 * $sub_i211 + $add_i206 * $sub3_i214;
      var $36 = HEAPF32[$this$s2 + 31];
      var $37 = HEAPF32[$this$s2 + 30];
      var $sub27 = $36 - $37;
      if ($sub27 > 0) {
        var $cond_i117 = $sub27;
      } else {
        var $cond_i117 = -$sub27;
      }
      var $cond_i117;
      if ($cond_i117 < .009999999776482582) {
        var $cond_i_i111 = $add_i124 < .20000000298023224 ? $add_i124 : .20000000298023224;
        var $cond_i2_i113 = $cond_i_i111 < -.20000000298023224 ? -.20000000298023224 : $cond_i_i111;
        if ($add_i124 > 0) {
          var $cond_i109 = $add_i124;
        } else {
          var $cond_i109 = -$add_i124;
        }
        var $cond_i109;
        var $cond_i106 = $cond_i133 > $cond_i109 ? $cond_i133 : $cond_i109;
        var $C2_0 = $cond_i2_i113;
        var $active_0 = 1;
        var $linearError_0 = $cond_i106;
      } else {
        if ($add_i124 > $37) {
          if ($add_i124 < $36) {
            var $C2_0 = 0;
            var $active_0 = 0;
            var $linearError_0 = $cond_i133;
            break;
          }
          var $sub47 = $add_i124 - $36;
          var $sub48 = $sub47 - .004999999888241291;
          var $cond_i_i = $sub48 < .20000000298023224 ? $sub48 : .20000000298023224;
          var $cond_i2_i = $cond_i_i < 0 ? 0 : $cond_i_i;
          var $cond_i = $cond_i133 > $sub47 ? $cond_i133 : $sub47;
          var $C2_0 = $cond_i2_i;
          var $active_0 = 1;
          var $linearError_0 = $cond_i;
        } else {
          var $add = $add_i124 - $37 + .004999999888241291;
          var $cond_i_i102 = $add < 0 ? $add : 0;
          var $cond_i2_i104 = $cond_i_i102 < -.20000000298023224 ? -.20000000298023224 : $cond_i_i102;
          var $sub40 = $37 - $add_i124;
          var $cond_i100 = $cond_i133 > $sub40 ? $cond_i133 : $sub40;
          var $C2_0 = $cond_i2_i104;
          var $active_0 = 1;
          var $linearError_0 = $cond_i100;
        }
      }
    }
  } while (0);
  var $linearError_0;
  var $active_0;
  var $C2_0;
  var $add58 = $17 + $18;
  var $mul = $19 * $sub_i154;
  var $mul61 = $20 * $sub_i147;
  var $add63 = $add58 + $mul * $sub_i154 + $mul61 * $sub_i147;
  var $add66 = $mul + $mul61;
  if ($active_0) {
    var $add71 = $mul * $sub_i188 + $mul61 * $sub_i181;
    var $add72 = $19 + $20;
    var $k22_0 = $add72 == 0 ? 1 : $add72;
    var $mul76 = $19 * $sub_i188;
    var $mul77 = $20 * $sub_i181;
    var $add78 = $mul76 + $mul77;
    var $add85 = $add58 + $mul76 * $sub_i188 + $mul77 * $sub_i181;
    var $sub_i81 = -$add_i141;
    var $sub2_i83 = -$sub21;
    var $sub3_i85 = -$C2_0;
    var $sub_i_i = $k22_0 * $add85 - $add78 * $add78;
    var $sub9_i_i = $add78 * $add71 - $add66 * $add85;
    var $sub16_i_i = $add66 * $add78 - $k22_0 * $add71;
    var $add6_i94_i = $add63 * $sub_i_i + $add66 * $sub9_i_i + $add71 * $sub16_i_i;
    if ($add6_i94_i != 0) {
      var $det_0_i74 = 1 / $add6_i94_i;
    } else {
      var $det_0_i74 = $add6_i94_i;
    }
    var $det_0_i74;
    var $mul12_i49_i = $add78 * $sub_i81;
    var $40 = $det_0_i74 * ($sub_i_i * $sub_i81 + $sub9_i_i * $sub2_i83 + $sub16_i_i * $sub3_i85);
    var $39 = $det_0_i74 * ($add63 * ($add85 * $sub2_i83 - $add78 * $sub3_i85) + $add66 * ($add71 * $sub3_i85 - $add85 * $sub_i81) + $add71 * ($mul12_i49_i - $add71 * $sub2_i83));
    var $38 = $det_0_i74 * ($add63 * ($k22_0 * $sub3_i85 - $add78 * $sub2_i83) + $add66 * ($mul12_i49_i - $add66 * $sub3_i85) + $add71 * ($add66 * $sub2_i83 - $k22_0 * $sub_i81));
  } else {
    var $add106 = $19 + $20;
    var $k22105_0 = $add106 == 0 ? 1 : $add106;
    var $sub_i63 = -$add_i141;
    var $sub2_i = -$sub21;
    var $sub_i61 = $add63 * $k22105_0 - $add66 * $add66;
    if ($sub_i61 != 0) {
      var $det_0_i = 1 / $sub_i61;
    } else {
      var $det_0_i = $sub_i61;
    }
    var $det_0_i;
    var $40 = $det_0_i * ($k22105_0 * $sub_i63 - $add66 * $sub2_i);
    var $39 = $det_0_i * ($add63 * $sub2_i - $add66 * $sub_i63);
    var $38 = 0;
  }
  var $38;
  var $39;
  var $40;
  var $add_i40 = $sub_i169 * $40 + $sub_i203 * $38;
  var $add3_i = $add_i172 * $40 + $add_i206 * $38;
  var $sub_i29 = $5 - $add_i40 * $17;
  var $sub4_i = $7 - $add3_i * $17;
  var $sub140 = $8 - $19 * ($40 * $sub_i154 + $39 + $38 * $sub_i188);
  var $add_i19 = $13 + $add_i40 * $18;
  var $add4_i = $15 + $add3_i * $18;
  var $add143 = $16 + $20 * ($40 * $sub_i147 + $39 + $38 * $sub_i181);
  var $41 = (tempDoubleF32[0] = $sub_i29, tempDoubleI32[0]);
  var $42$0 = $41;
  var $43 = (tempDoubleF32[0] = $sub4_i, tempDoubleI32[0]);
  var $46$0 = 0 | $42$0;
  var $46$1 = $43 | 0;
  var $st$39$0 = $2 | 0;
  HEAP32[$st$39$0 >> 2] = $46$0;
  var $st$39$1 = $2 + 4 | 0;
  HEAP32[$st$39$1 >> 2] = $46$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $sub140;
  var $51 = HEAP32[$positions$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $52 = (tempDoubleF32[0] = $add_i19, tempDoubleI32[0]);
  var $53$0 = $52;
  var $54 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
  var $57$0 = 0 | $53$0;
  var $57$1 = $54 | 0;
  var $st$61$0 = $51 | 0;
  HEAP32[$st$61$0 >> 2] = $57$0;
  var $st$61$1 = $51 + 4 | 0;
  HEAP32[$st$61$1 >> 2] = $57$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $add143;
  if ($linearError_0 > .004999999888241291) {
    var $60 = 0;
  } else {
    var $60 = $cond_i128 <= .03490658849477768;
  }
  var $60;
  return $60;
  return null;
}

function __ZN16b2PrismaticJoint9SetLimitsEff($this, $lower, $upper) {
  var $this$s2 = $this >> 2;
  var __label__;
  if ($lower > $upper) {
    ___assert_func(STRING_TABLE.__str334 | 0, 575, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PrismaticJoint9SetLimitsEff | 0, STRING_TABLE.__str1375 | 0);
  }
  var $m_lowerTranslation = $this + 120 | 0;
  var $cmp2 = HEAPF32[$m_lowerTranslation >> 2] != $lower;
  do {
    if ($cmp2) {
      __label__ = 4;
    } else {
      if (HEAPF32[$this$s2 + 31] != $upper) {
        __label__ = 4;
        break;
      }
      __label__ = 9;
      break;
    }
  } while (0);
  if (__label__ == 4) {
    var $2 = HEAPU32[$this$s2 + 12];
    var $3 = $2 + 4 | 0;
    var $4 = HEAP16[$3 >> 1];
    if (($4 & 2) << 16 >> 16 == 0) {
      var $or_i = $4 | 2;
      HEAP16[$3 >> 1] = $or_i;
      HEAPF32[$2 + 144 >> 2] = 0;
    }
    var $6 = HEAP32[$this$s2 + 13];
    var $7 = $6 + 4 | 0;
    var $8 = HEAP16[$7 >> 1];
    if (($8 & 2) << 16 >> 16 == 0) {
      var $or_i4 = $8 | 2;
      HEAP16[$7 >> 1] = $or_i4;
      HEAPF32[$6 + 144 >> 2] = 0;
    }
    HEAPF32[$m_lowerTranslation >> 2] = $lower;
    HEAPF32[$this$s2 + 31] = $upper;
    HEAPF32[$this$s2 + 28] = 0;
  }
  return;
  return;
}

function __ZN16b2PrismaticJointD1Ev($this) {
  return;
  return;
}

function __ZN13b2PulleyJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var $m_indexB$s2;
  var $velocities$s2;
  var $this$s2 = $this >> 2;
  var $m_indexA = $this + 120 | 0;
  var $0 = HEAP32[$m_indexA >> 2];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $1 = HEAP32[$velocities$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $m_indexB$s2 = ($this + 124 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[($1 + 8 >> 2) + ($9 * 3 | 0)];
  var $17 = HEAPF32[$this$s2 + 37];
  var $18 = HEAPF32[$this$s2 + 36];
  var $19 = HEAPF32[$this$s2 + 39];
  var $20 = HEAPF32[$this$s2 + 38];
  var $21 = HEAPF32[$this$s2 + 32];
  var $22 = HEAPF32[$this$s2 + 33];
  var $23 = HEAPF32[$this$s2 + 28];
  var $24 = HEAPF32[$this$s2 + 34];
  var $25 = HEAPF32[$this$s2 + 35];
  var $mul16 = (-($21 * ($5 + $17 * -$8) + $22 * ($7 + $18 * $8)) - $23 * ($24 * ($13 + $19 * -$16) + $25 * ($15 + $20 * $16))) * -HEAPF32[$this$s2 + 48];
  var $m_impulse = $this + 116 | 0;
  var $add = HEAPF32[$m_impulse >> 2] + $mul16;
  HEAPF32[$m_impulse >> 2] = $add;
  var $sub17 = -$mul16;
  var $mul_i40 = $21 * $sub17;
  var $mul1_i42 = $22 * $sub17;
  var $mul21 = $mul16 * -$23;
  var $mul_i34 = $24 * $mul21;
  var $mul1_i36 = $25 * $mul21;
  var $28 = HEAPF32[$this$s2 + 44];
  var $add_i23 = $5 + $mul_i40 * $28;
  var $add4_i26 = $7 + $mul1_i42 * $28;
  var $add27 = $8 + HEAPF32[$this$s2 + 46] * ($18 * $mul1_i42 - $17 * $mul_i40);
  var $30 = HEAPF32[$this$s2 + 45];
  var $add_i = $13 + $mul_i34 * $30;
  var $add4_i = $15 + $mul1_i36 * $30;
  var $add32 = $16 + HEAPF32[$this$s2 + 47] * ($20 * $mul1_i36 - $19 * $mul_i34);
  var $33 = HEAP32[$velocities$s2] + $0 * 12 | 0;
  var $34 = (tempDoubleF32[0] = $add_i23, tempDoubleI32[0]);
  var $35$0 = $34;
  var $36 = (tempDoubleF32[0] = $add4_i26, tempDoubleI32[0]);
  var $39$0 = 0 | $35$0;
  var $39$1 = $36 | 0;
  var $st$129$0 = $33 | 0;
  HEAP32[$st$129$0 >> 2] = $39$0;
  var $st$129$1 = $33 + 4 | 0;
  HEAP32[$st$129$1 >> 2] = $39$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $add27;
  var $44 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $45 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $46$0 = $45;
  var $47 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
  var $50$0 = 0 | $46$0;
  var $50$1 = $47 | 0;
  var $st$151$0 = $44 | 0;
  HEAP32[$st$151$0 >> 2] = $50$0;
  var $st$151$1 = $44 + 4 | 0;
  HEAP32[$st$151$1 >> 2] = $50$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $add32;
  return;
  return;
}

function __ZN16b2PrismaticJoint4DumpEv($this) {
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  var $1 = HEAP32[HEAP32[$this$s2 + 12] + 8 >> 2];
  var $3 = HEAP32[HEAP32[$this$s2 + 13] + 8 >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str2336 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str1415 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $1, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str2416 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $3, tempInt));
  var $conv = HEAP8[$this + 61 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str3417 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv, tempInt));
  var $conv3 = HEAPF32[$this$s2 + 17];
  var $conv5 = HEAPF32[$this$s2 + 18];
  __Z5b2LogPKcz(STRING_TABLE.__str4418 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv3, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv5, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv7 = HEAPF32[$this$s2 + 19];
  var $conv10 = HEAPF32[$this$s2 + 20];
  __Z5b2LogPKcz(STRING_TABLE.__str5419 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv7, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv10, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv12 = HEAPF32[$this$s2 + 21];
  var $conv15 = HEAPF32[$this$s2 + 22];
  __Z5b2LogPKcz(STRING_TABLE.__str6420 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv12, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv15, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv16 = HEAPF32[$this$s2 + 25];
  __Z5b2LogPKcz(STRING_TABLE.__str6408 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv16, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv18 = HEAP8[$this + 136 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str9383 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv18, tempInt));
  var $conv19 = HEAPF32[$this$s2 + 30];
  __Z5b2LogPKcz(STRING_TABLE.__str11345 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv19, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv20 = HEAPF32[$this$s2 + 31];
  __Z5b2LogPKcz(STRING_TABLE.__str12346 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv20, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv22 = HEAP8[$this + 137 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str7421 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv22, tempInt));
  var $conv23 = HEAPF32[$this$s2 + 33];
  __Z5b2LogPKcz(STRING_TABLE.__str8422 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv23, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv24 = HEAPF32[$this$s2 + 32];
  __Z5b2LogPKcz(STRING_TABLE.__str15349 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv24, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $21 = HEAP32[$this$s2 + 14];
  __Z5b2LogPKcz(STRING_TABLE.__str12426 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $21, tempInt));
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN16b2PrismaticJointD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_f($this, $bA, $bB, $groundA, $groundB, $anchorA, $anchorB, $r) {
  var $this$s2 = $this >> 2;
  HEAP32[$this$s2 + 2] = $bA;
  HEAP32[$this$s2 + 3] = $bB;
  var $0 = $groundA;
  var $1 = $this + 20 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  var $3 = $groundB;
  var $4 = $this + 28 | 0;
  var $5$0 = HEAP32[$3 >> 2];
  var $5$1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 >> 2] = $5$0;
  HEAP32[$4 + 4 >> 2] = $5$1;
  var $x_i_i = $anchorA | 0;
  var $sub_i_i = HEAPF32[$x_i_i >> 2] - HEAPF32[$bA + 12 >> 2];
  var $y_i_i = $anchorA + 4 | 0;
  var $sub4_i_i = HEAPF32[$y_i_i >> 2] - HEAPF32[$bA + 16 >> 2];
  var $10 = HEAPF32[$bA + 24 >> 2];
  var $11 = HEAPF32[$bA + 20 >> 2];
  var $add16_i_i = $sub_i_i * -$11 + $10 * $sub4_i_i;
  var $12 = $this + 36 | 0;
  var $13 = (tempDoubleF32[0] = $10 * $sub_i_i + $11 * $sub4_i_i, tempDoubleI32[0]);
  var $14$0 = $13;
  var $15 = (tempDoubleF32[0] = $add16_i_i, tempDoubleI32[0]);
  var $18$1 = $15 | 0;
  HEAP32[$12 >> 2] = 0 | $14$0;
  HEAP32[$12 + 4 >> 2] = $18$1;
  var $x_i_i1 = $anchorB | 0;
  var $sub_i_i3 = HEAPF32[$x_i_i1 >> 2] - HEAPF32[$bB + 12 >> 2];
  var $y_i_i4 = $anchorB + 4 | 0;
  var $sub4_i_i6 = HEAPF32[$y_i_i4 >> 2] - HEAPF32[$bB + 16 >> 2];
  var $23 = HEAPF32[$bB + 24 >> 2];
  var $24 = HEAPF32[$bB + 20 >> 2];
  var $add16_i_i15 = $sub_i_i3 * -$24 + $23 * $sub4_i_i6;
  var $25 = $this + 44 | 0;
  var $26 = (tempDoubleF32[0] = $23 * $sub_i_i3 + $24 * $sub4_i_i6, tempDoubleI32[0]);
  var $27$0 = $26;
  var $28 = (tempDoubleF32[0] = $add16_i_i15, tempDoubleI32[0]);
  var $31$1 = $28 | 0;
  HEAP32[$25 >> 2] = 0 | $27$0;
  HEAP32[$25 + 4 >> 2] = $31$1;
  var $sub_i28 = HEAPF32[$x_i_i >> 2] - HEAPF32[$groundA >> 2];
  var $sub3_i31 = HEAPF32[$y_i_i >> 2] - HEAPF32[$groundA + 4 >> 2];
  var $add_i24 = $sub_i28 * $sub_i28 + $sub3_i31 * $sub3_i31;
  var $call_i_i25 = _sqrtf($add_i24);
  HEAPF32[$this$s2 + 13] = $call_i_i25;
  var $sub_i = HEAPF32[$x_i_i1 >> 2] - HEAPF32[$groundB >> 2];
  var $sub3_i = HEAPF32[$y_i_i4 >> 2] - HEAPF32[$groundB + 4 >> 2];
  var $add_i = $sub_i * $sub_i + $sub3_i * $sub3_i;
  var $call_i_i = _sqrtf($add_i);
  HEAPF32[$this$s2 + 14] = $call_i_i;
  HEAPF32[$this$s2 + 15] = $r;
  if ($r <= 1.1920928955078125e-7) {
    ___assert_func(STRING_TABLE.__str353 | 0, 51, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_f | 0, STRING_TABLE.__str1354 | 0);
  }
  return;
  return;
}

function __ZN13b2PulleyJointC2EPK16b2PulleyJointDef($this, $def) {
  var $16$s2;
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV7b2Joint + 8 | 0;
  var $bodyA_i = $def + 8 | 0;
  var $bodyB_i = $def + 12 | 0;
  if ((HEAP32[$bodyA_i >> 2] | 0) == (HEAP32[$bodyB_i >> 2] | 0)) {
    ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
  }
  var $3 = HEAP32[$def >> 2];
  HEAP32[$this$s2 + 1] = $3;
  HEAP32[$this$s2 + 2] = 0;
  HEAP32[$this$s2 + 3] = 0;
  var $5 = HEAP32[$bodyA_i >> 2];
  HEAP32[$this$s2 + 12] = $5;
  var $6 = HEAP32[$bodyB_i >> 2];
  HEAP32[$this$s2 + 13] = $6;
  HEAP32[$this$s2 + 14] = 0;
  var $10 = HEAP8[$def + 16 | 0] & 1;
  HEAP8[$this + 61 | 0] = $10;
  HEAP8[$this + 60 | 0] = 0;
  var $14 = HEAP32[$def + 4 >> 2];
  HEAP32[$this$s2 + 16] = $14;
  var $16$s2 = ($this + 16 | 0) >> 2;
  HEAP32[$16$s2] = 0;
  HEAP32[$16$s2 + 1] = 0;
  HEAP32[$16$s2 + 2] = 0;
  HEAP32[$16$s2 + 3] = 0;
  HEAP32[$16$s2 + 4] = 0;
  HEAP32[$16$s2 + 5] = 0;
  HEAP32[$16$s2 + 6] = 0;
  HEAP32[$16$s2 + 7] = 0;
  HEAP32[$0 >> 2] = __ZTV13b2PulleyJoint + 8 | 0;
  var $m_groundAnchorB = $this + 76 | 0;
  var $m_localAnchorA = $this + 92 | 0;
  var $m_localAnchorB = $this + 100 | 0;
  var $17 = $def + 20 | 0;
  var $18 = $this + 68 | 0;
  var $19$0 = HEAP32[$17 >> 2];
  var $19$1 = HEAP32[$17 + 4 >> 2];
  HEAP32[$18 >> 2] = $19$0;
  HEAP32[$18 + 4 >> 2] = $19$1;
  var $20 = $def + 28 | 0;
  var $21 = $m_groundAnchorB;
  var $22$0 = HEAP32[$20 >> 2];
  var $22$1 = HEAP32[$20 + 4 >> 2];
  HEAP32[$21 >> 2] = $22$0;
  HEAP32[$21 + 4 >> 2] = $22$1;
  var $23 = $def + 36 | 0;
  var $24 = $m_localAnchorA;
  var $25$0 = HEAP32[$23 >> 2];
  var $25$1 = HEAP32[$23 + 4 >> 2];
  HEAP32[$24 >> 2] = $25$0;
  HEAP32[$24 + 4 >> 2] = $25$1;
  var $26 = $def + 44 | 0;
  var $27 = $m_localAnchorB;
  var $28$0 = HEAP32[$26 >> 2];
  var $28$1 = HEAP32[$26 + 4 >> 2];
  HEAP32[$27 >> 2] = $28$0;
  HEAP32[$27 + 4 >> 2] = $28$1;
  var $lengthA = $def + 52 | 0;
  var $29 = HEAPF32[$lengthA >> 2];
  HEAPF32[$this$s2 + 21] = $29;
  var $lengthB = $def + 56 | 0;
  var $30 = HEAPF32[$lengthB >> 2];
  HEAPF32[$this$s2 + 22] = $30;
  var $ratio = $def + 60 | 0;
  var $31 = HEAPF32[$ratio >> 2];
  if ($31 != 0) {
    var $32 = $31;
  } else {
    ___assert_func(STRING_TABLE.__str353 | 0, 65, STRING_TABLE.___PRETTY_FUNCTION____ZN13b2PulleyJointC2EPK16b2PulleyJointDef | 0, STRING_TABLE.__str2355 | 0);
    var $32 = HEAPF32[$ratio >> 2];
  }
  var $32;
  HEAPF32[$this$s2 + 28] = $32;
  var $add = HEAPF32[$lengthA >> 2] + $32 * HEAPF32[$lengthB >> 2];
  HEAPF32[$this$s2 + 27] = $add;
  HEAPF32[$this$s2 + 29] = 0;
  return;
  return;
}

function __ZN13b2PulleyJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var $velocities$s2;
  var $m_indexB$s2;
  var $2$s2;
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $0 = HEAP32[$this$s2 + 12], $0$s2 = $0 >> 2;
  var $1 = HEAP32[$0$s2 + 2];
  var $m_indexA = $this + 120 | 0;
  HEAP32[$m_indexA >> 2] = $1;
  var $2 = HEAP32[$this$s2 + 13], $2$s2 = $2 >> 2;
  var $3 = HEAP32[$2$s2 + 2];
  var $m_indexB$s2 = ($this + 124 | 0) >> 2;
  HEAP32[$m_indexB$s2] = $3;
  var $4 = $0 + 28 | 0;
  var $5 = $this + 160 | 0;
  var $6$0 = HEAP32[$4 >> 2];
  var $6$1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 >> 2] = $6$0;
  HEAP32[$5 + 4 >> 2] = $6$1;
  var $7 = $2 + 28 | 0;
  var $8 = $this + 168 | 0;
  var $9$0 = HEAP32[$7 >> 2];
  var $9$1 = HEAP32[$7 + 4 >> 2];
  HEAP32[$8 >> 2] = $9$0;
  HEAP32[$8 + 4 >> 2] = $9$1;
  var $10 = HEAPF32[$0$s2 + 30];
  HEAPF32[$this$s2 + 44] = $10;
  var $11 = HEAPF32[$2$s2 + 30];
  HEAPF32[$this$s2 + 45] = $11;
  var $12 = HEAPF32[$0$s2 + 32];
  HEAPF32[$this$s2 + 46] = $12;
  var $13 = HEAPF32[$2$s2 + 32];
  HEAPF32[$this$s2 + 47] = $13;
  var $14 = HEAP32[$data + 24 >> 2];
  var $15 = $14 + $1 * 12 | 0;
  var $16$1 = HEAP32[$15 + 4 >> 2];
  var $18 = (tempDoubleI32[0] = HEAP32[$15 >> 2], tempDoubleF32[0]);
  var $20 = (tempDoubleI32[0] = $16$1, tempDoubleF32[0]);
  var $21 = HEAPF32[($14 + 8 >> 2) + ($1 * 3 | 0)];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $22 = HEAP32[$velocities$s2];
  var $23 = $22 + $1 * 12 | 0;
  var $24$1 = HEAP32[$23 + 4 >> 2];
  var $26 = (tempDoubleI32[0] = HEAP32[$23 >> 2], tempDoubleF32[0]);
  var $28 = (tempDoubleI32[0] = $24$1, tempDoubleF32[0]);
  var $29 = HEAPF32[($22 + 8 >> 2) + ($1 * 3 | 0)];
  var $30 = $14 + $3 * 12 | 0;
  var $31$1 = HEAP32[$30 + 4 >> 2];
  var $33 = (tempDoubleI32[0] = HEAP32[$30 >> 2], tempDoubleF32[0]);
  var $35 = (tempDoubleI32[0] = $31$1, tempDoubleF32[0]);
  var $36 = HEAPF32[($14 + 8 >> 2) + ($3 * 3 | 0)];
  var $37 = $22 + $3 * 12 | 0;
  var $38$1 = HEAP32[$37 + 4 >> 2];
  var $40 = (tempDoubleI32[0] = HEAP32[$37 >> 2], tempDoubleF32[0]);
  var $42 = (tempDoubleI32[0] = $38$1, tempDoubleF32[0]);
  var $43 = HEAPF32[($22 + 8 >> 2) + ($3 * 3 | 0)];
  var $call_i_i = _sinf($21);
  var $call2_i_i = _cosf($21);
  var $call_i_i1 = _sinf($36);
  var $call2_i_i3 = _cosf($36);
  var $m_rA = $this + 144 | 0;
  var $44 = HEAPF32[$this$s2 + 23];
  var $bitcast = (tempDoubleI32[0] = $6$0, tempDoubleF32[0]);
  var $sub_i = $44 - $bitcast;
  var $45 = HEAPF32[$this$s2 + 24];
  var $48 = (tempDoubleI32[0] = $6$1, tempDoubleF32[0]);
  var $sub3_i = $45 - $48;
  var $sub_i7 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $49 = $m_rA;
  var $50 = (tempDoubleF32[0] = $sub_i7, tempDoubleI32[0]);
  var $51$0 = $50;
  var $52 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $55$0 = 0 | $51$0;
  var $55$1 = $52 | 0;
  HEAP32[$49 >> 2] = $55$0;
  HEAP32[$49 + 4 >> 2] = $55$1;
  var $m_rB = $this + 152 | 0;
  var $56 = HEAPF32[$this$s2 + 25];
  var $bitcast160 = (tempDoubleI32[0] = $9$0, tempDoubleF32[0]);
  var $sub_i12 = $56 - $bitcast160;
  var $57 = HEAPF32[$this$s2 + 26];
  var $60 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
  var $sub3_i15 = $57 - $60;
  var $sub_i100 = $call2_i_i3 * $sub_i12 - $call_i_i1 * $sub3_i15;
  var $add_i103 = $call_i_i1 * $sub_i12 + $call2_i_i3 * $sub3_i15;
  var $61 = $m_rB;
  var $62 = (tempDoubleF32[0] = $sub_i100, tempDoubleI32[0]);
  var $63$0 = $62;
  var $64 = (tempDoubleF32[0] = $add_i103, tempDoubleI32[0]);
  var $67$0 = 0 | $63$0;
  var $67$1 = $64 | 0;
  HEAP32[$61 >> 2] = $67$0;
  HEAP32[$61 + 4 >> 2] = $67$1;
  var $m_uA = $this + 128 | 0;
  var $sub_i137 = $18 + $sub_i7 - HEAPF32[$this$s2 + 17];
  var $sub3_i140 = $20 + $add_i - HEAPF32[$this$s2 + 18];
  var $70 = $m_uA;
  var $71 = (tempDoubleF32[0] = $sub_i137, tempDoubleI32[0]);
  var $72$0 = $71;
  var $73 = (tempDoubleF32[0] = $sub3_i140, tempDoubleI32[0]);
  var $76$0 = 0 | $72$0;
  var $76$1 = $73 | 0;
  HEAP32[$70 >> 2] = $76$0;
  HEAP32[$70 + 4 >> 2] = $76$1;
  var $m_uB = $this + 136 | 0;
  var $sub_i121 = $33 + $sub_i100 - HEAPF32[$this$s2 + 19];
  var $sub3_i124 = $35 + $add_i103 - HEAPF32[$this$s2 + 20];
  var $79 = $m_uB;
  var $80 = (tempDoubleF32[0] = $sub_i121, tempDoubleI32[0]);
  var $81$0 = $80;
  var $82 = (tempDoubleF32[0] = $sub3_i124, tempDoubleI32[0]);
  var $85$0 = 0 | $81$0;
  var $85$1 = $82 | 0;
  HEAP32[$79 >> 2] = $85$0;
  HEAP32[$79 + 4 >> 2] = $85$1;
  var $x_i106 = $m_uA | 0;
  var $y_i108 = $this + 132 | 0;
  var $add_i110 = $sub_i137 * $sub_i137 + $sub3_i140 * $sub3_i140;
  var $call_i_i111 = _sqrtf($add_i110);
  var $x_i88 = $m_uB | 0;
  var $y_i90 = $this + 140 | 0;
  var $add_i92 = $sub_i121 * $sub_i121 + $sub3_i124 * $sub3_i124;
  var $call_i_i93 = _sqrtf($add_i92);
  if ($call_i_i111 > .04999999701976776) {
    var $div = 1 / $call_i_i111;
    var $mul_i85 = $sub_i137 * $div;
    HEAPF32[$x_i106 >> 2] = $mul_i85;
    var $87 = $sub3_i140 * $div;
    var $86 = $mul_i85;
  } else {
    HEAPF32[$x_i106 >> 2] = 0;
    var $87 = 0;
    var $86 = 0;
  }
  var $86;
  var $87;
  HEAPF32[$y_i108 >> 2] = $87;
  if ($call_i_i93 > .04999999701976776) {
    var $div57 = 1 / $call_i_i93;
    var $mul_i80 = $sub_i121 * $div57;
    HEAPF32[$x_i88 >> 2] = $mul_i80;
    var $89 = $sub3_i124 * $div57;
    var $88 = $mul_i80;
  } else {
    HEAPF32[$x_i88 >> 2] = 0;
    var $89 = 0;
    var $88 = 0;
  }
  var $88;
  var $89;
  HEAPF32[$y_i90 >> 2] = $89;
  var $sub_i76 = $sub_i7 * $87 - $add_i * $86;
  var $sub_i69 = $sub_i100 * $89 - $add_i103 * $88;
  var $90 = HEAPF32[$this$s2 + 28];
  var $add78 = $10 + $12 * $sub_i76 * $sub_i76 + $90 * $90 * ($11 + $13 * $sub_i69 * $sub_i69);
  if ($add78 > 0) {
    var $storemerge = 1 / $add78;
  } else {
    var $storemerge = $add78;
  }
  var $storemerge;
  HEAPF32[$this$s2 + 48] = $storemerge;
  if ((HEAP8[$data + 20 | 0] & 1) << 24 >> 24 == 0) {
    HEAPF32[$this$s2 + 29] = 0;
    var $wB_0 = $43;
    var $wA_0 = $29;
    var $98 = $26;
    var $97 = $28;
    var $96 = $40;
    var $95 = $42;
  } else {
    var $m_impulse = $this + 116 | 0;
    var $mul88 = HEAPF32[$m_impulse >> 2] * HEAPF32[$data + 8 >> 2];
    HEAPF32[$m_impulse >> 2] = $mul88;
    var $sub = -$mul88;
    var $mul_i58 = $86 * $sub;
    var $mul1_i60 = $87 * $sub;
    var $mul94 = $mul88 * -$90;
    var $mul_i52 = $88 * $mul94;
    var $mul1_i54 = $89 * $mul94;
    var $wB_0 = $43 + $13 * ($sub_i100 * $mul1_i54 - $add_i103 * $mul_i52);
    var $wA_0 = $29 + $12 * ($sub_i7 * $mul1_i60 - $add_i * $mul_i58);
    var $98 = $26 + $mul_i58 * $10;
    var $97 = $28 + $mul1_i60 * $10;
    var $96 = $40 + $mul_i52 * $11;
    var $95 = $42 + $mul1_i54 * $11;
  }
  var $95;
  var $96;
  var $97;
  var $98;
  var $wA_0;
  var $wB_0;
  var $100 = HEAP32[$velocities$s2] + $1 * 12 | 0;
  var $101 = (tempDoubleF32[0] = $98, tempDoubleI32[0]);
  var $102$0 = $101;
  var $103 = (tempDoubleF32[0] = $97, tempDoubleI32[0]);
  var $106$1 = $103 | 0;
  var $st$19$0 = $100 | 0;
  HEAP32[$st$19$0 >> 2] = 0 | $102$0;
  var $st$19$1 = $100 + 4 | 0;
  HEAP32[$st$19$1 >> 2] = $106$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $wA_0;
  var $111 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $112 = (tempDoubleF32[0] = $96, tempDoubleI32[0]);
  var $113$0 = $112;
  var $114 = (tempDoubleF32[0] = $95, tempDoubleI32[0]);
  var $117$1 = $114 | 0;
  var $st$41$0 = $111 | 0;
  HEAP32[$st$41$0 >> 2] = 0 | $113$0;
  var $st$41$1 = $111 + 4 | 0;
  HEAP32[$st$41$1 >> 2] = $117$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $wB_0;
  return;
  return;
}

function __ZN13b2PulleyJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var $m_indexB$s2;
  var $positions$s2;
  var $this$s2 = $this >> 2;
  var $m_indexA = $this + 120 | 0;
  var $0 = HEAP32[$m_indexA >> 2];
  var $positions$s2 = ($data + 24 | 0) >> 2;
  var $1 = HEAP32[$positions$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $m_indexB$s2 = ($this + 124 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[($1 + 8 >> 2) + ($9 * 3 | 0)];
  var $call_i_i = _sinf($8);
  var $call2_i_i = _cosf($8);
  var $call_i_i1 = _sinf($16);
  var $call2_i_i3 = _cosf($16);
  var $sub_i = HEAPF32[$this$s2 + 23] - HEAPF32[$this$s2 + 40];
  var $sub3_i = HEAPF32[$this$s2 + 24] - HEAPF32[$this$s2 + 41];
  var $sub_i7 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $sub_i12 = HEAPF32[$this$s2 + 25] - HEAPF32[$this$s2 + 42];
  var $sub3_i15 = HEAPF32[$this$s2 + 26] - HEAPF32[$this$s2 + 43];
  var $sub_i101 = $call2_i_i3 * $sub_i12 - $call_i_i1 * $sub3_i15;
  var $add_i104 = $call_i_i1 * $sub_i12 + $call2_i_i3 * $sub3_i15;
  var $sub_i138 = $5 + $sub_i7 - HEAPF32[$this$s2 + 17];
  var $sub3_i141 = $7 + $add_i - HEAPF32[$this$s2 + 18];
  var $sub_i122 = $13 + $sub_i101 - HEAPF32[$this$s2 + 19];
  var $sub3_i125 = $15 + $add_i104 - HEAPF32[$this$s2 + 20];
  var $add_i111 = $sub_i138 * $sub_i138 + $sub3_i141 * $sub3_i141;
  var $call_i_i112 = _sqrtf($add_i111);
  var $add_i93 = $sub_i122 * $sub_i122 + $sub3_i125 * $sub3_i125;
  var $call_i_i94 = _sqrtf($add_i93);
  if ($call_i_i112 > .04999999701976776) {
    var $div = 1 / $call_i_i112;
    var $30 = $sub_i138 * $div;
    var $29 = $sub3_i141 * $div;
  } else {
    var $30 = 0;
    var $29 = 0;
  }
  var $29;
  var $30;
  if ($call_i_i94 > .04999999701976776) {
    var $div18 = 1 / $call_i_i94;
    var $32 = $sub_i122 * $div18;
    var $31 = $sub3_i125 * $div18;
  } else {
    var $32 = 0;
    var $31 = 0;
  }
  var $31;
  var $32;
  var $sub_i77 = $sub_i7 * $29 - $add_i * $30;
  var $sub_i70 = $sub_i101 * $31 - $add_i104 * $32;
  var $33 = HEAPF32[$this$s2 + 44];
  var $34 = HEAPF32[$this$s2 + 46];
  var $35 = HEAPF32[$this$s2 + 45];
  var $36 = HEAPF32[$this$s2 + 47];
  var $37 = HEAPF32[$this$s2 + 28];
  var $add30 = $33 + $34 * $sub_i77 * $sub_i77 + $37 * $37 * ($35 + $36 * $sub_i70 * $sub_i70);
  if ($add30 > 0) {
    var $mass_0 = 1 / $add30;
  } else {
    var $mass_0 = $add30;
  }
  var $mass_0;
  var $sub37 = HEAPF32[$this$s2 + 27] - $call_i_i112 - $37 * $call_i_i94;
  if ($sub37 > 0) {
    var $cond_i = $sub37;
  } else {
    var $cond_i = -$sub37;
  }
  var $cond_i;
  var $mul40 = $sub37 * -$mass_0;
  var $sub41 = -$mul40;
  var $mul_i58 = $30 * $sub41;
  var $mul1_i60 = $29 * $sub41;
  var $mul44 = $mul40 * -$37;
  var $mul_i52 = $32 * $mul44;
  var $mul1_i54 = $31 * $mul44;
  var $add_i41 = $5 + $mul_i58 * $33;
  var $add4_i44 = $7 + $mul1_i60 * $33;
  var $add50 = $8 + $34 * ($sub_i7 * $mul1_i60 - $add_i * $mul_i58);
  var $add_i24 = $13 + $mul_i52 * $35;
  var $add4_i = $15 + $mul1_i54 * $35;
  var $add56 = $16 + $36 * ($sub_i101 * $mul1_i54 - $add_i104 * $mul_i52);
  var $39 = (tempDoubleF32[0] = $add_i41, tempDoubleI32[0]);
  var $40$0 = $39;
  var $41 = (tempDoubleF32[0] = $add4_i44, tempDoubleI32[0]);
  var $44$0 = 0 | $40$0;
  var $44$1 = $41 | 0;
  var $st$38$0 = $2 | 0;
  HEAP32[$st$38$0 >> 2] = $44$0;
  var $st$38$1 = $2 + 4 | 0;
  HEAP32[$st$38$1 >> 2] = $44$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $add50;
  var $49 = HEAP32[$positions$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $50 = (tempDoubleF32[0] = $add_i24, tempDoubleI32[0]);
  var $51$0 = $50;
  var $52 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
  var $55$0 = 0 | $51$0;
  var $55$1 = $52 | 0;
  var $st$60$0 = $49 | 0;
  HEAP32[$st$60$0 >> 2] = $55$0;
  var $st$60$1 = $49 + 4 | 0;
  HEAP32[$st$60$1 >> 2] = $55$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $add56;
  return $cond_i < .004999999888241291;
  return null;
}

function __ZNK13b2PulleyJoint17GetReactionTorqueEf($this, $inv_dt) {
  return 0;
  return null;
}

function __ZN13b2PulleyJointD1Ev($this) {
  return;
  return;
}

function __ZNK13b2PulleyJoint10GetAnchorAEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 48 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 92 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 96 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK13b2PulleyJoint10GetAnchorBEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 52 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 100 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 104 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK13b2PulleyJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var $0 = HEAPF32[$this + 116 >> 2];
  var $mul_i2 = HEAPF32[$this + 136 >> 2] * $0 * $inv_dt;
  var $mul1_i4 = HEAPF32[$this + 140 >> 2] * $0 * $inv_dt;
  HEAPF32[$agg_result >> 2] = $mul_i2;
  HEAPF32[$agg_result + 4 >> 2] = $mul1_i4;
  return;
  return;
}

function __ZNK13b2PulleyJoint16GetGroundAnchorAEv($agg_result, $this) {
  var $0 = $this + 68 | 0;
  var $1 = $agg_result;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function __ZNK13b2PulleyJoint16GetGroundAnchorBEv($agg_result, $this) {
  var $0 = $this + 76 | 0;
  var $1 = $agg_result;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function __ZNK13b2PulleyJoint8GetRatioEv($this) {
  return HEAPF32[$this + 112 >> 2];
  return null;
}

function __ZN18b2RevoluteJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($this, $bA, $bB, $anchor) {
  var $bB$s2 = $bB >> 2;
  var $bA$s2 = $bA >> 2;
  HEAP32[$this + 8 >> 2] = $bA;
  HEAP32[$this + 12 >> 2] = $bB;
  var $x_i_i = $anchor | 0;
  var $sub_i_i = HEAPF32[$x_i_i >> 2] - HEAPF32[$bA$s2 + 3];
  var $y_i_i = $anchor + 4 | 0;
  var $sub4_i_i = HEAPF32[$y_i_i >> 2] - HEAPF32[$bA$s2 + 4];
  var $4 = HEAPF32[$bA$s2 + 6];
  var $5 = HEAPF32[$bA$s2 + 5];
  var $add16_i_i = $sub_i_i * -$5 + $4 * $sub4_i_i;
  var $6 = $this + 20 | 0;
  var $7 = (tempDoubleF32[0] = $4 * $sub_i_i + $5 * $sub4_i_i, tempDoubleI32[0]);
  var $8$0 = $7;
  var $9 = (tempDoubleF32[0] = $add16_i_i, tempDoubleI32[0]);
  var $12$1 = $9 | 0;
  HEAP32[$6 >> 2] = 0 | $8$0;
  HEAP32[$6 + 4 >> 2] = $12$1;
  var $sub_i_i4 = HEAPF32[$x_i_i >> 2] - HEAPF32[$bB$s2 + 3];
  var $sub4_i_i7 = HEAPF32[$y_i_i >> 2] - HEAPF32[$bB$s2 + 4];
  var $17 = HEAPF32[$bB$s2 + 6];
  var $18 = HEAPF32[$bB$s2 + 5];
  var $add16_i_i16 = $sub_i_i4 * -$18 + $17 * $sub4_i_i7;
  var $19 = $this + 28 | 0;
  var $20 = (tempDoubleF32[0] = $17 * $sub_i_i4 + $18 * $sub4_i_i7, tempDoubleI32[0]);
  var $21$0 = $20;
  var $22 = (tempDoubleF32[0] = $add16_i_i16, tempDoubleI32[0]);
  var $25$1 = $22 | 0;
  HEAP32[$19 >> 2] = 0 | $21$0;
  HEAP32[$19 + 4 >> 2] = $25$1;
  var $sub = HEAPF32[$bB$s2 + 14] - HEAPF32[$bA$s2 + 14];
  HEAPF32[$this + 36 >> 2] = $sub;
  return;
  return;
}

function __ZNK13b2PulleyJoint10GetLengthAEv($this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 48 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 92 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 96 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  var $7 = $this + 68 | 0;
  var $8$1 = HEAP32[$7 + 4 >> 2];
  var $10 = (tempDoubleI32[0] = HEAP32[$7 >> 2], tempDoubleF32[0]);
  var $12 = (tempDoubleI32[0] = $8$1, tempDoubleF32[0]);
  var $sub_i = $add_i_i - $10;
  var $sub3_i = $add17_i_i - $12;
  var $add_i = $sub_i * $sub_i + $sub3_i * $sub3_i;
  var $call_i_i = _sqrtf($add_i);
  return $call_i_i;
  return null;
}

function __ZNK13b2PulleyJoint10GetLengthBEv($this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 52 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 100 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 104 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  var $7 = $this + 76 | 0;
  var $8$1 = HEAP32[$7 + 4 >> 2];
  var $10 = (tempDoubleI32[0] = HEAP32[$7 >> 2], tempDoubleF32[0]);
  var $12 = (tempDoubleI32[0] = $8$1, tempDoubleF32[0]);
  var $sub_i = $add_i_i - $10;
  var $sub3_i = $add17_i_i - $12;
  var $add_i = $sub_i * $sub_i + $sub3_i * $sub3_i;
  var $call_i_i = _sqrtf($add_i);
  return $call_i_i;
  return null;
}

function __ZN13b2PulleyJoint4DumpEv($this) {
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  var $1 = HEAP32[HEAP32[$this$s2 + 12] + 8 >> 2];
  var $3 = HEAP32[HEAP32[$this$s2 + 13] + 8 >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str3356 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str1415 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $1, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str2416 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $3, tempInt));
  var $conv = HEAP8[$this + 61 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str3417 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv, tempInt));
  var $conv3 = HEAPF32[$this$s2 + 17];
  var $conv5 = HEAPF32[$this$s2 + 18];
  __Z5b2LogPKcz(STRING_TABLE.__str7360 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv3, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv5, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv7 = HEAPF32[$this$s2 + 19];
  var $conv10 = HEAPF32[$this$s2 + 20];
  __Z5b2LogPKcz(STRING_TABLE.__str8361 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv7, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv10, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv12 = HEAPF32[$this$s2 + 23];
  var $conv15 = HEAPF32[$this$s2 + 24];
  __Z5b2LogPKcz(STRING_TABLE.__str4418 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv12, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv15, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv17 = HEAPF32[$this$s2 + 25];
  var $conv20 = HEAPF32[$this$s2 + 26];
  __Z5b2LogPKcz(STRING_TABLE.__str5419 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv17, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv20, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv21 = HEAPF32[$this$s2 + 21];
  __Z5b2LogPKcz(STRING_TABLE.__str11364 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv21, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv22 = HEAPF32[$this$s2 + 22];
  __Z5b2LogPKcz(STRING_TABLE.__str12365 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv22, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv23 = HEAPF32[$this$s2 + 28];
  __Z5b2LogPKcz(STRING_TABLE.__str13366 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv23, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $17 = HEAP32[$this$s2 + 14];
  __Z5b2LogPKcz(STRING_TABLE.__str12426 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $17, tempInt));
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN13b2PulleyJointD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN15b2RevoluteJointC2EPK18b2RevoluteJointDef($this, $def) {
  var $16$s2;
  var $def$s2 = $def >> 2;
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV7b2Joint + 8 | 0;
  var $bodyA_i = $def + 8 | 0;
  var $bodyB_i = $def + 12 | 0;
  if ((HEAP32[$bodyA_i >> 2] | 0) == (HEAP32[$bodyB_i >> 2] | 0)) {
    ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
  }
  var $3 = HEAP32[$def$s2];
  HEAP32[$this$s2 + 1] = $3;
  HEAP32[$this$s2 + 2] = 0;
  HEAP32[$this$s2 + 3] = 0;
  var $5 = HEAP32[$bodyA_i >> 2];
  HEAP32[$this$s2 + 12] = $5;
  var $6 = HEAP32[$bodyB_i >> 2];
  HEAP32[$this$s2 + 13] = $6;
  HEAP32[$this$s2 + 14] = 0;
  var $10 = HEAP8[$def + 16 | 0] & 1;
  HEAP8[$this + 61 | 0] = $10;
  HEAP8[$this + 60 | 0] = 0;
  var $14 = HEAP32[$def$s2 + 1];
  HEAP32[$this$s2 + 16] = $14;
  var $16$s2 = ($this + 16 | 0) >> 2;
  HEAP32[$16$s2] = 0;
  HEAP32[$16$s2 + 1] = 0;
  HEAP32[$16$s2 + 2] = 0;
  HEAP32[$16$s2 + 3] = 0;
  HEAP32[$16$s2 + 4] = 0;
  HEAP32[$16$s2 + 5] = 0;
  HEAP32[$16$s2 + 6] = 0;
  HEAP32[$16$s2 + 7] = 0;
  HEAP32[$0 >> 2] = __ZTV15b2RevoluteJoint + 8 | 0;
  var $m_localAnchorB = $this + 76 | 0;
  var $17 = $def + 20 | 0;
  var $18 = $this + 68 | 0;
  var $19$0 = HEAP32[$17 >> 2];
  var $19$1 = HEAP32[$17 + 4 >> 2];
  HEAP32[$18 >> 2] = $19$0;
  HEAP32[$18 + 4 >> 2] = $19$1;
  var $20 = $def + 28 | 0;
  var $21 = $m_localAnchorB;
  var $22$0 = HEAP32[$20 >> 2];
  var $22$1 = HEAP32[$20 + 4 >> 2];
  HEAP32[$21 >> 2] = $22$0;
  HEAP32[$21 + 4 >> 2] = $22$1;
  var $23 = HEAPF32[$def$s2 + 9];
  HEAPF32[$this$s2 + 29] = $23;
  HEAPF32[$this$s2 + 21] = 0;
  HEAPF32[$this$s2 + 22] = 0;
  HEAPF32[$this$s2 + 23] = 0;
  HEAPF32[$this$s2 + 24] = 0;
  var $24 = HEAPF32[$def$s2 + 11];
  HEAPF32[$this$s2 + 30] = $24;
  var $25 = HEAPF32[$def$s2 + 12];
  HEAPF32[$this$s2 + 31] = $25;
  var $26 = HEAPF32[$def$s2 + 15];
  HEAPF32[$this$s2 + 26] = $26;
  var $27 = HEAPF32[$def$s2 + 14];
  HEAPF32[$this$s2 + 27] = $27;
  var $29 = HEAP8[$def + 40 | 0] & 1;
  HEAP8[$this + 112 | 0] = $29;
  var $31 = HEAP8[$def + 52 | 0] & 1;
  HEAP8[$this + 100 | 0] = $31;
  HEAP32[$this$s2 + 56] = 0;
  return;
  return;
}

function __ZN15b2RevoluteJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var $m_limitState166$s2;
  var $velocities$s2;
  var $m_indexB$s2;
  var $2$s2;
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $0 = HEAP32[$this$s2 + 12], $0$s2 = $0 >> 2;
  var $1 = HEAPU32[$0$s2 + 2];
  var $m_indexA = $this + 128 | 0;
  HEAP32[$m_indexA >> 2] = $1;
  var $2 = HEAP32[$this$s2 + 13], $2$s2 = $2 >> 2;
  var $3 = HEAP32[$2$s2 + 2];
  var $m_indexB$s2 = ($this + 132 | 0) >> 2;
  HEAP32[$m_indexB$s2] = $3;
  var $4 = $0 + 28 | 0;
  var $5 = $this + 152 | 0;
  var $6$0 = HEAP32[$4 >> 2];
  var $6$1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 >> 2] = $6$0;
  HEAP32[$5 + 4 >> 2] = $6$1;
  var $7 = $2 + 28 | 0;
  var $8 = $this + 160 | 0;
  var $9$0 = HEAP32[$7 >> 2];
  var $9$1 = HEAP32[$7 + 4 >> 2];
  HEAP32[$8 >> 2] = $9$0;
  HEAP32[$8 + 4 >> 2] = $9$1;
  var $10 = HEAPF32[$0$s2 + 30];
  HEAPF32[$this$s2 + 42] = $10;
  var $11 = HEAPF32[$2$s2 + 30];
  HEAPF32[$this$s2 + 43] = $11;
  var $12 = HEAPF32[$0$s2 + 32];
  HEAPF32[$this$s2 + 44] = $12;
  var $13 = HEAPF32[$2$s2 + 32];
  HEAPF32[$this$s2 + 45] = $13;
  var $14 = HEAP32[$data + 24 >> 2];
  var $15 = HEAPF32[($14 + 8 >> 2) + ($1 * 3 | 0)];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $16 = HEAP32[$velocities$s2];
  var $17 = $16 + $1 * 12 | 0;
  var $18$1 = HEAP32[$17 + 4 >> 2];
  var $20 = (tempDoubleI32[0] = HEAP32[$17 >> 2], tempDoubleF32[0]);
  var $22 = (tempDoubleI32[0] = $18$1, tempDoubleF32[0]);
  var $23 = HEAPF32[($16 + 8 >> 2) + ($1 * 3 | 0)];
  var $24 = HEAPF32[($14 + 8 >> 2) + ($3 * 3 | 0)];
  var $25 = $16 + $3 * 12 | 0;
  var $26$1 = HEAP32[$25 + 4 >> 2];
  var $28 = (tempDoubleI32[0] = HEAP32[$25 >> 2], tempDoubleF32[0]);
  var $30 = (tempDoubleI32[0] = $26$1, tempDoubleF32[0]);
  var $31 = HEAPF32[($16 + 8 >> 2) + ($3 * 3 | 0)];
  var $call_i_i = _sinf($15);
  var $call2_i_i = _cosf($15);
  var $call_i_i7 = _sinf($24);
  var $call2_i_i9 = _cosf($24);
  var $m_rA = $this + 136 | 0;
  var $32 = HEAPF32[$this$s2 + 17];
  var $bitcast = (tempDoubleI32[0] = $6$0, tempDoubleF32[0]);
  var $sub_i = $32 - $bitcast;
  var $33 = HEAPF32[$this$s2 + 18];
  var $36 = (tempDoubleI32[0] = $6$1, tempDoubleF32[0]);
  var $sub3_i = $33 - $36;
  var $sub_i13 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $37 = $m_rA;
  var $38 = (tempDoubleF32[0] = $sub_i13, tempDoubleI32[0]);
  var $39$0 = $38;
  var $40 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $43$0 = 0 | $39$0;
  var $43$1 = $40 | 0;
  HEAP32[$37 >> 2] = $43$0;
  HEAP32[$37 + 4 >> 2] = $43$1;
  var $m_rB = $this + 144 | 0;
  var $44 = HEAPF32[$this$s2 + 19];
  var $bitcast85 = (tempDoubleI32[0] = $9$0, tempDoubleF32[0]);
  var $sub_i18 = $44 - $bitcast85;
  var $45 = HEAPF32[$this$s2 + 20];
  var $48 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
  var $sub3_i21 = $45 - $48;
  var $sub_i70 = $call2_i_i9 * $sub_i18 - $call_i_i7 * $sub3_i21;
  var $add_i73 = $call_i_i7 * $sub_i18 + $call2_i_i9 * $sub3_i21;
  var $49 = $m_rB;
  var $50 = (tempDoubleF32[0] = $sub_i70, tempDoubleI32[0]);
  var $51$0 = $50;
  var $52 = (tempDoubleF32[0] = $add_i73, tempDoubleI32[0]);
  var $55$0 = 0 | $51$0;
  var $55$1 = $52 | 0;
  HEAP32[$49 >> 2] = $55$0;
  HEAP32[$49 + 4 >> 2] = $55$1;
  var $add = $12 + $13;
  var $cmp = $add == 0;
  var $add47 = $10 + $11;
  var $add59 = $add47 + $add_i * $add_i * $12 + $add_i73 * $add_i73 * $13;
  HEAPF32[$this$s2 + 46] = $add59;
  var $sub = -$add_i;
  var $sub72 = $sub_i13 * $sub * $12 - $add_i73 * $sub_i70 * $13;
  HEAPF32[$this$s2 + 49] = $sub72;
  var $sub82 = $12 * $sub - $add_i73 * $13;
  HEAPF32[$this$s2 + 52] = $sub82;
  HEAPF32[$this$s2 + 47] = $sub72;
  var $add105 = $add47 + $sub_i13 * $sub_i13 * $12 + $sub_i70 * $sub_i70 * $13;
  HEAPF32[$this$s2 + 50] = $add105;
  var $add115 = $sub_i13 * $12 + $sub_i70 * $13;
  HEAPF32[$this$s2 + 53] = $add115;
  HEAPF32[$this$s2 + 48] = $sub82;
  HEAPF32[$this$s2 + 51] = $add115;
  HEAPF32[$this$s2 + 54] = $add;
  if ($add > 0) {
    var $storemerge = 1 / $add;
  } else {
    var $storemerge = $add;
  }
  var $storemerge;
  HEAPF32[$this$s2 + 55] = $storemerge;
  if ((HEAP8[$this + 100 | 0] & 1) << 24 >> 24 == 0 | $cmp) {
    HEAPF32[$this$s2 + 24] = 0;
  }
  if ((HEAP8[$this + 112 | 0] & 1) << 24 >> 24 == 0 | $cmp) {
    HEAP32[$this$s2 + 56] = 0;
  } else {
    var $sub149 = $24 - $15 - HEAPF32[$this$s2 + 29];
    var $61 = HEAPF32[$this$s2 + 31];
    var $62 = HEAPF32[$this$s2 + 30];
    var $sub150 = $61 - $62;
    if ($sub150 > 0) {
      var $cond_i = $sub150;
    } else {
      var $cond_i = -$sub150;
    }
    var $cond_i;
    if ($cond_i < .06981317698955536) {
      HEAP32[$this$s2 + 56] = 3;
    } else {
      if ($sub149 > $62) {
        var $m_limitState166$s2 = ($this + 224 | 0) >> 2;
        if ($sub149 < $61) {
          HEAP32[$m_limitState166$s2] = 0;
          HEAPF32[$this$s2 + 23] = 0;
        } else {
          if ((HEAP32[$m_limitState166$s2] | 0) != 2) {
            HEAPF32[$this$s2 + 23] = 0;
          }
          HEAP32[$m_limitState166$s2] = 2;
        }
      } else {
        var $m_limitState156 = $this + 224 | 0;
        if ((HEAP32[$m_limitState156 >> 2] | 0) != 1) {
          HEAPF32[$this$s2 + 23] = 0;
        }
        HEAP32[$m_limitState156 >> 2] = 1;
      }
    }
  }
  var $m_impulse185 = $this + 84 | 0;
  if ((HEAP8[$data + 20 | 0] & 1) << 24 >> 24 == 0) {
    HEAPF32[$m_impulse185 >> 2] = 0;
    HEAPF32[$this$s2 + 22] = 0;
    HEAPF32[$this$s2 + 23] = 0;
    HEAPF32[$this$s2 + 24] = 0;
    var $wB_0 = $31;
    var $wA_0 = $23;
    var $76 = $20;
    var $75 = $22;
    var $74 = $28;
    var $73 = $30;
  } else {
    var $dtRatio = $data + 8 | 0;
    var $67 = HEAPF32[$dtRatio >> 2];
    var $x_i58 = $m_impulse185 | 0;
    var $mul_i59 = HEAPF32[$x_i58 >> 2] * $67;
    HEAPF32[$x_i58 >> 2] = $mul_i59;
    var $y_i60 = $this + 88 | 0;
    var $mul2_i = HEAPF32[$y_i60 >> 2] * $67;
    HEAPF32[$y_i60 >> 2] = $mul2_i;
    var $z_i61 = $this + 92 | 0;
    var $mul3_i62 = HEAPF32[$z_i61 >> 2] * $67;
    HEAPF32[$z_i61 >> 2] = $mul3_i62;
    var $m_motorImpulse189 = $this + 96 | 0;
    var $mul190 = HEAPF32[$m_motorImpulse189 >> 2] * HEAPF32[$dtRatio >> 2];
    HEAPF32[$m_motorImpulse189 >> 2] = $mul190;
    var $wB_0 = $31 + $13 * ($sub_i70 * $mul2_i - $add_i73 * $mul_i59 + $mul190 + $mul3_i62);
    var $wA_0 = $23 - $12 * ($sub_i13 * $mul2_i - $add_i * $mul_i59 + $mul190 + $mul3_i62);
    var $76 = $20 - $mul_i59 * $10;
    var $75 = $22 - $mul2_i * $10;
    var $74 = $28 + $mul_i59 * $11;
    var $73 = $30 + $mul2_i * $11;
  }
  var $73;
  var $74;
  var $75;
  var $76;
  var $wA_0;
  var $wB_0;
  var $78 = HEAP32[$velocities$s2] + $1 * 12 | 0;
  var $79 = (tempDoubleF32[0] = $76, tempDoubleI32[0]);
  var $80$0 = $79;
  var $81 = (tempDoubleF32[0] = $75, tempDoubleI32[0]);
  var $84$1 = $81 | 0;
  var $st$19$0 = $78 | 0;
  HEAP32[$st$19$0 >> 2] = 0 | $80$0;
  var $st$19$1 = $78 + 4 | 0;
  HEAP32[$st$19$1 >> 2] = $84$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $wA_0;
  var $89 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $90 = (tempDoubleF32[0] = $74, tempDoubleI32[0]);
  var $91$0 = $90;
  var $92 = (tempDoubleF32[0] = $73, tempDoubleI32[0]);
  var $95$1 = $92 | 0;
  var $st$41$0 = $89 | 0;
  HEAP32[$st$41$0 >> 2] = 0 | $91$0;
  var $st$41$1 = $89 + 4 | 0;
  HEAP32[$st$41$1 >> 2] = $95$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $wB_0;
  return;
  return;
}

function __ZNK15b2RevoluteJoint10GetAnchorAEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 48 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 68 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 72 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK15b2RevoluteJoint10GetAnchorBEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 52 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 76 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 80 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK15b2RevoluteJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var $mul_i = HEAPF32[$this + 84 >> 2] * $inv_dt;
  var $mul1_i = HEAPF32[$this + 88 >> 2] * $inv_dt;
  HEAPF32[$agg_result >> 2] = $mul_i;
  HEAPF32[$agg_result + 4 >> 2] = $mul1_i;
  return;
  return;
}

function __ZNK15b2RevoluteJoint17GetReactionTorqueEf($this, $inv_dt) {
  return HEAPF32[$this + 92 >> 2] * $inv_dt;
  return null;
}

function __ZNK15b2RevoluteJoint13GetJointAngleEv($this) {
  return HEAPF32[HEAP32[$this + 52 >> 2] + 56 >> 2] - HEAPF32[HEAP32[$this + 48 >> 2] + 56 >> 2] - HEAPF32[$this + 116 >> 2];
  return null;
}

function __ZNK15b2RevoluteJoint13GetJointSpeedEv($this) {
  return HEAPF32[HEAP32[$this + 52 >> 2] + 72 >> 2] - HEAPF32[HEAP32[$this + 48 >> 2] + 72 >> 2];
  return null;
}

function __ZNK15b2RevoluteJoint14IsMotorEnabledEv($this) {
  return (HEAP8[$this + 100 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function __ZN15b2RevoluteJoint11EnableMotorEb($this, $flag) {
  var $0 = HEAP32[$this + 48 >> 2];
  var $1 = $0 + 4 | 0;
  var $2 = HEAP16[$1 >> 1];
  if (($2 & 2) << 16 >> 16 == 0) {
    var $or_i = $2 | 2;
    HEAP16[$1 >> 1] = $or_i;
    HEAPF32[$0 + 144 >> 2] = 0;
  }
  var $4 = HEAP32[$this + 52 >> 2];
  var $5 = $4 + 4 | 0;
  var $6 = HEAP16[$5 >> 1];
  if (($6 & 2) << 16 >> 16 == 0) {
    var $or_i4 = $6 | 2;
    HEAP16[$5 >> 1] = $or_i4;
    HEAPF32[$4 + 144 >> 2] = 0;
  }
  HEAP8[$this + 100 | 0] = $flag & 1;
  return;
  return;
}

function __ZNK15b2RevoluteJoint14GetMotorTorqueEf($this, $inv_dt) {
  return HEAPF32[$this + 96 >> 2] * $inv_dt;
  return null;
}

function __ZN15b2RevoluteJoint13SetMotorSpeedEf($this, $speed) {
  var $0 = HEAP32[$this + 48 >> 2];
  var $1 = $0 + 4 | 0;
  var $2 = HEAP16[$1 >> 1];
  if (($2 & 2) << 16 >> 16 == 0) {
    var $or_i = $2 | 2;
    HEAP16[$1 >> 1] = $or_i;
    HEAPF32[$0 + 144 >> 2] = 0;
  }
  var $4 = HEAP32[$this + 52 >> 2];
  var $5 = $4 + 4 | 0;
  var $6 = HEAP16[$5 >> 1];
  if (($6 & 2) << 16 >> 16 == 0) {
    var $or_i4 = $6 | 2;
    HEAP16[$5 >> 1] = $or_i4;
    HEAPF32[$4 + 144 >> 2] = 0;
  }
  HEAPF32[$this + 108 >> 2] = $speed;
  return;
  return;
}

function __ZN15b2RevoluteJoint17SetMaxMotorTorqueEf($this, $torque) {
  var $0 = HEAP32[$this + 48 >> 2];
  var $1 = $0 + 4 | 0;
  var $2 = HEAP16[$1 >> 1];
  if (($2 & 2) << 16 >> 16 == 0) {
    var $or_i = $2 | 2;
    HEAP16[$1 >> 1] = $or_i;
    HEAPF32[$0 + 144 >> 2] = 0;
  }
  var $4 = HEAP32[$this + 52 >> 2];
  var $5 = $4 + 4 | 0;
  var $6 = HEAP16[$5 >> 1];
  if (($6 & 2) << 16 >> 16 == 0) {
    var $or_i4 = $6 | 2;
    HEAP16[$5 >> 1] = $or_i4;
    HEAPF32[$4 + 144 >> 2] = 0;
  }
  HEAPF32[$this + 104 >> 2] = $torque;
  return;
  return;
}

function __ZNK15b2RevoluteJoint14IsLimitEnabledEv($this) {
  return (HEAP8[$this + 112 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function __ZN15b2RevoluteJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var $z97$s2;
  var $z$s2;
  var $m_indexB$s2;
  var $velocities$s2;
  var $m_indexA$s2;
  var $tmp$s2;
  var $Cdot42$s2;
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 24;
  var __label__;
  var $Cdot42 = __stackBase__, $Cdot42$s2 = $Cdot42 >> 2;
  var $tmp = __stackBase__ + 12, $tmp$s2 = $tmp >> 2;
  var $m_indexA$s2 = ($this + 128 | 0) >> 2;
  var $0 = HEAPU32[$m_indexA$s2];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $1 = HEAP32[$velocities$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $m_indexB$s2 = ($this + 132 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[($1 + 8 >> 2) + ($9 * 3 | 0)];
  var $17 = HEAPF32[$this$s2 + 42];
  var $18 = HEAPF32[$this$s2 + 43];
  var $19 = HEAPF32[$this$s2 + 44];
  var $20 = HEAPF32[$this$s2 + 45];
  var $cmp = $19 + $20 == 0;
  var $tobool = (HEAP8[$this + 100 | 0] & 1) << 24 >> 24 == 0;
  do {
    if ($tobool) {
      var $wB_0 = $16;
      var $wA_0 = $8;
    } else {
      if ((HEAP32[$this$s2 + 56] | 0) == 3 | $cmp) {
        var $wB_0 = $16;
        var $wA_0 = $8;
        break;
      }
      var $m_motorImpulse = $this + 96 | 0;
      var $26 = HEAPF32[$m_motorImpulse >> 2];
      var $mul18 = HEAPF32[$data >> 2] * HEAPF32[$this$s2 + 26];
      var $add20 = $26 + ($16 - $8 - HEAPF32[$this$s2 + 27]) * -HEAPF32[$this$s2 + 55];
      var $sub21 = -$mul18;
      var $cond_i_i = $add20 < $mul18 ? $add20 : $mul18;
      var $cond_i2_i = $cond_i_i < $sub21 ? $sub21 : $cond_i_i;
      HEAPF32[$m_motorImpulse >> 2] = $cond_i2_i;
      var $sub24 = $cond_i2_i - $26;
      var $wB_0 = $16 + $20 * $sub24;
      var $wA_0 = $8 - $19 * $sub24;
    }
  } while (0);
  var $wA_0;
  var $wB_0;
  var $tobool29 = (HEAP8[$this + 112 | 0] & 1) << 24 >> 24 == 0;
  do {
    if (!$tobool29) {
      var $m_limitState31 = $this + 224 | 0;
      if ((HEAP32[$m_limitState31 >> 2] | 0) == 0 | $cmp) {
        __label__ = 18;
        break;
      }
      var $y_i231 = $this + 148 | 0;
      var $x_i233 = $this + 144 | 0;
      var $y_i248 = $this + 140 | 0;
      var $x_i250 = $this + 136 | 0;
      var $sub_i241 = $13 + HEAPF32[$y_i231 >> 2] * -$wB_0 - $5 - HEAPF32[$y_i248 >> 2] * -$wA_0;
      var $sub3_i244 = $15 + HEAPF32[$x_i233 >> 2] * $wB_0 - $7 - HEAPF32[$x_i250 >> 2] * $wA_0;
      HEAPF32[$Cdot42$s2] = $sub_i241;
      HEAPF32[$Cdot42$s2 + 1] = $sub3_i244;
      HEAPF32[$Cdot42$s2 + 2] = $wB_0 - $wA_0;
      var $m_mass = $this + 184 | 0;
      __ZNK7b2Mat337Solve33ERK6b2Vec3($tmp, $m_mass, $Cdot42);
      var $36 = HEAPF32[$tmp$s2];
      var $sub_i223 = -$36;
      var $37 = HEAPF32[$tmp$s2 + 1];
      var $sub2_i225 = -$37;
      var $38 = HEAPF32[$tmp$s2 + 2];
      var $sub3_i227 = -$38;
      var $39 = HEAP32[$m_limitState31 >> 2];
      if ($39 == 3) {
        var $x2_i214 = $this + 84 | 0;
        var $add_i215 = HEAPF32[$x2_i214 >> 2] - $36;
        HEAPF32[$x2_i214 >> 2] = $add_i215;
        var $y3_i217 = $this + 88 | 0;
        var $add4_i218 = HEAPF32[$y3_i217 >> 2] - $37;
        HEAPF32[$y3_i217 >> 2] = $add4_i218;
        var $z5_i220 = $this + 92 | 0;
        var $add6_i221 = HEAPF32[$z5_i220 >> 2] - $38;
        HEAPF32[$z5_i220 >> 2] = $add6_i221;
        var $67 = $sub_i223;
        var $66 = $sub2_i225;
        var $65 = $sub3_i227;
      } else if ($39 == 1) {
        var $m_impulse51 = $this + 84 | 0;
        var $z$s2 = ($this + 92 | 0) >> 2;
        var $43 = HEAPF32[$z$s2];
        var $add53 = $43 - $38;
        if ($add53 < 0) {
          var $add_i193 = HEAPF32[$this$s2 + 52] * $43 - $sub_i241;
          var $add3_i196 = HEAPF32[$this$s2 + 53] * $43 - $sub3_i244;
          var $46 = HEAPF32[$m_mass >> 2];
          var $47 = HEAPF32[$this$s2 + 49];
          var $48 = HEAPF32[$this$s2 + 47];
          var $49 = HEAPF32[$this$s2 + 50];
          var $sub_i173 = $46 * $49 - $47 * $48;
          if ($sub_i173 != 0) {
            var $det_0_i177 = 1 / $sub_i173;
          } else {
            var $det_0_i177 = $sub_i173;
          }
          var $det_0_i177;
          var $mul12_i183 = $det_0_i177 * ($49 * $add_i193 - $47 * $add3_i196);
          var $mul19_i188 = $det_0_i177 * ($46 * $add3_i196 - $48 * $add_i193);
          var $sub75 = -$43;
          var $x79 = $m_impulse51 | 0;
          var $add80 = HEAPF32[$x79 >> 2] + $mul12_i183;
          HEAPF32[$x79 >> 2] = $add80;
          var $y83 = $this + 88 | 0;
          var $add84 = HEAPF32[$y83 >> 2] + $mul19_i188;
          HEAPF32[$y83 >> 2] = $add84;
          HEAPF32[$z$s2] = 0;
          var $67 = $mul12_i183;
          var $66 = $mul19_i188;
          var $65 = $sub75;
        } else {
          var $x2_i159 = $m_impulse51 | 0;
          var $add_i160 = HEAPF32[$x2_i159 >> 2] - $36;
          HEAPF32[$x2_i159 >> 2] = $add_i160;
          var $y3_i162 = $this + 88 | 0;
          var $add4_i163 = HEAPF32[$y3_i162 >> 2] - $37;
          HEAPF32[$y3_i162 >> 2] = $add4_i163;
          HEAPF32[$z$s2] = $add53;
          var $67 = $sub_i223;
          var $66 = $sub2_i225;
          var $65 = $sub3_i227;
        }
      } else if ($39 == 2) {
        var $m_impulse96 = $this + 84 | 0;
        var $z97$s2 = ($this + 92 | 0) >> 2;
        var $54 = HEAPF32[$z97$s2];
        var $add99 = $54 - $38;
        if ($add99 > 0) {
          var $add_i138 = HEAPF32[$this$s2 + 52] * $54 - $sub_i241;
          var $add3_i141 = HEAPF32[$this$s2 + 53] * $54 - $sub3_i244;
          var $57 = HEAPF32[$m_mass >> 2];
          var $58 = HEAPF32[$this$s2 + 49];
          var $59 = HEAPF32[$this$s2 + 47];
          var $60 = HEAPF32[$this$s2 + 50];
          var $sub_i118 = $57 * $60 - $58 * $59;
          if ($sub_i118 != 0) {
            var $det_0_i122 = 1 / $sub_i118;
          } else {
            var $det_0_i122 = $sub_i118;
          }
          var $det_0_i122;
          var $mul12_i128 = $det_0_i122 * ($60 * $add_i138 - $58 * $add3_i141);
          var $mul19_i133 = $det_0_i122 * ($57 * $add3_i141 - $59 * $add_i138);
          var $sub124 = -$54;
          var $x128 = $m_impulse96 | 0;
          var $add129 = HEAPF32[$x128 >> 2] + $mul12_i128;
          HEAPF32[$x128 >> 2] = $add129;
          var $y132 = $this + 88 | 0;
          var $add133 = HEAPF32[$y132 >> 2] + $mul19_i133;
          HEAPF32[$y132 >> 2] = $add133;
          HEAPF32[$z97$s2] = 0;
          var $67 = $mul12_i128;
          var $66 = $mul19_i133;
          var $65 = $sub124;
        } else {
          var $x2_i107 = $m_impulse96 | 0;
          var $add_i108 = HEAPF32[$x2_i107 >> 2] - $36;
          HEAPF32[$x2_i107 >> 2] = $add_i108;
          var $y3_i110 = $this + 88 | 0;
          var $add4_i111 = HEAPF32[$y3_i110 >> 2] - $37;
          HEAPF32[$y3_i110 >> 2] = $add4_i111;
          HEAPF32[$z97$s2] = $add99;
          var $67 = $sub_i223;
          var $66 = $sub2_i225;
          var $65 = $sub3_i227;
        }
      } else {
        var $67 = $sub_i223;
        var $66 = $sub2_i225;
        var $65 = $sub3_i227;
      }
      var $65;
      var $66;
      var $67;
      var $add156_pn = HEAPF32[$x_i233 >> 2] * $66 - HEAPF32[$y_i231 >> 2] * $67 + $65;
      var $add149_pn = HEAPF32[$x_i250 >> 2] * $66 - HEAPF32[$y_i248 >> 2] * $67 + $65;
      var $_pn274 = $67;
      var $_pn = $66;
      var $82 = HEAP32[$m_indexA$s2];
      __label__ = 21;
      break;
    }
    __label__ = 18;
  } while (0);
  if (__label__ == 18) {
    var $72 = HEAPF32[$this$s2 + 37];
    var $73 = HEAPF32[$this$s2 + 36];
    var $74 = HEAPF32[$this$s2 + 35];
    var $75 = HEAPF32[$this$s2 + 34];
    var $sub_i32 = -($13 + $72 * -$wB_0 - $5 - $74 * -$wA_0);
    var $sub2_i = -($15 + $73 * $wB_0 - $7 - $75 * $wA_0);
    var $76 = HEAPF32[$this$s2 + 46];
    var $77 = HEAPF32[$this$s2 + 49];
    var $78 = HEAPF32[$this$s2 + 47];
    var $79 = HEAPF32[$this$s2 + 50];
    var $sub_i30 = $76 * $79 - $77 * $78;
    if ($sub_i30 != 0) {
      var $det_0_i = 1 / $sub_i30;
    } else {
      var $det_0_i = $sub_i30;
    }
    var $det_0_i;
    var $mul12_i = $det_0_i * ($79 * $sub_i32 - $77 * $sub2_i);
    var $mul19_i = $det_0_i * ($76 * $sub2_i - $78 * $sub_i32);
    var $x174 = $this + 84 | 0;
    var $add175 = HEAPF32[$x174 >> 2] + $mul12_i;
    HEAPF32[$x174 >> 2] = $add175;
    var $y178 = $this + 88 | 0;
    var $add179 = HEAPF32[$y178 >> 2] + $mul19_i;
    HEAPF32[$y178 >> 2] = $add179;
    var $add156_pn = $73 * $mul19_i - $72 * $mul12_i;
    var $add149_pn = $75 * $mul19_i - $74 * $mul12_i;
    var $_pn274 = $mul12_i;
    var $_pn = $mul19_i;
    var $82 = $0;
  }
  var $82;
  var $_pn;
  var $_pn274;
  var $add149_pn;
  var $add156_pn;
  var $83 = $5 - $_pn274 * $17;
  var $84 = $7 - $_pn * $17;
  var $85 = $13 + $_pn274 * $18;
  var $86 = $15 + $_pn * $18;
  var $wB_1 = $wB_0 + $20 * $add156_pn;
  var $wA_1 = $wA_0 - $19 * $add149_pn;
  var $88 = HEAP32[$velocities$s2] + $82 * 12 | 0;
  var $89 = (tempDoubleF32[0] = $83, tempDoubleI32[0]);
  var $90$0 = $89;
  var $91 = (tempDoubleF32[0] = $84, tempDoubleI32[0]);
  var $94$0 = 0 | $90$0;
  var $94$1 = $91 | 0;
  var $st$30$0 = $88 | 0;
  HEAP32[$st$30$0 >> 2] = $94$0;
  var $st$30$1 = $88 + 4 | 0;
  HEAP32[$st$30$1 >> 2] = $94$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA$s2] * 3 | 0)] = $wA_1;
  var $99 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $100 = (tempDoubleF32[0] = $85, tempDoubleI32[0]);
  var $101$0 = $100;
  var $102 = (tempDoubleF32[0] = $86, tempDoubleI32[0]);
  var $105$0 = 0 | $101$0;
  var $105$1 = $102 | 0;
  var $st$52$0 = $99 | 0;
  HEAP32[$st$52$0 >> 2] = $105$0;
  var $st$52$1 = $99 + 4 | 0;
  HEAP32[$st$52$1 >> 2] = $105$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $wB_1;
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN15b2RevoluteJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var $m_indexB$s2;
  var $positions$s2;
  var $this$s2 = $this >> 2;
  var $m_indexA = $this + 128 | 0;
  var $0 = HEAP32[$m_indexA >> 2];
  var $positions$s2 = ($data + 24 | 0) >> 2;
  var $1 = HEAP32[$positions$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $m_indexB$s2 = ($this + 132 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[($1 + 8 >> 2) + ($9 * 3 | 0)];
  var $m_invIA = $this + 176 | 0;
  var $m_invIB = $this + 180 | 0;
  var $tobool = (HEAP8[$this + 112 | 0] & 1) << 24 >> 24 == 0;
  do {
    if ($tobool) {
      var $aA_0 = $8;
      var $aB_0 = $16;
      var $angularError_1 = 0;
      var $30 = HEAPF32[$m_invIA >> 2];
      var $29 = HEAPF32[$m_invIB >> 2];
    } else {
      var $19 = HEAPF32[$m_invIB >> 2];
      var $20 = HEAPF32[$m_invIA >> 2];
      var $21 = HEAP32[$this$s2 + 56];
      if (($21 | 0) == 0 | $20 + $19 == 0) {
        var $aA_0 = $8;
        var $aB_0 = $16;
        var $angularError_1 = 0;
        var $30 = $20;
        var $29 = $19;
        break;
      }
      var $sub16 = $16 - $8 - HEAPF32[$this$s2 + 29];
      do {
        if ($21 == 3) {
          var $sub20 = $sub16 - HEAPF32[$this$s2 + 30];
          var $cond_i_i = $sub20 < .13962635397911072 ? $sub20 : .13962635397911072;
          var $cond_i2_i = $cond_i_i < -.13962635397911072 ? -.13962635397911072 : $cond_i_i;
          var $mul = $cond_i2_i * -HEAPF32[$this$s2 + 55];
          if ($cond_i2_i > 0) {
            var $limitImpulse_0 = $mul;
            var $angularError_0 = $cond_i2_i;
            break;
          }
          var $limitImpulse_0 = $mul;
          var $angularError_0 = -$cond_i2_i;
        } else if ($21 == 1) {
          var $sub28 = $sub16 - HEAPF32[$this$s2 + 30];
          var $add30 = $sub28 + .03490658849477768;
          var $cond_i_i6 = $add30 < 0 ? $add30 : 0;
          var $cond_i2_i8 = $cond_i_i6 < -.13962635397911072 ? -.13962635397911072 : $cond_i_i6;
          var $limitImpulse_0 = $cond_i2_i8 * -HEAPF32[$this$s2 + 55];
          var $angularError_0 = -$sub28;
        } else if ($21 == 2) {
          var $sub40 = $sub16 - HEAPF32[$this$s2 + 31];
          var $sub41 = $sub40 - .03490658849477768;
          var $cond_i_i49 = $sub41 < .13962635397911072 ? $sub41 : .13962635397911072;
          var $cond_i2_i51 = $cond_i_i49 < 0 ? 0 : $cond_i_i49;
          var $limitImpulse_0 = $cond_i2_i51 * -HEAPF32[$this$s2 + 55];
          var $angularError_0 = $sub40;
        } else {
          var $limitImpulse_0 = 0;
          var $angularError_0 = 0;
        }
      } while (0);
      var $angularError_0;
      var $limitImpulse_0;
      var $aA_0 = $8 - $20 * $limitImpulse_0;
      var $aB_0 = $16 + $19 * $limitImpulse_0;
      var $angularError_1 = $angularError_0;
      var $30 = $20;
      var $29 = $19;
    }
  } while (0);
  var $29;
  var $30;
  var $angularError_1;
  var $aB_0;
  var $aA_0;
  var $call_i111 = _sinf($aA_0);
  var $call2_i113 = _cosf($aA_0);
  var $call_i = _sinf($aB_0);
  var $call2_i = _cosf($aB_0);
  var $sub_i103 = HEAPF32[$this$s2 + 17] - HEAPF32[$this$s2 + 38];
  var $sub3_i106 = HEAPF32[$this$s2 + 18] - HEAPF32[$this$s2 + 39];
  var $sub_i95 = $call2_i113 * $sub_i103 - $call_i111 * $sub3_i106;
  var $add_i98 = $call_i111 * $sub_i103 + $call2_i113 * $sub3_i106;
  var $sub_i83 = HEAPF32[$this$s2 + 19] - HEAPF32[$this$s2 + 40];
  var $sub3_i86 = HEAPF32[$this$s2 + 20] - HEAPF32[$this$s2 + 41];
  var $sub_i76 = $call2_i * $sub_i83 - $call_i * $sub3_i86;
  var $add_i78 = $call_i * $sub_i83 + $call2_i * $sub3_i86;
  var $sub_i53 = $13 + $sub_i76 - $5 - $sub_i95;
  var $sub3_i = $15 + $add_i78 - $7 - $add_i98;
  var $add_i46 = $sub_i53 * $sub_i53 + $sub3_i * $sub3_i;
  var $call_i_i47 = _sqrtf($add_i46);
  var $39 = HEAPF32[$this$s2 + 42];
  var $40 = HEAPF32[$this$s2 + 43];
  var $add62 = $39 + $40;
  var $add71 = $add62 + $30 * $add_i98 * $add_i98 + $29 * $add_i78 * $add_i78;
  var $mul78 = $29 * $sub_i76;
  var $sub81 = $sub_i95 * -$30 * $add_i98 - $mul78 * $add_i78;
  var $add97 = $add62 + $30 * $sub_i95 * $sub_i95 + $mul78 * $sub_i76;
  var $sub_i41 = $add71 * $add97 - $sub81 * $sub81;
  if ($sub_i41 != 0) {
    var $det_0_i = 1 / $sub_i41;
  } else {
    var $det_0_i = $sub_i41;
  }
  var $det_0_i;
  var $sub_i35 = -($det_0_i * ($add97 * $sub_i53 - $sub81 * $sub3_i));
  var $sub2_i = -($det_0_i * ($add71 * $sub3_i - $sub81 * $sub_i53));
  var $sub_i25 = $5 - $39 * $sub_i35;
  var $sub4_i = $7 - $39 * $sub2_i;
  var $sub103 = $aA_0 - $30 * ($sub_i95 * $sub2_i - $add_i98 * $sub_i35);
  var $add_i = $13 + $40 * $sub_i35;
  var $add4_i = $15 + $40 * $sub2_i;
  var $add107 = $aB_0 + $29 * ($sub_i76 * $sub2_i - $add_i78 * $sub_i35);
  var $41 = (tempDoubleF32[0] = $sub_i25, tempDoubleI32[0]);
  var $42$0 = $41;
  var $43 = (tempDoubleF32[0] = $sub4_i, tempDoubleI32[0]);
  var $46$0 = 0 | $42$0;
  var $46$1 = $43 | 0;
  var $st$39$0 = $2 | 0;
  HEAP32[$st$39$0 >> 2] = $46$0;
  var $st$39$1 = $2 + 4 | 0;
  HEAP32[$st$39$1 >> 2] = $46$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $sub103;
  var $51 = HEAP32[$positions$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $52 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $53$0 = $52;
  var $54 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
  var $57$0 = 0 | $53$0;
  var $57$1 = $54 | 0;
  var $st$61$0 = $51 | 0;
  HEAP32[$st$61$0 >> 2] = $57$0;
  var $st$61$1 = $51 + 4 | 0;
  HEAP32[$st$61$1 >> 2] = $57$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $add107;
  if ($call_i_i47 > .004999999888241291) {
    var $60 = 0;
  } else {
    var $60 = $angularError_1 <= .03490658849477768;
  }
  var $60;
  return $60;
  return null;
}

function __ZN15b2RevoluteJointD1Ev($this) {
  return;
  return;
}

function __ZNK11b2RopeJoint17GetReactionTorqueEf($this, $inv_dt) {
  return 0;
  return null;
}

function __ZN15b2RevoluteJoint11EnableLimitEb($this, $flag) {
  var $m_enableLimit = $this + 112 | 0;
  if (($flag & 1 | 0) != (HEAP8[$m_enableLimit] & 1 & 255 | 0)) {
    var $2 = HEAPU32[$this + 48 >> 2];
    var $3 = $2 + 4 | 0;
    var $4 = HEAP16[$3 >> 1];
    if (($4 & 2) << 16 >> 16 == 0) {
      var $or_i = $4 | 2;
      HEAP16[$3 >> 1] = $or_i;
      HEAPF32[$2 + 144 >> 2] = 0;
    }
    var $6 = HEAP32[$this + 52 >> 2];
    var $7 = $6 + 4 | 0;
    var $8 = HEAP16[$7 >> 1];
    if (($8 & 2) << 16 >> 16 == 0) {
      var $or_i4 = $8 | 2;
      HEAP16[$7 >> 1] = $or_i4;
      HEAPF32[$6 + 144 >> 2] = 0;
    }
    HEAP8[$m_enableLimit] = $flag & 1;
    HEAPF32[$this + 92 >> 2] = 0;
  }
  return;
  return;
}

function __ZNK15b2RevoluteJoint13GetLowerLimitEv($this) {
  return HEAPF32[$this + 120 >> 2];
  return null;
}

function __ZNK15b2RevoluteJoint13GetUpperLimitEv($this) {
  return HEAPF32[$this + 124 >> 2];
  return null;
}

function __ZN11b2RopeJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var $m_indexB$s2;
  var $velocities$s2;
  var $this$s2 = $this >> 2;
  var $m_indexA = $this + 96 | 0;
  var $0 = HEAP32[$m_indexA >> 2];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $1 = HEAP32[$velocities$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $m_indexB$s2 = ($this + 100 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[($1 + 8 >> 2) + ($9 * 3 | 0)];
  var $17 = HEAPF32[$this$s2 + 29];
  var $18 = HEAPF32[$this$s2 + 28];
  var $19 = HEAPF32[$this$s2 + 31];
  var $20 = HEAPF32[$this$s2 + 30];
  var $sub = HEAPF32[$this$s2 + 22] - HEAPF32[$this$s2 + 21];
  var $23 = HEAPF32[$this$s2 + 26];
  var $24 = HEAPF32[$this$s2 + 27];
  var $add_i42 = $23 * ($13 + $19 * -$16 - ($5 + $17 * -$8)) + $24 * ($15 + $20 * $16 - ($7 + $18 * $8));
  if ($sub < 0) {
    var $Cdot_0 = $add_i42 + HEAPF32[$data + 4 >> 2] * $sub;
  } else {
    var $Cdot_0 = $add_i42;
  }
  var $Cdot_0;
  var $m_impulse = $this + 92 | 0;
  var $27 = HEAPF32[$m_impulse >> 2];
  var $add17 = $27 + $Cdot_0 * -HEAPF32[$this$s2 + 40];
  var $cond_i = $add17 > 0 ? 0 : $add17;
  HEAPF32[$m_impulse >> 2] = $cond_i;
  var $sub21 = $cond_i - $27;
  var $mul_i33 = $23 * $sub21;
  var $mul1_i35 = $24 * $sub21;
  var $28 = HEAPF32[$this$s2 + 36];
  var $sub_i23 = $5 - $mul_i33 * $28;
  var $sub4_i = $7 - $mul1_i35 * $28;
  var $sub27 = $8 - HEAPF32[$this$s2 + 38] * ($18 * $mul1_i35 - $17 * $mul_i33);
  var $30 = HEAPF32[$this$s2 + 37];
  var $add_i = $13 + $mul_i33 * $30;
  var $add4_i = $15 + $mul1_i35 * $30;
  var $add32 = $16 + HEAPF32[$this$s2 + 39] * ($20 * $mul1_i35 - $19 * $mul_i33);
  var $33 = HEAP32[$velocities$s2] + $0 * 12 | 0;
  var $34 = (tempDoubleF32[0] = $sub_i23, tempDoubleI32[0]);
  var $35$0 = $34;
  var $36 = (tempDoubleF32[0] = $sub4_i, tempDoubleI32[0]);
  var $39$0 = 0 | $35$0;
  var $39$1 = $36 | 0;
  var $st$53$0 = $33 | 0;
  HEAP32[$st$53$0 >> 2] = $39$0;
  var $st$53$1 = $33 + 4 | 0;
  HEAP32[$st$53$1 >> 2] = $39$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $sub27;
  var $44 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $45 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $46$0 = $45;
  var $47 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
  var $50$0 = 0 | $46$0;
  var $50$1 = $47 | 0;
  var $st$75$0 = $44 | 0;
  HEAP32[$st$75$0 >> 2] = $50$0;
  var $st$75$1 = $44 + 4 | 0;
  HEAP32[$st$75$1 >> 2] = $50$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $add32;
  return;
  return;
}

function __ZNK11b2RopeJoint10GetAnchorAEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 48 >> 2] >> 2;
  var $2 = HEAPF32[$0$s2 + 6];
  var $3 = HEAPF32[$this + 68 >> 2];
  var $5 = HEAPF32[$0$s2 + 5];
  var $6 = HEAPF32[$this + 72 >> 2];
  var $add_i_i = $2 * $3 - $5 * $6 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $5 * $3 + $2 * $6 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK11b2RopeJoint10GetAnchorBEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 52 >> 2] >> 2;
  var $2 = HEAPF32[$0$s2 + 6];
  var $3 = HEAPF32[$this + 76 >> 2];
  var $5 = HEAPF32[$0$s2 + 5];
  var $6 = HEAPF32[$this + 80 >> 2];
  var $add_i_i = $2 * $3 - $5 * $6 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $5 * $3 + $2 * $6 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK11b2RopeJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var $mul = HEAPF32[$this + 92 >> 2] * $inv_dt;
  var $mul_i = HEAPF32[$this + 104 >> 2] * $mul;
  var $mul1_i = HEAPF32[$this + 108 >> 2] * $mul;
  HEAPF32[$agg_result >> 2] = $mul_i;
  HEAPF32[$agg_result + 4 >> 2] = $mul1_i;
  return;
  return;
}

function __ZNK11b2RopeJoint12GetMaxLengthEv($this) {
  return HEAPF32[$this + 84 >> 2];
  return null;
}

function __ZNK11b2RopeJoint13GetLimitStateEv($this) {
  return HEAP32[$this + 164 >> 2];
  return null;
}

function __ZN15b2RevoluteJoint9SetLimitsEff($this, $lower, $upper) {
  var $this$s2 = $this >> 2;
  var __label__;
  if ($lower > $upper) {
    ___assert_func(STRING_TABLE.__str374 | 0, 473, STRING_TABLE.___PRETTY_FUNCTION____ZN15b2RevoluteJoint9SetLimitsEff | 0, STRING_TABLE.__str1375 | 0);
  }
  var $m_lowerAngle = $this + 120 | 0;
  var $cmp2 = HEAPF32[$m_lowerAngle >> 2] != $lower;
  do {
    if ($cmp2) {
      __label__ = 4;
    } else {
      if (HEAPF32[$this$s2 + 31] != $upper) {
        __label__ = 4;
        break;
      }
      __label__ = 9;
      break;
    }
  } while (0);
  if (__label__ == 4) {
    var $2 = HEAPU32[$this$s2 + 12];
    var $3 = $2 + 4 | 0;
    var $4 = HEAP16[$3 >> 1];
    if (($4 & 2) << 16 >> 16 == 0) {
      var $or_i = $4 | 2;
      HEAP16[$3 >> 1] = $or_i;
      HEAPF32[$2 + 144 >> 2] = 0;
    }
    var $6 = HEAP32[$this$s2 + 13];
    var $7 = $6 + 4 | 0;
    var $8 = HEAP16[$7 >> 1];
    if (($8 & 2) << 16 >> 16 == 0) {
      var $or_i4 = $8 | 2;
      HEAP16[$7 >> 1] = $or_i4;
      HEAPF32[$6 + 144 >> 2] = 0;
    }
    HEAPF32[$this$s2 + 23] = 0;
    HEAPF32[$m_lowerAngle >> 2] = $lower;
    HEAPF32[$this$s2 + 31] = $upper;
  }
  return;
  return;
}

function __ZN15b2RevoluteJoint4DumpEv($this) {
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  var $1 = HEAP32[HEAP32[$this$s2 + 12] + 8 >> 2];
  var $3 = HEAP32[HEAP32[$this$s2 + 13] + 8 >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str2376 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str1415 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $1, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str2416 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $3, tempInt));
  var $conv = HEAP8[$this + 61 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str3417 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv, tempInt));
  var $conv3 = HEAPF32[$this$s2 + 17];
  var $conv5 = HEAPF32[$this$s2 + 18];
  __Z5b2LogPKcz(STRING_TABLE.__str4418 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv3, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv5, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv7 = HEAPF32[$this$s2 + 19];
  var $conv10 = HEAPF32[$this$s2 + 20];
  __Z5b2LogPKcz(STRING_TABLE.__str5419 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv7, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv10, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv11 = HEAPF32[$this$s2 + 29];
  __Z5b2LogPKcz(STRING_TABLE.__str6408 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv11, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv13 = HEAP8[$this + 112 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str9383 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv13, tempInt));
  var $conv14 = HEAPF32[$this$s2 + 30];
  __Z5b2LogPKcz(STRING_TABLE.__str10384 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv14, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv15 = HEAPF32[$this$s2 + 31];
  __Z5b2LogPKcz(STRING_TABLE.__str11385 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv15, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv17 = HEAP8[$this + 100 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str7421 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv17, tempInt));
  var $conv18 = HEAPF32[$this$s2 + 27];
  __Z5b2LogPKcz(STRING_TABLE.__str8422 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv18, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv19 = HEAPF32[$this$s2 + 26];
  __Z5b2LogPKcz(STRING_TABLE.__str9423 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv19, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $19 = HEAP32[$this$s2 + 14];
  __Z5b2LogPKcz(STRING_TABLE.__str12426 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $19, tempInt));
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN15b2RevoluteJointD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN11b2RopeJointC2EPK14b2RopeJointDef($this, $def) {
  var $9$s2;
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV7b2Joint + 8 | 0;
  var $bodyA_i = $def + 8 | 0;
  var $bodyB_i = $def + 12 | 0;
  if ((HEAP32[$bodyA_i >> 2] | 0) == (HEAP32[$bodyB_i >> 2] | 0)) {
    ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
  }
  var $3 = HEAP32[$def >> 2];
  HEAP32[$this$s2 + 1] = $3;
  HEAP32[$this$s2 + 2] = 0;
  HEAP32[$this$s2 + 3] = 0;
  var $4 = HEAP32[$bodyA_i >> 2];
  HEAP32[$this$s2 + 12] = $4;
  var $5 = HEAP32[$bodyB_i >> 2];
  HEAP32[$this$s2 + 13] = $5;
  HEAP32[$this$s2 + 14] = 0;
  var $7 = HEAP8[$def + 16 | 0] & 1;
  HEAP8[$this + 61 | 0] = $7;
  HEAP8[$this + 60 | 0] = 0;
  var $8 = HEAP32[$def + 4 >> 2];
  HEAP32[$this$s2 + 16] = $8;
  var $9$s2 = ($this + 16 | 0) >> 2;
  HEAP32[$9$s2] = 0;
  HEAP32[$9$s2 + 1] = 0;
  HEAP32[$9$s2 + 2] = 0;
  HEAP32[$9$s2 + 3] = 0;
  HEAP32[$9$s2 + 4] = 0;
  HEAP32[$9$s2 + 5] = 0;
  HEAP32[$9$s2 + 6] = 0;
  HEAP32[$9$s2 + 7] = 0;
  HEAP32[$0 >> 2] = __ZTV11b2RopeJoint + 8 | 0;
  var $m_localAnchorB = $this + 76 | 0;
  var $10 = $def + 20 | 0;
  var $11 = $this + 68 | 0;
  var $12$0 = HEAP32[$10 >> 2];
  var $12$1 = HEAP32[$10 + 4 >> 2];
  HEAP32[$11 >> 2] = $12$0;
  HEAP32[$11 + 4 >> 2] = $12$1;
  var $13 = $def + 28 | 0;
  var $14 = $m_localAnchorB;
  var $15$0 = HEAP32[$13 >> 2];
  var $15$1 = HEAP32[$13 + 4 >> 2];
  HEAP32[$14 >> 2] = $15$0;
  HEAP32[$14 + 4 >> 2] = $15$1;
  var $16 = HEAPF32[$def + 36 >> 2];
  HEAPF32[$this$s2 + 21] = $16;
  HEAPF32[$this$s2 + 40] = 0;
  HEAPF32[$this$s2 + 23] = 0;
  HEAP32[$this$s2 + 41] = 0;
  HEAPF32[$this$s2 + 22] = 0;
  return;
  return;
}

function __ZN11b2RopeJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var $velocities$s2;
  var $m_indexB$s2;
  var $2$s2;
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $0 = HEAP32[$this$s2 + 12], $0$s2 = $0 >> 2;
  var $1 = HEAPU32[$0$s2 + 2];
  var $m_indexA = $this + 96 | 0;
  HEAP32[$m_indexA >> 2] = $1;
  var $2 = HEAP32[$this$s2 + 13], $2$s2 = $2 >> 2;
  var $3 = HEAP32[$2$s2 + 2];
  var $m_indexB$s2 = ($this + 100 | 0) >> 2;
  HEAP32[$m_indexB$s2] = $3;
  var $4 = $0 + 28 | 0;
  var $5 = $this + 128 | 0;
  var $6$0 = HEAP32[$4 >> 2];
  var $6$1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 >> 2] = $6$0;
  HEAP32[$5 + 4 >> 2] = $6$1;
  var $7 = $2 + 28 | 0;
  var $8 = $this + 136 | 0;
  var $9$0 = HEAP32[$7 >> 2];
  var $9$1 = HEAP32[$7 + 4 >> 2];
  HEAP32[$8 >> 2] = $9$0;
  HEAP32[$8 + 4 >> 2] = $9$1;
  var $10 = HEAPF32[$0$s2 + 30];
  HEAPF32[$this$s2 + 36] = $10;
  var $11 = HEAPF32[$2$s2 + 30];
  HEAPF32[$this$s2 + 37] = $11;
  var $12 = HEAPF32[$0$s2 + 32];
  HEAPF32[$this$s2 + 38] = $12;
  var $13 = HEAPF32[$2$s2 + 32];
  HEAPF32[$this$s2 + 39] = $13;
  var $14 = HEAP32[$data + 24 >> 2];
  var $15 = $14 + $1 * 12 | 0;
  var $16$1 = HEAP32[$15 + 4 >> 2];
  var $18 = (tempDoubleI32[0] = HEAP32[$15 >> 2], tempDoubleF32[0]);
  var $20 = (tempDoubleI32[0] = $16$1, tempDoubleF32[0]);
  var $21 = HEAPF32[($14 + 8 >> 2) + ($1 * 3 | 0)];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $22 = HEAP32[$velocities$s2];
  var $23 = $22 + $1 * 12 | 0;
  var $24$1 = HEAP32[$23 + 4 >> 2];
  var $26 = (tempDoubleI32[0] = HEAP32[$23 >> 2], tempDoubleF32[0]);
  var $28 = (tempDoubleI32[0] = $24$1, tempDoubleF32[0]);
  var $29 = HEAPF32[($22 + 8 >> 2) + ($1 * 3 | 0)];
  var $30 = $14 + $3 * 12 | 0;
  var $31$1 = HEAP32[$30 + 4 >> 2];
  var $33 = (tempDoubleI32[0] = HEAP32[$30 >> 2], tempDoubleF32[0]);
  var $35 = (tempDoubleI32[0] = $31$1, tempDoubleF32[0]);
  var $36 = HEAPF32[($14 + 8 >> 2) + ($3 * 3 | 0)];
  var $37 = $22 + $3 * 12 | 0;
  var $38$1 = HEAP32[$37 + 4 >> 2];
  var $40 = (tempDoubleI32[0] = HEAP32[$37 >> 2], tempDoubleF32[0]);
  var $42 = (tempDoubleI32[0] = $38$1, tempDoubleF32[0]);
  var $43 = HEAPF32[($22 + 8 >> 2) + ($3 * 3 | 0)];
  var $call_i_i = _sinf($21);
  var $call2_i_i = _cosf($21);
  var $call_i_i1 = _sinf($36);
  var $call2_i_i3 = _cosf($36);
  var $m_rA = $this + 112 | 0;
  var $44 = HEAPF32[$this$s2 + 17];
  var $bitcast = (tempDoubleI32[0] = $6$0, tempDoubleF32[0]);
  var $sub_i = $44 - $bitcast;
  var $45 = HEAPF32[$this$s2 + 18];
  var $48 = (tempDoubleI32[0] = $6$1, tempDoubleF32[0]);
  var $sub3_i = $45 - $48;
  var $sub_i7 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $49 = $m_rA;
  var $50 = (tempDoubleF32[0] = $sub_i7, tempDoubleI32[0]);
  var $51$0 = $50;
  var $52 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $55$0 = 0 | $51$0;
  var $55$1 = $52 | 0;
  HEAP32[$49 >> 2] = $55$0;
  HEAP32[$49 + 4 >> 2] = $55$1;
  var $m_rB = $this + 120 | 0;
  var $56 = HEAPF32[$this$s2 + 19];
  var $bitcast129 = (tempDoubleI32[0] = $9$0, tempDoubleF32[0]);
  var $sub_i12 = $56 - $bitcast129;
  var $57 = HEAPF32[$this$s2 + 20];
  var $60 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
  var $sub3_i15 = $57 - $60;
  var $sub_i87 = $call2_i_i3 * $sub_i12 - $call_i_i1 * $sub3_i15;
  var $add_i90 = $call_i_i1 * $sub_i12 + $call2_i_i3 * $sub3_i15;
  var $61 = $m_rB;
  var $62 = (tempDoubleF32[0] = $sub_i87, tempDoubleI32[0]);
  var $63$0 = $62;
  var $64 = (tempDoubleF32[0] = $add_i90, tempDoubleI32[0]);
  var $67$0 = 0 | $63$0;
  var $67$1 = $64 | 0;
  HEAP32[$61 >> 2] = $67$0;
  HEAP32[$61 + 4 >> 2] = $67$1;
  var $m_u = $this + 104 | 0;
  var $sub_i95 = $33 + $sub_i87 - $18 - $sub_i7;
  var $sub3_i98 = $35 + $add_i90 - $20 - $add_i;
  var $68 = $m_u;
  var $69 = (tempDoubleF32[0] = $sub_i95, tempDoubleI32[0]);
  var $70$0 = $69;
  var $71 = (tempDoubleF32[0] = $sub3_i98, tempDoubleI32[0]);
  var $74$0 = 0 | $70$0;
  var $74$1 = $71 | 0;
  HEAP32[$68 >> 2] = $74$0;
  HEAP32[$68 + 4 >> 2] = $74$1;
  var $x_i75 = $m_u | 0;
  var $y_i77 = $this + 108 | 0;
  var $add_i79 = $sub_i95 * $sub_i95 + $sub3_i98 * $sub3_i98;
  var $call_i_i80 = _sqrtf($add_i79);
  HEAPF32[$this$s2 + 22] = $call_i_i80;
  var $_ = $call_i_i80 - HEAPF32[$this$s2 + 21] > 0 ? 2 : 0;
  HEAP32[$this$s2 + 41] = $_;
  if ($call_i_i80 > .004999999888241291) {
    var $div = 1 / $call_i_i80;
    var $mul_i73 = $sub_i95 * $div;
    HEAPF32[$x_i75 >> 2] = $mul_i73;
    var $mul2_i = $sub3_i98 * $div;
    HEAPF32[$y_i77 >> 2] = $mul2_i;
    var $sub_i71 = $sub_i7 * $mul2_i - $add_i * $mul_i73;
    var $sub_i64 = $sub_i87 * $mul2_i - $add_i90 * $mul_i73;
    var $add73 = $10 + $12 * $sub_i71 * $sub_i71 + $11 + $13 * $sub_i64 * $sub_i64;
    if ($add73 != 0) {
      var $cond = 1 / $add73;
    } else {
      var $cond = 0;
    }
    var $cond;
    HEAPF32[$this$s2 + 40] = $cond;
    if ((HEAP8[$data + 20 | 0] & 1) << 24 >> 24 == 0) {
      HEAPF32[$this$s2 + 23] = 0;
      var $wB_0 = $43;
      var $wA_0 = $29;
      var $83 = $26;
      var $82 = $28;
      var $81 = $40;
      var $80 = $42;
    } else {
      var $m_impulse79 = $this + 92 | 0;
      var $mul80 = HEAPF32[$m_impulse79 >> 2] * HEAPF32[$data + 8 >> 2];
      HEAPF32[$m_impulse79 >> 2] = $mul80;
      var $mul_i51 = $mul_i73 * $mul80;
      var $mul1_i53 = $mul2_i * $mul80;
      var $wB_0 = $43 + $13 * ($sub_i87 * $mul1_i53 - $add_i90 * $mul_i51);
      var $wA_0 = $29 - $12 * ($sub_i7 * $mul1_i53 - $add_i * $mul_i51);
      var $83 = $26 - $mul_i51 * $10;
      var $82 = $28 - $mul1_i53 * $10;
      var $81 = $40 + $mul_i51 * $11;
      var $80 = $42 + $mul1_i53 * $11;
    }
    var $80;
    var $81;
    var $82;
    var $83;
    var $wA_0;
    var $wB_0;
    var $85 = HEAP32[$velocities$s2] + $1 * 12 | 0;
    var $86 = (tempDoubleF32[0] = $83, tempDoubleI32[0]);
    var $87$0 = $86;
    var $88 = (tempDoubleF32[0] = $82, tempDoubleI32[0]);
    var $91$1 = $88 | 0;
    var $st$19$0 = $85 | 0;
    HEAP32[$st$19$0 >> 2] = 0 | $87$0;
    var $st$19$1 = $85 + 4 | 0;
    HEAP32[$st$19$1 >> 2] = $91$1;
    HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $wA_0;
    var $96 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
    var $97 = (tempDoubleF32[0] = $81, tempDoubleI32[0]);
    var $98$0 = $97;
    var $99 = (tempDoubleF32[0] = $80, tempDoubleI32[0]);
    var $102$1 = $99 | 0;
    var $st$41$0 = $96 | 0;
    HEAP32[$st$41$0 >> 2] = 0 | $98$0;
    var $st$41$1 = $96 + 4 | 0;
    HEAP32[$st$41$1 >> 2] = $102$1;
    HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $wB_0;
  } else {
    HEAPF32[$x_i75 >> 2] = 0;
    HEAPF32[$y_i77 >> 2] = 0;
    HEAPF32[$this$s2 + 40] = 0;
    HEAPF32[$this$s2 + 23] = 0;
  }
  return;
  return;
}

function __ZN11b2RopeJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var $m_indexB$s2;
  var $positions$s2;
  var $this$s2 = $this >> 2;
  var $m_indexA = $this + 96 | 0;
  var $0 = HEAP32[$m_indexA >> 2];
  var $positions$s2 = ($data + 24 | 0) >> 2;
  var $1 = HEAP32[$positions$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $m_indexB$s2 = ($this + 100 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[($1 + 8 >> 2) + ($9 * 3 | 0)];
  var $call_i_i = _sinf($8);
  var $call2_i_i = _cosf($8);
  var $call_i_i1 = _sinf($16);
  var $call2_i_i3 = _cosf($16);
  var $sub_i = HEAPF32[$this$s2 + 17] - HEAPF32[$this$s2 + 32];
  var $sub3_i = HEAPF32[$this$s2 + 18] - HEAPF32[$this$s2 + 33];
  var $sub_i7 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $sub_i12 = HEAPF32[$this$s2 + 19] - HEAPF32[$this$s2 + 34];
  var $sub3_i15 = HEAPF32[$this$s2 + 20] - HEAPF32[$this$s2 + 35];
  var $sub_i63 = $call2_i_i3 * $sub_i12 - $call_i_i1 * $sub3_i15;
  var $add_i66 = $call_i_i1 * $sub_i12 + $call2_i_i3 * $sub3_i15;
  var $sub_i71 = $13 + $sub_i63 - $5 - $sub_i7;
  var $sub3_i74 = $15 + $add_i66 - $7 - $add_i;
  var $add_i_i = $sub_i71 * $sub_i71 + $sub3_i74 * $sub3_i74;
  var $call_i_i_i = _sqrtf($add_i_i);
  if ($call_i_i_i < 1.1920928955078125e-7) {
    var $retval_0_i = 0;
    var $26 = $sub_i71;
    var $25 = $sub3_i74;
  } else {
    var $div_i = 1 / $call_i_i_i;
    var $retval_0_i = $call_i_i_i;
    var $26 = $sub_i71 * $div_i;
    var $25 = $sub3_i74 * $div_i;
  }
  var $25;
  var $26;
  var $retval_0_i;
  var $m_maxLength = $this + 84 | 0;
  var $sub = $retval_0_i - HEAPF32[$m_maxLength >> 2];
  var $cond_i_i = $sub < .20000000298023224 ? $sub : .20000000298023224;
  var $cond_i2_i = $cond_i_i < 0 ? 0 : $cond_i_i;
  var $mul = $cond_i2_i * -HEAPF32[$this$s2 + 40];
  var $mul_i51 = $26 * $mul;
  var $mul1_i53 = $25 * $mul;
  var $29 = HEAPF32[$this$s2 + 36];
  var $sub_i41 = $5 - $mul_i51 * $29;
  var $sub4_i = $7 - $mul1_i53 * $29;
  var $sub20 = $8 - HEAPF32[$this$s2 + 38] * ($sub_i7 * $mul1_i53 - $add_i * $mul_i51);
  var $31 = HEAPF32[$this$s2 + 37];
  var $add_i24 = $13 + $mul_i51 * $31;
  var $add4_i = $15 + $mul1_i53 * $31;
  var $add = $16 + HEAPF32[$this$s2 + 39] * ($sub_i63 * $mul1_i53 - $add_i66 * $mul_i51);
  var $33 = (tempDoubleF32[0] = $sub_i41, tempDoubleI32[0]);
  var $34$0 = $33;
  var $35 = (tempDoubleF32[0] = $sub4_i, tempDoubleI32[0]);
  var $38$0 = 0 | $34$0;
  var $38$1 = $35 | 0;
  var $st$52$0 = $2 | 0;
  HEAP32[$st$52$0 >> 2] = $38$0;
  var $st$52$1 = $2 + 4 | 0;
  HEAP32[$st$52$1 >> 2] = $38$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $sub20;
  var $43 = HEAP32[$positions$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $44 = (tempDoubleF32[0] = $add_i24, tempDoubleI32[0]);
  var $45$0 = $44;
  var $46 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
  var $49$0 = 0 | $45$0;
  var $49$1 = $46 | 0;
  var $st$74$0 = $43 | 0;
  HEAP32[$st$74$0 >> 2] = $49$0;
  var $st$74$1 = $43 + 4 | 0;
  HEAP32[$st$74$1 >> 2] = $49$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $add;
  return $retval_0_i - HEAPF32[$m_maxLength >> 2] < .004999999888241291;
  return null;
}

function __ZN11b2RopeJointD1Ev($this) {
  return;
  return;
}

function __ZN14b2WeldJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($this, $bA, $bB, $anchor) {
  var $bB$s2 = $bB >> 2;
  var $bA$s2 = $bA >> 2;
  HEAP32[$this + 8 >> 2] = $bA;
  HEAP32[$this + 12 >> 2] = $bB;
  var $x_i_i = $anchor | 0;
  var $sub_i_i = HEAPF32[$x_i_i >> 2] - HEAPF32[$bA$s2 + 3];
  var $y_i_i = $anchor + 4 | 0;
  var $sub4_i_i = HEAPF32[$y_i_i >> 2] - HEAPF32[$bA$s2 + 4];
  var $4 = HEAPF32[$bA$s2 + 6];
  var $5 = HEAPF32[$bA$s2 + 5];
  var $add16_i_i = $sub_i_i * -$5 + $4 * $sub4_i_i;
  var $6 = $this + 20 | 0;
  var $7 = (tempDoubleF32[0] = $4 * $sub_i_i + $5 * $sub4_i_i, tempDoubleI32[0]);
  var $8$0 = $7;
  var $9 = (tempDoubleF32[0] = $add16_i_i, tempDoubleI32[0]);
  var $12$1 = $9 | 0;
  HEAP32[$6 >> 2] = 0 | $8$0;
  HEAP32[$6 + 4 >> 2] = $12$1;
  var $sub_i_i4 = HEAPF32[$x_i_i >> 2] - HEAPF32[$bB$s2 + 3];
  var $sub4_i_i7 = HEAPF32[$y_i_i >> 2] - HEAPF32[$bB$s2 + 4];
  var $17 = HEAPF32[$bB$s2 + 6];
  var $18 = HEAPF32[$bB$s2 + 5];
  var $add16_i_i16 = $sub_i_i4 * -$18 + $17 * $sub4_i_i7;
  var $19 = $this + 28 | 0;
  var $20 = (tempDoubleF32[0] = $17 * $sub_i_i4 + $18 * $sub4_i_i7, tempDoubleI32[0]);
  var $21$0 = $20;
  var $22 = (tempDoubleF32[0] = $add16_i_i16, tempDoubleI32[0]);
  var $25$1 = $22 | 0;
  HEAP32[$19 >> 2] = 0 | $21$0;
  HEAP32[$19 + 4 >> 2] = $25$1;
  var $sub = HEAPF32[$bB$s2 + 14] - HEAPF32[$bA$s2 + 14];
  HEAPF32[$this + 36 >> 2] = $sub;
  return;
  return;
}

function __ZN11b2WeldJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var $m_indexB$s2;
  var $velocities$s2;
  var $this$s2 = $this >> 2;
  var $m_indexA = $this + 116 | 0;
  var $0 = HEAP32[$m_indexA >> 2];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $1 = HEAP32[$velocities$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $m_indexB$s2 = ($this + 120 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[($1 + 8 >> 2) + ($9 * 3 | 0)];
  var $17 = HEAPF32[$this$s2 + 39];
  var $18 = HEAPF32[$this$s2 + 40];
  var $19 = HEAPF32[$this$s2 + 41];
  var $20 = HEAPF32[$this$s2 + 42];
  if (HEAPF32[$this$s2 + 17] > 0) {
    var $z13 = $this + 112 | 0;
    var $25 = HEAPF32[$z13 >> 2];
    var $mul15 = ($16 - $8 + HEAPF32[$this$s2 + 19] + HEAPF32[$this$s2 + 25] * $25) * -HEAPF32[$this$s2 + 51];
    var $add18 = $25 + $mul15;
    HEAPF32[$z13 >> 2] = $add18;
    var $sub20 = $8 - $19 * $mul15;
    var $add22 = $16 + $20 * $mul15;
    var $26 = HEAPF32[$this$s2 + 34];
    var $27 = HEAPF32[$this$s2 + 33];
    var $28 = HEAPF32[$this$s2 + 32];
    var $29 = HEAPF32[$this$s2 + 31];
    var $sub_i140 = $13 + $26 * -$add22 - $5 - $28 * -$sub20;
    var $sub3_i143 = $15 + $27 * $add22 - $7 - $29 * $sub20;
    var $add_i135 = HEAPF32[$this$s2 + 43] * $sub_i140 + HEAPF32[$this$s2 + 46] * $sub3_i143;
    var $add12_i = HEAPF32[$this$s2 + 44] * $sub_i140 + HEAPF32[$this$s2 + 47] * $sub3_i143;
    var $sub_i124 = -$add_i135;
    var $sub2_i126 = -$add12_i;
    var $x28 = $this + 104 | 0;
    var $add29 = HEAPF32[$x28 >> 2] - $add_i135;
    HEAPF32[$x28 >> 2] = $add29;
    var $y31 = $this + 108 | 0;
    var $add32 = HEAPF32[$y31 >> 2] - $add12_i;
    HEAPF32[$y31 >> 2] = $add32;
    var $wB_0 = $add22 + $20 * ($27 * $sub2_i126 - $26 * $sub_i124);
    var $wA_0 = $sub20 - $19 * ($29 * $sub2_i126 - $28 * $sub_i124);
    var $sub_i124_pn = $sub_i124;
    var $sub2_i126_pn = $sub2_i126;
  } else {
    var $36 = HEAPF32[$this$s2 + 34];
    var $37 = HEAPF32[$this$s2 + 33];
    var $38 = HEAPF32[$this$s2 + 32];
    var $39 = HEAPF32[$this$s2 + 31];
    var $sub_i51 = $13 + $36 * -$16 - $5 - $38 * -$8;
    var $sub3_i53 = $15 + $37 * $16 - $7 - $39 * $8;
    var $sub53 = $16 - $8;
    var $add_i_i = HEAPF32[$this$s2 + 43] * $sub_i51 + HEAPF32[$this$s2 + 46] * $sub3_i53 + HEAPF32[$this$s2 + 49] * $sub53;
    var $add3_i_i = HEAPF32[$this$s2 + 44] * $sub_i51 + HEAPF32[$this$s2 + 47] * $sub3_i53 + HEAPF32[$this$s2 + 50] * $sub53;
    var $add5_i_i = HEAPF32[$this$s2 + 45] * $sub_i51 + HEAPF32[$this$s2 + 48] * $sub3_i53 + HEAPF32[$this$s2 + 51] * $sub53;
    var $sub_i39 = -$add_i_i;
    var $sub2_i = -$add3_i_i;
    var $x2_i33 = $this + 104 | 0;
    var $add_i34 = HEAPF32[$x2_i33 >> 2] - $add_i_i;
    HEAPF32[$x2_i33 >> 2] = $add_i34;
    var $y3_i36 = $this + 108 | 0;
    var $add4_i37 = HEAPF32[$y3_i36 >> 2] - $add3_i_i;
    HEAPF32[$y3_i36 >> 2] = $add4_i37;
    var $z5_i = $this + 112 | 0;
    var $add6_i = HEAPF32[$z5_i >> 2] - $add5_i_i;
    HEAPF32[$z5_i >> 2] = $add6_i;
    var $wB_0 = $16 + $20 * ($37 * $sub2_i - $36 * $sub_i39 - $add5_i_i);
    var $wA_0 = $8 - $19 * ($39 * $sub2_i - $38 * $sub_i39 - $add5_i_i);
    var $sub_i124_pn = $sub_i39;
    var $sub2_i126_pn = $sub2_i;
  }
  var $sub2_i126_pn;
  var $sub_i124_pn;
  var $wA_0;
  var $wB_0;
  var $52 = $5 - $17 * $sub_i124_pn;
  var $53 = $7 - $17 * $sub2_i126_pn;
  var $54 = $13 + $18 * $sub_i124_pn;
  var $55 = $15 + $18 * $sub2_i126_pn;
  var $57 = HEAP32[$velocities$s2] + $0 * 12 | 0;
  var $58 = (tempDoubleF32[0] = $52, tempDoubleI32[0]);
  var $59$0 = $58;
  var $60 = (tempDoubleF32[0] = $53, tempDoubleI32[0]);
  var $63$0 = 0 | $59$0;
  var $63$1 = $60 | 0;
  var $st$25$0 = $57 | 0;
  HEAP32[$st$25$0 >> 2] = $63$0;
  var $st$25$1 = $57 + 4 | 0;
  HEAP32[$st$25$1 >> 2] = $63$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $wA_0;
  var $68 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $69 = (tempDoubleF32[0] = $54, tempDoubleI32[0]);
  var $70$0 = $69;
  var $71 = (tempDoubleF32[0] = $55, tempDoubleI32[0]);
  var $74$0 = 0 | $70$0;
  var $74$1 = $71 | 0;
  var $st$47$0 = $68 | 0;
  HEAP32[$st$47$0 >> 2] = $74$0;
  var $st$47$1 = $68 + 4 | 0;
  HEAP32[$st$47$1 >> 2] = $74$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $wB_0;
  return;
  return;
}

function __ZN11b2RopeJoint4DumpEv($this) {
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  var $1 = HEAP32[HEAP32[$this$s2 + 12] + 8 >> 2];
  var $3 = HEAP32[HEAP32[$this$s2 + 13] + 8 >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str392 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str1415 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $1, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str2416 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $3, tempInt));
  var $conv = HEAP8[$this + 61 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str3417 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv, tempInt));
  var $conv3 = HEAPF32[$this$s2 + 17];
  var $conv5 = HEAPF32[$this$s2 + 18];
  __Z5b2LogPKcz(STRING_TABLE.__str4418 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv3, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv5, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv7 = HEAPF32[$this$s2 + 19];
  var $conv10 = HEAPF32[$this$s2 + 20];
  __Z5b2LogPKcz(STRING_TABLE.__str5419 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv7, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv10, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv11 = HEAPF32[$this$s2 + 21];
  __Z5b2LogPKcz(STRING_TABLE.__str6398 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv11, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $11 = HEAP32[$this$s2 + 14];
  __Z5b2LogPKcz(STRING_TABLE.__str12426 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $11, tempInt));
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN11b2RopeJointD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN11b2WeldJointC2EPK14b2WeldJointDef($this, $def) {
  var $16$s2;
  var $def$s2 = $def >> 2;
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV7b2Joint + 8 | 0;
  var $bodyA_i = $def + 8 | 0;
  var $bodyB_i = $def + 12 | 0;
  if ((HEAP32[$bodyA_i >> 2] | 0) == (HEAP32[$bodyB_i >> 2] | 0)) {
    ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
  }
  var $3 = HEAP32[$def$s2];
  HEAP32[$this$s2 + 1] = $3;
  HEAP32[$this$s2 + 2] = 0;
  HEAP32[$this$s2 + 3] = 0;
  var $5 = HEAP32[$bodyA_i >> 2];
  HEAP32[$this$s2 + 12] = $5;
  var $6 = HEAP32[$bodyB_i >> 2];
  HEAP32[$this$s2 + 13] = $6;
  HEAP32[$this$s2 + 14] = 0;
  var $10 = HEAP8[$def + 16 | 0] & 1;
  HEAP8[$this + 61 | 0] = $10;
  HEAP8[$this + 60 | 0] = 0;
  var $14 = HEAP32[$def$s2 + 1];
  HEAP32[$this$s2 + 16] = $14;
  var $16$s2 = ($this + 16 | 0) >> 2;
  HEAP32[$16$s2] = 0;
  HEAP32[$16$s2 + 1] = 0;
  HEAP32[$16$s2 + 2] = 0;
  HEAP32[$16$s2 + 3] = 0;
  HEAP32[$16$s2 + 4] = 0;
  HEAP32[$16$s2 + 5] = 0;
  HEAP32[$16$s2 + 6] = 0;
  HEAP32[$16$s2 + 7] = 0;
  HEAP32[$0 >> 2] = __ZTV11b2WeldJoint + 8 | 0;
  var $m_localAnchorB = $this + 88 | 0;
  var $17 = $def + 20 | 0;
  var $18 = $this + 80 | 0;
  var $19$0 = HEAP32[$17 >> 2];
  var $19$1 = HEAP32[$17 + 4 >> 2];
  HEAP32[$18 >> 2] = $19$0;
  HEAP32[$18 + 4 >> 2] = $19$1;
  var $20 = $def + 28 | 0;
  var $21 = $m_localAnchorB;
  var $22$0 = HEAP32[$20 >> 2];
  var $22$1 = HEAP32[$20 + 4 >> 2];
  HEAP32[$21 >> 2] = $22$0;
  HEAP32[$21 + 4 >> 2] = $22$1;
  var $23 = HEAPF32[$def$s2 + 9];
  HEAPF32[$this$s2 + 24] = $23;
  var $24 = HEAPF32[$def$s2 + 10];
  HEAPF32[$this$s2 + 17] = $24;
  var $25 = HEAPF32[$def$s2 + 11];
  HEAPF32[$this$s2 + 18] = $25;
  HEAPF32[$this$s2 + 26] = 0;
  HEAPF32[$this$s2 + 27] = 0;
  HEAPF32[$this$s2 + 28] = 0;
  return;
  return;
}

function __ZN11b2WeldJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var $velocities$s2;
  var $m_indexB$s2;
  var $2$s2;
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $0 = HEAP32[$this$s2 + 12], $0$s2 = $0 >> 2;
  var $1 = HEAPU32[$0$s2 + 2];
  var $m_indexA = $this + 116 | 0;
  HEAP32[$m_indexA >> 2] = $1;
  var $2 = HEAP32[$this$s2 + 13], $2$s2 = $2 >> 2;
  var $3 = HEAP32[$2$s2 + 2];
  var $m_indexB$s2 = ($this + 120 | 0) >> 2;
  HEAP32[$m_indexB$s2] = $3;
  var $4 = $0 + 28 | 0;
  var $5 = $this + 140 | 0;
  var $6$0 = HEAP32[$4 >> 2];
  var $6$1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 >> 2] = $6$0;
  HEAP32[$5 + 4 >> 2] = $6$1;
  var $7 = $2 + 28 | 0;
  var $8 = $this + 148 | 0;
  var $9$0 = HEAP32[$7 >> 2];
  var $9$1 = HEAP32[$7 + 4 >> 2];
  HEAP32[$8 >> 2] = $9$0;
  HEAP32[$8 + 4 >> 2] = $9$1;
  var $10 = HEAPF32[$0$s2 + 30];
  HEAPF32[$this$s2 + 39] = $10;
  var $11 = HEAPF32[$2$s2 + 30];
  HEAPF32[$this$s2 + 40] = $11;
  var $12 = HEAPF32[$0$s2 + 32];
  HEAPF32[$this$s2 + 41] = $12;
  var $13 = HEAPF32[$2$s2 + 32];
  HEAPF32[$this$s2 + 42] = $13;
  var $14 = HEAP32[$data + 24 >> 2];
  var $15 = HEAPF32[($14 + 8 >> 2) + ($1 * 3 | 0)];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $16 = HEAP32[$velocities$s2];
  var $17 = $16 + $1 * 12 | 0;
  var $18$1 = HEAP32[$17 + 4 >> 2];
  var $20 = (tempDoubleI32[0] = HEAP32[$17 >> 2], tempDoubleF32[0]);
  var $22 = (tempDoubleI32[0] = $18$1, tempDoubleF32[0]);
  var $23 = HEAPF32[($16 + 8 >> 2) + ($1 * 3 | 0)];
  var $24 = HEAPF32[($14 + 8 >> 2) + ($3 * 3 | 0)];
  var $25 = $16 + $3 * 12 | 0;
  var $26$1 = HEAP32[$25 + 4 >> 2];
  var $28 = (tempDoubleI32[0] = HEAP32[$25 >> 2], tempDoubleF32[0]);
  var $30 = (tempDoubleI32[0] = $26$1, tempDoubleF32[0]);
  var $31 = HEAPF32[($16 + 8 >> 2) + ($3 * 3 | 0)];
  var $call_i_i = _sinf($15);
  var $call2_i_i = _cosf($15);
  var $call_i_i6 = _sinf($24);
  var $call2_i_i8 = _cosf($24);
  var $m_rA = $this + 124 | 0;
  var $32 = HEAPF32[$this$s2 + 20];
  var $bitcast = (tempDoubleI32[0] = $6$0, tempDoubleF32[0]);
  var $sub_i = $32 - $bitcast;
  var $33 = HEAPF32[$this$s2 + 21];
  var $36 = (tempDoubleI32[0] = $6$1, tempDoubleF32[0]);
  var $sub3_i = $33 - $36;
  var $sub_i12 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $37 = $m_rA;
  var $38 = (tempDoubleF32[0] = $sub_i12, tempDoubleI32[0]);
  var $39$0 = $38;
  var $40 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $43$0 = 0 | $39$0;
  var $43$1 = $40 | 0;
  HEAP32[$37 >> 2] = $43$0;
  HEAP32[$37 + 4 >> 2] = $43$1;
  var $m_rB = $this + 132 | 0;
  var $44 = HEAPF32[$this$s2 + 22];
  var $bitcast104 = (tempDoubleI32[0] = $9$0, tempDoubleF32[0]);
  var $sub_i17 = $44 - $bitcast104;
  var $45 = HEAPF32[$this$s2 + 23];
  var $48 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
  var $sub3_i20 = $45 - $48;
  var $sub_i81 = $call2_i_i8 * $sub_i17 - $call_i_i6 * $sub3_i20;
  var $add_i84 = $call_i_i6 * $sub_i17 + $call2_i_i8 * $sub3_i20;
  var $49 = $m_rB;
  var $50 = (tempDoubleF32[0] = $sub_i81, tempDoubleI32[0]);
  var $51$0 = $50;
  var $52 = (tempDoubleF32[0] = $add_i84, tempDoubleI32[0]);
  var $55$0 = 0 | $51$0;
  var $55$1 = $52 | 0;
  HEAP32[$49 >> 2] = $55$0;
  HEAP32[$49 + 4 >> 2] = $55$1;
  var $add = $10 + $11;
  var $add58 = $add + $add_i * $add_i * $12 + $add_i84 * $add_i84 * $13;
  var $sub = -$add_i;
  var $sub71 = $sub_i12 * $sub * $12 - $add_i84 * $sub_i81 * $13;
  var $sub80 = $12 * $sub - $add_i84 * $13;
  var $add100 = $add + $sub_i12 * $sub_i12 * $12 + $sub_i81 * $sub_i81 * $13;
  var $add109 = $sub_i12 * $12 + $sub_i81 * $13;
  var $add119 = $12 + $13;
  var $56 = HEAPF32[$this$s2 + 17];
  var $m_mass = $this + 172 | 0;
  if ($56 > 0) {
    var $sub_i67 = $add58 * $add100 - $sub71 * $sub71;
    if ($sub_i67 != 0) {
      var $det_0_i71 = 1 / $sub_i67;
    } else {
      var $det_0_i71 = $sub_i67;
    }
    var $det_0_i71;
    var $mul7_i72 = $det_0_i71 * $add100;
    HEAPF32[$m_mass >> 2] = $mul7_i72;
    var $mul11_i73 = $sub71 * -$det_0_i71;
    HEAPF32[$this$s2 + 46] = $mul11_i73;
    HEAPF32[$this$s2 + 45] = 0;
    HEAPF32[$this$s2 + 44] = $mul11_i73;
    var $mul19_i = $det_0_i71 * $add58;
    HEAPF32[$this$s2 + 47] = $mul19_i;
    HEAPF32[$this$s2 + 48] = 0;
    HEAPF32[$this$s2 + 49] = 0;
    HEAPF32[$this$s2 + 50] = 0;
    var $z28_i = $this + 204 | 0;
    HEAPF32[$z28_i >> 2] = 0;
    if ($add119 > 0) {
      var $cond = 1 / $add119;
    } else {
      var $cond = 0;
    }
    var $cond;
    var $sub125 = $24 - $15 - HEAPF32[$this$s2 + 24];
    var $mul127 = $56 * 6.2831854820251465;
    var $mul132 = $cond * $mul127 * $mul127;
    var $59 = HEAPF32[$data >> 2];
    var $mul135 = $59 * ($cond * 2 * HEAPF32[$this$s2 + 18] * $mul127 + $59 * $mul132);
    var $m_gamma = $this + 100 | 0;
    HEAPF32[$m_gamma >> 2] = $mul135;
    if ($mul135 != 0) {
      var $cond143 = 1 / $mul135;
    } else {
      var $cond143 = 0;
    }
    var $cond143;
    HEAPF32[$m_gamma >> 2] = $cond143;
    var $mul148 = $sub125 * $59 * $mul132 * $cond143;
    HEAPF32[$this$s2 + 19] = $mul148;
    var $add150 = $add119 + $cond143;
    if ($add150 != 0) {
      var $cond156 = 1 / $add150;
    } else {
      var $cond156 = 0;
    }
    var $cond156;
    HEAPF32[$z28_i >> 2] = $cond156;
  } else {
    var $sub_i_i = $add100 * $add119 - $add109 * $add109;
    var $mul8_i_i = $sub71 * $add119;
    var $mul12_i_i = $sub71 * $add109;
    var $add6_i_i = $add58 * $sub_i_i + $sub71 * ($add109 * $sub80 - $mul8_i_i) + $sub80 * ($mul12_i_i - $add100 * $sub80);
    if ($add6_i_i != 0) {
      var $det_0_i = 1 / $add6_i_i;
    } else {
      var $det_0_i = $add6_i_i;
    }
    var $det_0_i;
    var $mul12_i = $det_0_i * $sub_i_i;
    HEAPF32[$m_mass >> 2] = $mul12_i;
    var $mul18_i = $det_0_i * ($sub80 * $add109 - $mul8_i_i);
    HEAPF32[$this$s2 + 44] = $mul18_i;
    var $mul24_i = $det_0_i * ($mul12_i_i - $sub80 * $add100);
    HEAPF32[$this$s2 + 45] = $mul24_i;
    HEAPF32[$this$s2 + 46] = $mul18_i;
    var $mul34_i = $det_0_i * ($add58 * $add119 - $sub80 * $sub80);
    HEAPF32[$this$s2 + 47] = $mul34_i;
    var $mul40_i = $det_0_i * ($sub80 * $sub71 - $add58 * $add109);
    HEAPF32[$this$s2 + 48] = $mul40_i;
    HEAPF32[$this$s2 + 49] = $mul24_i;
    HEAPF32[$this$s2 + 50] = $mul40_i;
    var $mul54_i = $det_0_i * ($add58 * $add100 - $sub71 * $sub71);
    HEAPF32[$this$s2 + 51] = $mul54_i;
    HEAPF32[$this$s2 + 25] = 0;
    HEAPF32[$this$s2 + 19] = 0;
  }
  var $m_impulse = $this + 104 | 0;
  if ((HEAP8[$data + 20 | 0] & 1) << 24 >> 24 == 0) {
    HEAPF32[$m_impulse >> 2] = 0;
    HEAPF32[$this$s2 + 27] = 0;
    HEAPF32[$this$s2 + 28] = 0;
    var $wB_0 = $31;
    var $wA_0 = $23;
    var $69 = $20;
    var $68 = $22;
    var $67 = $28;
    var $66 = $30;
  } else {
    var $62 = HEAPF32[$data + 8 >> 2];
    var $x_i57 = $m_impulse | 0;
    var $mul_i58 = HEAPF32[$x_i57 >> 2] * $62;
    HEAPF32[$x_i57 >> 2] = $mul_i58;
    var $y_i59 = $this + 108 | 0;
    var $mul2_i = HEAPF32[$y_i59 >> 2] * $62;
    HEAPF32[$y_i59 >> 2] = $mul2_i;
    var $z_i60 = $this + 112 | 0;
    var $mul3_i61 = HEAPF32[$z_i60 >> 2] * $62;
    HEAPF32[$z_i60 >> 2] = $mul3_i61;
    var $wB_0 = $31 + $13 * ($sub_i81 * $mul2_i - $add_i84 * $mul_i58 + $mul3_i61);
    var $wA_0 = $23 - $12 * ($sub_i12 * $mul2_i - $add_i * $mul_i58 + $mul3_i61);
    var $69 = $20 - $mul_i58 * $10;
    var $68 = $22 - $mul2_i * $10;
    var $67 = $28 + $mul_i58 * $11;
    var $66 = $30 + $mul2_i * $11;
  }
  var $66;
  var $67;
  var $68;
  var $69;
  var $wA_0;
  var $wB_0;
  var $71 = HEAP32[$velocities$s2] + $1 * 12 | 0;
  var $72 = (tempDoubleF32[0] = $69, tempDoubleI32[0]);
  var $73$0 = $72;
  var $74 = (tempDoubleF32[0] = $68, tempDoubleI32[0]);
  var $77$1 = $74 | 0;
  var $st$19$0 = $71 | 0;
  HEAP32[$st$19$0 >> 2] = 0 | $73$0;
  var $st$19$1 = $71 + 4 | 0;
  HEAP32[$st$19$1 >> 2] = $77$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $wA_0;
  var $82 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $83 = (tempDoubleF32[0] = $67, tempDoubleI32[0]);
  var $84$0 = $83;
  var $85 = (tempDoubleF32[0] = $66, tempDoubleI32[0]);
  var $88$1 = $85 | 0;
  var $st$41$0 = $82 | 0;
  HEAP32[$st$41$0 >> 2] = 0 | $84$0;
  var $st$41$1 = $82 + 4 | 0;
  HEAP32[$st$41$1 >> 2] = $88$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $wB_0;
  return;
  return;
}

function __ZN11b2WeldJointD1Ev($this) {
  return;
  return;
}

function __ZNK11b2WeldJoint10GetAnchorAEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 48 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 80 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 84 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK11b2WeldJoint10GetAnchorBEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 52 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 88 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 92 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK11b2WeldJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var $mul_i = HEAPF32[$this + 104 >> 2] * $inv_dt;
  var $mul1_i = HEAPF32[$this + 108 >> 2] * $inv_dt;
  HEAPF32[$agg_result >> 2] = $mul_i;
  HEAPF32[$agg_result + 4 >> 2] = $mul1_i;
  return;
  return;
}

function __ZNK11b2WeldJoint17GetReactionTorqueEf($this, $inv_dt) {
  return HEAPF32[$this + 112 >> 2] * $inv_dt;
  return null;
}

function __ZN15b2WheelJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($this, $bA, $bB, $anchor, $axis) {
  HEAP32[$this + 8 >> 2] = $bA;
  HEAP32[$this + 12 >> 2] = $bB;
  var $x_i_i = $anchor | 0;
  var $sub_i_i = HEAPF32[$x_i_i >> 2] - HEAPF32[$bA + 12 >> 2];
  var $y_i_i = $anchor + 4 | 0;
  var $sub4_i_i = HEAPF32[$y_i_i >> 2] - HEAPF32[$bA + 16 >> 2];
  var $c_i_i = $bA + 24 | 0;
  var $4 = HEAPF32[$c_i_i >> 2];
  var $s_i_i = $bA + 20 | 0;
  var $5 = HEAPF32[$s_i_i >> 2];
  var $add16_i_i = $sub_i_i * -$5 + $4 * $sub4_i_i;
  var $6 = $this + 20 | 0;
  var $7 = (tempDoubleF32[0] = $4 * $sub_i_i + $5 * $sub4_i_i, tempDoubleI32[0]);
  var $8$0 = $7;
  var $9 = (tempDoubleF32[0] = $add16_i_i, tempDoubleI32[0]);
  var $12$1 = $9 | 0;
  HEAP32[$6 >> 2] = 0 | $8$0;
  HEAP32[$6 + 4 >> 2] = $12$1;
  var $sub_i_i13 = HEAPF32[$x_i_i >> 2] - HEAPF32[$bB + 12 >> 2];
  var $sub4_i_i16 = HEAPF32[$y_i_i >> 2] - HEAPF32[$bB + 16 >> 2];
  var $17 = HEAPF32[$bB + 24 >> 2];
  var $18 = HEAPF32[$bB + 20 >> 2];
  var $add16_i_i25 = $sub_i_i13 * -$18 + $17 * $sub4_i_i16;
  var $19 = $this + 28 | 0;
  var $20 = (tempDoubleF32[0] = $17 * $sub_i_i13 + $18 * $sub4_i_i16, tempDoubleI32[0]);
  var $21$0 = $20;
  var $22 = (tempDoubleF32[0] = $add16_i_i25, tempDoubleI32[0]);
  var $25$1 = $22 | 0;
  HEAP32[$19 >> 2] = 0 | $21$0;
  HEAP32[$19 + 4 >> 2] = $25$1;
  var $26 = HEAPF32[$c_i_i >> 2];
  var $27 = HEAPF32[$axis >> 2];
  var $28 = HEAPF32[$s_i_i >> 2];
  var $29 = HEAPF32[$axis + 4 >> 2];
  var $add8_i_i = $27 * -$28 + $26 * $29;
  var $30 = $this + 36 | 0;
  var $31 = (tempDoubleF32[0] = $26 * $27 + $28 * $29, tempDoubleI32[0]);
  var $32$0 = $31;
  var $33 = (tempDoubleF32[0] = $add8_i_i, tempDoubleI32[0]);
  var $36$1 = $33 | 0;
  HEAP32[$30 >> 2] = 0 | $32$0;
  HEAP32[$30 + 4 >> 2] = $36$1;
  return;
  return;
}

function __ZN11b2WeldJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var $m_indexB$s2;
  var $positions$s2;
  var $this$s2 = $this >> 2;
  var $m_indexA = $this + 116 | 0;
  var $0 = HEAP32[$m_indexA >> 2];
  var $positions$s2 = ($data + 24 | 0) >> 2;
  var $1 = HEAP32[$positions$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $m_indexB$s2 = ($this + 120 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[($1 + 8 >> 2) + ($9 * 3 | 0)];
  var $call_i_i = _sinf($8);
  var $call2_i_i = _cosf($8);
  var $call_i_i1 = _sinf($16);
  var $call2_i_i3 = _cosf($16);
  var $17 = HEAPF32[$this$s2 + 39];
  var $18 = HEAPF32[$this$s2 + 40];
  var $19 = HEAPF32[$this$s2 + 41];
  var $20 = HEAPF32[$this$s2 + 42];
  var $sub_i = HEAPF32[$this$s2 + 20] - HEAPF32[$this$s2 + 35];
  var $sub3_i = HEAPF32[$this$s2 + 21] - HEAPF32[$this$s2 + 36];
  var $sub_i7 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $sub_i12 = HEAPF32[$this$s2 + 22] - HEAPF32[$this$s2 + 37];
  var $sub3_i15 = HEAPF32[$this$s2 + 23] - HEAPF32[$this$s2 + 38];
  var $sub_i77 = $call2_i_i3 * $sub_i12 - $call_i_i1 * $sub3_i15;
  var $add_i80 = $call_i_i1 * $sub_i12 + $call2_i_i3 * $sub3_i15;
  var $add = $17 + $18;
  var $add20 = $add + $add_i * $add_i * $19 + $add_i80 * $add_i80 * $20;
  var $sub = -$add_i;
  var $sub29 = $sub_i7 * $sub * $19 - $add_i80 * $sub_i77 * $20;
  var $sub36 = $19 * $sub - $add_i80 * $20;
  var $add52 = $add + $sub_i7 * $sub_i7 * $19 + $sub_i77 * $sub_i77 * $20;
  var $add59 = $sub_i7 * $19 + $sub_i77 * $20;
  var $add69 = $19 + $20;
  var $sub_i169 = $13 + $sub_i77 - $5 - $sub_i7;
  var $sub3_i172 = $15 + $add_i80 - $7 - $add_i;
  if (HEAPF32[$this$s2 + 17] > 0) {
    var $add_i165 = $sub_i169 * $sub_i169 + $sub3_i172 * $sub3_i172;
    var $call_i_i166 = _sqrtf($add_i165);
    var $sub_i154 = $add20 * $add52 - $sub29 * $sub29;
    if ($sub_i154 != 0) {
      var $det_0_i158 = 1 / $sub_i154;
    } else {
      var $det_0_i158 = $sub_i154;
    }
    var $det_0_i158;
    var $sub_i145 = -($det_0_i158 * ($add52 * $sub_i169 - $sub29 * $sub3_i172));
    var $sub2_i147 = -($det_0_i158 * ($add20 * $sub3_i172 - $sub29 * $sub_i169));
    var $angularError_0 = 0;
    var $positionError_0 = $call_i_i166;
    var $call75_pn = $sub_i7 * $sub2_i147 - $add_i * $sub_i145;
    var $call79_pn = $sub_i77 * $sub2_i147 - $add_i80 * $sub_i145;
    var $sub_i145_pn = $sub_i145;
    var $sub2_i147_pn = $sub2_i147;
  } else {
    var $sub88 = $16 - $8 - HEAPF32[$this$s2 + 24];
    var $add_i69 = $sub_i169 * $sub_i169 + $sub3_i172 * $sub3_i172;
    var $call_i_i70 = _sqrtf($add_i69);
    if ($sub88 > 0) {
      var $cond_i = $sub88;
    } else {
      var $cond_i = -$sub88;
    }
    var $cond_i;
    var $sub_i_i = $add52 * $add69 - $add59 * $add59;
    var $sub9_i_i = $add59 * $sub36 - $sub29 * $add69;
    var $sub16_i_i = $sub29 * $add59 - $add52 * $sub36;
    var $add6_i94_i = $add20 * $sub_i_i + $sub29 * $sub9_i_i + $sub36 * $sub16_i_i;
    if ($add6_i94_i != 0) {
      var $det_0_i = 1 / $add6_i94_i;
    } else {
      var $det_0_i = $add6_i94_i;
    }
    var $det_0_i;
    var $mul15_i = $det_0_i * ($add20 * ($add52 * $sub88 - $add59 * $sub3_i172) + $sub29 * ($add59 * $sub_i169 - $sub29 * $sub88) + $sub36 * ($sub29 * $sub3_i172 - $add52 * $sub_i169));
    var $sub_i51 = -($det_0_i * ($sub_i169 * $sub_i_i + $sub3_i172 * $sub9_i_i + $sub88 * $sub16_i_i));
    var $sub2_i = -($det_0_i * ($add20 * ($sub3_i172 * $add69 - $sub88 * $add59) + $sub29 * ($sub88 * $sub36 - $sub_i169 * $add69) + $sub36 * ($sub_i169 * $add59 - $sub3_i172 * $sub36)));
    var $angularError_0 = $cond_i;
    var $positionError_0 = $call_i_i70;
    var $call75_pn = $sub_i7 * $sub2_i - $add_i * $sub_i51 - $mul15_i;
    var $call79_pn = $sub_i77 * $sub2_i - $add_i80 * $sub_i51 - $mul15_i;
    var $sub_i145_pn = $sub_i51;
    var $sub2_i147_pn = $sub2_i;
  }
  var $sub2_i147_pn;
  var $sub_i145_pn;
  var $call79_pn;
  var $call75_pn;
  var $positionError_0;
  var $angularError_0;
  var $31 = $5 - $17 * $sub_i145_pn;
  var $32 = $7 - $17 * $sub2_i147_pn;
  var $33 = $13 + $18 * $sub_i145_pn;
  var $34 = $15 + $18 * $sub2_i147_pn;
  var $aA_0 = $8 - $19 * $call75_pn;
  var $aB_0 = $16 + $20 * $call79_pn;
  var $35 = (tempDoubleF32[0] = $31, tempDoubleI32[0]);
  var $36$0 = $35;
  var $37 = (tempDoubleF32[0] = $32, tempDoubleI32[0]);
  var $40$0 = 0 | $36$0;
  var $40$1 = $37 | 0;
  var $st$28$0 = $2 | 0;
  HEAP32[$st$28$0 >> 2] = $40$0;
  var $st$28$1 = $2 + 4 | 0;
  HEAP32[$st$28$1 >> 2] = $40$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $aA_0;
  var $45 = HEAP32[$positions$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $46 = (tempDoubleF32[0] = $33, tempDoubleI32[0]);
  var $47$0 = $46;
  var $48 = (tempDoubleF32[0] = $34, tempDoubleI32[0]);
  var $51$0 = 0 | $47$0;
  var $51$1 = $48 | 0;
  var $st$50$0 = $45 | 0;
  HEAP32[$st$50$0 >> 2] = $51$0;
  var $st$50$1 = $45 + 4 | 0;
  HEAP32[$st$50$1 >> 2] = $51$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $aB_0;
  if ($positionError_0 > .004999999888241291) {
    var $54 = 0;
  } else {
    var $54 = $angularError_0 <= .03490658849477768;
  }
  var $54;
  return $54;
  return null;
}

function __ZN11b2WeldJoint4DumpEv($this) {
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  var $1 = HEAP32[HEAP32[$this$s2 + 12] + 8 >> 2];
  var $3 = HEAP32[HEAP32[$this$s2 + 13] + 8 >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str402 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str1415 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $1, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str2416 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $3, tempInt));
  var $conv = HEAP8[$this + 61 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str3417 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv, tempInt));
  var $conv3 = HEAPF32[$this$s2 + 20];
  var $conv5 = HEAPF32[$this$s2 + 21];
  __Z5b2LogPKcz(STRING_TABLE.__str4418 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv3, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv5, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv7 = HEAPF32[$this$s2 + 22];
  var $conv10 = HEAPF32[$this$s2 + 23];
  __Z5b2LogPKcz(STRING_TABLE.__str5419 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv7, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv10, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv11 = HEAPF32[$this$s2 + 24];
  __Z5b2LogPKcz(STRING_TABLE.__str6408 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv11, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv12 = HEAPF32[$this$s2 + 17];
  __Z5b2LogPKcz(STRING_TABLE.__str10424 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv12, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv13 = HEAPF32[$this$s2 + 18];
  __Z5b2LogPKcz(STRING_TABLE.__str11425 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv13, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $13 = HEAP32[$this$s2 + 14];
  __Z5b2LogPKcz(STRING_TABLE.__str12426 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $13, tempInt));
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN11b2WeldJointD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN12b2WheelJointC2EPK15b2WheelJointDef($this, $def) {
  var $16$s2;
  var $def$s2 = $def >> 2;
  var $this$s2 = $this >> 2;
  var $0 = $this | 0;
  HEAP32[$0 >> 2] = __ZTV7b2Joint + 8 | 0;
  var $bodyA_i = $def + 8 | 0;
  var $bodyB_i = $def + 12 | 0;
  if ((HEAP32[$bodyA_i >> 2] | 0) == (HEAP32[$bodyB_i >> 2] | 0)) {
    ___assert_func(STRING_TABLE.__str315 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef | 0, STRING_TABLE.__str2317 | 0);
  }
  var $3 = HEAP32[$def$s2];
  HEAP32[$this$s2 + 1] = $3;
  HEAP32[$this$s2 + 2] = 0;
  HEAP32[$this$s2 + 3] = 0;
  var $5 = HEAP32[$bodyA_i >> 2];
  HEAP32[$this$s2 + 12] = $5;
  var $6 = HEAP32[$bodyB_i >> 2];
  HEAP32[$this$s2 + 13] = $6;
  HEAP32[$this$s2 + 14] = 0;
  var $10 = HEAP8[$def + 16 | 0] & 1;
  HEAP8[$this + 61 | 0] = $10;
  HEAP8[$this + 60 | 0] = 0;
  var $14 = HEAP32[$def$s2 + 1];
  HEAP32[$this$s2 + 16] = $14;
  var $16$s2 = ($this + 16 | 0) >> 2;
  HEAP32[$16$s2] = 0;
  HEAP32[$16$s2 + 1] = 0;
  HEAP32[$16$s2 + 2] = 0;
  HEAP32[$16$s2 + 3] = 0;
  HEAP32[$16$s2 + 4] = 0;
  HEAP32[$16$s2 + 5] = 0;
  HEAP32[$16$s2 + 6] = 0;
  HEAP32[$16$s2 + 7] = 0;
  HEAP32[$0 >> 2] = __ZTV12b2WheelJoint + 8 | 0;
  var $m_localAnchorB = $this + 84 | 0;
  var $m_localXAxisA = $this + 92 | 0;
  var $m_localYAxisA = $this + 100 | 0;
  var $17 = $def + 20 | 0;
  var $18 = $this + 76 | 0;
  var $19$0 = HEAP32[$17 >> 2];
  var $19$1 = HEAP32[$17 + 4 >> 2];
  HEAP32[$18 >> 2] = $19$0;
  HEAP32[$18 + 4 >> 2] = $19$1;
  var $20 = $def + 28 | 0;
  var $21 = $m_localAnchorB;
  var $22$0 = HEAP32[$20 >> 2];
  var $22$1 = HEAP32[$20 + 4 >> 2];
  HEAP32[$21 >> 2] = $22$0;
  HEAP32[$21 + 4 >> 2] = $22$1;
  var $23 = $def + 36 | 0;
  var $24 = $m_localXAxisA;
  var $25$0 = HEAP32[$23 >> 2];
  var $25$1 = HEAP32[$23 + 4 >> 2];
  HEAP32[$24 >> 2] = $25$0;
  HEAP32[$24 + 4 >> 2] = $25$1;
  var $28 = (tempDoubleI32[0] = $25$1, tempDoubleF32[0]);
  var $mul_i = $28 * -1;
  var $29 = $m_localYAxisA;
  var $30 = (tempDoubleF32[0] = $mul_i, tempDoubleI32[0]);
  var $33$0 = 0 | $30;
  var $33$1 = $25$0 | 0;
  HEAP32[$29 >> 2] = $33$0;
  HEAP32[$29 + 4 >> 2] = $33$1;
  HEAPF32[$this$s2 + 51] = 0;
  HEAPF32[$this$s2 + 27] = 0;
  HEAPF32[$this$s2 + 52] = 0;
  HEAPF32[$this$s2 + 28] = 0;
  HEAPF32[$this$s2 + 53] = 0;
  HEAPF32[$this$s2 + 29] = 0;
  var $34 = HEAPF32[$def$s2 + 12];
  HEAPF32[$this$s2 + 30] = $34;
  var $35 = HEAPF32[$def$s2 + 13];
  HEAPF32[$this$s2 + 31] = $35;
  var $37 = HEAP8[$def + 44 | 0] & 1;
  HEAP8[$this + 128 | 0] = $37;
  var $38 = HEAPF32[$def$s2 + 14];
  HEAPF32[$this$s2 + 17] = $38;
  var $39 = HEAPF32[$def$s2 + 15];
  HEAPF32[$this$s2 + 18] = $39;
  HEAPF32[$this$s2 + 54] = 0;
  HEAPF32[$this$s2 + 55] = 0;
  HEAPF32[$this$s2 + 43] = 0;
  HEAPF32[$this$s2 + 44] = 0;
  HEAPF32[$this$s2 + 45] = 0;
  HEAPF32[$this$s2 + 46] = 0;
  return;
  return;
}

function __ZN12b2WheelJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var $m_indexB$s2;
  var $velocities$s2;
  var $this$s2 = $this >> 2;
  var $0 = HEAPF32[$this$s2 + 39];
  var $1 = HEAPF32[$this$s2 + 40];
  var $2 = HEAPF32[$this$s2 + 41];
  var $3 = HEAPF32[$this$s2 + 42];
  var $m_indexA = $this + 132 | 0;
  var $4 = HEAP32[$m_indexA >> 2];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $5 = HEAP32[$velocities$s2];
  var $6 = $5 + $4 * 12 | 0;
  var $7$1 = HEAP32[$6 + 4 >> 2];
  var $9 = (tempDoubleI32[0] = HEAP32[$6 >> 2], tempDoubleF32[0]);
  var $11 = (tempDoubleI32[0] = $7$1, tempDoubleF32[0]);
  var $12 = HEAPF32[($5 + 8 >> 2) + ($4 * 3 | 0)];
  var $m_indexB$s2 = ($this + 136 | 0) >> 2;
  var $13 = HEAP32[$m_indexB$s2];
  var $14 = $5 + $13 * 12 | 0;
  var $15$1 = HEAP32[$14 + 4 >> 2];
  var $17 = (tempDoubleI32[0] = HEAP32[$14 >> 2], tempDoubleF32[0]);
  var $19 = (tempDoubleI32[0] = $15$1, tempDoubleF32[0]);
  var $20 = HEAPF32[($5 + 8 >> 2) + ($13 * 3 | 0)];
  var $21 = HEAPF32[$this$s2 + 43];
  var $22 = HEAPF32[$this$s2 + 44];
  var $23 = HEAPF32[$this$s2 + 48];
  var $24 = HEAPF32[$this$s2 + 47];
  var $m_springImpulse = $this + 116 | 0;
  var $28 = HEAPF32[$m_springImpulse >> 2];
  var $mul17 = ($21 * ($17 - $9) + $22 * ($19 - $11) + $23 * $20 - $24 * $12 + HEAPF32[$this$s2 + 54] + HEAPF32[$this$s2 + 55] * $28) * -HEAPF32[$this$s2 + 53];
  var $add19 = $28 + $mul17;
  HEAPF32[$m_springImpulse >> 2] = $add19;
  var $mul_i63 = $21 * $mul17;
  var $mul1_i65 = $22 * $mul17;
  var $sub_i52 = $9 - $mul_i63 * $0;
  var $sub4_i55 = $11 - $mul1_i65 * $0;
  var $sub27 = $12 - $2 * $mul17 * $24;
  var $add_i40 = $17 + $mul_i63 * $1;
  var $add4_i43 = $19 + $mul1_i65 * $1;
  var $add30 = $20 + $3 * $mul17 * $23;
  var $m_motorImpulse = $this + 112 | 0;
  var $31 = HEAPF32[$m_motorImpulse >> 2];
  var $mul37 = HEAPF32[$data >> 2] * HEAPF32[$this$s2 + 30];
  var $add39 = $31 + ($add30 - $sub27 - HEAPF32[$this$s2 + 31]) * -HEAPF32[$this$s2 + 52];
  var $sub40 = -$mul37;
  var $cond_i_i = $add39 < $mul37 ? $add39 : $mul37;
  var $cond_i2_i = $cond_i_i < $sub40 ? $sub40 : $cond_i_i;
  HEAPF32[$m_motorImpulse >> 2] = $cond_i2_i;
  var $sub44 = $cond_i2_i - $31;
  var $sub46 = $sub27 - $2 * $sub44;
  var $add48 = $add30 + $3 * $sub44;
  var $34 = HEAPF32[$this$s2 + 45];
  var $35 = HEAPF32[$this$s2 + 46];
  var $36 = HEAPF32[$this$s2 + 50];
  var $37 = HEAPF32[$this$s2 + 49];
  var $mul58 = ($34 * ($add_i40 - $sub_i52) + $35 * ($add4_i43 - $sub4_i55) + $36 * $add48 - $37 * $sub46) * -HEAPF32[$this$s2 + 51];
  var $m_impulse = $this + 108 | 0;
  var $add59 = HEAPF32[$m_impulse >> 2] + $mul58;
  HEAPF32[$m_impulse >> 2] = $add59;
  var $mul_i19 = $34 * $mul58;
  var $mul1_i21 = $35 * $mul58;
  var $sub_i9 = $sub_i52 - $mul_i19 * $0;
  var $sub4_i = $sub4_i55 - $mul1_i21 * $0;
  var $sub70 = $sub46 - $2 * $mul58 * $37;
  var $add_i = $add_i40 + $mul_i19 * $1;
  var $add4_i = $add4_i43 + $mul1_i21 * $1;
  var $add73 = $add48 + $3 * $mul58 * $36;
  var $41 = HEAP32[$velocities$s2] + $4 * 12 | 0;
  var $42 = (tempDoubleF32[0] = $sub_i9, tempDoubleI32[0]);
  var $43$0 = $42;
  var $44 = (tempDoubleF32[0] = $sub4_i, tempDoubleI32[0]);
  var $47$0 = 0 | $43$0;
  var $47$1 = $44 | 0;
  var $st$175$0 = $41 | 0;
  HEAP32[$st$175$0 >> 2] = $47$0;
  var $st$175$1 = $41 + 4 | 0;
  HEAP32[$st$175$1 >> 2] = $47$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $sub70;
  var $52 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $53 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
  var $54$0 = $53;
  var $55 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
  var $58$0 = 0 | $54$0;
  var $58$1 = $55 | 0;
  var $st$197$0 = $52 | 0;
  HEAP32[$st$197$0 >> 2] = $58$0;
  var $st$197$1 = $52 + 4 | 0;
  HEAP32[$st$197$1 >> 2] = $58$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $add73;
  return;
  return;
}

function __ZNK12b2WheelJoint10GetAnchorAEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 48 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 76 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 80 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK12b2WheelJoint10GetAnchorBEv($agg_result, $this) {
  var $0$s2;
  var $0$s2 = HEAP32[$this + 52 >> 2] >> 2;
  var $1 = HEAPF32[$0$s2 + 6];
  var $2 = HEAPF32[$this + 84 >> 2];
  var $3 = HEAPF32[$0$s2 + 5];
  var $4 = HEAPF32[$this + 88 >> 2];
  var $add_i_i = $1 * $2 - $3 * $4 + HEAPF32[$0$s2 + 3];
  var $add17_i_i = $3 * $2 + $1 * $4 + HEAPF32[$0$s2 + 4];
  HEAPF32[$agg_result >> 2] = $add_i_i;
  HEAPF32[$agg_result + 4 >> 2] = $add17_i_i;
  return;
  return;
}

function __ZNK12b2WheelJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var $this$s2 = $this >> 2;
  var $0 = HEAPF32[$this$s2 + 27];
  var $3 = HEAPF32[$this$s2 + 29];
  var $mul_i2 = (HEAPF32[$this$s2 + 45] * $0 + HEAPF32[$this$s2 + 43] * $3) * $inv_dt;
  var $mul1_i4 = (HEAPF32[$this$s2 + 46] * $0 + HEAPF32[$this$s2 + 44] * $3) * $inv_dt;
  HEAPF32[$agg_result >> 2] = $mul_i2;
  HEAPF32[$agg_result + 4 >> 2] = $mul1_i4;
  return;
  return;
}

function __ZNK12b2WheelJoint17GetReactionTorqueEf($this, $inv_dt) {
  return HEAPF32[$this + 112 >> 2] * $inv_dt;
  return null;
}

function __ZNK12b2WheelJoint19GetJointTranslationEv($this) {
  var $1$s2;
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $0$s2 = HEAP32[$this$s2 + 12] >> 2;
  var $1$s2 = HEAP32[$this$s2 + 13] >> 2;
  var $2 = HEAPF32[$0$s2 + 6];
  var $3 = HEAPF32[$this$s2 + 19];
  var $4 = HEAPF32[$0$s2 + 5];
  var $5 = HEAPF32[$this$s2 + 20];
  var $8 = HEAPF32[$1$s2 + 6];
  var $9 = HEAPF32[$this$s2 + 21];
  var $10 = HEAPF32[$1$s2 + 5];
  var $11 = HEAPF32[$this$s2 + 22];
  var $14 = HEAPF32[$this$s2 + 23];
  var $15 = HEAPF32[$this$s2 + 24];
  return ($8 * $9 - $10 * $11 + HEAPF32[$1$s2 + 3] - ($2 * $3 - $4 * $5 + HEAPF32[$0$s2 + 3])) * ($2 * $14 - $4 * $15) + ($10 * $9 + $8 * $11 + HEAPF32[$1$s2 + 4] - ($4 * $3 + $2 * $5 + HEAPF32[$0$s2 + 4])) * ($4 * $14 + $2 * $15);
  return null;
}

function __ZNK12b2WheelJoint13GetJointSpeedEv($this) {
  return HEAPF32[HEAP32[$this + 52 >> 2] + 72 >> 2] - HEAPF32[HEAP32[$this + 48 >> 2] + 72 >> 2];
  return null;
}

function __ZNK12b2WheelJoint14IsMotorEnabledEv($this) {
  return (HEAP8[$this + 128 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function __ZN12b2WheelJoint11EnableMotorEb($this, $flag) {
  var $0 = HEAP32[$this + 48 >> 2];
  var $1 = $0 + 4 | 0;
  var $2 = HEAP16[$1 >> 1];
  if (($2 & 2) << 16 >> 16 == 0) {
    var $or_i = $2 | 2;
    HEAP16[$1 >> 1] = $or_i;
    HEAPF32[$0 + 144 >> 2] = 0;
  }
  var $4 = HEAP32[$this + 52 >> 2];
  var $5 = $4 + 4 | 0;
  var $6 = HEAP16[$5 >> 1];
  if (($6 & 2) << 16 >> 16 == 0) {
    var $or_i4 = $6 | 2;
    HEAP16[$5 >> 1] = $or_i4;
    HEAPF32[$4 + 144 >> 2] = 0;
  }
  HEAP8[$this + 128 | 0] = $flag & 1;
  return;
  return;
}

function __ZN12b2WheelJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var $dtRatio$s2;
  var $m_springMass$s2;
  var $velocities$s2;
  var $m_indexB$s2;
  var $2$s2;
  var $0$s2;
  var $this$s2 = $this >> 2;
  var $0 = HEAP32[$this$s2 + 12], $0$s2 = $0 >> 2;
  var $1 = HEAP32[$0$s2 + 2];
  var $m_indexA = $this + 132 | 0;
  HEAP32[$m_indexA >> 2] = $1;
  var $2 = HEAP32[$this$s2 + 13], $2$s2 = $2 >> 2;
  var $3 = HEAP32[$2$s2 + 2];
  var $m_indexB$s2 = ($this + 136 | 0) >> 2;
  HEAP32[$m_indexB$s2] = $3;
  var $4 = $0 + 28 | 0;
  var $5 = $this + 140 | 0;
  var $6$0 = HEAP32[$4 >> 2];
  var $6$1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 >> 2] = $6$0;
  HEAP32[$5 + 4 >> 2] = $6$1;
  var $7 = $2 + 28 | 0;
  var $8 = $this + 148 | 0;
  var $9$0 = HEAP32[$7 >> 2];
  var $9$1 = HEAP32[$7 + 4 >> 2];
  HEAP32[$8 >> 2] = $9$0;
  HEAP32[$8 + 4 >> 2] = $9$1;
  var $10 = HEAPF32[$0$s2 + 30];
  HEAPF32[$this$s2 + 39] = $10;
  var $11 = HEAPF32[$2$s2 + 30];
  HEAPF32[$this$s2 + 40] = $11;
  var $12 = HEAPF32[$0$s2 + 32];
  HEAPF32[$this$s2 + 41] = $12;
  var $13 = HEAPF32[$2$s2 + 32];
  HEAPF32[$this$s2 + 42] = $13;
  var $14 = HEAP32[$data + 24 >> 2];
  var $15 = $14 + $1 * 12 | 0;
  var $16$1 = HEAP32[$15 + 4 >> 2];
  var $18 = (tempDoubleI32[0] = HEAP32[$15 >> 2], tempDoubleF32[0]);
  var $20 = (tempDoubleI32[0] = $16$1, tempDoubleF32[0]);
  var $21 = HEAPF32[($14 + 8 >> 2) + ($1 * 3 | 0)];
  var $velocities$s2 = ($data + 28 | 0) >> 2;
  var $22 = HEAP32[$velocities$s2];
  var $23 = $22 + $1 * 12 | 0;
  var $24$1 = HEAP32[$23 + 4 >> 2];
  var $26 = (tempDoubleI32[0] = HEAP32[$23 >> 2], tempDoubleF32[0]);
  var $28 = (tempDoubleI32[0] = $24$1, tempDoubleF32[0]);
  var $29 = HEAPF32[($22 + 8 >> 2) + ($1 * 3 | 0)];
  var $30 = $14 + $3 * 12 | 0;
  var $31$1 = HEAP32[$30 + 4 >> 2];
  var $33 = (tempDoubleI32[0] = HEAP32[$30 >> 2], tempDoubleF32[0]);
  var $35 = (tempDoubleI32[0] = $31$1, tempDoubleF32[0]);
  var $36 = HEAPF32[($14 + 8 >> 2) + ($3 * 3 | 0)];
  var $37 = $22 + $3 * 12 | 0;
  var $38$1 = HEAP32[$37 + 4 >> 2];
  var $40 = (tempDoubleI32[0] = HEAP32[$37 >> 2], tempDoubleF32[0]);
  var $42 = (tempDoubleI32[0] = $38$1, tempDoubleF32[0]);
  var $43 = HEAPF32[($22 + 8 >> 2) + ($3 * 3 | 0)];
  var $call_i_i = _sinf($21);
  var $call2_i_i = _cosf($21);
  var $call_i_i2 = _sinf($36);
  var $call2_i_i4 = _cosf($36);
  var $44 = HEAPF32[$this$s2 + 19];
  var $bitcast = (tempDoubleI32[0] = $6$0, tempDoubleF32[0]);
  var $sub_i = $44 - $bitcast;
  var $45 = HEAPF32[$this$s2 + 20];
  var $48 = (tempDoubleI32[0] = $6$1, tempDoubleF32[0]);
  var $sub3_i = $45 - $48;
  var $sub_i8 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $49 = HEAPF32[$this$s2 + 21];
  var $bitcast178 = (tempDoubleI32[0] = $9$0, tempDoubleF32[0]);
  var $sub_i13 = $49 - $bitcast178;
  var $50 = HEAPF32[$this$s2 + 22];
  var $53 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
  var $sub3_i16 = $50 - $53;
  var $sub_i161 = $call2_i_i4 * $sub_i13 - $call_i_i2 * $sub3_i16;
  var $add_i164 = $call_i_i2 * $sub_i13 + $call2_i_i4 * $sub3_i16;
  var $sub_i133 = $33 + $sub_i161 - $18 - $sub_i8;
  var $sub3_i136 = $35 + $add_i164 - $20 - $add_i;
  var $54 = HEAPF32[$this$s2 + 25];
  var $55 = HEAPF32[$this$s2 + 26];
  var $sub_i125 = $call2_i_i * $54 - $call_i_i * $55;
  var $add_i128 = $call_i_i * $54 + $call2_i_i * $55;
  var $56 = $this + 180 | 0;
  var $57 = (tempDoubleF32[0] = $sub_i125, tempDoubleI32[0]);
  var $58$0 = $57;
  var $59 = (tempDoubleF32[0] = $add_i128, tempDoubleI32[0]);
  var $62$0 = 0 | $58$0;
  var $62$1 = $59 | 0;
  HEAP32[$56 >> 2] = $62$0;
  HEAP32[$56 + 4 >> 2] = $62$1;
  var $add_i113 = $sub_i133 + $sub_i8;
  var $add3_i116 = $sub3_i136 + $add_i;
  var $sub_i110 = $add_i113 * $add_i128 - $add3_i116 * $sub_i125;
  HEAPF32[$this$s2 + 49] = $sub_i110;
  var $sub_i103 = $sub_i161 * $add_i128 - $add_i164 * $sub_i125;
  HEAPF32[$this$s2 + 50] = $sub_i103;
  var $add = $10 + $11;
  var $add60 = $add + $12 * $sub_i110 * $sub_i110 + $13 * $sub_i103 * $sub_i103;
  if ($add60 > 0) {
    var $storemerge1 = 1 / $add60;
  } else {
    var $storemerge1 = $add60;
  }
  var $storemerge1;
  HEAPF32[$this$s2 + 51] = $storemerge1;
  var $m_springMass$s2 = ($this + 212 | 0) >> 2;
  HEAPF32[$m_springMass$s2] = 0;
  var $m_bias = $this + 216 | 0;
  HEAPF32[$m_bias >> 2] = 0;
  var $m_gamma = $this + 220 | 0;
  HEAPF32[$m_gamma >> 2] = 0;
  var $63 = HEAPF32[$this$s2 + 17];
  var $cmp64 = $63 > 0;
  do {
    if ($cmp64) {
      var $64 = HEAPF32[$this$s2 + 23];
      var $65 = HEAPF32[$this$s2 + 24];
      var $sub_i91 = $call2_i_i * $64 - $call_i_i * $65;
      var $add_i94 = $call_i_i * $64 + $call2_i_i * $65;
      var $66 = $this + 172 | 0;
      var $67 = (tempDoubleF32[0] = $sub_i91, tempDoubleI32[0]);
      var $68$0 = $67;
      var $69 = (tempDoubleF32[0] = $add_i94, tempDoubleI32[0]);
      var $72$0 = 0 | $68$0;
      var $72$1 = $69 | 0;
      HEAP32[$66 >> 2] = $72$0;
      HEAP32[$66 + 4 >> 2] = $72$1;
      var $sub_i76 = $add_i113 * $add_i94 - $add3_i116 * $sub_i91;
      HEAPF32[$this$s2 + 47] = $sub_i76;
      var $sub_i69 = $sub_i161 * $add_i94 - $add_i164 * $sub_i91;
      HEAPF32[$this$s2 + 48] = $sub_i69;
      var $add82 = $add + $12 * $sub_i76 * $sub_i76 + $13 * $sub_i69 * $sub_i69;
      if ($add82 <= 0) {
        break;
      }
      var $div85 = 1 / $add82;
      HEAPF32[$m_springMass$s2] = $div85;
      var $add_i63 = $sub_i133 * $sub_i91 + $sub3_i136 * $add_i94;
      var $mul90 = $63 * 6.2831854820251465;
      var $mul98 = $div85 * $mul90 * $mul90;
      var $74 = HEAPF32[$data >> 2];
      var $mul101 = $74 * ($div85 * 2 * HEAPF32[$this$s2 + 18] * $mul90 + $74 * $mul98);
      if ($mul101 > 0) {
        var $storemerge = 1 / $mul101;
      } else {
        var $storemerge = $mul101;
      }
      var $storemerge;
      HEAPF32[$m_gamma >> 2] = $storemerge;
      var $mul113 = $add_i63 * $74 * $mul98 * $storemerge;
      HEAPF32[$m_bias >> 2] = $mul113;
      var $add116 = $add82 + $storemerge;
      HEAPF32[$m_springMass$s2] = $add116;
      if ($add116 <= 0) {
        break;
      }
      var $div122 = 1 / $add116;
      HEAPF32[$m_springMass$s2] = $div122;
    } else {
      HEAPF32[$this$s2 + 29] = 0;
    }
  } while (0);
  var $tobool = (HEAP8[$this + 128 | 0] & 1) << 24 >> 24 == 0;
  do {
    if ($tobool) {
      HEAPF32[$this$s2 + 52] = 0;
      HEAPF32[$this$s2 + 28] = 0;
    } else {
      var $add128 = $12 + $13;
      var $m_motorMass = $this + 208 | 0;
      HEAPF32[$m_motorMass >> 2] = $add128;
      if ($add128 <= 0) {
        break;
      }
      var $div133 = 1 / $add128;
      HEAPF32[$m_motorMass >> 2] = $div133;
    }
  } while (0);
  if ((HEAP8[$data + 20 | 0] & 1) << 24 >> 24 == 0) {
    HEAPF32[$this$s2 + 27] = 0;
    HEAPF32[$this$s2 + 29] = 0;
    HEAPF32[$this$s2 + 28] = 0;
    var $wB_0 = $43;
    var $wA_0 = $29;
    var $92 = $26;
    var $91 = $28;
    var $90 = $40;
    var $89 = $42;
  } else {
    var $dtRatio$s2 = ($data + 8 | 0) >> 2;
    var $m_impulse = $this + 108 | 0;
    var $mul143 = HEAPF32[$m_impulse >> 2] * HEAPF32[$dtRatio$s2];
    HEAPF32[$m_impulse >> 2] = $mul143;
    var $m_springImpulse146 = $this + 116 | 0;
    var $mul147 = HEAPF32[$m_springImpulse146 >> 2] * HEAPF32[$dtRatio$s2];
    HEAPF32[$m_springImpulse146 >> 2] = $mul147;
    var $m_motorImpulse150 = $this + 112 | 0;
    var $mul151 = HEAPF32[$m_motorImpulse150 >> 2] * HEAPF32[$dtRatio$s2];
    HEAPF32[$m_motorImpulse150 >> 2] = $mul151;
    var $add_i41 = $sub_i125 * $mul143 + HEAPF32[$this$s2 + 43] * $mul147;
    var $add3_i = $add_i128 * $mul143 + HEAPF32[$this$s2 + 44] * $mul147;
    var $wB_0 = $43 + $13 * ($mul143 * $sub_i103 + $mul147 * HEAPF32[$this$s2 + 48] + $mul151);
    var $wA_0 = $29 - $12 * ($mul143 * $sub_i110 + $mul147 * HEAPF32[$this$s2 + 47] + $mul151);
    var $92 = $26 - $add_i41 * $10;
    var $91 = $28 - $add3_i * $10;
    var $90 = $40 + $add_i41 * $11;
    var $89 = $42 + $add3_i * $11;
  }
  var $89;
  var $90;
  var $91;
  var $92;
  var $wA_0;
  var $wB_0;
  var $94 = HEAP32[$velocities$s2] + $1 * 12 | 0;
  var $95 = (tempDoubleF32[0] = $92, tempDoubleI32[0]);
  var $96$0 = $95;
  var $97 = (tempDoubleF32[0] = $91, tempDoubleI32[0]);
  var $100$1 = $97 | 0;
  var $st$19$0 = $94 | 0;
  HEAP32[$st$19$0 >> 2] = 0 | $96$0;
  var $st$19$1 = $94 + 4 | 0;
  HEAP32[$st$19$1 >> 2] = $100$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $wA_0;
  var $105 = HEAP32[$velocities$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $106 = (tempDoubleF32[0] = $90, tempDoubleI32[0]);
  var $107$0 = $106;
  var $108 = (tempDoubleF32[0] = $89, tempDoubleI32[0]);
  var $111$1 = $108 | 0;
  var $st$41$0 = $105 | 0;
  HEAP32[$st$41$0 >> 2] = 0 | $107$0;
  var $st$41$1 = $105 + 4 | 0;
  HEAP32[$st$41$1 >> 2] = $111$1;
  HEAPF32[(HEAP32[$velocities$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $wB_0;
  return;
  return;
}

function __ZN12b2WheelJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var $m_indexB$s2;
  var $positions$s2;
  var $this$s2 = $this >> 2;
  var $m_indexA = $this + 132 | 0;
  var $0 = HEAP32[$m_indexA >> 2];
  var $positions$s2 = ($data + 24 | 0) >> 2;
  var $1 = HEAP32[$positions$s2];
  var $2 = $1 + $0 * 12 | 0;
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
  var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
  var $8 = HEAPF32[($1 + 8 >> 2) + ($0 * 3 | 0)];
  var $m_indexB$s2 = ($this + 136 | 0) >> 2;
  var $9 = HEAP32[$m_indexB$s2];
  var $10 = $1 + $9 * 12 | 0;
  var $11$1 = HEAP32[$10 + 4 >> 2];
  var $13 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleF32[0]);
  var $15 = (tempDoubleI32[0] = $11$1, tempDoubleF32[0]);
  var $16 = HEAPF32[($1 + 8 >> 2) + ($9 * 3 | 0)];
  var $call_i_i = _sinf($8);
  var $call2_i_i = _cosf($8);
  var $call_i_i1 = _sinf($16);
  var $call2_i_i3 = _cosf($16);
  var $sub_i = HEAPF32[$this$s2 + 19] - HEAPF32[$this$s2 + 35];
  var $sub3_i = HEAPF32[$this$s2 + 20] - HEAPF32[$this$s2 + 36];
  var $sub_i7 = $call2_i_i * $sub_i - $call_i_i * $sub3_i;
  var $add_i = $call_i_i * $sub_i + $call2_i_i * $sub3_i;
  var $sub_i12 = HEAPF32[$this$s2 + 21] - HEAPF32[$this$s2 + 37];
  var $sub3_i15 = HEAPF32[$this$s2 + 22] - HEAPF32[$this$s2 + 38];
  var $sub_i113 = $call2_i_i3 * $sub_i12 - $call_i_i1 * $sub3_i15;
  var $add_i116 = $call_i_i1 * $sub_i12 + $call2_i_i3 * $sub3_i15;
  var $sub_i85 = $13 - $5 + $sub_i113 - $sub_i7;
  var $sub3_i88 = $15 - $7 + $add_i116 - $add_i;
  var $25 = HEAPF32[$this$s2 + 25];
  var $26 = HEAPF32[$this$s2 + 26];
  var $sub_i77 = $call2_i_i * $25 - $call_i_i * $26;
  var $add_i80 = $call_i_i * $25 + $call2_i_i * $26;
  var $add_i50 = $sub_i85 * $sub_i77 + $sub3_i88 * $add_i80;
  var $27 = HEAPF32[$this$s2 + 39];
  var $28 = HEAPF32[$this$s2 + 40];
  var $29 = HEAPF32[$this$s2 + 41];
  var $30 = HEAPF32[$this$s2 + 49];
  var $31 = HEAPF32[$this$s2 + 42];
  var $32 = HEAPF32[$this$s2 + 50];
  var $add24 = $27 + $28 + $29 * $30 * $30 + $31 * $32 * $32;
  if ($add24 != 0) {
    var $impulse_0 = -$add_i50 / $add24;
  } else {
    var $impulse_0 = 0;
  }
  var $impulse_0;
  var $mul_i40 = $sub_i77 * $impulse_0;
  var $mul1_i42 = $add_i80 * $impulse_0;
  var $sub_i30 = $5 - $mul_i40 * $27;
  var $sub4_i = $7 - $mul1_i42 * $27;
  var $sub31 = $8 - $29 * $impulse_0 * (($sub_i85 + $sub_i7) * $add_i80 - ($sub3_i88 + $add_i) * $sub_i77);
  var $add_i20 = $13 + $mul_i40 * $28;
  var $add4_i = $15 + $mul1_i42 * $28;
  var $add36 = $16 + $31 * $impulse_0 * ($sub_i113 * $add_i80 - $add_i116 * $sub_i77);
  var $33 = (tempDoubleF32[0] = $sub_i30, tempDoubleI32[0]);
  var $34$0 = $33;
  var $35 = (tempDoubleF32[0] = $sub4_i, tempDoubleI32[0]);
  var $38$0 = 0 | $34$0;
  var $38$1 = $35 | 0;
  var $st$27$0 = $2 | 0;
  HEAP32[$st$27$0 >> 2] = $38$0;
  var $st$27$1 = $2 + 4 | 0;
  HEAP32[$st$27$1 >> 2] = $38$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexA >> 2] * 3 | 0)] = $sub31;
  var $43 = HEAP32[$positions$s2] + HEAP32[$m_indexB$s2] * 12 | 0;
  var $44 = (tempDoubleF32[0] = $add_i20, tempDoubleI32[0]);
  var $45$0 = $44;
  var $46 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
  var $49$0 = 0 | $45$0;
  var $49$1 = $46 | 0;
  var $st$49$0 = $43 | 0;
  HEAP32[$st$49$0 >> 2] = $49$0;
  var $st$49$1 = $43 + 4 | 0;
  HEAP32[$st$49$1 >> 2] = $49$1;
  HEAPF32[(HEAP32[$positions$s2] + 8 >> 2) + (HEAP32[$m_indexB$s2] * 3 | 0)] = $add36;
  if ($add_i50 > 0) {
    var $cond_i = $add_i50;
  } else {
    var $cond_i = -$add_i50;
  }
  var $cond_i;
  return $cond_i <= .004999999888241291;
  return null;
}

function __ZN12b2WheelJointD1Ev($this) {
  return;
  return;
}

function __ZN12b2WheelJoint13SetMotorSpeedEf($this, $speed) {
  var $0 = HEAP32[$this + 48 >> 2];
  var $1 = $0 + 4 | 0;
  var $2 = HEAP16[$1 >> 1];
  if (($2 & 2) << 16 >> 16 == 0) {
    var $or_i = $2 | 2;
    HEAP16[$1 >> 1] = $or_i;
    HEAPF32[$0 + 144 >> 2] = 0;
  }
  var $4 = HEAP32[$this + 52 >> 2];
  var $5 = $4 + 4 | 0;
  var $6 = HEAP16[$5 >> 1];
  if (($6 & 2) << 16 >> 16 == 0) {
    var $or_i4 = $6 | 2;
    HEAP16[$5 >> 1] = $or_i4;
    HEAPF32[$4 + 144 >> 2] = 0;
  }
  HEAPF32[$this + 124 >> 2] = $speed;
  return;
  return;
}

function __ZN12b2WheelJoint17SetMaxMotorTorqueEf($this, $torque) {
  var $0 = HEAP32[$this + 48 >> 2];
  var $1 = $0 + 4 | 0;
  var $2 = HEAP16[$1 >> 1];
  if (($2 & 2) << 16 >> 16 == 0) {
    var $or_i = $2 | 2;
    HEAP16[$1 >> 1] = $or_i;
    HEAPF32[$0 + 144 >> 2] = 0;
  }
  var $4 = HEAP32[$this + 52 >> 2];
  var $5 = $4 + 4 | 0;
  var $6 = HEAP16[$5 >> 1];
  if (($6 & 2) << 16 >> 16 == 0) {
    var $or_i4 = $6 | 2;
    HEAP16[$5 >> 1] = $or_i4;
    HEAPF32[$4 + 144 >> 2] = 0;
  }
  HEAPF32[$this + 120 >> 2] = $torque;
  return;
  return;
}

function __ZNK12b2WheelJoint14GetMotorTorqueEf($this, $inv_dt) {
  return HEAPF32[$this + 112 >> 2] * $inv_dt;
  return null;
}

function __ZN6b2Rope8SetAngleEf($this, $angle) {
  var $sub = HEAP32[$this >> 2] - 2 | 0;
  var $cmp1 = ($sub | 0) > 0;
  $for_body_lr_ph$$for_end$93 : do {
    if ($cmp1) {
      var $m_as = $this + 24 | 0;
      var $i_02 = 0;
      while (1) {
        var $i_02;
        HEAPF32[HEAP32[$m_as >> 2] + ($i_02 << 2) >> 2] = $angle;
        var $inc = $i_02 + 1 | 0;
        if (($inc | 0) == ($sub | 0)) {
          break $for_body_lr_ph$$for_end$93;
        }
        var $i_02 = $inc;
      }
    }
  } while (0);
  return;
  return;
}

function _emscripten_bind_b2ContactManager__get_m_contactFilter_p0($self) {
  return HEAP32[$self + 68 >> 2];
  return null;
}

function _emscripten_bind_b2ContactManager__get_m_contactCount_p0($self) {
  return HEAP32[$self + 64 >> 2];
  return null;
}

function _emscripten_bind_b2ContactManager__set_m_contactFilter_p1($self, $arg0) {
  HEAP32[$self + 68 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2ContactManager__set_m_allocator_p1($self, $arg0) {
  HEAP32[$self + 76 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2ContactManager__set_m_contactCount_p1($self, $arg0) {
  HEAP32[$self + 64 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2ContactManager__set_m_contactList_p1($self, $arg0) {
  HEAP32[$self + 60 >> 2] = $arg0;
  return;
  return;
}

function __ZN12b2WheelJoint4DumpEv($this) {
  var $this$s2 = $this >> 2;
  var __stackBase__ = STACKTOP;
  var $1 = HEAP32[HEAP32[$this$s2 + 12] + 8 >> 2];
  var $3 = HEAP32[HEAP32[$this$s2 + 13] + 8 >> 2];
  __Z5b2LogPKcz(STRING_TABLE.__str414 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str1415 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $1, tempInt));
  __Z5b2LogPKcz(STRING_TABLE.__str2416 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $3, tempInt));
  var $conv = HEAP8[$this + 61 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str3417 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv, tempInt));
  var $conv3 = HEAPF32[$this$s2 + 19];
  var $conv5 = HEAPF32[$this$s2 + 20];
  __Z5b2LogPKcz(STRING_TABLE.__str4418 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv3, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv5, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv7 = HEAPF32[$this$s2 + 21];
  var $conv10 = HEAPF32[$this$s2 + 22];
  __Z5b2LogPKcz(STRING_TABLE.__str5419 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv7, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv10, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv12 = HEAPF32[$this$s2 + 23];
  var $conv15 = HEAPF32[$this$s2 + 24];
  __Z5b2LogPKcz(STRING_TABLE.__str6420 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $conv12, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $conv15, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
  var $conv17 = HEAP8[$this + 128 | 0] & 1 & 255;
  __Z5b2LogPKcz(STRING_TABLE.__str7421 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $conv17, tempInt));
  var $conv18 = HEAPF32[$this$s2 + 31];
  __Z5b2LogPKcz(STRING_TABLE.__str8422 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv18, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv19 = HEAPF32[$this$s2 + 30];
  __Z5b2LogPKcz(STRING_TABLE.__str9423 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv19, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv20 = HEAPF32[$this$s2 + 17];
  __Z5b2LogPKcz(STRING_TABLE.__str10424 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv20, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $conv21 = HEAPF32[$this$s2 + 18];
  __Z5b2LogPKcz(STRING_TABLE.__str11425 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $conv21, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
  var $18 = HEAP32[$this$s2 + 14];
  __Z5b2LogPKcz(STRING_TABLE.__str12426 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $18, tempInt));
  STACKTOP = __stackBase__;
  return;
  return;
}

function __ZN12b2WheelJointD0Ev($this) {
  var $0 = $this;
  __ZdlPv($0);
  return;
  return;
}

function __ZN6b2RopeC2Ev($this) {
  var $m_k2 = $this + 40 | 0;
  var $0 = $this;
  for (var $$dest = $0 >> 2, $$stop = $$dest + 9; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  HEAPF32[$m_k2 >> 2] = 1;
  HEAPF32[$this + 44 >> 2] = .10000000149011612;
  return;
  return;
}

function __ZN6b2RopeD2Ev($this) {
  var $this$s2 = $this >> 2;
  var $1 = HEAP32[$this$s2 + 1];
  _free($1);
  var $3 = HEAP32[$this$s2 + 2];
  _free($3);
  var $5 = HEAP32[$this$s2 + 3];
  _free($5);
  var $7 = HEAP32[$this$s2 + 4];
  _free($7);
  var $9 = HEAP32[$this$s2 + 5];
  _free($9);
  var $11 = HEAP32[$this$s2 + 6];
  _free($11);
  return;
  return;
}

function __ZN6b2Rope10InitializeEPK9b2RopeDef($this, $def) {
  var $st$4$1$s2;
  var $st$4$0$s2;
  var $m_ims$s2;
  var $m_ps$s2;
  var $m_count$s2;
  var $count = $def + 4 | 0;
  var $0 = HEAP32[$count >> 2];
  if (($0 | 0) > 2) {
    var $1 = $0;
  } else {
    ___assert_func(STRING_TABLE.__str429 | 0, 48, STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Rope10InitializeEPK9b2RopeDef | 0, STRING_TABLE.__str1430 | 0);
    var $1 = HEAP32[$count >> 2];
  }
  var $1;
  var $m_count$s2 = ($this | 0) >> 2;
  HEAP32[$m_count$s2] = $1;
  var $call_i1 = _malloc($1 << 3);
  var $m_ps$s2 = ($this + 4 | 0) >> 2;
  HEAP32[$m_ps$s2] = $call_i1;
  var $mul5 = HEAP32[$m_count$s2] << 3;
  var $call_i2 = _malloc($mul5);
  var $4 = $call_i2;
  var $m_p0s = $this + 8 | 0;
  HEAP32[$m_p0s >> 2] = $4;
  var $mul8 = HEAP32[$m_count$s2] << 3;
  var $call_i3 = _malloc($mul8);
  var $6 = $call_i3;
  var $m_vs = $this + 12 | 0;
  HEAP32[$m_vs >> 2] = $6;
  var $mul11 = HEAP32[$m_count$s2] << 2;
  var $call_i4 = _malloc($mul11);
  var $8 = $call_i4;
  var $m_ims$s2 = ($this + 16 | 0) >> 2;
  HEAP32[$m_ims$s2] = $8;
  var $9 = HEAP32[$m_count$s2];
  var $cmp1434 = ($9 | 0) > 0;
  $for_body_lr_ph$$for_end$25 : do {
    if ($cmp1434) {
      var $vertices = $def | 0;
      var $masses = $def + 8 | 0;
      var $i_035 = 0;
      while (1) {
        var $i_035;
        var $12 = ($i_035 << 3) + HEAP32[$vertices >> 2] | 0;
        var $13 = ($i_035 << 3) + HEAP32[$m_ps$s2] | 0;
        var $14$0 = HEAP32[$12 >> 2];
        var $14$1 = HEAP32[$12 + 4 >> 2];
        var $st$11$0 = $13 | 0;
        HEAP32[$st$11$0 >> 2] = $14$0;
        var $st$11$1 = $13 + 4 | 0;
        HEAP32[$st$11$1 >> 2] = $14$1;
        var $17 = ($i_035 << 3) + HEAP32[$vertices >> 2] | 0;
        var $18 = ($i_035 << 3) + HEAP32[$m_p0s >> 2] | 0;
        var $19$0 = HEAP32[$17 >> 2];
        var $19$1 = HEAP32[$17 + 4 >> 2];
        var $st$25$0 = $18 | 0;
        HEAP32[$st$25$0 >> 2] = $19$0;
        var $st$25$1 = $18 + 4 | 0;
        HEAP32[$st$25$1 >> 2] = $19$1;
        var $20 = HEAP32[$m_vs >> 2];
        HEAPF32[$20 + ($i_035 << 3) >> 2] = 0;
        HEAPF32[$20 + ($i_035 << 3) + 4 >> 2] = 0;
        var $22 = HEAPF32[HEAP32[$masses >> 2] + ($i_035 << 2) >> 2];
        if ($22 > 0) {
          var $div = 1 / $22;
          HEAPF32[HEAP32[$m_ims$s2] + ($i_035 << 2) >> 2] = $div;
        } else {
          HEAPF32[HEAP32[$m_ims$s2] + ($i_035 << 2) >> 2] = 0;
        }
        var $inc = $i_035 + 1 | 0;
        var $25 = HEAP32[$m_count$s2];
        if (($inc | 0) >= ($25 | 0)) {
          var $_lcssa = $25;
          break $for_body_lr_ph$$for_end$25;
        }
        var $i_035 = $inc;
      }
    } else {
      var $_lcssa = $9;
    }
  } while (0);
  var $_lcssa;
  var $sub = $_lcssa - 1 | 0;
  var $sub32 = $_lcssa - 2 | 0;
  var $call_i24 = _malloc($sub << 2);
  var $m_Ls = $this + 20 | 0;
  HEAP32[$m_Ls >> 2] = $call_i24;
  var $call_i25 = _malloc($sub32 << 2);
  var $m_as = $this + 24 | 0;
  HEAP32[$m_as >> 2] = $call_i25;
  var $cmp3932 = ($sub | 0) > 0;
  $for_body40$$for_cond52_preheader$34 : do {
    if ($cmp3932) {
      var $i37_033 = 0;
      while (1) {
        var $i37_033;
        var $28 = HEAP32[$m_ps$s2];
        var $29 = ($i37_033 << 3) + $28 | 0;
        var $st$4$0 = $29 | 0, $st$4$0$s2 = $st$4$0 >> 2;
        var $st$4$1 = $29 + 4 | 0, $st$4$1$s2 = $st$4$1 >> 2;
        var $30$1 = HEAP32[$st$4$1$s2];
        var $32 = (tempDoubleI32[0] = HEAP32[$st$4$0$s2], tempDoubleF32[0]);
        var $34 = (tempDoubleI32[0] = $30$1, tempDoubleF32[0]);
        var $add = $i37_033 + 1 | 0;
        var $35 = ($add << 3) + $28 | 0;
        var $st$19$0 = $35 | 0;
        var $st$19$1 = $35 + 4 | 0;
        var $36$1 = HEAP32[$st$19$1 >> 2];
        var $38 = (tempDoubleI32[0] = HEAP32[$st$19$0 >> 2], tempDoubleF32[0]);
        var $40 = (tempDoubleI32[0] = $36$1, tempDoubleF32[0]);
        var $sub_i_i = $32 - $38;
        var $sub3_i_i = $34 - $40;
        var $add_i_i = $sub_i_i * $sub_i_i + $sub3_i_i * $sub3_i_i;
        var $call_i_i_i = _sqrtf($add_i_i);
        HEAPF32[HEAP32[$m_Ls >> 2] + ($i37_033 << 2) >> 2] = $call_i_i_i;
        if (($add | 0) == ($sub | 0)) {
          break $for_body40$$for_cond52_preheader$34;
        }
        var $i37_033 = $add;
      }
    }
  } while (0);
  var $cmp5330 = ($sub32 | 0) > 0;
  $for_body54$$for_end72$38 : do {
    if ($cmp5330) {
      var $i51_031 = 0;
      while (1) {
        var $i51_031;
        var $42 = HEAP32[$m_ps$s2];
        var $43 = ($i51_031 << 3) + $42 | 0;
        var $st$4$0 = $43 | 0, $st$4$0$s2 = $st$4$0 >> 2;
        var $st$4$1 = $43 + 4 | 0, $st$4$1$s2 = $st$4$1 >> 2;
        var $44$1 = HEAP32[$st$4$1$s2];
        var $46 = (tempDoubleI32[0] = HEAP32[$st$4$0$s2], tempDoubleF32[0]);
        var $48 = (tempDoubleI32[0] = $44$1, tempDoubleF32[0]);
        var $add59 = $i51_031 + 1 | 0;
        var $49 = ($add59 << 3) + $42 | 0;
        var $st$19$0 = $49 | 0;
        var $st$19$1 = $49 + 4 | 0;
        var $50$1 = HEAP32[$st$19$1 >> 2];
        var $52 = (tempDoubleI32[0] = HEAP32[$st$19$0 >> 2], tempDoubleF32[0]);
        var $54 = (tempDoubleI32[0] = $50$1, tempDoubleF32[0]);
        var $55 = ($i51_031 + 2 << 3) + $42 | 0;
        var $56$1 = HEAP32[$55 + 4 >> 2];
        var $58 = (tempDoubleI32[0] = HEAP32[$55 >> 2], tempDoubleF32[0]);
        var $60 = (tempDoubleI32[0] = $56$1, tempDoubleF32[0]);
        var $sub_i18 = $52 - $46;
        var $sub3_i21 = $54 - $48;
        var $sub_i13 = $58 - $52;
        var $sub3_i = $60 - $54;
        var $sub_i = $sub_i18 * $sub3_i - $sub3_i21 * $sub_i13;
        var $add_i = $sub_i18 * $sub_i13 + $sub3_i21 * $sub3_i;
        var $call_i = _atan2f($sub_i, $add_i);
        HEAPF32[HEAP32[$m_as >> 2] + ($i51_031 << 2) >> 2] = $call_i;
        if (($add59 | 0) == ($sub32 | 0)) {
          break $for_body54$$for_end72$38;
        }
        var $i51_031 = $add59;
      }
    }
  } while (0);
  var $62 = $def + 12 | 0;
  var $63 = $this + 28 | 0;
  var $st$4$0 = $62 | 0, $st$4$0$s2 = $st$4$0 >> 2;
  var $64$0 = HEAP32[$st$4$0$s2];
  var $st$4$1 = $62 + 4 | 0, $st$4$1$s2 = $st$4$1 >> 2;
  var $64$1 = HEAP32[$st$4$1$s2];
  HEAP32[$63 >> 2] = $64$0;
  HEAP32[$63 + 4 >> 2] = $64$1;
  var $65 = HEAPF32[$def + 20 >> 2];
  HEAPF32[$this + 36 >> 2] = $65;
  var $66 = HEAPF32[$def + 24 >> 2];
  HEAPF32[$this + 40 >> 2] = $66;
  var $67 = HEAPF32[$def + 28 >> 2];
  HEAPF32[$this + 44 >> 2] = $67;
  return;
  return;
}

function __ZN6b2Rope4StepEfi($this, $h, $iterations) {
  var $m_vs$s2;
  var $m_count$s2;
  var $cmp = $h == 0;
  $for_end38$$if_end$43 : do {
    if (!$cmp) {
      var $mul = HEAPF32[$this + 36 >> 2] * -$h;
      var $call = _expf($mul);
      var $m_count$s2 = ($this | 0) >> 2;
      var $1 = HEAP32[$m_count$s2];
      var $cmp233 = ($1 | 0) > 0;
      $for_body_lr_ph$$for_cond17_preheader$45 : do {
        if ($cmp233) {
          var $m_p0s = $this + 8 | 0;
          var $m_ps = $this + 4 | 0;
          var $m_ims = $this + 16 | 0;
          var $m_vs$s2 = ($this + 12 | 0) >> 2;
          var $x_i = $this + 28 | 0;
          var $y_i = $this + 32 | 0;
          var $i_034 = 0;
          while (1) {
            var $i_034;
            var $5 = ($i_034 << 3) + HEAP32[$m_ps >> 2] | 0;
            var $6 = ($i_034 << 3) + HEAP32[$m_p0s >> 2] | 0;
            var $7$0 = HEAP32[$5 >> 2];
            var $7$1 = HEAP32[$5 + 4 >> 2];
            var $st$11$0 = $6 | 0;
            HEAP32[$st$11$0 >> 2] = $7$0;
            var $st$11$1 = $6 + 4 | 0;
            HEAP32[$st$11$1 >> 2] = $7$1;
            if (HEAPF32[HEAP32[$m_ims >> 2] + ($i_034 << 2) >> 2] > 0) {
              var $10 = HEAP32[$m_vs$s2];
              var $mul1_i = HEAPF32[$y_i >> 2] * $h;
              var $x2_i = ($i_034 << 3) + $10 | 0;
              var $add_i = HEAPF32[$x2_i >> 2] + HEAPF32[$x_i >> 2] * $h;
              HEAPF32[$x2_i >> 2] = $add_i;
              var $y3_i = ($i_034 << 3) + $10 + 4 | 0;
              var $add4_i = HEAPF32[$y3_i >> 2] + $mul1_i;
              HEAPF32[$y3_i >> 2] = $add4_i;
            }
            var $15 = HEAP32[$m_vs$s2];
            var $x_i13 = ($i_034 << 3) + $15 | 0;
            var $mul_i14 = HEAPF32[$x_i13 >> 2] * $call;
            HEAPF32[$x_i13 >> 2] = $mul_i14;
            var $y_i15 = ($i_034 << 3) + $15 + 4 | 0;
            var $mul2_i = HEAPF32[$y_i15 >> 2] * $call;
            HEAPF32[$y_i15 >> 2] = $mul2_i;
            var $18 = HEAP32[$m_ps >> 2];
            var $19 = HEAP32[$m_vs$s2];
            var $mul1_i19 = HEAPF32[$19 + ($i_034 << 3) + 4 >> 2] * $h;
            var $x2_i23 = ($i_034 << 3) + $18 | 0;
            var $add_i24 = HEAPF32[$x2_i23 >> 2] + HEAPF32[$19 + ($i_034 << 3) >> 2] * $h;
            HEAPF32[$x2_i23 >> 2] = $add_i24;
            var $y3_i26 = ($i_034 << 3) + $18 + 4 | 0;
            var $add4_i27 = HEAPF32[$y3_i26 >> 2] + $mul1_i19;
            HEAPF32[$y3_i26 >> 2] = $add4_i27;
            var $inc = $i_034 + 1 | 0;
            var $24 = HEAP32[$m_count$s2];
            if (($inc | 0) >= ($24 | 0)) {
              var $2 = $24;
              break $for_body_lr_ph$$for_cond17_preheader$45;
            }
            var $i_034 = $inc;
          }
        } else {
          var $2 = $1;
        }
      } while (0);
      var $2;
      if (($iterations | 0) > 0) {
        var $i16_032 = 0;
        while (1) {
          var $i16_032;
          __ZN6b2Rope7SolveC2Ev($this);
          __ZN6b2Rope7SolveC3Ev($this);
          __ZN6b2Rope7SolveC2Ev($this);
          var $inc21 = $i16_032 + 1 | 0;
          if (($inc21 | 0) == ($iterations | 0)) {
            break;
          }
          var $i16_032 = $inc21;
        }
        var $25 = HEAP32[$m_count$s2];
      } else {
        var $25 = $2;
      }
      var $25;
      var $div = 1 / $h;
      if (($25 | 0) <= 0) {
        break;
      }
      var $m_vs28 = $this + 12 | 0;
      var $m_ps32 = $this + 4 | 0;
      var $m_p0s34 = $this + 8 | 0;
      var $i23_030 = 0;
      while (1) {
        var $i23_030;
        var $27 = HEAP32[$m_ps32 >> 2];
        var $28 = HEAP32[$m_p0s34 >> 2];
        var $mul1_i4 = (HEAPF32[$27 + ($i23_030 << 3) + 4 >> 2] - HEAPF32[$28 + ($i23_030 << 3) + 4 >> 2]) * $div;
        var $33 = ($i23_030 << 3) + HEAP32[$m_vs28 >> 2] | 0;
        var $34 = (tempDoubleF32[0] = (HEAPF32[$27 + ($i23_030 << 3) >> 2] - HEAPF32[$28 + ($i23_030 << 3) >> 2]) * $div, tempDoubleI32[0]);
        var $35$0 = $34;
        var $36 = (tempDoubleF32[0] = $mul1_i4, tempDoubleI32[0]);
        var $39$0 = 0 | $35$0;
        var $39$1 = $36 | 0;
        var $st$28$0 = $33 | 0;
        HEAP32[$st$28$0 >> 2] = $39$0;
        var $st$28$1 = $33 + 4 | 0;
        HEAP32[$st$28$1 >> 2] = $39$1;
        var $inc37 = $i23_030 + 1 | 0;
        if (($inc37 | 0) >= (HEAP32[$m_count$s2] | 0)) {
          break $for_end38$$if_end$43;
        }
        var $i23_030 = $inc37;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN6b2Rope7SolveC2Ev($this) {
  var $sub = HEAP32[$this >> 2] - 1 | 0;
  var $cmp25 = ($sub | 0) > 0;
  $for_body_lr_ph$$for_end$63 : do {
    if ($cmp25) {
      var $m_ps = $this + 4 | 0;
      var $m_ims = $this + 16 | 0;
      var $m_k2 = $this + 40 | 0;
      var $m_Ls = $this + 20 | 0;
      var $i_026 = 0;
      while (1) {
        var $i_026;
        var $1 = HEAP32[$m_ps >> 2];
        var $2 = ($i_026 << 3) + $1 | 0;
        var $3$1 = HEAP32[$2 + 4 >> 2];
        var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
        var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
        var $add = $i_026 + 1 | 0;
        var $8 = ($add << 3) + $1 | 0;
        var $9$1 = HEAP32[$8 + 4 >> 2];
        var $11 = (tempDoubleI32[0] = HEAP32[$8 >> 2], tempDoubleF32[0]);
        var $13 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
        var $sub_i = $11 - $5;
        var $sub3_i = $13 - $7;
        var $add_i_i = $sub_i * $sub_i + $sub3_i * $sub3_i;
        var $call_i_i_i = _sqrtf($add_i_i);
        if ($call_i_i_i < 1.1920928955078125e-7) {
          var $retval_0_i = 0;
          var $sub_i23 = $sub_i;
          var $sub3_i24 = $sub3_i;
        } else {
          var $div_i = 1 / $call_i_i_i;
          var $retval_0_i = $call_i_i_i;
          var $sub_i23 = $sub_i * $div_i;
          var $sub3_i24 = $sub3_i * $div_i;
        }
        var $sub3_i24;
        var $sub_i23;
        var $retval_0_i;
        var $14 = HEAP32[$m_ims >> 2];
        var $15 = HEAPF32[$14 + ($i_026 << 2) >> 2];
        var $16 = HEAPF32[$14 + ($add << 2) >> 2];
        var $add8 = $15 + $16;
        if ($add8 != 0) {
          var $17 = HEAPF32[$m_k2 >> 2];
          var $sub14 = HEAPF32[HEAP32[$m_Ls >> 2] + ($i_026 << 2) >> 2] - $retval_0_i;
          var $mul15 = $17 * ($15 / $add8) * $sub14;
          var $sub_i9 = $5 - $sub_i23 * $mul15;
          var $sub4_i = $7 - $sub3_i24 * $mul15;
          var $mul22 = $17 * ($16 / $add8) * $sub14;
          var $add_i = $11 + $sub_i23 * $mul22;
          var $add4_i = $13 + $sub3_i24 * $mul22;
          var $20 = (tempDoubleF32[0] = $sub_i9, tempDoubleI32[0]);
          var $21$0 = $20;
          var $22 = (tempDoubleF32[0] = $sub4_i, tempDoubleI32[0]);
          var $25$0 = 0 | $21$0;
          var $25$1 = $22 | 0;
          var $st$29$0 = $2 | 0;
          HEAP32[$st$29$0 >> 2] = $25$0;
          var $st$29$1 = $2 + 4 | 0;
          HEAP32[$st$29$1 >> 2] = $25$1;
          var $27 = ($add << 3) + HEAP32[$m_ps >> 2] | 0;
          var $28 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
          var $29$0 = $28;
          var $30 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
          var $33$0 = 0 | $29$0;
          var $33$1 = $30 | 0;
          var $st$46$0 = $27 | 0;
          HEAP32[$st$46$0 >> 2] = $33$0;
          var $st$46$1 = $27 + 4 | 0;
          HEAP32[$st$46$1 >> 2] = $33$1;
        }
        if (($add | 0) == ($sub | 0)) {
          break $for_body_lr_ph$$for_end$63;
        }
        var $i_026 = $add;
      }
    }
  } while (0);
  return;
  return;
}

function __ZN6b2Rope7SolveC3Ev($this) {
  var $20$s2;
  var $m_ps$s2;
  var $sub = HEAP32[$this >> 2] - 2 | 0;
  var $cmp130 = ($sub | 0) > 0;
  $for_body_lr_ph$$for_end$75 : do {
    if ($cmp130) {
      var $m_ps$s2 = ($this + 4 | 0) >> 2;
      var $m_ims = $this + 16 | 0;
      var $m_as = $this + 24 | 0;
      var $m_k3 = $this + 44 | 0;
      var $i_0131 = 0;
      while (1) {
        var $i_0131;
        var $1 = HEAP32[$m_ps$s2];
        var $2 = ($i_0131 << 3) + $1 | 0;
        var $3$1 = HEAP32[$2 + 4 >> 2];
        var $5 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleF32[0]);
        var $7 = (tempDoubleI32[0] = $3$1, tempDoubleF32[0]);
        var $add = $i_0131 + 1 | 0;
        var $8 = ($add << 3) + $1 | 0;
        var $9$1 = HEAP32[$8 + 4 >> 2];
        var $11 = (tempDoubleI32[0] = HEAP32[$8 >> 2], tempDoubleF32[0]);
        var $13 = (tempDoubleI32[0] = $9$1, tempDoubleF32[0]);
        var $add4 = $i_0131 + 2 | 0;
        var $14 = ($add4 << 3) + $1 | 0;
        var $15$1 = HEAP32[$14 + 4 >> 2];
        var $17 = (tempDoubleI32[0] = HEAP32[$14 >> 2], tempDoubleF32[0]);
        var $19 = (tempDoubleI32[0] = $15$1, tempDoubleF32[0]);
        var $20$s2 = HEAP32[$m_ims >> 2] >> 2;
        var $21 = HEAPF32[($i_0131 << 2 >> 2) + $20$s2];
        var $22 = HEAPF32[($add << 2 >> 2) + $20$s2];
        var $23 = HEAPF32[($add4 << 2 >> 2) + $20$s2];
        var $sub_i = $11 - $5;
        var $sub3_i = $13 - $7;
        var $sub_i108 = $17 - $11;
        var $sub3_i111 = $19 - $13;
        var $add_i105 = $sub_i * $sub_i + $sub3_i * $sub3_i;
        var $add_i100 = $sub_i108 * $sub_i108 + $sub3_i111 * $sub3_i111;
        var $cmp15 = $add_i105 * $add_i100 == 0;
        do {
          if (!$cmp15) {
            var $sub_i96 = $sub_i * $sub3_i111 - $sub3_i * $sub_i108;
            var $add_i90 = $sub_i * $sub_i108 + $sub3_i * $sub3_i111;
            var $call_i = _atan2f($sub_i96, $add_i90);
            var $div = -1 / $add_i105;
            var $mul_i74 = $div * -$sub3_i;
            var $mul1_i76 = $sub_i * $div;
            var $div19 = 1 / $add_i100;
            var $mul_i63 = $div19 * -$sub3_i111;
            var $mul1_i65 = $sub_i108 * $div19;
            var $sub_i60 = -$mul_i74;
            var $sub2_i = -$mul1_i76;
            var $sub_i53 = $mul_i74 - $mul_i63;
            var $sub3_i56 = $mul1_i76 - $mul1_i65;
            var $add28 = $21 * ($mul_i74 * $mul_i74 + $mul1_i76 * $mul1_i76) + $22 * ($sub_i53 * $sub_i53 + $sub3_i56 * $sub3_i56) + $23 * ($mul_i63 * $mul_i63 + $mul1_i65 * $mul1_i65);
            if ($add28 == 0) {
              break;
            }
            var $div32 = 1 / $add28;
            var $25 = HEAPF32[HEAP32[$m_as >> 2] + ($i_0131 << 2) >> 2];
            var $sub34 = $call_i - $25;
            var $cmp35124 = $sub34 > 3.1415927410125732;
            $while_body$$while_cond40_loopexit$82 : do {
              if ($cmp35124) {
                var $angle_0125 = $call_i;
                while (1) {
                  var $angle_0125;
                  var $sub36 = $angle_0125 - 6.2831854820251465;
                  var $sub39 = $sub36 - $25;
                  if ($sub39 <= 3.1415927410125732) {
                    var $angle_0_lcssa = $sub36;
                    var $C_0_lcssa = $sub39;
                    break $while_body$$while_cond40_loopexit$82;
                  }
                  var $angle_0125 = $sub36;
                }
              } else {
                var $angle_0_lcssa = $call_i;
                var $C_0_lcssa = $sub34;
              }
            } while (0);
            var $C_0_lcssa;
            var $angle_0_lcssa;
            var $cmp41127 = $C_0_lcssa < -3.1415927410125732;
            $while_body42$$while_end47$86 : do {
              if ($cmp41127) {
                var $angle_1128 = $angle_0_lcssa;
                while (1) {
                  var $angle_1128;
                  var $add43 = $angle_1128 + 6.2831854820251465;
                  var $sub46 = $add43 - $25;
                  if ($sub46 >= -3.1415927410125732) {
                    var $C_1_lcssa = $sub46;
                    break $while_body42$$while_end47$86;
                  }
                  var $angle_1128 = $add43;
                }
              } else {
                var $C_1_lcssa = $C_0_lcssa;
              }
            } while (0);
            var $C_1_lcssa;
            var $mul50 = $div32 * -HEAPF32[$m_k3 >> 2] * $C_1_lcssa;
            var $mul52 = $21 * $mul50;
            var $add_i21 = $5 + $mul52 * $sub_i60;
            var $add4_i24 = $7 + $mul52 * $sub2_i;
            var $mul54 = $22 * $mul50;
            var $add_i9 = $11 + $sub_i53 * $mul54;
            var $add4_i12 = $13 + $sub3_i56 * $mul54;
            var $mul56 = $23 * $mul50;
            var $add_i = $17 + $mul_i63 * $mul56;
            var $add4_i = $19 + $mul1_i65 * $mul56;
            var $28 = ($i_0131 << 3) + HEAP32[$m_ps$s2] | 0;
            var $29 = (tempDoubleF32[0] = $add_i21, tempDoubleI32[0]);
            var $30$0 = $29;
            var $31 = (tempDoubleF32[0] = $add4_i24, tempDoubleI32[0]);
            var $34$0 = 0 | $30$0;
            var $34$1 = $31 | 0;
            var $st$33$0 = $28 | 0;
            HEAP32[$st$33$0 >> 2] = $34$0;
            var $st$33$1 = $28 + 4 | 0;
            HEAP32[$st$33$1 >> 2] = $34$1;
            var $36 = ($add << 3) + HEAP32[$m_ps$s2] | 0;
            var $37 = (tempDoubleF32[0] = $add_i9, tempDoubleI32[0]);
            var $38$0 = $37;
            var $39 = (tempDoubleF32[0] = $add4_i12, tempDoubleI32[0]);
            var $42$0 = 0 | $38$0;
            var $42$1 = $39 | 0;
            var $st$50$0 = $36 | 0;
            HEAP32[$st$50$0 >> 2] = $42$0;
            var $st$50$1 = $36 + 4 | 0;
            HEAP32[$st$50$1 >> 2] = $42$1;
            var $44 = ($add4 << 3) + HEAP32[$m_ps$s2] | 0;
            var $45 = (tempDoubleF32[0] = $add_i, tempDoubleI32[0]);
            var $46$0 = $45;
            var $47 = (tempDoubleF32[0] = $add4_i, tempDoubleI32[0]);
            var $50$0 = 0 | $46$0;
            var $50$1 = $47 | 0;
            var $st$67$0 = $44 | 0;
            HEAP32[$st$67$0 >> 2] = $50$0;
            var $st$67$1 = $44 + 4 | 0;
            HEAP32[$st$67$1 >> 2] = $50$1;
          }
        } while (0);
        if (($add | 0) == ($sub | 0)) {
          break $for_body_lr_ph$$for_end$75;
        }
        var $i_0131 = $add;
      }
    }
  } while (0);
  return;
  return;
}

function __ZNK6b2Rope4DrawEP6b2Draw($this, $draw) {
  var $c$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP += 12;
  var $c = __stackBase__, $c$s2 = $c >> 2;
  HEAPF32[$c$s2] = .4000000059604645;
  HEAPF32[$c$s2 + 1] = .5;
  HEAPF32[$c$s2 + 2] = .699999988079071;
  var $m_count = $this | 0;
  var $cmp2 = (HEAP32[$m_count >> 2] - 1 | 0) > 0;
  $for_body_lr_ph$$for_end$99 : do {
    if ($cmp2) {
      var $1 = $draw;
      var $m_ps = $this + 4 | 0;
      var $i_03 = 0;
      while (1) {
        var $i_03;
        var $2 = HEAP32[HEAP32[$1 >> 2] + 24 >> 2];
        var $3 = HEAP32[$m_ps >> 2];
        var $arrayidx = ($i_03 << 3) + $3 | 0;
        var $add = $i_03 + 1 | 0;
        var $arrayidx3 = ($add << 3) + $3 | 0;
        FUNCTION_TABLE[$2]($draw, $arrayidx, $arrayidx3, $c);
        if (($add | 0) >= (HEAP32[$m_count >> 2] - 1 | 0)) {
          break $for_body_lr_ph$$for_end$99;
        }
        var $i_03 = $add;
      }
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
  return;
}

function _emscripten_bind_b2ContactManager__b2ContactManager_p0() {
  var $call$s2;
  var $call = __Znwj(80), $call$s2 = $call >> 2;
  var $m_broadPhase_i = $call;
  __ZN12b2BroadPhaseC2Ev($m_broadPhase_i);
  HEAP32[$call$s2 + 15] = 0;
  HEAP32[$call$s2 + 16] = 0;
  HEAP32[$call$s2 + 17] = _b2_defaultFilter;
  HEAP32[$call$s2 + 18] = _b2_defaultListener;
  HEAP32[$call$s2 + 19] = 0;
  return $call;
  return null;
}

function _emscripten_bind_b2ContactManager__AddPair_p2($self, $arg0, $arg1) {
  var $0 = $self;
  __ZN16b2ContactManager7AddPairEPvS0_($0, $arg0, $arg1);
  return;
  return;
}

function _emscripten_bind_b2ContactManager__Collide_p0($self) {
  var $0 = $self;
  __ZN16b2ContactManager7CollideEv($0);
  return;
  return;
}

function _emscripten_bind_b2ContactManager__get_m_contactListener_p0($self) {
  return HEAP32[$self + 72 >> 2];
  return null;
}

function _emscripten_bind_b2ContactManager__set_m_contactListener_p1($self, $arg0) {
  HEAP32[$self + 72 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2ContactManager__get_m_broadPhase_p0($self) {
  return $self | 0;
  return null;
}

function _emscripten_bind_b2ContactManager__get_m_contactList_p0($self) {
  return HEAP32[$self + 60 >> 2];
  return null;
}

function _emscripten_bind_b2ContactManager__get_m_allocator_p0($self) {
  return HEAP32[$self + 76 >> 2];
  return null;
}

function _emscripten_bind_b2BroadPhase__GetTreeQuality_p0($self) {
  var $2$s2;
  var $0 = HEAP32[$self >> 2];
  if (($0 | 0) == -1) {
    var $retval_0_i_i = 0;
  } else {
    var $2$s2 = HEAP32[$self + 4 >> 2] >> 2;
    var $mul_i_i_i = (HEAPF32[$2$s2 + ($0 * 9 | 0) + 2] - HEAPF32[$2$s2 + ($0 * 9 | 0)] + (HEAPF32[$2$s2 + ($0 * 9 | 0) + 3] - HEAPF32[$2$s2 + ($0 * 9 | 0) + 1])) * 2;
    var $8 = HEAP32[$self + 12 >> 2];
    var $cmp39_i_i = ($8 | 0) > 0;
    $for_body_i_i$$for_end_i_i$16 : do {
      if ($cmp39_i_i) {
        var $totalArea_010_i_i = 0;
        var $i_011_i_i = 0;
        while (1) {
          var $i_011_i_i;
          var $totalArea_010_i_i;
          if ((HEAP32[$2$s2 + ($i_011_i_i * 9 | 0) + 8] | 0) < 0) {
            var $totalArea_1_i_i = $totalArea_010_i_i;
          } else {
            var $totalArea_1_i_i = $totalArea_010_i_i + (HEAPF32[$2$s2 + ($i_011_i_i * 9 | 0) + 2] - HEAPF32[$2$s2 + ($i_011_i_i * 9 | 0)] + (HEAPF32[$2$s2 + ($i_011_i_i * 9 | 0) + 3] - HEAPF32[$2$s2 + ($i_011_i_i * 9 | 0) + 1])) * 2;
          }
          var $totalArea_1_i_i;
          var $inc_i_i = $i_011_i_i + 1 | 0;
          if (($inc_i_i | 0) == ($8 | 0)) {
            var $totalArea_0_lcssa_i_i = $totalArea_1_i_i;
            break $for_body_i_i$$for_end_i_i$16;
          }
          var $totalArea_010_i_i = $totalArea_1_i_i;
          var $i_011_i_i = $inc_i_i;
        }
      } else {
        var $totalArea_0_lcssa_i_i = 0;
      }
    } while (0);
    var $totalArea_0_lcssa_i_i;
    var $retval_0_i_i = $totalArea_0_lcssa_i_i / $mul_i_i_i;
  }
  var $retval_0_i_i;
  return $retval_0_i_i;
  return null;
}

function _emscripten_bind_b2BroadPhase__GetTreeHeight_p0($self) {
  var $0 = HEAP32[$self >> 2];
  if (($0 | 0) == -1) {
    var $retval_0_i_i = 0;
  } else {
    var $retval_0_i_i = HEAP32[(HEAP32[$self + 4 >> 2] + 32 >> 2) + ($0 * 9 | 0)];
  }
  var $retval_0_i_i;
  return $retval_0_i_i;
  return null;
}

function _emscripten_bind_b2BroadPhase__GetProxyCount_p0($self) {
  return HEAP32[$self + 28 >> 2];
  return null;
}

function _emscripten_bind_b2World__SetSubStepping_p1($self, $arg0) {
  HEAP8[$self + 102994 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2World__GetTreeQuality_p0($self) {
  var $2$s2;
  var $0 = HEAP32[$self + 102872 >> 2];
  if (($0 | 0) == -1) {
    var $retval_0_i_i_i = 0;
  } else {
    var $2$s2 = HEAP32[$self + 102876 >> 2] >> 2;
    var $mul_i_i_i_i = (HEAPF32[$2$s2 + ($0 * 9 | 0) + 2] - HEAPF32[$2$s2 + ($0 * 9 | 0)] + (HEAPF32[$2$s2 + ($0 * 9 | 0) + 3] - HEAPF32[$2$s2 + ($0 * 9 | 0) + 1])) * 2;
    var $8 = HEAP32[$self + 102884 >> 2];
    var $cmp39_i_i_i = ($8 | 0) > 0;
    $for_body_i_i_i$$for_end_i_i_i$97 : do {
      if ($cmp39_i_i_i) {
        var $totalArea_010_i_i_i = 0;
        var $i_011_i_i_i = 0;
        while (1) {
          var $i_011_i_i_i;
          var $totalArea_010_i_i_i;
          if ((HEAP32[$2$s2 + ($i_011_i_i_i * 9 | 0) + 8] | 0) < 0) {
            var $totalArea_1_i_i_i = $totalArea_010_i_i_i;
          } else {
            var $totalArea_1_i_i_i = $totalArea_010_i_i_i + (HEAPF32[$2$s2 + ($i_011_i_i_i * 9 | 0) + 2] - HEAPF32[$2$s2 + ($i_011_i_i_i * 9 | 0)] + (HEAPF32[$2$s2 + ($i_011_i_i_i * 9 | 0) + 3] - HEAPF32[$2$s2 + ($i_011_i_i_i * 9 | 0) + 1])) * 2;
          }
          var $totalArea_1_i_i_i;
          var $inc_i_i_i = $i_011_i_i_i + 1 | 0;
          if (($inc_i_i_i | 0) == ($8 | 0)) {
            var $totalArea_0_lcssa_i_i_i = $totalArea_1_i_i_i;
            break $for_body_i_i_i$$for_end_i_i_i$97;
          }
          var $totalArea_010_i_i_i = $totalArea_1_i_i_i;
          var $i_011_i_i_i = $inc_i_i_i;
        }
      } else {
        var $totalArea_0_lcssa_i_i_i = 0;
      }
    } while (0);
    var $totalArea_0_lcssa_i_i_i;
    var $retval_0_i_i_i = $totalArea_0_lcssa_i_i_i / $mul_i_i_i_i;
  }
  var $retval_0_i_i_i;
  return $retval_0_i_i_i;
  return null;
}

function _emscripten_bind_b2World__GetTreeHeight_p0($self) {
  var $0 = HEAP32[$self + 102872 >> 2];
  if (($0 | 0) == -1) {
    var $retval_0_i_i_i = 0;
  } else {
    var $retval_0_i_i_i = HEAP32[(HEAP32[$self + 102876 >> 2] + 32 >> 2) + ($0 * 9 | 0)];
  }
  var $retval_0_i_i_i;
  return $retval_0_i_i_i;
  return null;
}

function _emscripten_bind_b2World__GetProfile_p0($self) {
  return $self + 102996 | 0;
  return null;
}

function _emscripten_bind_b2World__GetSubStepping_p0($self) {
  return (HEAP8[$self + 102994 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2World__GetContactManager_p0($self) {
  return $self + 102872 | 0;
  return null;
}

function _emscripten_bind_b2World__SetContactListener_p1($self, $arg0) {
  HEAP32[$self + 102944 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2World__SetContinuousPhysics_p1($self, $arg0) {
  HEAP8[$self + 102993 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2World__SetGravity_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 102968 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2World__GetBodyCount_p0($self) {
  return HEAP32[$self + 102960 >> 2];
  return null;
}

function _emscripten_bind_b2World__GetAutoClearForces_p0($self) {
  return (HEAP32[$self + 102868 >> 2] & 4 | 0) != 0;
  return null;
}

function _emscripten_bind_b2World__GetContinuousPhysics_p0($self) {
  return (HEAP8[$self + 102993 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2World__GetJointList_p0($self) {
  return HEAP32[$self + 102956 >> 2];
  return null;
}

function _emscripten_bind_b2World__GetBodyList_p0($self) {
  return HEAP32[$self + 102952 >> 2];
  return null;
}

function _emscripten_bind_b2World__SetDestructionListener_p1($self, $arg0) {
  HEAP32[$self + 102980 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2World__GetJointCount_p0($self) {
  return HEAP32[$self + 102964 >> 2];
  return null;
}

function _emscripten_bind_b2World__ClearForces_p0($self) {
  var $body_03_i$s2;
  var $body_01_i = HEAP32[$self + 102952 >> 2];
  var $tobool2_i = ($body_01_i | 0) == 0;
  $_ZN7b2World11ClearForcesEv_exit$$for_body_i$153 : do {
    if (!$tobool2_i) {
      var $body_03_i = $body_01_i, $body_03_i$s2 = $body_03_i >> 2;
      while (1) {
        var $body_03_i;
        HEAPF32[$body_03_i$s2 + 19] = 0;
        HEAPF32[$body_03_i$s2 + 20] = 0;
        HEAPF32[$body_03_i$s2 + 21] = 0;
        var $body_0_i = HEAP32[$body_03_i$s2 + 24];
        if (($body_0_i | 0) == 0) {
          break $_ZN7b2World11ClearForcesEv_exit$$for_body_i$153;
        }
        var $body_03_i = $body_0_i, $body_03_i$s2 = $body_03_i >> 2;
      }
    }
  } while (0);
  return;
  return;
}

function _emscripten_bind_b2World__GetWarmStarting_p0($self) {
  return (HEAP8[$self + 102992 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2World__SetAllowSleeping_p1($self, $arg0) {
  var $m_allowSleep_i = $self + 102976 | 0;
  var $cmp_i = ($arg0 & 1 | 0) == (HEAP8[$m_allowSleep_i] & 1 & 255 | 0);
  $_ZN7b2World16SetAllowSleepingEb_exit$$if_end_i$159 : do {
    if (!$cmp_i) {
      HEAP8[$m_allowSleep_i] = $arg0 & 1;
      if ($arg0) {
        break;
      }
      var $b_01_i = HEAP32[$self + 102952 >> 2];
      if (($b_01_i | 0) == 0) {
        break;
      }
      var $b_03_i = $b_01_i;
      while (1) {
        var $b_03_i;
        var $2 = $b_03_i + 4 | 0;
        var $3 = HEAP16[$2 >> 1];
        if (($3 & 2) << 16 >> 16 == 0) {
          var $or_i_i = $3 | 2;
          HEAP16[$2 >> 1] = $or_i_i;
          HEAPF32[$b_03_i + 144 >> 2] = 0;
        }
        var $b_0_i = HEAP32[$b_03_i + 96 >> 2];
        if (($b_0_i | 0) == 0) {
          break $_ZN7b2World16SetAllowSleepingEb_exit$$if_end_i$159;
        }
        var $b_03_i = $b_0_i;
      }
    }
  } while (0);
  return;
  return;
}

function _emscripten_bind_b2World__GetAllowSleeping_p0($self) {
  return (HEAP8[$self + 102976 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2World__GetProxyCount_p0($self) {
  return HEAP32[$self + 102900 >> 2];
  return null;
}

function _emscripten_bind_b2ContactManager__FindNewContacts_p0($self) {
  var $0 = $self;
  var $m_broadPhase_i = $self;
  __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($m_broadPhase_i, $0);
  return;
  return;
}

function _emscripten_bind_b2ContactManager____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $2 = HEAP32[$self + 32 >> 2];
    _free($2);
    var $4 = HEAP32[$self + 44 >> 2];
    _free($4);
    var $6 = HEAP32[$self + 4 >> 2];
    _free($6);
    var $7 = $self;
    __ZdlPv($7);
  }
  return;
  return;
}

function _emscripten_bind_b2ContactManager__Destroy_p1($self, $arg0) {
  var $0 = $self;
  var $1 = $arg0;
  __ZN16b2ContactManager7DestroyEP9b2Contact($0, $1);
  return;
  return;
}

function _emscripten_bind_b2ContactManager__set_m_broadPhase_p1($self, $arg0) {
  var $0 = $self;
  var $1 = $arg0;
  for (var $$src = $1 >> 2, $$dest = $0 >> 2, $$stop = $$src + 15; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  return;
  return;
}

function _emscripten_bind_b2BroadPhase__GetFatAABB_p1($self, $arg0) {
  var __label__;
  var $cmp_i_i = ($arg0 | 0) > -1;
  do {
    if ($cmp_i_i) {
      if ((HEAP32[$self + 12 >> 2] | 0) > ($arg0 | 0)) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str19193 | 0, 159, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree10GetFatAABBEi | 0, STRING_TABLE.__str2111 | 0);
  }
  return HEAP32[$self + 4 >> 2] + $arg0 * 36 | 0;
  return null;
}

function _emscripten_bind_b2BroadPhase__GetUserData_p1($self, $arg0) {
  var __label__;
  var $cmp_i_i = ($arg0 | 0) > -1;
  do {
    if ($cmp_i_i) {
      if ((HEAP32[$self + 12 >> 2] | 0) > ($arg0 | 0)) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str19193 | 0, 153, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree11GetUserDataEi | 0, STRING_TABLE.__str2111 | 0);
  }
  return HEAP32[(HEAP32[$self + 4 >> 2] + 16 >> 2) + ($arg0 * 9 | 0)];
  return null;
}

function _emscripten_bind_b2BroadPhase____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $2 = HEAP32[$self + 32 >> 2];
    _free($2);
    var $4 = HEAP32[$self + 44 >> 2];
    _free($4);
    var $6 = HEAP32[$self + 4 >> 2];
    _free($6);
    var $7 = $self;
    __ZdlPv($7);
  }
  return;
  return;
}

function _emscripten_bind_b2BroadPhase__b2BroadPhase_p0() {
  var $call = __Znwj(60);
  var $0 = $call;
  __ZN12b2BroadPhaseC2Ev($0);
  return $call;
  return null;
}

function _emscripten_bind_b2BroadPhase__GetTreeBalance_p0($self) {
  var $0 = $self + 12 | 0;
  var $1 = HEAP32[$0 >> 2];
  var $cmp4_i_i = ($1 | 0) > 0;
  $for_body_lr_ph_i_i$$_ZNK12b2BroadPhase14GetTreeBalanceEv_exit$47 : do {
    if ($cmp4_i_i) {
      var $m_nodes_i_i = $self + 4 | 0;
      var $maxBalance_05_i_i = 0;
      var $i_06_i_i = 0;
      var $4 = HEAP32[$m_nodes_i_i >> 2];
      var $3 = $1;
      while (1) {
        var $3;
        var $4;
        var $i_06_i_i;
        var $maxBalance_05_i_i;
        if ((HEAP32[($4 + 32 >> 2) + ($i_06_i_i * 9 | 0)] | 0) < 2) {
          var $maxBalance_1_i_i = $maxBalance_05_i_i;
          var $14 = $4;
          var $13 = $3;
        } else {
          var $child1_i_i_i = $4 + $i_06_i_i * 36 + 24 | 0;
          var $6 = HEAP32[$child1_i_i_i >> 2];
          if (($6 | 0) == -1) {
            ___assert_func(STRING_TABLE.__str14 | 0, 686, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree13GetMaxBalanceEv | 0, STRING_TABLE.__str31 | 0);
            var $9 = HEAP32[$child1_i_i_i >> 2];
            var $8 = HEAP32[$m_nodes_i_i >> 2];
            var $_pre7_i_i = HEAP32[$0 >> 2];
          } else {
            var $9 = $6;
            var $8 = $4;
            var $_pre7_i_i = $3;
          }
          var $_pre7_i_i;
          var $8;
          var $9;
          var $sub_i_i = HEAP32[($8 + 32 >> 2) + (HEAP32[($4 + 28 >> 2) + ($i_06_i_i * 9 | 0)] * 9 | 0)] - HEAP32[($8 + 32 >> 2) + ($9 * 9 | 0)] | 0;
          var $cond_i3_i_i = ($sub_i_i | 0) > 0 ? $sub_i_i : -$sub_i_i | 0;
          var $cond_i_i_i = ($maxBalance_05_i_i | 0) > ($cond_i3_i_i | 0) ? $maxBalance_05_i_i : $cond_i3_i_i;
          var $maxBalance_1_i_i = $cond_i_i_i;
          var $14 = $8;
          var $13 = $_pre7_i_i;
        }
        var $13;
        var $14;
        var $maxBalance_1_i_i;
        var $inc_i_i = $i_06_i_i + 1 | 0;
        if (($inc_i_i | 0) >= ($13 | 0)) {
          var $maxBalance_0_lcssa_i_i = $maxBalance_1_i_i;
          break $for_body_lr_ph_i_i$$_ZNK12b2BroadPhase14GetTreeBalanceEv_exit$47;
        }
        var $maxBalance_05_i_i = $maxBalance_1_i_i;
        var $i_06_i_i = $inc_i_i;
        var $4 = $14;
        var $3 = $13;
      }
    } else {
      var $maxBalance_0_lcssa_i_i = 0;
    }
  } while (0);
  var $maxBalance_0_lcssa_i_i;
  return $maxBalance_0_lcssa_i_i;
  return null;
}

function _emscripten_bind_b2BroadPhase__TestOverlap_p2($self, $arg0, $arg1) {
  var $7$s2;
  var $3$s2;
  var __label__;
  var $cmp_i_i = ($arg0 | 0) > -1;
  do {
    if ($cmp_i_i) {
      if ((HEAP32[$self + 12 >> 2] | 0) > ($arg0 | 0)) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str19193 | 0, 159, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree10GetFatAABBEi | 0, STRING_TABLE.__str2111 | 0);
  }
  var $m_nodes_i_i = $self + 4 | 0;
  var $3 = HEAP32[$m_nodes_i_i >> 2], $3$s2 = $3 >> 2;
  var $cmp_i1_i = ($arg1 | 0) > -1;
  do {
    if ($cmp_i1_i) {
      if ((HEAP32[$self + 12 >> 2] | 0) > ($arg1 | 0)) {
        var $7 = $3, $7$s2 = $7 >> 2;
        __label__ = 6;
        break;
      }
      __label__ = 5;
      break;
    } else {
      __label__ = 5;
    }
  } while (0);
  if (__label__ == 5) {
    ___assert_func(STRING_TABLE.__str19193 | 0, 159, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree10GetFatAABBEi | 0, STRING_TABLE.__str2111 | 0);
    var $7 = HEAP32[$m_nodes_i_i >> 2], $7$s2 = $7 >> 2;
  }
  var $7;
  if (HEAPF32[$7$s2 + ($arg1 * 9 | 0)] - HEAPF32[$3$s2 + ($arg0 * 9 | 0) + 2] > 0 | HEAPF32[$7$s2 + ($arg1 * 9 | 0) + 1] - HEAPF32[$3$s2 + ($arg0 * 9 | 0) + 3] > 0 | HEAPF32[$3$s2 + ($arg0 * 9 | 0)] - HEAPF32[$7$s2 + ($arg1 * 9 | 0) + 2] > 0 | HEAPF32[$3$s2 + ($arg0 * 9 | 0) + 1] - HEAPF32[$7$s2 + ($arg1 * 9 | 0) + 3] > 0) {
    var $retval_0_i_i = 0;
  } else {
    var $retval_0_i_i = 1;
  }
  var $retval_0_i_i;
  return $retval_0_i_i;
  return null;
}

function _emscripten_bind_b2BroadPhase__TouchProxy_p1($self, $arg0) {
  var $4$s2;
  var $0$s2;
  var $0$s2 = ($self + 40 | 0) >> 2;
  var $1 = HEAP32[$0$s2];
  var $2 = $self + 36 | 0;
  var $3 = HEAP32[$2 >> 2];
  var $4$s2 = ($self + 32 | 0) >> 2;
  if (($1 | 0) == ($3 | 0)) {
    var $5 = HEAP32[$4$s2];
    var $mul_i_i = $3 << 1;
    HEAP32[$2 >> 2] = $mul_i_i;
    var $mul4_i_i = $3 << 3;
    var $call_i_i_i = _malloc($mul4_i_i);
    var $6 = $call_i_i_i;
    HEAP32[$4$s2] = $6;
    var $7 = $5;
    var $mul8_i_i = HEAP32[$0$s2] << 2;
    _memcpy($call_i_i_i, $7, $mul8_i_i, 1);
    _free($7);
    var $9 = HEAP32[$0$s2];
  } else {
    var $9 = $1;
  }
  var $9;
  var $arrayidx_i_i = ($9 << 2) + HEAP32[$4$s2] | 0;
  HEAP32[$arrayidx_i_i >> 2] = $arg0;
  var $inc_i_i = HEAP32[$0$s2] + 1 | 0;
  HEAP32[$0$s2] = $inc_i_i;
  return;
  return;
}

function _emscripten_bind_b2BroadPhase__CreateProxy_p2($self, $arg0, $arg1) {
  var $0 = $self;
  var $1 = $arg0;
  var $call = __ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($0, $1, $arg1);
  return $call;
  return null;
}

function _emscripten_bind_b2BroadPhase__MoveProxy_p3($self, $arg0, $arg1, $arg2) {
  var $6$s2;
  var $2$s2;
  var $0 = $arg1;
  var $1 = $arg2;
  var $m_tree_i = $self;
  var $call_i = __ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($m_tree_i, $arg0, $0, $1);
  if ($call_i) {
    var $2$s2 = ($self + 40 | 0) >> 2;
    var $3 = HEAP32[$2$s2];
    var $4 = $self + 36 | 0;
    var $5 = HEAP32[$4 >> 2];
    var $6$s2 = ($self + 32 | 0) >> 2;
    if (($3 | 0) == ($5 | 0)) {
      var $7 = HEAP32[$6$s2];
      var $mul_i_i = $5 << 1;
      HEAP32[$4 >> 2] = $mul_i_i;
      var $mul4_i_i = $5 << 3;
      var $call_i_i_i = _malloc($mul4_i_i);
      var $8 = $call_i_i_i;
      HEAP32[$6$s2] = $8;
      var $9 = $7;
      var $mul8_i_i = HEAP32[$2$s2] << 2;
      _memcpy($call_i_i_i, $9, $mul8_i_i, 1);
      _free($9);
      var $11 = HEAP32[$2$s2];
    } else {
      var $11 = $3;
    }
    var $11;
    var $arrayidx_i_i = ($11 << 2) + HEAP32[$6$s2] | 0;
    HEAP32[$arrayidx_i_i >> 2] = $arg0;
    var $inc_i_i = HEAP32[$2$s2] + 1 | 0;
    HEAP32[$2$s2] = $inc_i_i;
  }
  return;
  return;
}

function _emscripten_bind_b2BroadPhase__DestroyProxy_p1($self, $arg0) {
  var $1 = HEAP32[$self + 40 >> 2];
  var $2 = $self + 32 | 0;
  var $i_0_i_i = 0;
  while (1) {
    var $i_0_i_i;
    if (($i_0_i_i | 0) >= ($1 | 0)) {
      break;
    }
    var $arrayidx_i_i = ($i_0_i_i << 2) + HEAP32[$2 >> 2] | 0;
    if ((HEAP32[$arrayidx_i_i >> 2] | 0) == ($arg0 | 0)) {
      HEAP32[$arrayidx_i_i >> 2] = -1;
      break;
    }
    var $i_0_i_i = $i_0_i_i + 1 | 0;
  }
  var $5 = $self + 28 | 0;
  var $dec_i = HEAP32[$5 >> 2] - 1 | 0;
  HEAP32[$5 >> 2] = $dec_i;
  var $m_tree_i = $self;
  __ZN13b2DynamicTree12DestroyProxyEi($m_tree_i, $arg0);
  return;
  return;
}

function _emscripten_bind_b2World__QueryAABB_p2($self, $arg0, $arg1) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $wrapper_i = __stackBase__;
  var $m_broadPhase_i = $self + 102872 | 0;
  HEAP32[$wrapper_i >> 2] = $m_broadPhase_i;
  HEAP32[$wrapper_i + 4 >> 2] = $arg0;
  var $m_tree_i_i = $m_broadPhase_i | 0;
  __ZNK13b2DynamicTree5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($m_tree_i_i, $wrapper_i, $arg1);
  STACKTOP = __stackBase__;
  return;
  return;
}

function _emscripten_bind_b2World__GetTreeBalance_p0($self) {
  var $0 = $self + 102884 | 0;
  var $1 = HEAP32[$0 >> 2];
  var $cmp4_i_i_i = ($1 | 0) > 0;
  $for_body_lr_ph_i_i_i$$_ZNK7b2World14GetTreeBalanceEv_exit$111 : do {
    if ($cmp4_i_i_i) {
      var $m_nodes_i_i_i = $self + 102876 | 0;
      var $maxBalance_05_i_i_i = 0;
      var $i_06_i_i_i = 0;
      var $4 = HEAP32[$m_nodes_i_i_i >> 2];
      var $3 = $1;
      while (1) {
        var $3;
        var $4;
        var $i_06_i_i_i;
        var $maxBalance_05_i_i_i;
        if ((HEAP32[($4 + 32 >> 2) + ($i_06_i_i_i * 9 | 0)] | 0) < 2) {
          var $maxBalance_1_i_i_i = $maxBalance_05_i_i_i;
          var $14 = $4;
          var $13 = $3;
        } else {
          var $child1_i_i_i_i = $4 + $i_06_i_i_i * 36 + 24 | 0;
          var $6 = HEAP32[$child1_i_i_i_i >> 2];
          if (($6 | 0) == -1) {
            ___assert_func(STRING_TABLE.__str14 | 0, 686, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree13GetMaxBalanceEv | 0, STRING_TABLE.__str31 | 0);
            var $9 = HEAP32[$child1_i_i_i_i >> 2];
            var $8 = HEAP32[$m_nodes_i_i_i >> 2];
            var $_pre7_i_i_i = HEAP32[$0 >> 2];
          } else {
            var $9 = $6;
            var $8 = $4;
            var $_pre7_i_i_i = $3;
          }
          var $_pre7_i_i_i;
          var $8;
          var $9;
          var $sub_i_i_i = HEAP32[($8 + 32 >> 2) + (HEAP32[($4 + 28 >> 2) + ($i_06_i_i_i * 9 | 0)] * 9 | 0)] - HEAP32[($8 + 32 >> 2) + ($9 * 9 | 0)] | 0;
          var $cond_i3_i_i_i = ($sub_i_i_i | 0) > 0 ? $sub_i_i_i : -$sub_i_i_i | 0;
          var $cond_i_i_i_i = ($maxBalance_05_i_i_i | 0) > ($cond_i3_i_i_i | 0) ? $maxBalance_05_i_i_i : $cond_i3_i_i_i;
          var $maxBalance_1_i_i_i = $cond_i_i_i_i;
          var $14 = $8;
          var $13 = $_pre7_i_i_i;
        }
        var $13;
        var $14;
        var $maxBalance_1_i_i_i;
        var $inc_i_i_i = $i_06_i_i_i + 1 | 0;
        if (($inc_i_i_i | 0) >= ($13 | 0)) {
          var $maxBalance_0_lcssa_i_i_i = $maxBalance_1_i_i_i;
          break $for_body_lr_ph_i_i_i$$_ZNK7b2World14GetTreeBalanceEv_exit$111;
        }
        var $maxBalance_05_i_i_i = $maxBalance_1_i_i_i;
        var $i_06_i_i_i = $inc_i_i_i;
        var $4 = $14;
        var $3 = $13;
      }
    } else {
      var $maxBalance_0_lcssa_i_i_i = 0;
    }
  } while (0);
  var $maxBalance_0_lcssa_i_i_i;
  return $maxBalance_0_lcssa_i_i_i;
  return null;
}

function _emscripten_bind_b2World__DrawDebugData_p0($self) {
  __ZN7b2World13DrawDebugDataEv($self);
  return;
  return;
}

function _emscripten_bind_b2World__CreateBody_p1($self, $arg0) {
  var $m_bodyList_i$s2;
  var $0 = $self;
  var $1 = $self + 102868 | 0;
  var $2 = HEAP32[$1 >> 2];
  if (($2 & 2 | 0) == 0) {
    var $3 = $2;
  } else {
    ___assert_func(STRING_TABLE.__str174 | 0, 109, STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World10CreateBodyEPK9b2BodyDef | 0, STRING_TABLE.__str1175 | 0);
    var $3 = HEAP32[$1 >> 2];
  }
  var $3;
  if (($3 & 2 | 0) == 0) {
    var $m_blockAllocator_i = $self | 0;
    var $call3_i = __ZN16b2BlockAllocator8AllocateEi($m_blockAllocator_i, 152);
    if (($call3_i | 0) == 0) {
      var $7 = 0;
    } else {
      var $4 = $call3_i;
      var $5 = $call3_i;
      var $6 = $arg0;
      __ZN6b2BodyC2EPK9b2BodyDefP7b2World($5, $6, $0);
      var $7 = $4;
    }
    var $7;
    HEAP32[$7 + 92 >> 2] = 0;
    var $m_bodyList_i$s2 = ($self + 102952 | 0) >> 2;
    var $8 = HEAP32[$m_bodyList_i$s2];
    HEAP32[$7 + 96 >> 2] = $8;
    var $9 = HEAP32[$m_bodyList_i$s2];
    if (($9 | 0) != 0) {
      var $m_prev7_i = $9 + 92 | 0;
      HEAP32[$m_prev7_i >> 2] = $7;
    }
    HEAP32[$m_bodyList_i$s2] = $7;
    var $m_bodyCount_i = $self + 102960 | 0;
    var $inc_i = HEAP32[$m_bodyCount_i >> 2] + 1 | 0;
    HEAP32[$m_bodyCount_i >> 2] = $inc_i;
    var $retval_0_i = $7;
  } else {
    var $retval_0_i = 0;
  }
  var $retval_0_i;
  return $retval_0_i;
  return null;
}

function _emscripten_bind_b2World__DestroyJoint_p1($self, $arg0) {
  __ZN7b2World12DestroyJointEP7b2Joint($self, $arg0);
  return;
  return;
}

function _emscripten_bind_b2World__b2World_p1($arg0) {
  var $call = __Znwj(103028);
  var $0 = $call;
  __ZN7b2WorldC2ERK6b2Vec2($0, $arg0);
  return $0;
  return null;
}

function _emscripten_bind_b2World__Step_p3($self, $arg0, $arg1, $arg2) {
  __ZN7b2World4StepEfii($self, $arg0, $arg1, $arg2);
  return;
  return;
}

function _emscripten_bind_b2World__DestroyBody_p1($self, $arg0) {
  __ZN7b2World11DestroyBodyEP6b2Body($self, $arg0);
  return;
  return;
}

function _emscripten_bind_b2World__CreateJoint_p1($self, $arg0) {
  var $call = __ZN7b2World11CreateJointEPK10b2JointDef($self, $arg0);
  return $call;
  return null;
}

function _emscripten_bind_b2World__RayCast_p3($self, $arg0, $arg1, $arg2) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var $wrapper_i = __stackBase__;
  var $input_i = __stackBase__ + 8;
  var $m_broadPhase_i = $self + 102872 | 0;
  HEAP32[$wrapper_i >> 2] = $m_broadPhase_i;
  HEAP32[$wrapper_i + 4 >> 2] = $arg0;
  HEAPF32[$input_i + 16 >> 2] = 1;
  var $2 = $arg1;
  var $3 = $input_i;
  var $4$0 = HEAP32[$2 >> 2];
  var $4$1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 >> 2] = $4$0;
  HEAP32[$3 + 4 >> 2] = $4$1;
  var $5 = $arg2;
  var $6 = $input_i + 8 | 0;
  var $7$0 = HEAP32[$5 >> 2];
  var $7$1 = HEAP32[$5 + 4 >> 2];
  HEAP32[$6 >> 2] = $7$0;
  HEAP32[$6 + 4 >> 2] = $7$1;
  var $m_tree_i_i = $m_broadPhase_i | 0;
  __ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput($m_tree_i_i, $wrapper_i, $input_i);
  STACKTOP = __stackBase__;
  return;
  return;
}

function _emscripten_bind_b2CircleShape__GetVertexCount_p0($self) {
  return 1;
  return null;
}

function _emscripten_bind_b2CircleShape__GetSupport_p1($self, $arg0) {
  return 0;
  return null;
}

function _emscripten_bind_b2World__IsLocked_p0($self) {
  return (HEAP32[$self + 102868 >> 2] & 2 | 0) != 0;
  return null;
}

function _emscripten_bind_b2World__GetContactList_p0($self) {
  return HEAP32[$self + 102932 >> 2];
  return null;
}

function _emscripten_bind_b2World__SetDebugDraw_p1($self, $arg0) {
  HEAP32[$self + 102984 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2World__SetAutoClearForces_p1($self, $arg0) {
  var $m_flags_i = $self + 102868 | 0;
  var $0 = HEAP32[$m_flags_i >> 2];
  var $storemerge_i = $arg0 ? $0 | 4 : $0 & -5;
  HEAP32[$m_flags_i >> 2] = $storemerge_i;
  return;
  return;
}

function _emscripten_bind_b2World__GetContactCount_p0($self) {
  return HEAP32[$self + 102936 >> 2];
  return null;
}

function _emscripten_bind_b2World__SetWarmStarting_p1($self, $arg0) {
  HEAP8[$self + 102992 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2World__SetContactFilter_p1($self, $arg0) {
  HEAP32[$self + 102940 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2CircleShape__GetType_p0($self) {
  return HEAP32[$self + 4 >> 2];
  return null;
}

function _emscripten_bind_b2CircleShape__set_m_radius_p1($self, $arg0) {
  HEAPF32[$self + 8 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2CircleShape__get_m_radius_p0($self) {
  return HEAPF32[$self + 8 >> 2];
  return null;
}

function _emscripten_bind_b2CircleShape__GetVertex_p1($self, $arg0) {
  return $self + 12 | 0;
  return null;
}

function _emscripten_bind_b2CircleShape__GetSupportVertex_p1($self, $arg0) {
  return $self + 12 | 0;
  return null;
}

function _emscripten_bind_b2CircleShape__set_m_p_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 12 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2CircleShape__get_m_p_p0($self) {
  return $self + 12 | 0;
  return null;
}

function _emscripten_bind_b2Draw__AppendFlags_p1($self, $arg0) {
  var $m_drawFlags_i = $self + 4 | 0;
  var $or_i = HEAP32[$m_drawFlags_i >> 2] | $arg0;
  HEAP32[$m_drawFlags_i >> 2] = $or_i;
  return;
  return;
}

function _emscripten_bind_b2Draw__ClearFlags_p1($self, $arg0) {
  var $m_drawFlags_i = $self + 4 | 0;
  var $and_i = HEAP32[$m_drawFlags_i >> 2] & ($arg0 ^ -1);
  HEAP32[$m_drawFlags_i >> 2] = $and_i;
  return;
  return;
}

function _emscripten_bind_b2Draw__SetFlags_p1($self, $arg0) {
  HEAP32[$self + 4 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Draw__GetFlags_p0($self) {
  return HEAP32[$self + 4 >> 2];
  return null;
}

function _emscripten_bind_b2Joint__GetNext_p0($self) {
  return HEAP32[$self + 12 >> 2];
  return null;
}

function _emscripten_bind_b2Joint__GetBodyA_p0($self) {
  return HEAP32[$self + 48 >> 2];
  return null;
}

function _emscripten_bind_b2Joint__GetBodyB_p0($self) {
  return HEAP32[$self + 52 >> 2];
  return null;
}

function _emscripten_bind_b2Joint__GetUserData_p0($self) {
  return HEAP32[$self + 64 >> 2];
  return null;
}

function _emscripten_bind_b2Joint__GetType_p0($self) {
  return HEAP32[$self + 4 >> 2];
  return null;
}

function _emscripten_bind_b2Joint__SetUserData_p1($self, $arg0) {
  HEAP32[$self + 64 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Joint__GetCollideConnected_p0($self) {
  return (HEAP8[$self + 61 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2Joint__IsActive_p0($self) {
  if ((HEAP16[HEAP32[$self + 48 >> 2] + 4 >> 1] & 32) << 16 >> 16 == 0) {
    var $6 = 0;
  } else {
    var $6 = (HEAP16[HEAP32[$self + 52 >> 2] + 4 >> 1] & 32) << 16 >> 16 != 0;
  }
  var $6;
  return $6;
  return null;
}

function _emscripten_bind_b2DynamicTree__GetHeight_p0($self) {
  var $0 = HEAP32[$self >> 2];
  if (($0 | 0) == -1) {
    var $retval_0_i = 0;
  } else {
    var $retval_0_i = HEAP32[(HEAP32[$self + 4 >> 2] + 32 >> 2) + ($0 * 9 | 0)];
  }
  var $retval_0_i;
  return $retval_0_i;
  return null;
}

function _emscripten_bind_b2DynamicTree__GetAreaRatio_p0($self) {
  var $2$s2;
  var $0 = HEAP32[$self >> 2];
  if (($0 | 0) == -1) {
    var $retval_0_i = 0;
  } else {
    var $2$s2 = HEAP32[$self + 4 >> 2] >> 2;
    var $mul_i_i = (HEAPF32[$2$s2 + ($0 * 9 | 0) + 2] - HEAPF32[$2$s2 + ($0 * 9 | 0)] + (HEAPF32[$2$s2 + ($0 * 9 | 0) + 3] - HEAPF32[$2$s2 + ($0 * 9 | 0) + 1])) * 2;
    var $8 = HEAP32[$self + 12 >> 2];
    var $cmp39_i = ($8 | 0) > 0;
    $for_body_i$$for_end_i$117 : do {
      if ($cmp39_i) {
        var $totalArea_010_i = 0;
        var $i_011_i = 0;
        while (1) {
          var $i_011_i;
          var $totalArea_010_i;
          if ((HEAP32[$2$s2 + ($i_011_i * 9 | 0) + 8] | 0) < 0) {
            var $totalArea_1_i = $totalArea_010_i;
          } else {
            var $totalArea_1_i = $totalArea_010_i + (HEAPF32[$2$s2 + ($i_011_i * 9 | 0) + 2] - HEAPF32[$2$s2 + ($i_011_i * 9 | 0)] + (HEAPF32[$2$s2 + ($i_011_i * 9 | 0) + 3] - HEAPF32[$2$s2 + ($i_011_i * 9 | 0) + 1])) * 2;
          }
          var $totalArea_1_i;
          var $inc_i = $i_011_i + 1 | 0;
          if (($inc_i | 0) == ($8 | 0)) {
            var $totalArea_0_lcssa_i = $totalArea_1_i;
            break $for_body_i$$for_end_i$117;
          }
          var $totalArea_010_i = $totalArea_1_i;
          var $i_011_i = $inc_i;
        }
      } else {
        var $totalArea_0_lcssa_i = 0;
      }
    } while (0);
    var $totalArea_0_lcssa_i;
    var $retval_0_i = $totalArea_0_lcssa_i / $mul_i_i;
  }
  var $retval_0_i;
  return $retval_0_i;
  return null;
}

function _emscripten_bind_b2ChainShape__GetType_p0($self) {
  return HEAP32[$self + 4 >> 2];
  return null;
}

function _emscripten_bind_b2ChainShape__set_m_radius_p1($self, $arg0) {
  HEAPF32[$self + 8 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2World____destroy___p0($self) {
  if (($self | 0) != 0) {
    __ZN7b2WorldD2Ev($self);
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2World__Dump_p0($self) {
  __ZN7b2World4DumpEv($self);
  return;
  return;
}

function _emscripten_bind_b2World__GetGravity_p0($self) {
  var $guard_uninitialized = HEAP8[__ZGVZ38emscripten_bind_b2World__GetGravity_p0E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ38emscripten_bind_b2World__GetGravity_p0E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $2 = $self + 102968 | 0;
  var $3$0 = HEAP32[$2 >> 2];
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $$emscripten$temp$0 = _ret;
  HEAP32[$$emscripten$temp$0 >> 2] = $3$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $3$1;
  return _ret;
  return null;
}

function _emscripten_bind_b2CircleShape____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $1 = HEAP32[HEAP32[$self >> 2] + 4 >> 2];
    FUNCTION_TABLE[$1]($self);
  }
  return;
  return;
}

function _emscripten_bind_b2CircleShape__ComputeMass_p2($self, $arg0, $arg1) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 28 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1);
  return;
  return;
}

function _emscripten_bind_b2CircleShape__Clone_p1($self, $arg0) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 8 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0);
  return $call;
  return null;
}

function _emscripten_bind_b2CircleShape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 20 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2, $arg3);
  return $call;
  return null;
}

function _emscripten_bind_b2CircleShape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 24 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2);
  return;
  return;
}

function _emscripten_bind_b2CircleShape__GetChildCount_p0($self) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 12 >> 2];
  var $call = FUNCTION_TABLE[$1]($self);
  return $call;
  return null;
}

function _emscripten_bind_b2CircleShape__TestPoint_p2($self, $arg0, $arg1) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 16 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0, $arg1);
  return $call;
  return null;
}

function _emscripten_bind_b2CircleShape__b2CircleShape_p0() {
  var $call$s2;
  var $call = __Znwj(20), $call$s2 = $call >> 2;
  HEAP32[$call$s2] = __ZTV13b2CircleShape + 8 | 0;
  HEAP32[$call$s2 + 1] = 0;
  HEAPF32[$call$s2 + 2] = 0;
  HEAPF32[$call$s2 + 3] = 0;
  HEAPF32[$call$s2 + 4] = 0;
  return $call;
  return null;
}

function _emscripten_bind_b2Draw__DrawTransform_p1($self, $arg0) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 28 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0);
  return;
  return;
}

function _emscripten_bind_b2Draw__DrawPolygon_p3($self, $arg0, $arg1, $arg2) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 8 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2);
  return;
  return;
}

function _emscripten_bind_b2Draw__DrawSolidCircle_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 20 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2, $arg3);
  return;
  return;
}

function _emscripten_bind_b2Draw__DrawSolidPolygon_p3($self, $arg0, $arg1, $arg2) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 12 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2);
  return;
  return;
}

function _emscripten_bind_b2Draw__DrawCircle_p3($self, $arg0, $arg1, $arg2) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 16 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2);
  return;
  return;
}

function _emscripten_bind_b2Draw__DrawSegment_p3($self, $arg0, $arg1, $arg2) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 24 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2);
  return;
  return;
}

function _emscripten_bind_b2Joint__GetReactionTorque_p1($self, $arg0) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 12 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0);
  return $call;
  return null;
}

function _emscripten_bind_b2Joint__GetAnchorA_p0($self) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $ref_tmp = __stackBase__;
  var $guard_uninitialized = HEAP8[__ZGVZ38emscripten_bind_b2Joint__GetAnchorA_p0E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ38emscripten_bind_b2Joint__GetAnchorA_p0E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $3 = HEAP32[HEAP32[$self >> 2] >> 2];
  FUNCTION_TABLE[$3]($ref_tmp, $self);
  var $4 = $ref_tmp;
  var $5$0 = HEAP32[$4 >> 2];
  var $5$1 = HEAP32[$4 + 4 >> 2];
  var $$emscripten$temp$0 = _ret1;
  HEAP32[$$emscripten$temp$0 >> 2] = $5$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $5$1;
  STACKTOP = __stackBase__;
  return _ret1;
  return null;
}

function _emscripten_bind_b2Joint__Dump_p0($self) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 16 >> 2];
  FUNCTION_TABLE[$1]($self);
  return;
  return;
}

function _emscripten_bind_b2Joint__GetAnchorB_p0($self) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $ref_tmp = __stackBase__;
  var $guard_uninitialized = HEAP8[__ZGVZ38emscripten_bind_b2Joint__GetAnchorB_p0E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ38emscripten_bind_b2Joint__GetAnchorB_p0E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $3 = HEAP32[HEAP32[$self >> 2] + 4 >> 2];
  FUNCTION_TABLE[$3]($ref_tmp, $self);
  var $4 = $ref_tmp;
  var $5$0 = HEAP32[$4 >> 2];
  var $5$1 = HEAP32[$4 + 4 >> 2];
  var $$emscripten$temp$0 = _ret2;
  HEAP32[$$emscripten$temp$0 >> 2] = $5$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $5$1;
  STACKTOP = __stackBase__;
  return _ret2;
  return null;
}

function _emscripten_bind_b2Joint__GetReactionForce_p1($self, $arg0) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $ref_tmp = __stackBase__;
  var $guard_uninitialized = HEAP8[__ZGVZ44emscripten_bind_b2Joint__GetReactionForce_p1E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ44emscripten_bind_b2Joint__GetReactionForce_p1E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $3 = HEAP32[HEAP32[$self >> 2] + 8 >> 2];
  FUNCTION_TABLE[$3]($ref_tmp, $self, $arg0);
  var $4 = $ref_tmp;
  var $5$0 = HEAP32[$4 >> 2];
  var $5$1 = HEAP32[$4 + 4 >> 2];
  var $$emscripten$temp$0 = _ret3;
  HEAP32[$$emscripten$temp$0 >> 2] = $5$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $5$1;
  STACKTOP = __stackBase__;
  return _ret3;
  return null;
}

function _emscripten_bind_b2RayCastCallback__ReportFixture_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 8 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2, $arg3);
  return $call;
  return null;
}

function _emscripten_bind_b2DynamicTree____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $1 = HEAP32[$self + 4 >> 2];
    _free($1);
    var $2 = $self;
    __ZdlPv($2);
  }
  return;
  return;
}

function _emscripten_bind_b2DynamicTree__b2DynamicTree_p0() {
  var $call$s2;
  var $call = __Znwj(28), $call$s2 = $call >> 2;
  HEAP32[$call$s2] = -1;
  HEAP32[$call$s2 + 3] = 16;
  HEAP32[$call$s2 + 2] = 0;
  var $call_i_i = _malloc(576);
  var $2 = $call_i_i;
  HEAP32[$call$s2 + 1] = $2;
  _memset($call_i_i, 0, 576, 1);
  var $i_03_i = 0;
  while (1) {
    var $i_03_i;
    var $add_i = $i_03_i + 1 | 0;
    HEAP32[($2 + 20 >> 2) + ($i_03_i * 9 | 0)] = $add_i;
    HEAP32[($2 + 32 >> 2) + ($i_03_i * 9 | 0)] = -1;
    if (($add_i | 0) >= 15) {
      break;
    }
    var $i_03_i = $add_i;
  }
  HEAP32[$call_i_i + 560 >> 2] = -1;
  HEAP32[$call_i_i + 572 >> 2] = -1;
  HEAP32[$call$s2 + 4] = 0;
  HEAP32[$call$s2 + 5] = 0;
  HEAP32[$call$s2 + 6] = 0;
  return $call;
  return null;
}

function _emscripten_bind_b2DynamicTree__GetFatAABB_p1($self, $arg0) {
  var __label__;
  var $cmp_i = ($arg0 | 0) > -1;
  do {
    if ($cmp_i) {
      if ((HEAP32[$self + 12 >> 2] | 0) > ($arg0 | 0)) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str19193 | 0, 159, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree10GetFatAABBEi | 0, STRING_TABLE.__str2111 | 0);
  }
  return HEAP32[$self + 4 >> 2] + $arg0 * 36 | 0;
  return null;
}

function _emscripten_bind_b2DynamicTree__GetUserData_p1($self, $arg0) {
  var __label__;
  var $cmp_i = ($arg0 | 0) > -1;
  do {
    if ($cmp_i) {
      if ((HEAP32[$self + 12 >> 2] | 0) > ($arg0 | 0)) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str19193 | 0, 153, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree11GetUserDataEi | 0, STRING_TABLE.__str2111 | 0);
  }
  return HEAP32[(HEAP32[$self + 4 >> 2] + 16 >> 2) + ($arg0 * 9 | 0)];
  return null;
}

function _emscripten_bind_b2DynamicTree__GetMaxBalance_p0($self) {
  var $0 = $self + 12 | 0;
  var $1 = HEAP32[$0 >> 2];
  var $cmp4_i = ($1 | 0) > 0;
  $for_body_lr_ph_i$$_ZNK13b2DynamicTree13GetMaxBalanceEv_exit$99 : do {
    if ($cmp4_i) {
      var $m_nodes_i = $self + 4 | 0;
      var $maxBalance_05_i = 0;
      var $i_06_i = 0;
      var $4 = HEAP32[$m_nodes_i >> 2];
      var $3 = $1;
      while (1) {
        var $3;
        var $4;
        var $i_06_i;
        var $maxBalance_05_i;
        if ((HEAP32[($4 + 32 >> 2) + ($i_06_i * 9 | 0)] | 0) < 2) {
          var $maxBalance_1_i = $maxBalance_05_i;
          var $14 = $4;
          var $13 = $3;
        } else {
          var $child1_i_i = $4 + $i_06_i * 36 + 24 | 0;
          var $6 = HEAP32[$child1_i_i >> 2];
          if (($6 | 0) == -1) {
            ___assert_func(STRING_TABLE.__str14 | 0, 686, STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree13GetMaxBalanceEv | 0, STRING_TABLE.__str31 | 0);
            var $9 = HEAP32[$child1_i_i >> 2];
            var $8 = HEAP32[$m_nodes_i >> 2];
            var $_pre7_i = HEAP32[$0 >> 2];
          } else {
            var $9 = $6;
            var $8 = $4;
            var $_pre7_i = $3;
          }
          var $_pre7_i;
          var $8;
          var $9;
          var $sub_i = HEAP32[($8 + 32 >> 2) + (HEAP32[($4 + 28 >> 2) + ($i_06_i * 9 | 0)] * 9 | 0)] - HEAP32[($8 + 32 >> 2) + ($9 * 9 | 0)] | 0;
          var $cond_i3_i = ($sub_i | 0) > 0 ? $sub_i : -$sub_i | 0;
          var $cond_i_i = ($maxBalance_05_i | 0) > ($cond_i3_i | 0) ? $maxBalance_05_i : $cond_i3_i;
          var $maxBalance_1_i = $cond_i_i;
          var $14 = $8;
          var $13 = $_pre7_i;
        }
        var $13;
        var $14;
        var $maxBalance_1_i;
        var $inc_i = $i_06_i + 1 | 0;
        if (($inc_i | 0) >= ($13 | 0)) {
          var $maxBalance_0_lcssa_i = $maxBalance_1_i;
          break $for_body_lr_ph_i$$_ZNK13b2DynamicTree13GetMaxBalanceEv_exit$99;
        }
        var $maxBalance_05_i = $maxBalance_1_i;
        var $i_06_i = $inc_i;
        var $4 = $14;
        var $3 = $13;
      }
    } else {
      var $maxBalance_0_lcssa_i = 0;
    }
  } while (0);
  var $maxBalance_0_lcssa_i;
  return $maxBalance_0_lcssa_i;
  return null;
}

function _emscripten_bind_b2DynamicTree__RebuildBottomUp_p0($self) {
  var $0 = $self;
  __ZN13b2DynamicTree15RebuildBottomUpEv($0);
  return;
  return;
}

function _emscripten_bind_b2DynamicTree__CreateProxy_p2($self, $arg0, $arg1) {
  var $m_nodes_i$s2;
  var $0 = $self;
  var $call_i = __ZN13b2DynamicTree12AllocateNodeEv($0);
  var $m_nodes_i$s2 = ($self + 4 | 0) >> 2;
  var $sub3_i_i = HEAPF32[$arg0 + 4 >> 2] - .10000000149011612;
  var $6 = HEAP32[$m_nodes_i$s2] + $call_i * 36 | 0;
  var $7 = (tempDoubleF32[0] = HEAPF32[$arg0 >> 2] - .10000000149011612, tempDoubleI32[0]);
  var $8$0 = $7;
  var $9 = (tempDoubleF32[0] = $sub3_i_i, tempDoubleI32[0]);
  var $12$1 = $9 | 0;
  var $st$23$0 = $6 | 0;
  HEAP32[$st$23$0 >> 2] = 0 | $8$0;
  var $st$23$1 = $6 + 4 | 0;
  HEAP32[$st$23$1 >> 2] = $12$1;
  var $add3_i_i = HEAPF32[$arg0 + 12 >> 2] + .10000000149011612;
  var $19 = HEAP32[$m_nodes_i$s2] + $call_i * 36 + 8 | 0;
  var $20 = (tempDoubleF32[0] = HEAPF32[$arg0 + 8 >> 2] + .10000000149011612, tempDoubleI32[0]);
  var $21$0 = $20;
  var $22 = (tempDoubleF32[0] = $add3_i_i, tempDoubleI32[0]);
  var $25$1 = $22 | 0;
  var $st$47$0 = $19 | 0;
  HEAP32[$st$47$0 >> 2] = 0 | $21$0;
  var $st$47$1 = $19 + 4 | 0;
  HEAP32[$st$47$1 >> 2] = $25$1;
  var $userData11_i = HEAP32[$m_nodes_i$s2] + $call_i * 36 + 16 | 0;
  HEAP32[$userData11_i >> 2] = $arg1;
  var $height_i = HEAP32[$m_nodes_i$s2] + $call_i * 36 + 32 | 0;
  HEAP32[$height_i >> 2] = 0;
  __ZN13b2DynamicTree10InsertLeafEi($0, $call_i);
  return $call_i;
  return null;
}

function _emscripten_bind_b2DynamicTree__MoveProxy_p3($self, $arg0, $arg1, $arg2) {
  var $0 = $self;
  var $1 = $arg1;
  var $2 = $arg2;
  var $call = __ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($0, $arg0, $1, $2);
  return $call;
  return null;
}

function _emscripten_bind_b2DynamicTree__Validate_p0($self) {
  var $0 = $self;
  __ZNK13b2DynamicTree8ValidateEv($0);
  return;
  return;
}

function _emscripten_bind_b2DynamicTree__DestroyProxy_p1($self, $arg0) {
  var $0 = $self;
  __ZN13b2DynamicTree12DestroyProxyEi($0, $arg0);
  return;
  return;
}

function _emscripten_bind_b2Timer__b2Timer_p0() {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $t_i_i = __stackBase__;
  var $call = __Znwj(8);
  var $call_i_i1 = _gettimeofday($t_i_i, 0);
  var $1 = $call;
  var $2 = HEAP32[$t_i_i >> 2];
  HEAP32[$call >> 2] = $2;
  var $mul_i_i = (HEAP32[$t_i_i + 4 >> 2] | 0) * .0010000000474974513;
  var $conv2_i_i = $mul_i_i >= 0 ? Math.floor($mul_i_i) : Math.ceil($mul_i_i);
  HEAP32[$call + 4 >> 2] = $conv2_i_i;
  STACKTOP = __stackBase__;
  return $1;
  return null;
}

function _emscripten_bind_b2Timer__Reset_p0($self) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $t_i = __stackBase__;
  var $call_i = _gettimeofday($t_i, 0);
  var $1 = HEAP32[$t_i >> 2];
  HEAP32[$self >> 2] = $1;
  var $mul_i = (HEAP32[$t_i + 4 >> 2] | 0) * .0010000000474974513;
  var $conv2_i = $mul_i >= 0 ? Math.floor($mul_i) : Math.ceil($mul_i);
  HEAP32[$self + 4 >> 2] = $conv2_i;
  STACKTOP = __stackBase__;
  return;
  return;
}

function _emscripten_bind_b2Timer____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2Timer__GetMilliseconds_p0($self) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 8;
  var $t_i = __stackBase__;
  var $call_i = _gettimeofday($t_i, 0);
  var $sub5_i = (((HEAP32[$t_i >> 2] - HEAP32[$self >> 2]) * 1e3 | 0) >>> 0) + (HEAP32[$t_i + 4 >> 2] | 0) * .0010000000474974513 - (HEAPU32[$self + 4 >> 2] >>> 0);
  STACKTOP = __stackBase__;
  return $sub5_i;
  return null;
}

function _emscripten_bind_b2ChainShape____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $1 = HEAP32[HEAP32[$self >> 2] + 4 >> 2];
    FUNCTION_TABLE[$1]($self);
  }
  return;
  return;
}

function _emscripten_bind_b2ChainShape__CreateChain_p2($self, $arg0, $arg1) {
  var __label__;
  var $0 = $self + 12 | 0;
  var $cmp_i = (HEAP32[$0 >> 2] | 0) == 0;
  do {
    if ($cmp_i) {
      if ((HEAP32[$self + 16 >> 2] | 0) == 0) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str42 | 0, 48, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape11CreateChainEPK6b2Vec2i | 0, STRING_TABLE.__str143 | 0);
  }
  if (($arg1 | 0) <= 1) {
    ___assert_func(STRING_TABLE.__str42 | 0, 49, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape11CreateChainEPK6b2Vec2i | 0, STRING_TABLE.__str345 | 0);
  }
  var $4 = $self + 16 | 0;
  HEAP32[$4 >> 2] = $arg1;
  var $mul_i = $arg1 << 3;
  var $call_i_i = _malloc($mul_i);
  HEAP32[$0 >> 2] = $call_i_i;
  var $6 = $arg0;
  var $mul11_i = HEAP32[$4 >> 2] << 3;
  _memcpy($call_i_i, $6, $mul11_i, 1);
  HEAP8[$self + 36 | 0] = 0;
  HEAP8[$self + 37 | 0] = 0;
  return;
  return;
}

function _emscripten_bind_b2ChainShape__get_m_radius_p0($self) {
  return HEAPF32[$self + 8 >> 2];
  return null;
}

function _emscripten_bind_b2ChainShape__get_m_vertices_p0($self) {
  return HEAP32[$self + 12 >> 2];
  return null;
}

function _emscripten_bind_b2ChainShape__get_m_count_p0($self) {
  return HEAP32[$self + 16 >> 2];
  return null;
}

function _emscripten_bind_b2ChainShape__SetPrevVertex_p1($self, $arg0) {
  var $1 = $arg0;
  var $2 = $self + 20 | 0;
  var $3$0 = HEAP32[$1 >> 2];
  var $3$1 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = $3$0;
  HEAP32[$2 + 4 >> 2] = $3$1;
  HEAP8[$self + 36 | 0] = 1;
  return;
  return;
}

function _emscripten_bind_b2ChainShape__set_m_vertices_p1($self, $arg0) {
  HEAP32[$self + 12 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2ChainShape__SetNextVertex_p1($self, $arg0) {
  var $1 = $arg0;
  var $2 = $self + 28 | 0;
  var $3$0 = HEAP32[$1 >> 2];
  var $3$1 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = $3$0;
  HEAP32[$2 + 4 >> 2] = $3$1;
  HEAP8[$self + 37 | 0] = 1;
  return;
  return;
}

function _emscripten_bind_b2ChainShape__set_m_count_p1($self, $arg0) {
  HEAP32[$self + 16 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2PolygonShape__set_m_radius_p1($self, $arg0) {
  HEAPF32[$self + 8 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2PolygonShape__get_m_radius_p0($self) {
  return HEAPF32[$self + 8 >> 2];
  return null;
}

function _emscripten_bind_b2PolygonShape__GetVertex_p1($self, $arg0) {
  return ($arg0 << 3) + $self + 20 | 0;
  return null;
}

function _emscripten_bind_b2PolygonShape__SetAsBox_p2($self, $arg0, $arg1) {
  var $self$s2 = $self >> 2;
  HEAP32[$self$s2 + 37] = 4;
  var $sub_i = -$arg0;
  var $sub2_i = -$arg1;
  HEAPF32[$self$s2 + 5] = $sub_i;
  HEAPF32[$self$s2 + 6] = $sub2_i;
  HEAPF32[$self$s2 + 7] = $arg0;
  HEAPF32[$self$s2 + 8] = $sub2_i;
  HEAPF32[$self$s2 + 9] = $arg0;
  HEAPF32[$self$s2 + 10] = $arg1;
  HEAPF32[$self$s2 + 11] = $sub_i;
  HEAPF32[$self$s2 + 12] = $arg1;
  HEAPF32[$self$s2 + 21] = 0;
  HEAPF32[$self$s2 + 22] = -1;
  HEAPF32[$self$s2 + 23] = 1;
  HEAPF32[$self$s2 + 24] = 0;
  HEAPF32[$self$s2 + 25] = 0;
  HEAPF32[$self$s2 + 26] = 1;
  HEAPF32[$self$s2 + 27] = -1;
  HEAPF32[$self$s2 + 28] = 0;
  HEAPF32[$self$s2 + 3] = 0;
  HEAPF32[$self$s2 + 4] = 0;
  return;
  return;
}

function _emscripten_bind_b2PolygonShape__set_m_centroid_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 12 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2PolygonShape__set_m_vertexCount_p1($self, $arg0) {
  HEAP32[$self + 148 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2PolygonShape__GetVertexCount_p0($self) {
  return HEAP32[$self + 148 >> 2];
  return null;
}

function _emscripten_bind_b2PolygonShape__GetType_p0($self) {
  return HEAP32[$self + 4 >> 2];
  return null;
}

function _emscripten_bind_b2PolygonShape__get_m_vertexCount_p0($self) {
  return HEAP32[$self + 148 >> 2];
  return null;
}

function _emscripten_bind_b2PolygonShape__get_m_centroid_p0($self) {
  return $self + 12 | 0;
  return null;
}

function _emscripten_bind_b2EdgeShape__Set_p2($self, $arg0, $arg1) {
  var $1 = $arg0;
  var $2 = $self + 12 | 0;
  var $3$0 = HEAP32[$1 >> 2];
  var $3$1 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = $3$0;
  HEAP32[$2 + 4 >> 2] = $3$1;
  var $5 = $arg1;
  var $6 = $self + 20 | 0;
  var $7$0 = HEAP32[$5 >> 2];
  var $7$1 = HEAP32[$5 + 4 >> 2];
  HEAP32[$6 >> 2] = $7$0;
  HEAP32[$6 + 4 >> 2] = $7$1;
  HEAP8[$self + 44 | 0] = 0;
  HEAP8[$self + 45 | 0] = 0;
  return;
  return;
}

function _emscripten_bind_b2EdgeShape__set_m_radius_p1($self, $arg0) {
  HEAPF32[$self + 8 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2EdgeShape__get_m_radius_p0($self) {
  return HEAPF32[$self + 8 >> 2];
  return null;
}

function _emscripten_bind_b2EdgeShape__GetType_p0($self) {
  return HEAP32[$self + 4 >> 2];
  return null;
}

function _emscripten_bind_b2Contact__GetNext_p0($self) {
  return HEAP32[$self + 12 >> 2];
  return null;
}

function _emscripten_bind_b2Contact__SetEnabled_p1($self, $arg0) {
  var $m_flags_i = $self + 4 | 0;
  var $0 = HEAP32[$m_flags_i >> 2];
  var $storemerge_i = $arg0 ? $0 | 4 : $0 & -5;
  HEAP32[$m_flags_i >> 2] = $storemerge_i;
  return;
  return;
}

function _emscripten_bind_b2Contact__GetRestitution_p0($self) {
  return HEAPF32[$self + 140 >> 2];
  return null;
}

function _emscripten_bind_b2Contact__GetFriction_p0($self) {
  return HEAPF32[$self + 136 >> 2];
  return null;
}

function _emscripten_bind_b2Contact__IsTouching_p0($self) {
  return (HEAP32[$self + 4 >> 2] & 2 | 0) != 0;
  return null;
}

function _emscripten_bind_b2Contact__IsEnabled_p0($self) {
  return (HEAP32[$self + 4 >> 2] & 4 | 0) != 0;
  return null;
}

function _emscripten_bind_b2Contact__GetFixtureB_p0($self) {
  return HEAP32[$self + 52 >> 2];
  return null;
}

function _emscripten_bind_b2Contact__SetFriction_p1($self, $arg0) {
  HEAPF32[$self + 136 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Contact__GetFixtureA_p0($self) {
  return HEAP32[$self + 48 >> 2];
  return null;
}

function _emscripten_bind_b2Contact__GetChildIndexA_p0($self) {
  return HEAP32[$self + 56 >> 2];
  return null;
}

function _emscripten_bind_b2Contact__GetChildIndexB_p0($self) {
  return HEAP32[$self + 60 >> 2];
  return null;
}

function _emscripten_bind_b2Contact__SetRestitution_p1($self, $arg0) {
  HEAPF32[$self + 140 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Contact__GetManifold_p0($self) {
  return $self + 64 | 0;
  return null;
}

function _emscripten_bind_b2Contact__ResetRestitution_p0($self) {
  var $1 = HEAPF32[HEAP32[$self + 48 >> 2] + 20 >> 2];
  var $3 = HEAPF32[HEAP32[$self + 52 >> 2] + 20 >> 2];
  var $cond_i_i = $1 > $3 ? $1 : $3;
  HEAPF32[$self + 140 >> 2] = $cond_i_i;
  return;
  return;
}

function _emscripten_bind_b2Shape__get_m_radius_p0($self) {
  return HEAPF32[$self + 8 >> 2];
  return null;
}

function _emscripten_bind_b2Shape__set_m_radius_p1($self, $arg0) {
  HEAPF32[$self + 8 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Shape__GetType_p0($self) {
  return HEAP32[$self + 4 >> 2];
  return null;
}

function _emscripten_bind_b2Body__GetAngle_p0($self) {
  return HEAPF32[$self + 56 >> 2];
  return null;
}

function _emscripten_bind_b2Body__GetUserData_p0($self) {
  return HEAP32[$self + 148 >> 2];
  return null;
}

function _emscripten_bind_b2Body__IsSleepingAllowed_p0($self) {
  return (HEAP16[$self + 4 >> 1] & 4) << 16 >> 16 != 0;
  return null;
}

function _emscripten_bind_b2Body__SetAngularDamping_p1($self, $arg0) {
  HEAPF32[$self + 136 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2ChainShape__ComputeMass_p2($self, $arg0, $arg1) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 28 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1);
  return;
  return;
}

function _emscripten_bind_b2ChainShape__Clone_p1($self, $arg0) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 8 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0);
  return $call;
  return null;
}

function _emscripten_bind_b2ChainShape__GetChildEdge_p2($self, $arg0, $arg1) {
  var $0 = $self;
  var $1 = $arg0;
  __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($0, $1, $arg1);
  return;
  return;
}

function _emscripten_bind_b2ChainShape__b2ChainShape_p0() {
  var $call$s2;
  var $call = __Znwj(40), $call$s2 = $call >> 2;
  HEAP32[$call$s2] = __ZTV12b2ChainShape + 8 | 0;
  HEAP32[$call$s2 + 1] = 3;
  HEAPF32[$call$s2 + 2] = .009999999776482582;
  HEAP32[$call$s2 + 3] = 0;
  HEAP32[$call$s2 + 4] = 0;
  HEAP8[$call + 36 | 0] = 0;
  HEAP8[$call + 37 | 0] = 0;
  return $call;
  return null;
}

function _emscripten_bind_b2ChainShape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 24 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2);
  return;
  return;
}

function _emscripten_bind_b2ChainShape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 20 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2, $arg3);
  return $call;
  return null;
}

function _emscripten_bind_b2ChainShape__GetChildCount_p0($self) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 12 >> 2];
  var $call = FUNCTION_TABLE[$1]($self);
  return $call;
  return null;
}

function _emscripten_bind_b2ChainShape__TestPoint_p2($self, $arg0, $arg1) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 16 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0, $arg1);
  return $call;
  return null;
}

function _emscripten_bind_b2ChainShape__CreateLoop_p2($self, $arg0, $arg1) {
  var $0$s2;
  var __label__;
  var $0$s2 = ($self + 12 | 0) >> 2;
  var $cmp_i = (HEAP32[$0$s2] | 0) == 0;
  do {
    if ($cmp_i) {
      if ((HEAP32[$self + 16 >> 2] | 0) == 0) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str42 | 0, 34, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape10CreateLoopEPK6b2Vec2i | 0, STRING_TABLE.__str143 | 0);
  }
  if (($arg1 | 0) <= 2) {
    ___assert_func(STRING_TABLE.__str42 | 0, 35, STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape10CreateLoopEPK6b2Vec2i | 0, STRING_TABLE.__str658 | 0);
  }
  var $add_i = $arg1 + 1 | 0;
  var $4 = $self + 16 | 0;
  HEAP32[$4 >> 2] = $add_i;
  var $mul_i = $add_i << 3;
  var $call_i_i = _malloc($mul_i);
  HEAP32[$0$s2] = $call_i_i;
  var $6 = $arg0;
  var $mul11_i = $arg1 << 3;
  _memcpy($call_i_i, $6, $mul11_i, 1);
  var $7 = HEAP32[$0$s2];
  var $8 = $7;
  var $9 = ($arg1 << 3) + $7 | 0;
  var $10$0 = HEAP32[$8 >> 2];
  var $10$1 = HEAP32[$8 + 4 >> 2];
  var $st$18$0 = $9 | 0;
  HEAP32[$st$18$0 >> 2] = $10$0;
  var $st$18$1 = $9 + 4 | 0;
  HEAP32[$st$18$1 >> 2] = $10$1;
  var $13 = HEAP32[$0$s2];
  var $14 = (HEAP32[$4 >> 2] - 2 << 3) + $13 | 0;
  var $15 = $self + 20 | 0;
  var $16$0 = HEAP32[$14 >> 2];
  var $16$1 = HEAP32[$14 + 4 >> 2];
  HEAP32[$15 >> 2] = $16$0;
  HEAP32[$15 + 4 >> 2] = $16$1;
  var $18 = $13 + 8 | 0;
  var $19 = $self + 28 | 0;
  var $20$0 = HEAP32[$18 >> 2];
  var $20$1 = HEAP32[$18 + 4 >> 2];
  HEAP32[$19 >> 2] = $20$0;
  HEAP32[$19 + 4 >> 2] = $20$1;
  HEAP8[$self + 36 | 0] = 1;
  HEAP8[$self + 37 | 0] = 1;
  return;
  return;
}

function _emscripten_bind_b2QueryCallback__ReportFixture_p1($self, $arg0) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 8 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0);
  return $call;
  return null;
}

function _emscripten_bind_b2BlockAllocator____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $m_chunkCount_i = $self + 4 | 0;
    var $cmp1_i = (HEAP32[$m_chunkCount_i >> 2] | 0) > 0;
    var $m_chunks_i = $self | 0;
    var $1 = HEAP32[$m_chunks_i >> 2];
    $for_body_i$$invoke_cont$29 : do {
      if ($cmp1_i) {
        var $i_02_i = 0;
        var $2 = $1;
        while (1) {
          var $2;
          var $i_02_i;
          var $4 = HEAP32[$2 + ($i_02_i << 3) + 4 >> 2];
          _free($4);
          var $inc_i = $i_02_i + 1 | 0;
          var $6 = HEAP32[$m_chunks_i >> 2];
          if (($inc_i | 0) >= (HEAP32[$m_chunkCount_i >> 2] | 0)) {
            var $_lcssa_i = $6;
            break $for_body_i$$invoke_cont$29;
          }
          var $i_02_i = $inc_i;
          var $2 = $6;
        }
      } else {
        var $_lcssa_i = $1;
      }
    } while (0);
    var $_lcssa_i;
    _free($_lcssa_i);
    var $8 = $self;
    __ZdlPv($8);
  }
  return;
  return;
}

function _emscripten_bind_b2BlockAllocator__Clear_p0($self) {
  var $m_chunkCount_i$s2;
  var $m_chunkCount_i$s2 = ($self + 4 | 0) >> 2;
  var $cmp1_i = (HEAP32[$m_chunkCount_i$s2] | 0) > 0;
  var $m_chunks_i = $self | 0;
  $for_body_i$$_ZN16b2BlockAllocator5ClearEv_exit$35 : do {
    if ($cmp1_i) {
      var $i_02_i = 0;
      while (1) {
        var $i_02_i;
        var $3 = HEAP32[HEAP32[$m_chunks_i >> 2] + ($i_02_i << 3) + 4 >> 2];
        _free($3);
        var $inc_i = $i_02_i + 1 | 0;
        if (($inc_i | 0) >= (HEAP32[$m_chunkCount_i$s2] | 0)) {
          break $for_body_i$$_ZN16b2BlockAllocator5ClearEv_exit$35;
        }
        var $i_02_i = $inc_i;
      }
    }
  } while (0);
  HEAP32[$m_chunkCount_i$s2] = 0;
  var $6 = HEAP32[$m_chunks_i >> 2];
  var $mul_i = HEAP32[$self + 8 >> 2] << 3;
  _memset($6, 0, $mul_i, 1);
  var $8 = $self + 12 | 0;
  _memset($8, 0, 56, 1);
  return;
  return;
}

function _emscripten_bind_b2BlockAllocator__Free_p2($self, $arg0, $arg1) {
  var $cmp_i = ($arg1 | 0) == 0;
  $_ZN16b2BlockAllocator4FreeEPvi_exit$$if_end_i$40 : do {
    if (!$cmp_i) {
      var $cmp2_i = ($arg1 | 0) > 0;
      do {
        if ($cmp2_i) {
          if (($arg1 | 0) <= 640) {
            break;
          }
          _free($arg0);
          break $_ZN16b2BlockAllocator4FreeEPvi_exit$$if_end_i$40;
        }
        ___assert_func(STRING_TABLE.__str59 | 0, 164, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str261 | 0);
      } while (0);
      var $0 = HEAPU8[__ZN16b2BlockAllocator17s_blockSizeLookupE + $arg1 | 0];
      var $conv_i = $0 & 255;
      if (($0 & 255) >= 14) {
        ___assert_func(STRING_TABLE.__str59 | 0, 173, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi | 0, STRING_TABLE.__str362 | 0);
      }
      var $1 = $arg0;
      var $arrayidx11_i = ($conv_i << 2) + $self + 12 | 0;
      var $2 = HEAP32[$arrayidx11_i >> 2];
      HEAP32[$arg0 >> 2] = $2;
      HEAP32[$arrayidx11_i >> 2] = $1;
    }
  } while (0);
  return;
  return;
}

function _emscripten_bind_b2BlockAllocator__Allocate_p1($self, $arg0) {
  var $call = __ZN16b2BlockAllocator8AllocateEi($self, $arg0);
  return $call;
  return null;
}

function _emscripten_bind_b2BlockAllocator__b2BlockAllocator_p0() {
  var $call = __Znwj(68);
  var $1 = $call + 8 | 0;
  HEAP32[$1 >> 2] = 128;
  HEAP32[$call + 4 >> 2] = 0;
  var $call_i_i = _malloc(1024);
  HEAP32[$call >> 2] = $call_i_i;
  var $mul5_i = HEAP32[$1 >> 2] << 3;
  _memset($call_i_i, 0, $mul5_i, 1);
  var $arraydecay_i = $call + 12 | 0;
  _memset($arraydecay_i, 0, 56, 1);
  if ((HEAP8[__ZN16b2BlockAllocator28s_blockSizeLookupInitializedE] & 1) << 24 >> 24 == 0) {
    var $j_01_i = 0;
    var $i_02_i = 1;
    while (1) {
      var $i_02_i;
      var $j_01_i;
      if (($j_01_i | 0) >= 14) {
        ___assert_func(STRING_TABLE.__str59 | 0, 73, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocatorC2Ev | 0, STRING_TABLE.__str160 | 0);
      }
      if (($i_02_i | 0) > (HEAP32[__ZN16b2BlockAllocator12s_blockSizesE + ($j_01_i << 2) >> 2] | 0)) {
        var $inc_i = $j_01_i + 1 | 0;
        HEAP8[__ZN16b2BlockAllocator17s_blockSizeLookupE + $i_02_i | 0] = $inc_i & 255;
        var $j_1_i = $inc_i;
      } else {
        HEAP8[__ZN16b2BlockAllocator17s_blockSizeLookupE + $i_02_i | 0] = $j_01_i & 255;
        var $j_1_i = $j_01_i;
      }
      var $j_1_i;
      var $inc14_i = $i_02_i + 1 | 0;
      if (($inc14_i | 0) == 641) {
        break;
      }
      var $j_01_i = $j_1_i;
      var $i_02_i = $inc14_i;
    }
    HEAP8[__ZN16b2BlockAllocator28s_blockSizeLookupInitializedE] = 1;
  }
  return $call;
  return null;
}

function _emscripten_bind_b2PolygonShape____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $1 = HEAP32[HEAP32[$self >> 2] + 4 >> 2];
    FUNCTION_TABLE[$1]($self);
  }
  return;
  return;
}

function _emscripten_bind_b2PolygonShape__Set_p2($self, $arg0, $arg1) {
  var $0 = $self;
  __ZN14b2PolygonShape3SetEPK6b2Vec2i($0, $arg0, $arg1);
  return;
  return;
}

function _emscripten_bind_b2PolygonShape__ComputeMass_p2($self, $arg0, $arg1) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 28 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1);
  return;
  return;
}

function _emscripten_bind_b2PolygonShape__Clone_p1($self, $arg0) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 8 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0);
  return $call;
  return null;
}

function _emscripten_bind_b2PolygonShape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 20 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2, $arg3);
  return $call;
  return null;
}

function _emscripten_bind_b2PolygonShape__SetAsBox_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var $0 = $self;
  __ZN14b2PolygonShape8SetAsBoxEffRK6b2Vec2f($0, $arg0, $arg1, $arg2, $arg3);
  return;
  return;
}

function _emscripten_bind_b2PolygonShape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 24 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2);
  return;
  return;
}

function _emscripten_bind_b2PolygonShape__GetChildCount_p0($self) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 12 >> 2];
  var $call = FUNCTION_TABLE[$1]($self);
  return $call;
  return null;
}

function _emscripten_bind_b2PolygonShape__TestPoint_p2($self, $arg0, $arg1) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 16 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0, $arg1);
  return $call;
  return null;
}

function _emscripten_bind_b2PolygonShape__b2PolygonShape_p0() {
  var $call$s2;
  var $call = __Znwj(152), $call$s2 = $call >> 2;
  HEAP32[$call$s2] = __ZTV14b2PolygonShape + 8 | 0;
  HEAP32[$call$s2 + 1] = 2;
  HEAPF32[$call$s2 + 2] = .009999999776482582;
  HEAP32[$call$s2 + 37] = 0;
  HEAPF32[$call$s2 + 3] = 0;
  HEAPF32[$call$s2 + 4] = 0;
  return $call;
  return null;
}

function _emscripten_bind_b2EdgeShape____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $1 = HEAP32[HEAP32[$self >> 2] + 4 >> 2];
    FUNCTION_TABLE[$1]($self);
  }
  return;
  return;
}

function _emscripten_bind_b2EdgeShape__ComputeMass_p2($self, $arg0, $arg1) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 28 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1);
  return;
  return;
}

function _emscripten_bind_b2EdgeShape__Clone_p1($self, $arg0) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 8 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0);
  return $call;
  return null;
}

function _emscripten_bind_b2EdgeShape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 20 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2, $arg3);
  return $call;
  return null;
}

function _emscripten_bind_b2EdgeShape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 24 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2);
  return;
  return;
}

function _emscripten_bind_b2EdgeShape__GetChildCount_p0($self) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 12 >> 2];
  var $call = FUNCTION_TABLE[$1]($self);
  return $call;
  return null;
}

function _emscripten_bind_b2EdgeShape__TestPoint_p2($self, $arg0, $arg1) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 16 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0, $arg1);
  return $call;
  return null;
}

function _emscripten_bind_b2EdgeShape__b2EdgeShape_p0() {
  var $call$s2;
  var $call = __Znwj(48), $call$s2 = $call >> 2;
  HEAP32[$call$s2] = __ZTV11b2EdgeShape + 8 | 0;
  HEAP32[$call$s2 + 1] = 1;
  HEAPF32[$call$s2 + 2] = .009999999776482582;
  HEAPF32[$call$s2 + 7] = 0;
  HEAPF32[$call$s2 + 8] = 0;
  HEAPF32[$call$s2 + 9] = 0;
  HEAPF32[$call$s2 + 10] = 0;
  HEAP8[$call + 44 | 0] = 0;
  HEAP8[$call + 45 | 0] = 0;
  return $call;
  return null;
}

function _emscripten_bind_b2Contact__GetWorldManifold_p1($self, $arg0) {
  var $0 = HEAP32[$self + 48 >> 2];
  var $2 = HEAP32[$self + 52 >> 2];
  var $m_xf_i2_i = HEAP32[$0 + 8 >> 2] + 12 | 0;
  var $6 = HEAPF32[HEAP32[$0 + 12 >> 2] + 8 >> 2];
  var $m_xf_i_i = HEAP32[$2 + 8 >> 2] + 12 | 0;
  var $7 = HEAPF32[HEAP32[$2 + 12 >> 2] + 8 >> 2];
  var $8 = $arg0;
  var $9 = $self + 64 | 0;
  __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($8, $9, $m_xf_i2_i, $6, $m_xf_i_i, $7);
  return;
  return;
}

function _emscripten_bind_b2Contact__ResetFriction_p0($self) {
  var $mul_i_i = HEAPF32[HEAP32[$self + 48 >> 2] + 16 >> 2] * HEAPF32[HEAP32[$self + 52 >> 2] + 16 >> 2];
  var $call_i_i_i = _sqrtf($mul_i_i);
  HEAPF32[$self + 136 >> 2] = $call_i_i_i;
  return;
  return;
}

function _emscripten_bind_b2Contact__Evaluate_p3($self, $arg0, $arg1, $arg2) {
  var $1 = HEAP32[HEAP32[$self >> 2] >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2);
  return;
  return;
}

function _emscripten_bind_b2Shape__ComputeMass_p2($self, $arg0, $arg1) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 28 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1);
  return;
  return;
}

function _emscripten_bind_b2Shape__Clone_p1($self, $arg0) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 8 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0);
  return $call;
  return null;
}

function _emscripten_bind_b2Shape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 20 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2, $arg3);
  return $call;
  return null;
}

function _emscripten_bind_b2Shape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 24 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0, $arg1, $arg2);
  return;
  return;
}

function _emscripten_bind_b2Shape__GetChildCount_p0($self) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 12 >> 2];
  var $call = FUNCTION_TABLE[$1]($self);
  return $call;
  return null;
}

function _emscripten_bind_b2Shape__TestPoint_p2($self, $arg0, $arg1) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 16 >> 2];
  var $call = FUNCTION_TABLE[$1]($self, $arg0, $arg1);
  return $call;
  return null;
}

function _emscripten_bind_b2Body__SetActive_p1($self, $arg0) {
  var $0 = $self;
  __ZN6b2Body9SetActiveEb($0, $arg0);
  return;
  return;
}

function _emscripten_bind_b2Body__SetGravityScale_p1($self, $arg0) {
  HEAPF32[$self + 140 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Body__SetUserData_p1($self, $arg0) {
  HEAP32[$self + 148 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Body__GetAngularVelocity_p0($self) {
  return HEAPF32[$self + 72 >> 2];
  return null;
}

function _emscripten_bind_b2Body__GetFixtureList_p0($self) {
  return HEAP32[$self + 100 >> 2];
  return null;
}

function _emscripten_bind_b2Body__ApplyForce_p2($self, $arg0, $arg1) {
  if ((HEAP32[$self >> 2] | 0) == 2) {
    var $1 = $self + 4 | 0;
    var $2 = HEAP16[$1 >> 1];
    if (($2 & 2) << 16 >> 16 == 0) {
      var $or_i_i = $2 | 2;
      HEAP16[$1 >> 1] = $or_i_i;
      HEAPF32[$self + 144 >> 2] = 0;
    }
    var $x_i4_i = $arg0 | 0;
    var $x2_i5_i = $self + 76 | 0;
    var $add_i_i = HEAPF32[$x2_i5_i >> 2] + HEAPF32[$x_i4_i >> 2];
    HEAPF32[$x2_i5_i >> 2] = $add_i_i;
    var $y_i6_i = $arg0 + 4 | 0;
    var $y3_i_i = $self + 80 | 0;
    var $add4_i_i = HEAPF32[$y3_i_i >> 2] + HEAPF32[$y_i6_i >> 2];
    HEAPF32[$y3_i_i >> 2] = $add4_i_i;
    var $m_torque_i = $self + 84 | 0;
    var $add_i = HEAPF32[$m_torque_i >> 2] + ((HEAPF32[$arg1 >> 2] - HEAPF32[$self + 44 >> 2]) * HEAPF32[$y_i6_i >> 2] - (HEAPF32[$arg1 + 4 >> 2] - HEAPF32[$self + 48 >> 2]) * HEAPF32[$x_i4_i >> 2]);
    HEAPF32[$m_torque_i >> 2] = $add_i;
  }
  return;
  return;
}

function _emscripten_bind_b2Body__SetLinearVelocity_p1($self, $arg0) {
  if ((HEAP32[$self >> 2] | 0) != 0) {
    var $1 = HEAPF32[$arg0 >> 2];
    var $2 = HEAPF32[$arg0 + 4 >> 2];
    var $cmp2_i = $1 * $1 + $2 * $2 > 0;
    do {
      if ($cmp2_i) {
        var $3 = $self + 4 | 0;
        var $4 = HEAP16[$3 >> 1];
        if (($4 & 2) << 16 >> 16 != 0) {
          break;
        }
        var $or_i_i = $4 | 2;
        HEAP16[$3 >> 1] = $or_i_i;
        HEAPF32[$self + 144 >> 2] = 0;
      }
    } while (0);
    var $6 = $arg0;
    var $7 = $self + 64 | 0;
    var $8$0 = HEAP32[$6 >> 2];
    var $8$1 = HEAP32[$6 + 4 >> 2];
    HEAP32[$7 >> 2] = $8$0;
    HEAP32[$7 + 4 >> 2] = $8$1;
  }
  return;
  return;
}

function _emscripten_bind_b2Body__GetJointList_p0($self) {
  return HEAP32[$self + 108 >> 2];
  return null;
}

function _emscripten_bind_b2Body__GetNext_p0($self) {
  return HEAP32[$self + 96 >> 2];
  return null;
}

function _emscripten_bind_b2Body__SetSleepingAllowed_p1($self, $arg0) {
  var $m_flags_i$s1;
  var $m_flags_i$s1 = ($self + 4 | 0) >> 1;
  var $0 = HEAP16[$m_flags_i$s1];
  do {
    if ($arg0) {
      var $or_i = $0 | 4;
      HEAP16[$m_flags_i$s1] = $or_i;
    } else {
      var $and_i = $0 & -5;
      HEAP16[$m_flags_i$s1] = $and_i;
      if (($0 & 2) << 16 >> 16 != 0) {
        break;
      }
      var $or_i_i = $and_i | 2;
      HEAP16[$m_flags_i$s1] = $or_i_i;
      HEAPF32[$self + 144 >> 2] = 0;
    }
  } while (0);
  return;
  return;
}

function _emscripten_bind_b2Body__GetMass_p0($self) {
  return HEAPF32[$self + 116 >> 2];
  return null;
}

function _emscripten_bind_b2Body__SetAngularVelocity_p1($self, $arg0) {
  if ((HEAP32[$self >> 2] | 0) != 0) {
    var $cmp2_i = $arg0 * $arg0 > 0;
    do {
      if ($cmp2_i) {
        var $1 = $self + 4 | 0;
        var $2 = HEAP16[$1 >> 1];
        if (($2 & 2) << 16 >> 16 != 0) {
          break;
        }
        var $or_i_i = $2 | 2;
        HEAP16[$1 >> 1] = $or_i_i;
        HEAPF32[$self + 144 >> 2] = 0;
      }
    } while (0);
    HEAPF32[$self + 72 >> 2] = $arg0;
  }
  return;
  return;
}

function _emscripten_bind_b2Body__GetMassData_p1($self, $arg0) {
  var $m_mass_i = $self + 116 | 0;
  var $0 = HEAPF32[$m_mass_i >> 2];
  HEAPF32[$arg0 >> 2] = $0;
  var $localCenter_i = $self + 28 | 0;
  var $3 = HEAPF32[$localCenter_i >> 2];
  var $4 = HEAPF32[$self + 32 >> 2];
  var $add_i = HEAPF32[$self + 124 >> 2] + HEAPF32[$m_mass_i >> 2] * ($3 * $3 + $4 * $4);
  HEAPF32[$arg0 + 12 >> 2] = $add_i;
  var $5 = $localCenter_i;
  var $6 = $arg0 + 4 | 0;
  var $7$0 = HEAP32[$5 >> 2];
  var $7$1 = HEAP32[$5 + 4 >> 2];
  HEAP32[$6 >> 2] = $7$0;
  HEAP32[$6 + 4 >> 2] = $7$1;
  return;
  return;
}

function _emscripten_bind_b2Body__ApplyForceToCenter_p1($self, $arg0) {
  if ((HEAP32[$self >> 2] | 0) == 2) {
    var $1 = $self + 4 | 0;
    var $2 = HEAP16[$1 >> 1];
    if (($2 & 2) << 16 >> 16 == 0) {
      var $or_i_i = $2 | 2;
      HEAP16[$1 >> 1] = $or_i_i;
      HEAPF32[$self + 144 >> 2] = 0;
    }
    var $x2_i_i = $self + 76 | 0;
    var $add_i_i = HEAPF32[$x2_i_i >> 2] + HEAPF32[$arg0 >> 2];
    HEAPF32[$x2_i_i >> 2] = $add_i_i;
    var $y3_i_i = $self + 80 | 0;
    var $add4_i_i = HEAPF32[$y3_i_i >> 2] + HEAPF32[$arg0 + 4 >> 2];
    HEAPF32[$y3_i_i >> 2] = $add4_i_i;
  }
  return;
  return;
}

function _emscripten_bind_b2Body__ApplyTorque_p1($self, $arg0) {
  if ((HEAP32[$self >> 2] | 0) == 2) {
    var $1 = $self + 4 | 0;
    var $2 = HEAP16[$1 >> 1];
    if (($2 & 2) << 16 >> 16 == 0) {
      var $or_i_i = $2 | 2;
      HEAP16[$1 >> 1] = $or_i_i;
      HEAPF32[$self + 144 >> 2] = 0;
    }
    var $m_torque_i = $self + 84 | 0;
    var $add_i = HEAPF32[$m_torque_i >> 2] + $arg0;
    HEAPF32[$m_torque_i >> 2] = $add_i;
  }
  return;
  return;
}

function _emscripten_bind_b2Body__IsAwake_p0($self) {
  return (HEAP16[$self + 4 >> 1] & 2) << 16 >> 16 != 0;
  return null;
}

function _emscripten_bind_b2Body__GetTransform_p0($self) {
  return $self + 12 | 0;
  return null;
}

function _emscripten_bind_b2Body__GetWorldCenter_p0($self) {
  return $self + 44 | 0;
  return null;
}

function _emscripten_bind_b2Body__GetAngularDamping_p0($self) {
  return HEAPF32[$self + 136 >> 2];
  return null;
}

function _emscripten_bind_b2Body__ApplyLinearImpulse_p2($self, $arg0, $arg1) {
  var $self$s2 = $self >> 2;
  if ((HEAP32[$self$s2] | 0) == 2) {
    var $1 = $self + 4 | 0;
    var $2 = HEAP16[$1 >> 1];
    if (($2 & 2) << 16 >> 16 == 0) {
      var $or_i_i = $2 | 2;
      HEAP16[$1 >> 1] = $or_i_i;
      HEAPF32[$self$s2 + 36] = 0;
    }
    var $4 = HEAPF32[$self$s2 + 30];
    var $x_i7_i = $arg0 | 0;
    var $y_i9_i = $arg0 + 4 | 0;
    var $mul1_i_i = HEAPF32[$y_i9_i >> 2] * $4;
    var $x2_i5_i = $self + 64 | 0;
    var $add_i_i = HEAPF32[$x2_i5_i >> 2] + HEAPF32[$x_i7_i >> 2] * $4;
    HEAPF32[$x2_i5_i >> 2] = $add_i_i;
    var $y3_i_i = $self + 68 | 0;
    var $add4_i_i = HEAPF32[$y3_i_i >> 2] + $mul1_i_i;
    HEAPF32[$y3_i_i >> 2] = $add4_i_i;
    var $m_angularVelocity_i = $self + 72 | 0;
    var $add_i = HEAPF32[$m_angularVelocity_i >> 2] + HEAPF32[$self$s2 + 32] * ((HEAPF32[$arg1 >> 2] - HEAPF32[$self$s2 + 11]) * HEAPF32[$y_i9_i >> 2] - (HEAPF32[$arg1 + 4 >> 2] - HEAPF32[$self$s2 + 12]) * HEAPF32[$x_i7_i >> 2]);
    HEAPF32[$m_angularVelocity_i >> 2] = $add_i;
  }
  return;
  return;
}

function _emscripten_bind_b2Body__IsFixedRotation_p0($self) {
  return (HEAP16[$self + 4 >> 1] & 16) << 16 >> 16 != 0;
  return null;
}

function _emscripten_bind_b2Body__GetLocalCenter_p0($self) {
  return $self + 28 | 0;
  return null;
}

function _emscripten_bind_b2Body__GetContactList_p0($self) {
  return HEAP32[$self + 112 >> 2];
  return null;
}

function _emscripten_bind_b2Body__SetAwake_p1($self, $arg0) {
  var $0$s1;
  var $self$s2 = $self >> 2;
  var $0$s1 = ($self + 4 | 0) >> 1;
  var $1 = HEAP16[$0$s1];
  do {
    if ($arg0) {
      if (($1 & 2) << 16 >> 16 != 0) {
        break;
      }
      var $or_i = $1 | 2;
      HEAP16[$0$s1] = $or_i;
      HEAPF32[$self$s2 + 36] = 0;
    } else {
      var $and8_i = $1 & -3;
      HEAP16[$0$s1] = $and8_i;
      HEAPF32[$self$s2 + 36] = 0;
      HEAPF32[$self$s2 + 16] = 0;
      HEAPF32[$self$s2 + 17] = 0;
      HEAPF32[$self$s2 + 18] = 0;
      HEAPF32[$self$s2 + 19] = 0;
      HEAPF32[$self$s2 + 20] = 0;
      HEAPF32[$self$s2 + 21] = 0;
    }
  } while (0);
  return;
  return;
}

function _emscripten_bind_b2Body__GetLinearDamping_p0($self) {
  return HEAPF32[$self + 132 >> 2];
  return null;
}

function _emscripten_bind_b2Body__IsBullet_p0($self) {
  return (HEAP16[$self + 4 >> 1] & 8) << 16 >> 16 != 0;
  return null;
}

function _emscripten_bind_b2Body__GetWorld_p0($self) {
  return HEAP32[$self + 88 >> 2];
  return null;
}

function _emscripten_bind_b2Body__SetLinearDamping_p1($self, $arg0) {
  HEAPF32[$self + 132 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Body__SetBullet_p1($self, $arg0) {
  var $m_flags_i = $self + 4 | 0;
  var $0 = HEAP16[$m_flags_i >> 1];
  var $storemerge_i = $arg0 ? $0 | 8 : $0 & -9;
  HEAP16[$m_flags_i >> 1] = $storemerge_i;
  return;
  return;
}

function _emscripten_bind_b2Body__GetType_p0($self) {
  return HEAP32[$self >> 2];
  return null;
}

function _emscripten_bind_b2Body__GetGravityScale_p0($self) {
  return HEAPF32[$self + 140 >> 2];
  return null;
}

function _emscripten_bind_b2Body__GetInertia_p0($self) {
  var $2 = HEAPF32[$self + 28 >> 2];
  var $3 = HEAPF32[$self + 32 >> 2];
  return HEAPF32[$self + 124 >> 2] + HEAPF32[$self + 116 >> 2] * ($2 * $2 + $3 * $3);
  return null;
}

function _emscripten_bind_b2Body__IsActive_p0($self) {
  return (HEAP16[$self + 4 >> 1] & 32) << 16 >> 16 != 0;
  return null;
}

function _emscripten_bind_b2Body__ApplyAngularImpulse_p1($self, $arg0) {
  if ((HEAP32[$self >> 2] | 0) == 2) {
    var $1 = $self + 4 | 0;
    var $2 = HEAP16[$1 >> 1];
    if (($2 & 2) << 16 >> 16 == 0) {
      var $or_i_i = $2 | 2;
      HEAP16[$1 >> 1] = $or_i_i;
      HEAPF32[$self + 144 >> 2] = 0;
    }
    var $m_angularVelocity_i = $self + 72 | 0;
    var $add_i = HEAPF32[$m_angularVelocity_i >> 2] + HEAPF32[$self + 128 >> 2] * $arg0;
    HEAPF32[$m_angularVelocity_i >> 2] = $add_i;
  }
  return;
  return;
}

function _emscripten_bind_b2Body__GetPosition_p0($self) {
  return $self + 12 | 0;
  return null;
}

function _emscripten_bind_b2StackAllocator__GetMaxAllocation_p0($self) {
  return HEAP32[$self + 102408 >> 2];
  return null;
}

function _emscripten_bind_b2Body__GetLocalPoint_p1($self, $arg0) {
  var $guard_uninitialized = HEAP8[__ZGVZ40emscripten_bind_b2Body__GetLocalPoint_p1E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ40emscripten_bind_b2Body__GetLocalPoint_p1E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $sub_i_i = HEAPF32[$arg0 >> 2] - HEAPF32[$self + 12 >> 2];
  var $sub4_i_i = HEAPF32[$arg0 + 4 >> 2] - HEAPF32[$self + 16 >> 2];
  var $9 = HEAPF32[$self + 24 >> 2];
  var $11 = HEAPF32[$self + 20 >> 2];
  var $add16_i_i = $sub_i_i * -$11 + $9 * $sub4_i_i;
  var $12 = (tempDoubleF32[0] = $9 * $sub_i_i + $11 * $sub4_i_i, tempDoubleI32[0]);
  var $13$0 = $12;
  var $14 = (tempDoubleF32[0] = $add16_i_i, tempDoubleI32[0]);
  var $17$1 = $14 | 0;
  var $$emscripten$temp$0 = _ret4;
  HEAP32[$$emscripten$temp$0 >> 2] = 0 | $13$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $17$1;
  return _ret4;
  return null;
}

function _emscripten_bind_b2Body__GetLinearVelocity_p0($self) {
  var $guard_uninitialized = HEAP8[__ZGVZ44emscripten_bind_b2Body__GetLinearVelocity_p0E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ44emscripten_bind_b2Body__GetLinearVelocity_p0E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $2 = $self + 64 | 0;
  var $3$0 = HEAP32[$2 >> 2];
  var $3$1 = HEAP32[$2 + 4 >> 2];
  var $$emscripten$temp$0 = _ret5;
  HEAP32[$$emscripten$temp$0 >> 2] = $3$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $3$1;
  return _ret5;
  return null;
}

function _emscripten_bind_b2Body__SetTransform_p2($self, $arg0, $arg1) {
  var $0 = $self;
  __ZN6b2Body12SetTransformERK6b2Vec2f($0, $arg0, $arg1);
  return;
  return;
}

function _emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1($self, $arg0) {
  var $self$s2 = $self >> 2;
  var $guard_uninitialized = HEAP8[__ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $2 = HEAPF32[$self$s2 + 18];
  var $add3_i_i = HEAPF32[$self$s2 + 17] + (HEAPF32[$arg0 >> 2] - HEAPF32[$self$s2 + 11]) * $2;
  var $9 = (tempDoubleF32[0] = HEAPF32[$self$s2 + 16] + (HEAPF32[$arg0 + 4 >> 2] - HEAPF32[$self$s2 + 12]) * -$2, tempDoubleI32[0]);
  var $10$0 = $9;
  var $11 = (tempDoubleF32[0] = $add3_i_i, tempDoubleI32[0]);
  var $14$1 = $11 | 0;
  var $$emscripten$temp$0 = _ret6;
  HEAP32[$$emscripten$temp$0 >> 2] = 0 | $10$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $14$1;
  return _ret6;
  return null;
}

function _emscripten_bind_b2Body__ResetMassData_p0($self) {
  var $0 = $self;
  __ZN6b2Body13ResetMassDataEv($0);
  return;
  return;
}

function _emscripten_bind_b2Body__SetType_p1($self, $arg0) {
  var $0 = $self;
  __ZN6b2Body7SetTypeE10b2BodyType($0, $arg0);
  return;
  return;
}

function _emscripten_bind_b2Body__CreateFixture_p1($self, $arg0) {
  var $0 = $self;
  var $1 = $arg0;
  var $call = __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($0, $1);
  return $call;
  return null;
}

function _emscripten_bind_b2Body__CreateFixture_p2($self, $arg0, $arg1) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 28;
  var $def_i = __stackBase__;
  var $0 = $self;
  var $1 = $arg0;
  HEAP16[$def_i + 22 >> 1] = 1;
  HEAP16[$def_i + 24 >> 1] = -1;
  HEAP16[$def_i + 26 >> 1] = 0;
  var $shape_i_i_i = $def_i | 0;
  HEAP32[$def_i + 4 >> 2] = 0;
  HEAPF32[$def_i + 8 >> 2] = .20000000298023224;
  HEAPF32[$def_i + 12 >> 2] = 0;
  var $density_i_i_i = $def_i + 16 | 0;
  HEAP8[$def_i + 20 | 0] = 0;
  HEAP32[$shape_i_i_i >> 2] = $1;
  HEAPF32[$density_i_i_i >> 2] = $arg1;
  var $call_i = __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($0, $def_i);
  var $3 = $call_i;
  STACKTOP = __stackBase__;
  return $3;
  return null;
}

function _emscripten_bind_b2Body__SetMassData_p1($self, $arg0) {
  var $0 = $self;
  var $1 = $arg0;
  __ZN6b2Body11SetMassDataEPK10b2MassData($0, $1);
  return;
  return;
}

function _emscripten_bind_b2Body__GetWorldVector_p1($self, $arg0) {
  var $guard_uninitialized = HEAP8[__ZGVZ41emscripten_bind_b2Body__GetWorldVector_p1E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ41emscripten_bind_b2Body__GetWorldVector_p1E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $3 = HEAPF32[$self + 24 >> 2];
  var $4 = HEAPF32[$arg0 >> 2];
  var $6 = HEAPF32[$self + 20 >> 2];
  var $7 = HEAPF32[$arg0 + 4 >> 2];
  var $add_i_i = $6 * $4 + $3 * $7;
  var $8 = (tempDoubleF32[0] = $3 * $4 - $6 * $7, tempDoubleI32[0]);
  var $9$0 = $8;
  var $10 = (tempDoubleF32[0] = $add_i_i, tempDoubleI32[0]);
  var $13$1 = $10 | 0;
  var $$emscripten$temp$0 = _ret7;
  HEAP32[$$emscripten$temp$0 >> 2] = 0 | $9$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $13$1;
  return _ret7;
  return null;
}

function _emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1($self, $arg0) {
  var $self$s2 = $self >> 2;
  var $guard_uninitialized = HEAP8[__ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $3 = HEAPF32[$self$s2 + 6];
  var $4 = HEAPF32[$arg0 >> 2];
  var $6 = HEAPF32[$self$s2 + 5];
  var $7 = HEAPF32[$arg0 + 4 >> 2];
  var $12 = HEAPF32[$self$s2 + 18];
  var $add3_i_i_i = HEAPF32[$self$s2 + 17] + ($3 * $4 - $6 * $7 + HEAPF32[$self$s2 + 3] - HEAPF32[$self$s2 + 11]) * $12;
  var $17 = (tempDoubleF32[0] = HEAPF32[$self$s2 + 16] + ($6 * $4 + $3 * $7 + HEAPF32[$self$s2 + 4] - HEAPF32[$self$s2 + 12]) * -$12, tempDoubleI32[0]);
  var $18$0 = $17;
  var $19 = (tempDoubleF32[0] = $add3_i_i_i, tempDoubleI32[0]);
  var $22$1 = $19 | 0;
  var $$emscripten$temp$0 = _ret8;
  HEAP32[$$emscripten$temp$0 >> 2] = 0 | $18$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $22$1;
  return _ret8;
  return null;
}

function _emscripten_bind_b2Body__GetWorldPoint_p1($self, $arg0) {
  var $guard_uninitialized = HEAP8[__ZGVZ40emscripten_bind_b2Body__GetWorldPoint_p1E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ40emscripten_bind_b2Body__GetWorldPoint_p1E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $3 = HEAPF32[$self + 24 >> 2];
  var $4 = HEAPF32[$arg0 >> 2];
  var $6 = HEAPF32[$self + 20 >> 2];
  var $7 = HEAPF32[$arg0 + 4 >> 2];
  var $add17_i_i = $6 * $4 + $3 * $7 + HEAPF32[$self + 16 >> 2];
  var $12 = (tempDoubleF32[0] = $3 * $4 - $6 * $7 + HEAPF32[$self + 12 >> 2], tempDoubleI32[0]);
  var $13$0 = $12;
  var $14 = (tempDoubleF32[0] = $add17_i_i, tempDoubleI32[0]);
  var $17$1 = $14 | 0;
  var $$emscripten$temp$0 = _ret9;
  HEAP32[$$emscripten$temp$0 >> 2] = 0 | $13$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $17$1;
  return _ret9;
  return null;
}

function _emscripten_bind_b2Body__GetLocalVector_p1($self, $arg0) {
  var $guard_uninitialized = HEAP8[__ZGVZ41emscripten_bind_b2Body__GetLocalVector_p1E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ41emscripten_bind_b2Body__GetLocalVector_p1E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $3 = HEAPF32[$self + 24 >> 2];
  var $4 = HEAPF32[$arg0 >> 2];
  var $6 = HEAPF32[$self + 20 >> 2];
  var $7 = HEAPF32[$arg0 + 4 >> 2];
  var $add8_i_i = $4 * -$6 + $3 * $7;
  var $8 = (tempDoubleF32[0] = $3 * $4 + $6 * $7, tempDoubleI32[0]);
  var $9$0 = $8;
  var $10 = (tempDoubleF32[0] = $add8_i_i, tempDoubleI32[0]);
  var $13$1 = $10 | 0;
  var $$emscripten$temp$0 = _ret10;
  HEAP32[$$emscripten$temp$0 >> 2] = 0 | $9$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $13$1;
  return _ret10;
  return null;
}

function _emscripten_bind_b2Body__Dump_p0($self) {
  var $0 = $self;
  __ZN6b2Body4DumpEv($0);
  return;
  return;
}

function _emscripten_bind_b2Body__DestroyFixture_p1($self, $arg0) {
  var $0 = $self;
  var $1 = $arg0;
  __ZN6b2Body14DestroyFixtureEP9b2Fixture($0, $1);
  return;
  return;
}

function _emscripten_bind_b2Body__SetFixedRotation_p1($self, $arg0) {
  var $m_flags_i = $self + 4 | 0;
  var $0 = HEAP16[$m_flags_i >> 1];
  var $storemerge_i = $arg0 ? $0 | 16 : $0 & -17;
  HEAP16[$m_flags_i >> 1] = $storemerge_i;
  var $1 = $self;
  __ZN6b2Body13ResetMassDataEv($1);
  return;
  return;
}

function _emscripten_bind_b2StackAllocator____destroy___p0($self) {
  if (($self | 0) != 0) {
    if ((HEAP32[$self + 102400 >> 2] | 0) != 0) {
      ___assert_func(STRING_TABLE.__str72 | 0, 32, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocatorD2Ev | 0, STRING_TABLE.__str173 | 0);
    }
    if ((HEAP32[$self + 102796 >> 2] | 0) != 0) {
      ___assert_func(STRING_TABLE.__str72 | 0, 33, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocatorD2Ev | 0, STRING_TABLE.__str274 | 0);
    }
    var $2 = $self | 0;
    __ZdlPv($2);
  }
  return;
  return;
}

function _emscripten_bind_b2Filter__set_maskBits_p1($self, $arg0) {
  HEAP16[$self + 2 >> 1] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Filter__set_categoryBits_p1($self, $arg0) {
  HEAP16[$self >> 1] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Filter__get_groupIndex_p0($self) {
  return HEAP16[$self + 4 >> 1];
  return null;
}

function _emscripten_bind_b2Filter__set_groupIndex_p1($self, $arg0) {
  HEAP16[$self + 4 >> 1] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Filter__get_maskBits_p0($self) {
  return HEAP16[$self + 2 >> 1];
  return null;
}

function _emscripten_bind_b2Filter__get_categoryBits_p0($self) {
  return HEAP16[$self >> 1];
  return null;
}

function _emscripten_bind_b2FrictionJointDef__set_localAnchorA_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 20 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2FrictionJointDef__set_localAnchorB_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 28 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2FrictionJointDef__get_maxForce_p0($self) {
  return HEAPF32[$self + 36 >> 2];
  return null;
}

function _emscripten_bind_b2FrictionJointDef__get_localAnchorA_p0($self) {
  return $self + 20 | 0;
  return null;
}

function _emscripten_bind_b2FrictionJointDef__set_maxForce_p1($self, $arg0) {
  HEAPF32[$self + 36 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2FrictionJointDef__get_localAnchorB_p0($self) {
  return $self + 28 | 0;
  return null;
}

function _emscripten_bind_b2FrictionJointDef__set_maxTorque_p1($self, $arg0) {
  HEAPF32[$self + 40 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2FrictionJointDef__get_maxTorque_p0($self) {
  return HEAPF32[$self + 40 >> 2];
  return null;
}

function _emscripten_bind_b2FrictionJointDef__Initialize_p3($self, $arg0, $arg1, $arg2) {
  HEAP32[$self + 8 >> 2] = $arg0;
  HEAP32[$self + 12 >> 2] = $arg1;
  var $x_i_i_i = $arg2 | 0;
  var $sub_i_i_i = HEAPF32[$x_i_i_i >> 2] - HEAPF32[$arg0 + 12 >> 2];
  var $y_i_i_i = $arg2 + 4 | 0;
  var $sub4_i_i_i = HEAPF32[$y_i_i_i >> 2] - HEAPF32[$arg0 + 16 >> 2];
  var $8 = HEAPF32[$arg0 + 24 >> 2];
  var $10 = HEAPF32[$arg0 + 20 >> 2];
  var $add16_i_i_i = $sub_i_i_i * -$10 + $8 * $sub4_i_i_i;
  var $11 = $self + 20 | 0;
  var $12 = (tempDoubleF32[0] = $8 * $sub_i_i_i + $10 * $sub4_i_i_i, tempDoubleI32[0]);
  var $13$0 = $12;
  var $14 = (tempDoubleF32[0] = $add16_i_i_i, tempDoubleI32[0]);
  var $17$1 = $14 | 0;
  HEAP32[$11 >> 2] = 0 | $13$0;
  HEAP32[$11 + 4 >> 2] = $17$1;
  var $sub_i_i3_i = HEAPF32[$x_i_i_i >> 2] - HEAPF32[$arg1 + 12 >> 2];
  var $sub4_i_i6_i = HEAPF32[$y_i_i_i >> 2] - HEAPF32[$arg1 + 16 >> 2];
  var $26 = HEAPF32[$arg1 + 24 >> 2];
  var $28 = HEAPF32[$arg1 + 20 >> 2];
  var $add16_i_i15_i = $sub_i_i3_i * -$28 + $26 * $sub4_i_i6_i;
  var $29 = $self + 28 | 0;
  var $30 = (tempDoubleF32[0] = $26 * $sub_i_i3_i + $28 * $sub4_i_i6_i, tempDoubleI32[0]);
  var $31$0 = $30;
  var $32 = (tempDoubleF32[0] = $add16_i_i15_i, tempDoubleI32[0]);
  var $35$1 = $32 | 0;
  HEAP32[$29 >> 2] = 0 | $31$0;
  HEAP32[$29 + 4 >> 2] = $35$1;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__get_linearDamping_p0($self) {
  return HEAPF32[$self + 28 >> 2];
  return null;
}

function _emscripten_bind_b2BodyDef__get_awake_p0($self) {
  return (HEAP8[$self + 37 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2BodyDef__get_type_p0($self) {
  return HEAP32[$self >> 2];
  return null;
}

function _emscripten_bind_b2BodyDef__get_allowSleep_p0($self) {
  return (HEAP8[$self + 36 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2BodyDef__set_position_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 4 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__set_linearVelocity_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 16 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__get_bullet_p0($self) {
  return (HEAP8[$self + 39 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2BodyDef__get_userData_p0($self) {
  return HEAP32[$self + 44 >> 2];
  return null;
}

function _emscripten_bind_b2BodyDef__set_angularDamping_p1($self, $arg0) {
  HEAPF32[$self + 32 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__set_fixedRotation_p1($self, $arg0) {
  HEAP8[$self + 38 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__set_allowSleep_p1($self, $arg0) {
  HEAP8[$self + 36 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__get_gravityScale_p0($self) {
  return HEAPF32[$self + 48 >> 2];
  return null;
}

function _emscripten_bind_b2BodyDef__set_angularVelocity_p1($self, $arg0) {
  HEAPF32[$self + 24 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__set_userData_p1($self, $arg0) {
  HEAP32[$self + 44 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__get_position_p0($self) {
  return $self + 4 | 0;
  return null;
}

function _emscripten_bind_b2BodyDef__set_type_p1($self, $arg0) {
  HEAP32[$self >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__set_gravityScale_p1($self, $arg0) {
  HEAPF32[$self + 48 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__get_angularDamping_p0($self) {
  return HEAPF32[$self + 32 >> 2];
  return null;
}

function _emscripten_bind_b2BodyDef__set_bullet_p1($self, $arg0) {
  HEAP8[$self + 39 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__set_active_p1($self, $arg0) {
  HEAP8[$self + 40 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__set_angle_p1($self, $arg0) {
  HEAPF32[$self + 12 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__get_angle_p0($self) {
  return HEAPF32[$self + 12 >> 2];
  return null;
}

function _emscripten_bind_b2BodyDef__get_angularVelocity_p0($self) {
  return HEAPF32[$self + 24 >> 2];
  return null;
}

function _emscripten_bind_b2BodyDef__get_linearVelocity_p0($self) {
  return $self + 16 | 0;
  return null;
}

function _emscripten_bind_b2BodyDef__get_active_p0($self) {
  return (HEAP8[$self + 40 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2BodyDef__set_linearDamping_p1($self, $arg0) {
  HEAPF32[$self + 28 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2BodyDef__get_fixedRotation_p0($self) {
  return (HEAP8[$self + 38 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2BodyDef__set_awake_p1($self, $arg0) {
  HEAP8[$self + 37 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2Vec2__set_x_p1($self, $arg0) {
  HEAPF32[$self >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Vec2__Set_p2($self, $arg0, $arg1) {
  HEAPF32[$self >> 2] = $arg0;
  HEAPF32[$self + 4 >> 2] = $arg1;
  return;
  return;
}

function _emscripten_bind_b2Vec2__get_x_p0($self) {
  return HEAPF32[$self >> 2];
  return null;
}

function _emscripten_bind_b2Vec2__get_y_p0($self) {
  return HEAPF32[$self + 4 >> 2];
  return null;
}

function _emscripten_bind_b2Vec2__set_y_p1($self, $arg0) {
  HEAPF32[$self + 4 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Vec2__IsValid_p0($self) {
  var $0 = HEAPF32[$self >> 2];
  var $cmp_i_i = !isNaN($0) && !isNaN(0);
  var $or_cond_i = $cmp_i_i & $0 > -Infinity & $0 < Infinity;
  do {
    if ($or_cond_i) {
      var $1 = HEAPF32[$self + 4 >> 2];
      var $cmp_i1_i = !isNaN($1) && !isNaN(0);
      if (!($cmp_i1_i & $1 > -Infinity)) {
        var $2 = 0;
        break;
      }
      var $2 = $1 < Infinity;
    } else {
      var $2 = 0;
    }
  } while (0);
  var $2;
  return $2;
  return null;
}

function _emscripten_bind_b2Vec2__LengthSquared_p0($self) {
  var $0 = HEAPF32[$self >> 2];
  var $1 = HEAPF32[$self + 4 >> 2];
  return $0 * $0 + $1 * $1;
  return null;
}

function _emscripten_bind_b2Vec2__op_add_p1($self, $arg0) {
  var $x2_i = $self | 0;
  var $add_i = HEAPF32[$x2_i >> 2] + HEAPF32[$arg0 >> 2];
  HEAPF32[$x2_i >> 2] = $add_i;
  var $y3_i = $self + 4 | 0;
  var $add4_i = HEAPF32[$y3_i >> 2] + HEAPF32[$arg0 + 4 >> 2];
  HEAPF32[$y3_i >> 2] = $add4_i;
  return;
  return;
}

function _emscripten_bind_b2Vec2__SetZero_p0($self) {
  HEAPF32[$self >> 2] = 0;
  HEAPF32[$self + 4 >> 2] = 0;
  return;
  return;
}

function _emscripten_bind_b2Vec2__op_mul_p1($self, $arg0) {
  var $x_i = $self | 0;
  var $mul_i = HEAPF32[$x_i >> 2] * $arg0;
  HEAPF32[$x_i >> 2] = $mul_i;
  var $y_i = $self + 4 | 0;
  var $mul2_i = HEAPF32[$y_i >> 2] * $arg0;
  HEAPF32[$y_i >> 2] = $mul2_i;
  return;
  return;
}

function _emscripten_bind_b2Vec3__set_z_p1($self, $arg0) {
  HEAPF32[$self + 8 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Vec3__Set_p3($self, $arg0, $arg1, $arg2) {
  HEAPF32[$self >> 2] = $arg0;
  HEAPF32[$self + 4 >> 2] = $arg1;
  HEAPF32[$self + 8 >> 2] = $arg2;
  return;
  return;
}

function _emscripten_bind_b2Vec3__get_z_p0($self) {
  return HEAPF32[$self + 8 >> 2];
  return null;
}

function _emscripten_bind_b2Vec3__op_add_p1($self, $arg0) {
  var $x2_i = $self | 0;
  var $add_i = HEAPF32[$x2_i >> 2] + HEAPF32[$arg0 >> 2];
  HEAPF32[$x2_i >> 2] = $add_i;
  var $y3_i = $self + 4 | 0;
  var $add4_i = HEAPF32[$y3_i >> 2] + HEAPF32[$arg0 + 4 >> 2];
  HEAPF32[$y3_i >> 2] = $add4_i;
  var $z5_i = $self + 8 | 0;
  var $add6_i = HEAPF32[$z5_i >> 2] + HEAPF32[$arg0 + 8 >> 2];
  HEAPF32[$z5_i >> 2] = $add6_i;
  return;
  return;
}

function _emscripten_bind_b2Vec3__SetZero_p0($self) {
  HEAPF32[$self >> 2] = 0;
  HEAPF32[$self + 4 >> 2] = 0;
  HEAPF32[$self + 8 >> 2] = 0;
  return;
  return;
}

function _emscripten_bind_b2Vec3__op_mul_p1($self, $arg0) {
  var $x_i = $self | 0;
  var $mul_i = HEAPF32[$x_i >> 2] * $arg0;
  HEAPF32[$x_i >> 2] = $mul_i;
  var $y_i = $self + 4 | 0;
  var $mul2_i = HEAPF32[$y_i >> 2] * $arg0;
  HEAPF32[$y_i >> 2] = $mul2_i;
  var $z_i = $self + 8 | 0;
  var $mul3_i = HEAPF32[$z_i >> 2] * $arg0;
  HEAPF32[$z_i >> 2] = $mul3_i;
  return;
  return;
}

function _emscripten_bind_b2DistanceProxy__get_m_radius_p0($self) {
  return HEAPF32[$self + 24 >> 2];
  return null;
}

function _emscripten_bind_b2DistanceProxy__set_m_radius_p1($self, $arg0) {
  HEAPF32[$self + 24 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2DistanceProxy__get_m_vertices_p0($self) {
  return HEAP32[$self + 16 >> 2];
  return null;
}

function _emscripten_bind_b2StackAllocator__b2StackAllocator_p0() {
  var $call$s2;
  var $call = __Znwj(102800), $call$s2 = $call >> 2;
  var $0 = $call;
  HEAP32[$call$s2 + 25600] = 0;
  HEAP32[$call$s2 + 25601] = 0;
  HEAP32[$call$s2 + 25602] = 0;
  HEAP32[$call$s2 + 25699] = 0;
  return $0;
  return null;
}

function _emscripten_bind_b2StackAllocator__Allocate_p1($self, $arg0) {
  var $m_index_i$s2;
  var $add_ptr_i$s2;
  var $m_entryCount_i$s2;
  var $m_entryCount_i$s2 = ($self + 102796 | 0) >> 2;
  var $0 = HEAP32[$m_entryCount_i$s2];
  if (($0 | 0) < 32) {
    var $1 = $0;
  } else {
    ___assert_func(STRING_TABLE.__str72 | 0, 38, STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator8AllocateEi | 0, STRING_TABLE.__str375 | 0);
    var $1 = HEAP32[$m_entryCount_i$s2];
  }
  var $1;
  var $add_ptr_i$s2 = ($self + $1 * 12 + 102412 | 0) >> 2;
  HEAP32[($self + 102416 >> 2) + ($1 * 3 | 0)] = $arg0;
  var $m_index_i$s2 = ($self + 102400 | 0) >> 2;
  var $2 = HEAP32[$m_index_i$s2];
  if (($2 + $arg0 | 0) > 102400) {
    var $call_i_i = _malloc($arg0);
    HEAP32[$add_ptr_i$s2] = $call_i_i;
    HEAP8[$self + $1 * 12 + 102420 | 0] = 1;
  } else {
    var $add_ptr8_i = $self + $2 | 0;
    HEAP32[$add_ptr_i$s2] = $add_ptr8_i;
    HEAP8[$self + $1 * 12 + 102420 | 0] = 0;
    var $add12_i = HEAP32[$m_index_i$s2] + $arg0 | 0;
    HEAP32[$m_index_i$s2] = $add12_i;
  }
  var $m_allocation_i = $self + 102404 | 0;
  var $add13_i = HEAP32[$m_allocation_i >> 2] + $arg0 | 0;
  HEAP32[$m_allocation_i >> 2] = $add13_i;
  var $m_maxAllocation_i = $self + 102408 | 0;
  var $5 = HEAP32[$m_maxAllocation_i >> 2];
  var $cond_i_i = ($5 | 0) > ($add13_i | 0) ? $5 : $add13_i;
  HEAP32[$m_maxAllocation_i >> 2] = $cond_i_i;
  var $inc_i = HEAP32[$m_entryCount_i$s2] + 1 | 0;
  HEAP32[$m_entryCount_i$s2] = $inc_i;
  return HEAP32[$add_ptr_i$s2];
  return null;
}

function _emscripten_bind_b2StackAllocator__Free_p1($self, $arg0) {
  __ZN16b2StackAllocator4FreeEPv($self, $arg0);
  return;
  return;
}

function _emscripten_bind_b2DestructionListener__SayGoodbye_p1($self, $arg0) {
  var $1 = HEAP32[HEAP32[$self >> 2] + 8 >> 2];
  FUNCTION_TABLE[$1]($self, $arg0);
  return;
  return;
}

function _emscripten_bind_b2Filter____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2Filter__b2Filter_p0() {
  var $call$s1;
  var $call = __Znwj(6), $call$s1 = $call >> 1;
  HEAP16[$call$s1] = 1;
  HEAP16[$call$s1 + 1] = -1;
  HEAP16[$call$s1 + 2] = 0;
  return $call;
  return null;
}

function _emscripten_bind_b2FrictionJointDef____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2FrictionJointDef__b2FrictionJointDef_p0() {
  var $call$s2;
  var $call = __Znwj(44), $call$s2 = $call >> 2;
  var $0 = $call;
  var $type_i_i_i = $call;
  HEAP32[$call$s2 + 1] = 0;
  HEAP32[$call$s2 + 2] = 0;
  HEAP32[$call$s2 + 3] = 0;
  HEAP8[$call + 16 | 0] = 0;
  HEAP32[$type_i_i_i >> 2] = 9;
  HEAPF32[$call$s2 + 5] = 0;
  HEAPF32[$call$s2 + 6] = 0;
  HEAPF32[$call$s2 + 7] = 0;
  HEAPF32[$call$s2 + 8] = 0;
  HEAPF32[$call$s2 + 9] = 0;
  HEAPF32[$call$s2 + 10] = 0;
  return $0;
  return null;
}

function _emscripten_bind_b2BodyDef__b2BodyDef_p0() {
  var $x_i1_i_i$s2;
  var $call$s2;
  var $call = __Znwj(52), $call$s2 = $call >> 2;
  var $0 = $call;
  HEAP32[$call$s2 + 11] = 0;
  var $x_i1_i_i$s2 = ($call + 4 | 0) >> 2;
  var $2 = $call + 36 | 0;
  HEAP32[$x_i1_i_i$s2] = 0;
  HEAP32[$x_i1_i_i$s2 + 1] = 0;
  HEAP32[$x_i1_i_i$s2 + 2] = 0;
  HEAP32[$x_i1_i_i$s2 + 3] = 0;
  HEAP32[$x_i1_i_i$s2 + 4] = 0;
  HEAP32[$x_i1_i_i$s2 + 5] = 0;
  HEAP32[$x_i1_i_i$s2 + 6] = 0;
  HEAP32[$x_i1_i_i$s2 + 7] = 0;
  HEAP8[$2] = 1;
  HEAP8[$call + 37 | 0] = 1;
  HEAP8[$call + 38 | 0] = 0;
  HEAP8[$call + 39 | 0] = 0;
  HEAP32[$call$s2] = 0;
  HEAP8[$call + 40 | 0] = 1;
  HEAPF32[$call$s2 + 12] = 1;
  return $0;
  return null;
}

function _emscripten_bind_b2BodyDef____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2Vec2__Normalize_p0($self) {
  var $x_i_i = $self | 0;
  var $0 = HEAPF32[$x_i_i >> 2];
  var $y_i_i = $self + 4 | 0;
  var $1 = HEAPF32[$y_i_i >> 2];
  var $add_i_i = $0 * $0 + $1 * $1;
  var $call_i_i_i = _sqrtf($add_i_i);
  if ($call_i_i_i < 1.1920928955078125e-7) {
    var $retval_0_i = 0;
  } else {
    var $div_i = 1 / $call_i_i_i;
    var $mul_i = $0 * $div_i;
    HEAPF32[$x_i_i >> 2] = $mul_i;
    var $mul2_i = $1 * $div_i;
    HEAPF32[$y_i_i >> 2] = $mul2_i;
    var $retval_0_i = $call_i_i_i;
  }
  var $retval_0_i;
  return $retval_0_i;
  return null;
}

function _emscripten_bind_b2Vec2__b2Vec2_p0() {
  var $call = __Znwj(8);
  return $call;
  return null;
}

function _emscripten_bind_b2Vec2__b2Vec2_p2($arg0, $arg1) {
  var $call = __Znwj(8);
  var $0 = $call;
  HEAPF32[$call >> 2] = $arg0;
  HEAPF32[$call + 4 >> 2] = $arg1;
  return $0;
  return null;
}

function _emscripten_bind_b2Vec2__Skew_p0($self) {
  var $guard_uninitialized = HEAP8[__ZGVZ31emscripten_bind_b2Vec2__Skew_p0E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ31emscripten_bind_b2Vec2__Skew_p0E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $3 = HEAPF32[$self >> 2];
  var $4 = (tempDoubleF32[0] = -HEAPF32[$self + 4 >> 2], tempDoubleI32[0]);
  var $5$0 = $4;
  var $6 = (tempDoubleF32[0] = $3, tempDoubleI32[0]);
  var $9$1 = $6 | 0;
  var $$emscripten$temp$0 = _ret11;
  HEAP32[$$emscripten$temp$0 >> 2] = 0 | $5$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $9$1;
  return _ret11;
  return null;
}

function _emscripten_bind_b2Vec2__Length_p0($self) {
  var $0 = HEAPF32[$self >> 2];
  var $1 = HEAPF32[$self + 4 >> 2];
  var $add_i = $0 * $0 + $1 * $1;
  var $call_i_i = _sqrtf($add_i);
  return $call_i_i;
  return null;
}

function _emscripten_bind_b2Vec2____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2Vec2__op_sub_p0($self) {
  var $guard_uninitialized = HEAP8[__ZGVZ33emscripten_bind_b2Vec2__op_sub_p0E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ33emscripten_bind_b2Vec2__op_sub_p0E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $sub2_i = -HEAPF32[$self + 4 >> 2];
  var $4 = (tempDoubleF32[0] = -HEAPF32[$self >> 2], tempDoubleI32[0]);
  var $5$0 = $4;
  var $6 = (tempDoubleF32[0] = $sub2_i, tempDoubleI32[0]);
  var $9$1 = $6 | 0;
  var $$emscripten$temp$0 = _ret12;
  HEAP32[$$emscripten$temp$0 >> 2] = 0 | $5$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $9$1;
  return _ret12;
  return null;
}

function _emscripten_bind_b2Vec3____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2Vec3__b2Vec3_p0() {
  var $call = __Znwj(12);
  return $call;
  return null;
}

function _emscripten_bind_b2Vec3__b2Vec3_p3($arg0, $arg1, $arg2) {
  var $call$s2;
  var $call = __Znwj(12), $call$s2 = $call >> 2;
  var $0 = $call;
  HEAPF32[$call$s2] = $arg0;
  HEAPF32[$call$s2 + 1] = $arg1;
  HEAPF32[$call$s2 + 2] = $arg2;
  return $0;
  return null;
}

function _emscripten_bind_b2Vec3__op_sub_p0($self) {
  var $guard_uninitialized = HEAP8[__ZGVZ33emscripten_bind_b2Vec3__op_sub_p0E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ33emscripten_bind_b2Vec3__op_sub_p0E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $sub_i = -HEAPF32[$self >> 2];
  var $sub2_i = -HEAPF32[$self + 4 >> 2];
  var $sub3_i = -HEAPF32[$self + 8 >> 2];
  HEAPF32[_ret13 >> 2] = $sub_i;
  HEAPF32[_ret13 + 4 >> 2] = $sub2_i;
  HEAPF32[_ret13 + 8 >> 2] = $sub3_i;
  return _ret13;
  return null;
}

function _emscripten_bind_b2DistanceProxy__Set_p2($self, $arg0, $arg1) {
  __ZN15b2DistanceProxy3SetEPK7b2Shapei($self, $arg0, $arg1);
  return;
  return;
}

function _emscripten_bind_b2DistanceProxy__b2DistanceProxy_p0() {
  var $call$s2;
  var $call = __Znwj(28), $call$s2 = $call >> 2;
  var $0 = $call;
  HEAP32[$call$s2 + 4] = 0;
  HEAP32[$call$s2 + 5] = 0;
  HEAPF32[$call$s2 + 6] = 0;
  return $0;
  return null;
}

function _emscripten_bind_b2DistanceProxy____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2DistanceProxy__GetSupportVertex_p1($self, $arg0) {
  var $0$s2;
  var $0 = HEAP32[$self + 16 >> 2], $0$s2 = $0 >> 2;
  var $1 = HEAP32[$self + 20 >> 2];
  var $cmp8_i = ($1 | 0) > 1;
  $for_body_lr_ph_i$$_ZNK15b2DistanceProxy16GetSupportVertexERK6b2Vec2_exit$2 : do {
    if ($cmp8_i) {
      var $2 = HEAPF32[$arg0 + 4 >> 2];
      var $4 = HEAPF32[$arg0 >> 2];
      var $bestIndex_09_i = 0;
      var $bestValue_010_i = HEAPF32[$0$s2] * $4 + HEAPF32[$0$s2 + 1] * $2;
      var $i_011_i = 1;
      while (1) {
        var $i_011_i;
        var $bestValue_010_i;
        var $bestIndex_09_i;
        var $add_i7_i = HEAPF32[($i_011_i << 3 >> 2) + $0$s2] * $4 + HEAPF32[(($i_011_i << 3) + 4 >> 2) + $0$s2] * $2;
        var $cmp5_i = $add_i7_i > $bestValue_010_i;
        var $bestIndex_1_i = $cmp5_i ? $i_011_i : $bestIndex_09_i;
        var $bestValue_1_i = $cmp5_i ? $add_i7_i : $bestValue_010_i;
        var $inc_i = $i_011_i + 1 | 0;
        if (($inc_i | 0) == ($1 | 0)) {
          var $bestIndex_0_lcssa_i = $bestIndex_1_i;
          break $for_body_lr_ph_i$$_ZNK15b2DistanceProxy16GetSupportVertexERK6b2Vec2_exit$2;
        }
        var $bestIndex_09_i = $bestIndex_1_i;
        var $bestValue_010_i = $bestValue_1_i;
        var $i_011_i = $inc_i;
      }
    } else {
      var $bestIndex_0_lcssa_i = 0;
    }
  } while (0);
  var $bestIndex_0_lcssa_i;
  return ($bestIndex_0_lcssa_i << 3) + $0 | 0;
  return null;
}

function _emscripten_bind_b2DistanceProxy__get_m_count_p0($self) {
  return HEAP32[$self + 20 >> 2];
  return null;
}

function _emscripten_bind_b2DistanceProxy__GetVertexCount_p0($self) {
  return HEAP32[$self + 20 >> 2];
  return null;
}

function _emscripten_bind_b2DistanceProxy__GetSupport_p1($self, $arg0) {
  var $0$s2;
  var $0$s2 = HEAP32[$self + 16 >> 2] >> 2;
  var $1 = HEAP32[$self + 20 >> 2];
  var $cmp8_i = ($1 | 0) > 1;
  $for_body_lr_ph_i$$_ZNK15b2DistanceProxy10GetSupportERK6b2Vec2_exit$16 : do {
    if ($cmp8_i) {
      var $2 = HEAPF32[$arg0 + 4 >> 2];
      var $4 = HEAPF32[$arg0 >> 2];
      var $bestIndex_09_i = 0;
      var $bestValue_010_i = HEAPF32[$0$s2] * $4 + HEAPF32[$0$s2 + 1] * $2;
      var $i_011_i = 1;
      while (1) {
        var $i_011_i;
        var $bestValue_010_i;
        var $bestIndex_09_i;
        var $add_i7_i = HEAPF32[($i_011_i << 3 >> 2) + $0$s2] * $4 + HEAPF32[(($i_011_i << 3) + 4 >> 2) + $0$s2] * $2;
        var $cmp5_i = $add_i7_i > $bestValue_010_i;
        var $bestIndex_1_i = $cmp5_i ? $i_011_i : $bestIndex_09_i;
        var $bestValue_1_i = $cmp5_i ? $add_i7_i : $bestValue_010_i;
        var $inc_i = $i_011_i + 1 | 0;
        if (($inc_i | 0) == ($1 | 0)) {
          var $bestIndex_0_lcssa_i = $bestIndex_1_i;
          break $for_body_lr_ph_i$$_ZNK15b2DistanceProxy10GetSupportERK6b2Vec2_exit$16;
        }
        var $bestIndex_09_i = $bestIndex_1_i;
        var $bestValue_010_i = $bestValue_1_i;
        var $i_011_i = $inc_i;
      }
    } else {
      var $bestIndex_0_lcssa_i = 0;
    }
  } while (0);
  var $bestIndex_0_lcssa_i;
  return $bestIndex_0_lcssa_i;
  return null;
}

function _emscripten_bind_b2DistanceProxy__set_m_vertices_p1($self, $arg0) {
  HEAP32[$self + 16 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2DistanceProxy__set_m_count_p1($self, $arg0) {
  HEAP32[$self + 20 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2FixtureDef__get_isSensor_p0($self) {
  return (HEAP8[$self + 20 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2FixtureDef__set_userData_p1($self, $arg0) {
  HEAP32[$self + 4 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2FixtureDef__set_shape_p1($self, $arg0) {
  HEAP32[$self >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2FixtureDef__get_density_p0($self) {
  return HEAPF32[$self + 16 >> 2];
  return null;
}

function _emscripten_bind_b2FixtureDef__get_shape_p0($self) {
  return HEAP32[$self >> 2];
  return null;
}

function _emscripten_bind_b2FixtureDef__set_density_p1($self, $arg0) {
  HEAPF32[$self + 16 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2FixtureDef__set_restitution_p1($self, $arg0) {
  HEAPF32[$self + 12 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2FixtureDef__get_restitution_p0($self) {
  return HEAPF32[$self + 12 >> 2];
  return null;
}

function _emscripten_bind_b2FixtureDef__set_isSensor_p1($self, $arg0) {
  HEAP8[$self + 20 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2FixtureDef__get_filter_p0($self) {
  return $self + 22 | 0;
  return null;
}

function _emscripten_bind_b2FixtureDef__get_friction_p0($self) {
  return HEAPF32[$self + 8 >> 2];
  return null;
}

function _emscripten_bind_b2FixtureDef__set_friction_p1($self, $arg0) {
  HEAPF32[$self + 8 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2FixtureDef__get_userData_p0($self) {
  return HEAP32[$self + 4 >> 2];
  return null;
}

function _emscripten_bind_b2PrismaticJointDef__set_localAnchorA_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 20 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2PrismaticJointDef__set_localAnchorB_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 28 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2PrismaticJointDef__get_motorSpeed_p0($self) {
  return HEAPF32[$self + 68 >> 2];
  return null;
}

function _emscripten_bind_b2PrismaticJointDef__get_enableMotor_p0($self) {
  return (HEAP8[$self + 60 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2PrismaticJointDef__get_referenceAngle_p0($self) {
  return HEAPF32[$self + 44 >> 2];
  return null;
}

function _emscripten_bind_b2PrismaticJointDef__set_enableLimit_p1($self, $arg0) {
  HEAP8[$self + 48 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2PrismaticJointDef__set_motorSpeed_p1($self, $arg0) {
  HEAPF32[$self + 68 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2PrismaticJointDef__get_localAxisA_p0($self) {
  return $self + 36 | 0;
  return null;
}

function _emscripten_bind_b2PrismaticJointDef__set_upperTranslation_p1($self, $arg0) {
  HEAPF32[$self + 56 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2PrismaticJointDef__Initialize_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var $arg1$s2 = $arg1 >> 2;
  HEAP32[$self + 8 >> 2] = $arg0;
  HEAP32[$self + 12 >> 2] = $arg1;
  var $x_i_i_i = $arg2 | 0;
  var $sub_i_i_i = HEAPF32[$x_i_i_i >> 2] - HEAPF32[$arg0 + 12 >> 2];
  var $y_i_i_i = $arg2 + 4 | 0;
  var $sub4_i_i_i = HEAPF32[$y_i_i_i >> 2] - HEAPF32[$arg0 + 16 >> 2];
  var $7 = $arg0 + 24 | 0;
  var $8 = HEAPF32[$7 >> 2];
  var $9 = $arg0 + 20 | 0;
  var $10 = HEAPF32[$9 >> 2];
  var $add16_i_i_i = $sub_i_i_i * -$10 + $8 * $sub4_i_i_i;
  var $11 = $self + 20 | 0;
  var $12 = (tempDoubleF32[0] = $8 * $sub_i_i_i + $10 * $sub4_i_i_i, tempDoubleI32[0]);
  var $13$0 = $12;
  var $14 = (tempDoubleF32[0] = $add16_i_i_i, tempDoubleI32[0]);
  var $17$1 = $14 | 0;
  HEAP32[$11 >> 2] = 0 | $13$0;
  HEAP32[$11 + 4 >> 2] = $17$1;
  var $sub_i_i14_i = HEAPF32[$x_i_i_i >> 2] - HEAPF32[$arg1$s2 + 3];
  var $sub4_i_i17_i = HEAPF32[$y_i_i_i >> 2] - HEAPF32[$arg1$s2 + 4];
  var $26 = HEAPF32[$arg1$s2 + 6];
  var $28 = HEAPF32[$arg1$s2 + 5];
  var $add16_i_i26_i = $sub_i_i14_i * -$28 + $26 * $sub4_i_i17_i;
  var $29 = $self + 28 | 0;
  var $30 = (tempDoubleF32[0] = $26 * $sub_i_i14_i + $28 * $sub4_i_i17_i, tempDoubleI32[0]);
  var $31$0 = $30;
  var $32 = (tempDoubleF32[0] = $add16_i_i26_i, tempDoubleI32[0]);
  var $35$1 = $32 | 0;
  HEAP32[$29 >> 2] = 0 | $31$0;
  HEAP32[$29 + 4 >> 2] = $35$1;
  var $37 = HEAPF32[$7 >> 2];
  var $38 = HEAPF32[$arg3 >> 2];
  var $39 = HEAPF32[$9 >> 2];
  var $40 = HEAPF32[$arg3 + 4 >> 2];
  var $add8_i_i_i = $38 * -$39 + $37 * $40;
  var $41 = $self + 36 | 0;
  var $42 = (tempDoubleF32[0] = $37 * $38 + $39 * $40, tempDoubleI32[0]);
  var $43$0 = $42;
  var $44 = (tempDoubleF32[0] = $add8_i_i_i, tempDoubleI32[0]);
  var $47$1 = $44 | 0;
  HEAP32[$41 >> 2] = 0 | $43$0;
  HEAP32[$41 + 4 >> 2] = $47$1;
  var $sub_i = HEAPF32[$arg1$s2 + 14] - HEAPF32[$arg0 + 56 >> 2];
  HEAPF32[$self + 44 >> 2] = $sub_i;
  return;
  return;
}

function _emscripten_bind_b2PrismaticJointDef__set_lowerTranslation_p1($self, $arg0) {
  HEAPF32[$self + 52 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2PrismaticJointDef__get_upperTranslation_p0($self) {
  return HEAPF32[$self + 56 >> 2];
  return null;
}

function _emscripten_bind_b2PrismaticJointDef__get_enableLimit_p0($self) {
  return (HEAP8[$self + 48 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2PrismaticJointDef__set_referenceAngle_p1($self, $arg0) {
  HEAPF32[$self + 44 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2PrismaticJointDef__get_localAnchorA_p0($self) {
  return $self + 20 | 0;
  return null;
}

function _emscripten_bind_b2PrismaticJointDef__get_localAnchorB_p0($self) {
  return $self + 28 | 0;
  return null;
}

function _emscripten_bind_b2PrismaticJointDef__get_maxMotorForce_p0($self) {
  return HEAPF32[$self + 64 >> 2];
  return null;
}

function _emscripten_bind_b2PrismaticJointDef__set_maxMotorForce_p1($self, $arg0) {
  HEAPF32[$self + 64 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2PrismaticJointDef__set_enableMotor_p1($self, $arg0) {
  HEAP8[$self + 60 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2PrismaticJointDef__get_lowerTranslation_p0($self) {
  return HEAPF32[$self + 52 >> 2];
  return null;
}

function _emscripten_bind_b2PrismaticJointDef__set_localAxisA_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 36 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2Rot__set_c_p1($self, $arg0) {
  HEAPF32[$self + 4 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Rot__SetIdentity_p0($self) {
  HEAPF32[$self >> 2] = 0;
  HEAPF32[$self + 4 >> 2] = 1;
  return;
  return;
}

function _emscripten_bind_b2Rot__get_c_p0($self) {
  return HEAPF32[$self + 4 >> 2];
  return null;
}

function _emscripten_bind_b2WheelJointDef__set_localAnchorA_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 20 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2WheelJointDef__set_motorSpeed_p1($self, $arg0) {
  HEAPF32[$self + 52 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2WheelJointDef__get_localAxisA_p0($self) {
  return $self + 36 | 0;
  return null;
}

function _emscripten_bind_b2WheelJointDef__set_localAnchorB_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 28 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2WheelJointDef__get_frequencyHz_p0($self) {
  return HEAPF32[$self + 56 >> 2];
  return null;
}

function _emscripten_bind_b2WheelJointDef__set_maxMotorTorque_p1($self, $arg0) {
  HEAPF32[$self + 48 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2WheelJointDef__get_enableMotor_p0($self) {
  return (HEAP8[$self + 44 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2WheelJointDef__get_localAnchorA_p0($self) {
  return $self + 20 | 0;
  return null;
}

function _emscripten_bind_b2WheelJointDef__get_maxMotorTorque_p0($self) {
  return HEAPF32[$self + 48 >> 2];
  return null;
}

function _emscripten_bind_b2WheelJointDef__get_localAnchorB_p0($self) {
  return $self + 28 | 0;
  return null;
}

function _emscripten_bind_b2WheelJointDef__get_dampingRatio_p0($self) {
  return HEAPF32[$self + 60 >> 2];
  return null;
}

function _emscripten_bind_b2WheelJointDef__set_enableMotor_p1($self, $arg0) {
  HEAP8[$self + 44 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2WheelJointDef__set_frequencyHz_p1($self, $arg0) {
  HEAPF32[$self + 56 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2WheelJointDef__Initialize_p4($self, $arg0, $arg1, $arg2, $arg3) {
  HEAP32[$self + 8 >> 2] = $arg0;
  HEAP32[$self + 12 >> 2] = $arg1;
  var $x_i_i_i = $arg2 | 0;
  var $sub_i_i_i = HEAPF32[$x_i_i_i >> 2] - HEAPF32[$arg0 + 12 >> 2];
  var $y_i_i_i = $arg2 + 4 | 0;
  var $sub4_i_i_i = HEAPF32[$y_i_i_i >> 2] - HEAPF32[$arg0 + 16 >> 2];
  var $7 = $arg0 + 24 | 0;
  var $8 = HEAPF32[$7 >> 2];
  var $9 = $arg0 + 20 | 0;
  var $10 = HEAPF32[$9 >> 2];
  var $add16_i_i_i = $sub_i_i_i * -$10 + $8 * $sub4_i_i_i;
  var $11 = $self + 20 | 0;
  var $12 = (tempDoubleF32[0] = $8 * $sub_i_i_i + $10 * $sub4_i_i_i, tempDoubleI32[0]);
  var $13$0 = $12;
  var $14 = (tempDoubleF32[0] = $add16_i_i_i, tempDoubleI32[0]);
  var $17$1 = $14 | 0;
  HEAP32[$11 >> 2] = 0 | $13$0;
  HEAP32[$11 + 4 >> 2] = $17$1;
  var $sub_i_i13_i = HEAPF32[$x_i_i_i >> 2] - HEAPF32[$arg1 + 12 >> 2];
  var $sub4_i_i16_i = HEAPF32[$y_i_i_i >> 2] - HEAPF32[$arg1 + 16 >> 2];
  var $26 = HEAPF32[$arg1 + 24 >> 2];
  var $28 = HEAPF32[$arg1 + 20 >> 2];
  var $add16_i_i25_i = $sub_i_i13_i * -$28 + $26 * $sub4_i_i16_i;
  var $29 = $self + 28 | 0;
  var $30 = (tempDoubleF32[0] = $26 * $sub_i_i13_i + $28 * $sub4_i_i16_i, tempDoubleI32[0]);
  var $31$0 = $30;
  var $32 = (tempDoubleF32[0] = $add16_i_i25_i, tempDoubleI32[0]);
  var $35$1 = $32 | 0;
  HEAP32[$29 >> 2] = 0 | $31$0;
  HEAP32[$29 + 4 >> 2] = $35$1;
  var $37 = HEAPF32[$7 >> 2];
  var $38 = HEAPF32[$arg3 >> 2];
  var $39 = HEAPF32[$9 >> 2];
  var $40 = HEAPF32[$arg3 + 4 >> 2];
  var $add8_i_i_i = $38 * -$39 + $37 * $40;
  var $41 = $self + 36 | 0;
  var $42 = (tempDoubleF32[0] = $37 * $38 + $39 * $40, tempDoubleI32[0]);
  var $43$0 = $42;
  var $44 = (tempDoubleF32[0] = $add8_i_i_i, tempDoubleI32[0]);
  var $47$1 = $44 | 0;
  HEAP32[$41 >> 2] = 0 | $43$0;
  HEAP32[$41 + 4 >> 2] = $47$1;
  return;
  return;
}

function _emscripten_bind_b2WheelJointDef__set_dampingRatio_p1($self, $arg0) {
  HEAPF32[$self + 60 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2WheelJointDef__set_localAxisA_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 36 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2WheelJointDef__get_motorSpeed_p0($self) {
  return HEAPF32[$self + 52 >> 2];
  return null;
}

function _emscripten_bind_b2RevoluteJointDef__set_localAnchorA_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 20 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2RevoluteJointDef__get_lowerAngle_p0($self) {
  return HEAPF32[$self + 44 >> 2];
  return null;
}

function _emscripten_bind_b2RevoluteJointDef__set_upperAngle_p1($self, $arg0) {
  HEAPF32[$self + 48 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2RevoluteJointDef__set_localAnchorB_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 28 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2RevoluteJointDef__get_enableLimit_p0($self) {
  return (HEAP8[$self + 40 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2RevoluteJointDef__set_lowerAngle_p1($self, $arg0) {
  HEAPF32[$self + 44 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2DistanceProxy__GetVertex_p1($self, $arg0) {
  var __label__;
  var $cmp_i = ($arg0 | 0) > -1;
  do {
    if ($cmp_i) {
      if ((HEAP32[$self + 20 >> 2] | 0) > ($arg0 | 0)) {
        __label__ = 3;
        break;
      }
      __label__ = 2;
      break;
    } else {
      __label__ = 2;
    }
  } while (0);
  if (__label__ == 2) {
    ___assert_func(STRING_TABLE.__str3 | 0, 103, STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi | 0, STRING_TABLE.__str4 | 0);
  }
  return ($arg0 << 3) + HEAP32[$self + 16 >> 2] | 0;
  return null;
}

function _emscripten_bind_b2FixtureDef____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2FixtureDef__b2FixtureDef_p0() {
  var $call = __Znwj(28);
  HEAP16[$call + 22 >> 1] = 1;
  HEAP16[$call + 24 >> 1] = -1;
  HEAP16[$call + 26 >> 1] = 0;
  HEAP32[$call >> 2] = 0;
  HEAP32[$call + 4 >> 2] = 0;
  HEAPF32[$call + 8 >> 2] = .20000000298023224;
  HEAPF32[$call + 12 >> 2] = 0;
  HEAPF32[$call + 16 >> 2] = 0;
  HEAP8[$call + 20 | 0] = 0;
  return $call;
  return null;
}

function _emscripten_bind_b2FixtureDef__set_filter_p1($self, $arg0) {
  var $1$s1;
  var $0$s1;
  var $0$s1 = ($self + 22 | 0) >> 1;
  var $1$s1 = $arg0 >> 1;
  HEAP16[$0$s1] = HEAP16[$1$s1];
  HEAP16[$0$s1 + 1] = HEAP16[$1$s1 + 1];
  HEAP16[$0$s1 + 2] = HEAP16[$1$s1 + 2];
  return;
  return;
}

function _emscripten_bind_b2PrismaticJointDef__b2PrismaticJointDef_p0() {
  var $call$s2;
  var $call = __Znwj(72), $call$s2 = $call >> 2;
  var $0 = $call;
  var $type_i_i_i = $call;
  HEAP32[$call$s2 + 1] = 0;
  HEAP32[$call$s2 + 2] = 0;
  HEAP32[$call$s2 + 3] = 0;
  HEAP8[$call + 16 | 0] = 0;
  HEAP32[$type_i_i_i >> 2] = 2;
  HEAPF32[$call$s2 + 5] = 0;
  HEAPF32[$call$s2 + 6] = 0;
  HEAPF32[$call$s2 + 7] = 0;
  HEAPF32[$call$s2 + 8] = 0;
  HEAPF32[$call$s2 + 9] = 1;
  HEAPF32[$call$s2 + 10] = 0;
  HEAPF32[$call$s2 + 11] = 0;
  HEAP8[$call + 48 | 0] = 0;
  HEAPF32[$call$s2 + 13] = 0;
  HEAPF32[$call$s2 + 14] = 0;
  HEAP8[$call + 60 | 0] = 0;
  HEAPF32[$call$s2 + 16] = 0;
  HEAPF32[$call$s2 + 17] = 0;
  return $0;
  return null;
}

function _emscripten_bind_b2PrismaticJointDef____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2Rot____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2Rot__Set_p1($self, $arg0) {
  var $call_i = _sinf($arg0);
  HEAPF32[$self >> 2] = $call_i;
  var $call2_i = _cosf($arg0);
  HEAPF32[$self + 4 >> 2] = $call2_i;
  return;
  return;
}

function _emscripten_bind_b2Rot__GetAngle_p0($self) {
  var $0 = HEAPF32[$self >> 2];
  var $1 = HEAPF32[$self + 4 >> 2];
  var $call_i_i = _atan2f($0, $1);
  return $call_i_i;
  return null;
}

function _emscripten_bind_b2Rot__GetYAxis_p0($self) {
  var $guard_uninitialized = HEAP8[__ZGVZ34emscripten_bind_b2Rot__GetYAxis_p0E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ34emscripten_bind_b2Rot__GetYAxis_p0E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $3 = HEAPF32[$self + 4 >> 2];
  var $4 = (tempDoubleF32[0] = -HEAPF32[$self >> 2], tempDoubleI32[0]);
  var $5$0 = $4;
  var $6 = (tempDoubleF32[0] = $3, tempDoubleI32[0]);
  var $9$1 = $6 | 0;
  var $$emscripten$temp$0 = _ret14;
  HEAP32[$$emscripten$temp$0 >> 2] = 0 | $5$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $9$1;
  return _ret14;
  return null;
}

function _emscripten_bind_b2Rot__GetXAxis_p0($self) {
  var $guard_uninitialized = HEAP8[__ZGVZ34emscripten_bind_b2Rot__GetXAxis_p0E3ret] << 24 >> 24 == 0;
  do {
    if ($guard_uninitialized) {
      var $1 = ___cxa_guard_acquire(__ZGVZ34emscripten_bind_b2Rot__GetXAxis_p0E3ret);
      if (($1 | 0) == 0) {
        break;
      }
    }
  } while (0);
  var $3 = HEAPF32[$self >> 2];
  var $4 = (tempDoubleF32[0] = HEAPF32[$self + 4 >> 2], tempDoubleI32[0]);
  var $5$0 = $4;
  var $6 = (tempDoubleF32[0] = $3, tempDoubleI32[0]);
  var $9$1 = $6 | 0;
  var $$emscripten$temp$0 = _ret15;
  HEAP32[$$emscripten$temp$0 >> 2] = 0 | $5$0;
  HEAP32[$$emscripten$temp$0 + 4 >> 2] = $9$1;
  return _ret15;
  return null;
}

function _emscripten_bind_b2Rot__b2Rot_p0() {
  var $call = __Znwj(8);
  return $call;
  return null;
}

function _emscripten_bind_b2Rot__b2Rot_p1($arg0) {
  var $call = __Znwj(8);
  var $0 = $call;
  var $call_i_i = _sinf($arg0);
  HEAPF32[$call >> 2] = $call_i_i;
  var $call2_i_i = _cosf($arg0);
  HEAPF32[$call + 4 >> 2] = $call2_i_i;
  return $0;
  return null;
}

function _emscripten_bind_b2WheelJointDef____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2WheelJointDef__b2WheelJointDef_p0() {
  var $call$s2;
  var $call = __Znwj(64), $call$s2 = $call >> 2;
  var $0 = $call;
  var $type_i_i_i = $call;
  HEAP32[$call$s2 + 1] = 0;
  HEAP32[$call$s2 + 2] = 0;
  HEAP32[$call$s2 + 3] = 0;
  HEAP8[$call + 16 | 0] = 0;
  HEAP32[$type_i_i_i >> 2] = 7;
  HEAPF32[$call$s2 + 5] = 0;
  HEAPF32[$call$s2 + 6] = 0;
  HEAPF32[$call$s2 + 7] = 0;
  HEAPF32[$call$s2 + 8] = 0;
  HEAPF32[$call$s2 + 9] = 1;
  HEAPF32[$call$s2 + 10] = 0;
  HEAP8[$call + 44 | 0] = 0;
  HEAPF32[$call$s2 + 12] = 0;
  HEAPF32[$call$s2 + 13] = 0;
  HEAPF32[$call$s2 + 14] = 2;
  HEAPF32[$call$s2 + 15] = .699999988079071;
  return $0;
  return null;
}

function _emscripten_bind_b2RevoluteJointDef__get_enableMotor_p0($self) {
  return (HEAP8[$self + 52 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2RevoluteJointDef__set_motorSpeed_p1($self, $arg0) {
  HEAPF32[$self + 56 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2RevoluteJointDef__get_upperAngle_p0($self) {
  return HEAPF32[$self + 48 >> 2];
  return null;
}

function _emscripten_bind_b2RevoluteJointDef__set_referenceAngle_p1($self, $arg0) {
  HEAPF32[$self + 36 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2RevoluteJointDef__set_maxMotorTorque_p1($self, $arg0) {
  HEAPF32[$self + 60 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2RevoluteJointDef__get_localAnchorA_p0($self) {
  return $self + 20 | 0;
  return null;
}

function _emscripten_bind_b2RevoluteJointDef__get_referenceAngle_p0($self) {
  return HEAPF32[$self + 36 >> 2];
  return null;
}

function _emscripten_bind_b2RevoluteJointDef__get_localAnchorB_p0($self) {
  return $self + 28 | 0;
  return null;
}

function _emscripten_bind_b2RevoluteJointDef__set_enableLimit_p1($self, $arg0) {
  HEAP8[$self + 40 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2RevoluteJointDef__set_enableMotor_p1($self, $arg0) {
  HEAP8[$self + 52 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2RevoluteJointDef__Initialize_p3($self, $arg0, $arg1, $arg2) {
  var $arg1$s2 = $arg1 >> 2;
  var $arg0$s2 = $arg0 >> 2;
  HEAP32[$self + 8 >> 2] = $arg0;
  HEAP32[$self + 12 >> 2] = $arg1;
  var $x_i_i_i = $arg2 | 0;
  var $sub_i_i_i = HEAPF32[$x_i_i_i >> 2] - HEAPF32[$arg0$s2 + 3];
  var $y_i_i_i = $arg2 + 4 | 0;
  var $sub4_i_i_i = HEAPF32[$y_i_i_i >> 2] - HEAPF32[$arg0$s2 + 4];
  var $8 = HEAPF32[$arg0$s2 + 6];
  var $10 = HEAPF32[$arg0$s2 + 5];
  var $add16_i_i_i = $sub_i_i_i * -$10 + $8 * $sub4_i_i_i;
  var $11 = $self + 20 | 0;
  var $12 = (tempDoubleF32[0] = $8 * $sub_i_i_i + $10 * $sub4_i_i_i, tempDoubleI32[0]);
  var $13$0 = $12;
  var $14 = (tempDoubleF32[0] = $add16_i_i_i, tempDoubleI32[0]);
  var $17$1 = $14 | 0;
  HEAP32[$11 >> 2] = 0 | $13$0;
  HEAP32[$11 + 4 >> 2] = $17$1;
  var $sub_i_i4_i = HEAPF32[$x_i_i_i >> 2] - HEAPF32[$arg1$s2 + 3];
  var $sub4_i_i7_i = HEAPF32[$y_i_i_i >> 2] - HEAPF32[$arg1$s2 + 4];
  var $26 = HEAPF32[$arg1$s2 + 6];
  var $28 = HEAPF32[$arg1$s2 + 5];
  var $add16_i_i16_i = $sub_i_i4_i * -$28 + $26 * $sub4_i_i7_i;
  var $29 = $self + 28 | 0;
  var $30 = (tempDoubleF32[0] = $26 * $sub_i_i4_i + $28 * $sub4_i_i7_i, tempDoubleI32[0]);
  var $31$0 = $30;
  var $32 = (tempDoubleF32[0] = $add16_i_i16_i, tempDoubleI32[0]);
  var $35$1 = $32 | 0;
  HEAP32[$29 >> 2] = 0 | $31$0;
  HEAP32[$29 + 4 >> 2] = $35$1;
  var $sub_i = HEAPF32[$arg1$s2 + 14] - HEAPF32[$arg0$s2 + 14];
  HEAPF32[$self + 36 >> 2] = $sub_i;
  return;
  return;
}

function _emscripten_bind_b2RevoluteJointDef__get_maxMotorTorque_p0($self) {
  return HEAPF32[$self + 60 >> 2];
  return null;
}

function _emscripten_bind_b2RevoluteJointDef__get_motorSpeed_p0($self) {
  return HEAPF32[$self + 56 >> 2];
  return null;
}

function _emscripten_bind_b2PulleyJointDef__set_localAnchorA_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 36 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2PulleyJointDef__set_localAnchorB_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 44 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2PulleyJointDef__get_ratio_p0($self) {
  return HEAPF32[$self + 60 >> 2];
  return null;
}

function _emscripten_bind_b2PulleyJointDef__get_lengthB_p0($self) {
  return HEAPF32[$self + 56 >> 2];
  return null;
}

function _emscripten_bind_b2PulleyJointDef__get_lengthA_p0($self) {
  return HEAPF32[$self + 52 >> 2];
  return null;
}

function _emscripten_bind_b2PulleyJointDef__get_localAnchorA_p0($self) {
  return $self + 36 | 0;
  return null;
}

function _emscripten_bind_b2PulleyJointDef__set_ratio_p1($self, $arg0) {
  HEAPF32[$self + 60 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2PulleyJointDef__get_localAnchorB_p0($self) {
  return $self + 44 | 0;
  return null;
}

function _emscripten_bind_b2PulleyJointDef__get_groundAnchorB_p0($self) {
  return $self + 28 | 0;
  return null;
}

function _emscripten_bind_b2PulleyJointDef__set_groundAnchorB_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 28 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2PulleyJointDef__set_groundAnchorA_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 20 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2PulleyJointDef__set_lengthB_p1($self, $arg0) {
  HEAPF32[$self + 56 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2PulleyJointDef__set_lengthA_p1($self, $arg0) {
  HEAPF32[$self + 52 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2PulleyJointDef__get_groundAnchorA_p0($self) {
  return $self + 20 | 0;
  return null;
}

function _emscripten_bind_b2JointDef__get_bodyA_p0($self) {
  return HEAP32[$self + 8 >> 2];
  return null;
}

function _emscripten_bind_b2JointDef__set_userData_p1($self, $arg0) {
  HEAP32[$self + 4 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2JointDef__set_bodyA_p1($self, $arg0) {
  HEAP32[$self + 8 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2JointDef__set_bodyB_p1($self, $arg0) {
  HEAP32[$self + 12 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2JointDef__get_bodyB_p0($self) {
  return HEAP32[$self + 12 >> 2];
  return null;
}

function _emscripten_bind_b2JointDef__set_type_p1($self, $arg0) {
  HEAP32[$self >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2JointDef__get_collideConnected_p0($self) {
  return (HEAP8[$self + 16 | 0] & 1) << 24 >> 24 != 0;
  return null;
}

function _emscripten_bind_b2JointDef__get_type_p0($self) {
  return HEAP32[$self >> 2];
  return null;
}

function _emscripten_bind_b2JointDef__set_collideConnected_p1($self, $arg0) {
  HEAP8[$self + 16 | 0] = $arg0 & 1;
  return;
  return;
}

function _emscripten_bind_b2JointDef__get_userData_p0($self) {
  return HEAP32[$self + 4 >> 2];
  return null;
}

function _emscripten_bind_b2Transform__set_p_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2Transform__set_q_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 8 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2Transform__get_p_p0($self) {
  return $self | 0;
  return null;
}

function _emscripten_bind_b2Transform__get_q_p0($self) {
  return $self + 8 | 0;
  return null;
}

function _emscripten_bind_b2Transform__SetIdentity_p0($self) {
  HEAPF32[$self >> 2] = 0;
  HEAPF32[$self + 4 >> 2] = 0;
  HEAPF32[$self + 8 >> 2] = 0;
  HEAPF32[$self + 12 >> 2] = 1;
  return;
  return;
}

function _emscripten_bind_b2Color__set_b_p1($self, $arg0) {
  HEAPF32[$self + 8 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2Color__Set_p3($self, $arg0, $arg1, $arg2) {
  HEAPF32[$self >> 2] = $arg0;
  HEAPF32[$self + 4 >> 2] = $arg1;
  HEAPF32[$self + 8 >> 2] = $arg2;
  return;
  return;
}

function _emscripten_bind_b2Color__get_b_p0($self) {
  return HEAPF32[$self + 8 >> 2];
  return null;
}

function _emscripten_bind_b2WeldJointDef__set_localAnchorA_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 20 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2WeldJointDef__get_frequencyHz_p0($self) {
  return HEAPF32[$self + 40 >> 2];
  return null;
}

function _emscripten_bind_b2WeldJointDef__set_localAnchorB_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 28 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2WeldJointDef__set_dampingRatio_p1($self, $arg0) {
  HEAPF32[$self + 44 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2WeldJointDef__set_referenceAngle_p1($self, $arg0) {
  HEAPF32[$self + 36 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2WeldJointDef__get_localAnchorA_p0($self) {
  return $self + 20 | 0;
  return null;
}

function _emscripten_bind_b2WeldJointDef__get_referenceAngle_p0($self) {
  return HEAPF32[$self + 36 >> 2];
  return null;
}

function _emscripten_bind_b2WeldJointDef__get_localAnchorB_p0($self) {
  return $self + 28 | 0;
  return null;
}

function _emscripten_bind_b2WeldJointDef__get_dampingRatio_p0($self) {
  return HEAPF32[$self + 44 >> 2];
  return null;
}

function _emscripten_bind_b2WeldJointDef__set_frequencyHz_p1($self, $arg0) {
  HEAPF32[$self + 40 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2WeldJointDef__Initialize_p3($self, $arg0, $arg1, $arg2) {
  var $arg1$s2 = $arg1 >> 2;
  var $arg0$s2 = $arg0 >> 2;
  HEAP32[$self + 8 >> 2] = $arg0;
  HEAP32[$self + 12 >> 2] = $arg1;
  var $x_i_i_i = $arg2 | 0;
  var $sub_i_i_i = HEAPF32[$x_i_i_i >> 2] - HEAPF32[$arg0$s2 + 3];
  var $y_i_i_i = $arg2 + 4 | 0;
  var $sub4_i_i_i = HEAPF32[$y_i_i_i >> 2] - HEAPF32[$arg0$s2 + 4];
  var $8 = HEAPF32[$arg0$s2 + 6];
  var $10 = HEAPF32[$arg0$s2 + 5];
  var $add16_i_i_i = $sub_i_i_i * -$10 + $8 * $sub4_i_i_i;
  var $11 = $self + 20 | 0;
  var $12 = (tempDoubleF32[0] = $8 * $sub_i_i_i + $10 * $sub4_i_i_i, tempDoubleI32[0]);
  var $13$0 = $12;
  var $14 = (tempDoubleF32[0] = $add16_i_i_i, tempDoubleI32[0]);
  var $17$1 = $14 | 0;
  HEAP32[$11 >> 2] = 0 | $13$0;
  HEAP32[$11 + 4 >> 2] = $17$1;
  var $sub_i_i4_i = HEAPF32[$x_i_i_i >> 2] - HEAPF32[$arg1$s2 + 3];
  var $sub4_i_i7_i = HEAPF32[$y_i_i_i >> 2] - HEAPF32[$arg1$s2 + 4];
  var $26 = HEAPF32[$arg1$s2 + 6];
  var $28 = HEAPF32[$arg1$s2 + 5];
  var $add16_i_i16_i = $sub_i_i4_i * -$28 + $26 * $sub4_i_i7_i;
  var $29 = $self + 28 | 0;
  var $30 = (tempDoubleF32[0] = $26 * $sub_i_i4_i + $28 * $sub4_i_i7_i, tempDoubleI32[0]);
  var $31$0 = $30;
  var $32 = (tempDoubleF32[0] = $add16_i_i16_i, tempDoubleI32[0]);
  var $35$1 = $32 | 0;
  HEAP32[$29 >> 2] = 0 | $31$0;
  HEAP32[$29 + 4 >> 2] = $35$1;
  var $sub_i = HEAPF32[$arg1$s2 + 14] - HEAPF32[$arg0$s2 + 14];
  HEAPF32[$self + 36 >> 2] = $sub_i;
  return;
  return;
}

function _emscripten_bind_b2MouseJointDef__get_frequencyHz_p0($self) {
  return HEAPF32[$self + 32 >> 2];
  return null;
}

function _emscripten_bind_b2MouseJointDef__set_dampingRatio_p1($self, $arg0) {
  HEAPF32[$self + 36 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2MouseJointDef__get_maxForce_p0($self) {
  return HEAPF32[$self + 28 >> 2];
  return null;
}

function _emscripten_bind_b2MouseJointDef__set_target_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 20 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2MouseJointDef__set_maxForce_p1($self, $arg0) {
  HEAPF32[$self + 28 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2MouseJointDef__get_target_p0($self) {
  return $self + 20 | 0;
  return null;
}

function _emscripten_bind_b2MouseJointDef__set_frequencyHz_p1($self, $arg0) {
  HEAPF32[$self + 32 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2MouseJointDef__get_dampingRatio_p0($self) {
  return HEAPF32[$self + 36 >> 2];
  return null;
}

function _emscripten_bind_b2DistanceJointDef__set_localAnchorA_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 20 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2DistanceJointDef__get_length_p0($self) {
  return HEAPF32[$self + 36 >> 2];
  return null;
}

function _emscripten_bind_b2DistanceJointDef__get_frequencyHz_p0($self) {
  return HEAPF32[$self + 40 >> 2];
  return null;
}

function _emscripten_bind_b2DistanceJointDef__set_localAnchorB_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 28 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2DistanceJointDef__set_dampingRatio_p1($self, $arg0) {
  HEAPF32[$self + 44 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2DistanceJointDef__get_localAnchorA_p0($self) {
  return $self + 20 | 0;
  return null;
}

function _emscripten_bind_b2DistanceJointDef__get_localAnchorB_p0($self) {
  return $self + 28 | 0;
  return null;
}

function _emscripten_bind_b2DistanceJointDef__get_dampingRatio_p0($self) {
  return HEAPF32[$self + 44 >> 2];
  return null;
}

function _emscripten_bind_b2RevoluteJointDef____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2RevoluteJointDef__b2RevoluteJointDef_p0() {
  var $call$s2;
  var $call = __Znwj(64), $call$s2 = $call >> 2;
  var $0 = $call;
  var $type_i_i_i = $call;
  HEAP32[$call$s2 + 1] = 0;
  HEAP32[$call$s2 + 2] = 0;
  HEAP32[$call$s2 + 3] = 0;
  HEAP8[$call + 16 | 0] = 0;
  HEAP32[$type_i_i_i >> 2] = 1;
  HEAPF32[$call$s2 + 5] = 0;
  HEAPF32[$call$s2 + 6] = 0;
  HEAPF32[$call$s2 + 7] = 0;
  HEAPF32[$call$s2 + 8] = 0;
  HEAPF32[$call$s2 + 9] = 0;
  HEAPF32[$call$s2 + 11] = 0;
  HEAPF32[$call$s2 + 12] = 0;
  HEAPF32[$call$s2 + 15] = 0;
  HEAPF32[$call$s2 + 14] = 0;
  HEAP8[$call + 40 | 0] = 0;
  HEAP8[$call + 52 | 0] = 0;
  return $0;
  return null;
}

function _emscripten_bind_b2PulleyJointDef____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2PulleyJointDef__b2PulleyJointDef_p0() {
  var $call$s2;
  var $call = __Znwj(64), $call$s2 = $call >> 2;
  var $0 = $call;
  var $type_i_i_i = $call;
  HEAP32[$call$s2 + 1] = 0;
  HEAP32[$call$s2 + 2] = 0;
  HEAP32[$call$s2 + 3] = 0;
  var $4 = $call + 16 | 0;
  HEAP32[$type_i_i_i >> 2] = 4;
  HEAPF32[$call$s2 + 5] = -1;
  HEAPF32[$call$s2 + 6] = 1;
  HEAPF32[$call$s2 + 7] = 1;
  HEAPF32[$call$s2 + 8] = 1;
  HEAPF32[$call$s2 + 9] = -1;
  HEAPF32[$call$s2 + 10] = 0;
  HEAPF32[$call$s2 + 11] = 1;
  HEAPF32[$call$s2 + 12] = 0;
  HEAPF32[$call$s2 + 13] = 0;
  HEAPF32[$call$s2 + 14] = 0;
  HEAPF32[$call$s2 + 15] = 1;
  HEAP8[$4] = 1;
  return $0;
  return null;
}

function _emscripten_bind_b2PulleyJointDef__Initialize_p7($self, $arg0, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6) {
  var $0 = $self;
  var $1 = $arg0;
  var $2 = $arg1;
  __ZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_f($0, $1, $2, $arg2, $arg3, $arg4, $arg5, $arg6);
  return;
  return;
}

function _emscripten_bind_b2JointDef____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2JointDef__b2JointDef_p0() {
  var $call$s2;
  var $call = __Znwj(20), $call$s2 = $call >> 2;
  var $0 = $call;
  HEAP32[$call$s2] = 0;
  HEAP32[$call$s2 + 1] = 0;
  HEAP32[$call$s2 + 2] = 0;
  HEAP32[$call$s2 + 3] = 0;
  HEAP8[$call + 16 | 0] = 0;
  return $0;
  return null;
}

function _emscripten_bind_b2Transform____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2Transform__Set_p2($self, $arg0, $arg1) {
  var $0 = $arg0;
  var $1 = $self;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  var $call_i_i = _sinf($arg1);
  HEAPF32[$self + 8 >> 2] = $call_i_i;
  var $call2_i_i = _cosf($arg1);
  HEAPF32[$self + 12 >> 2] = $call2_i_i;
  return;
  return;
}

function _emscripten_bind_b2Transform__b2Transform_p0() {
  var $call = __Znwj(16);
  return $call;
  return null;
}

function _emscripten_bind_b2Transform__b2Transform_p2($arg0, $arg1) {
  var $call = __Znwj(16);
  var $0 = $call;
  var $1 = $arg0;
  var $2 = $call;
  var $3$0 = HEAP32[$1 >> 2];
  var $3$1 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = $3$0;
  HEAP32[$2 + 4 >> 2] = $3$1;
  var $4 = $arg1;
  var $5 = $call + 8 | 0;
  var $6$0 = HEAP32[$4 >> 2];
  var $6$1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 >> 2] = $6$0;
  HEAP32[$5 + 4 >> 2] = $6$1;
  return $0;
  return null;
}

function _emscripten_bind_b2Color____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2Color__b2Color_p0() {
  var $call = __Znwj(12);
  return $call;
  return null;
}

function _emscripten_bind_b2Color__b2Color_p3($arg0, $arg1, $arg2) {
  var $call$s2;
  var $call = __Znwj(12), $call$s2 = $call >> 2;
  var $0 = $call;
  HEAPF32[$call$s2] = $arg0;
  HEAPF32[$call$s2 + 1] = $arg1;
  HEAPF32[$call$s2 + 2] = $arg2;
  return $0;
  return null;
}

function _emscripten_bind_b2WeldJointDef____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2WeldJointDef__b2WeldJointDef_p0() {
  var $call$s2;
  var $call = __Znwj(48), $call$s2 = $call >> 2;
  var $0 = $call;
  var $type_i_i_i = $call;
  HEAP32[$call$s2 + 1] = 0;
  HEAP32[$call$s2 + 2] = 0;
  HEAP32[$call$s2 + 3] = 0;
  HEAP8[$call + 16 | 0] = 0;
  HEAP32[$type_i_i_i >> 2] = 8;
  HEAPF32[$call$s2 + 5] = 0;
  HEAPF32[$call$s2 + 6] = 0;
  HEAPF32[$call$s2 + 7] = 0;
  HEAPF32[$call$s2 + 8] = 0;
  HEAPF32[$call$s2 + 9] = 0;
  HEAPF32[$call$s2 + 10] = 0;
  HEAPF32[$call$s2 + 11] = 0;
  return $0;
  return null;
}

function _emscripten_bind_b2MouseJointDef____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2MouseJointDef__b2MouseJointDef_p0() {
  var $call$s2;
  var $call = __Znwj(40), $call$s2 = $call >> 2;
  var $0 = $call;
  var $type_i_i_i = $call;
  HEAP32[$call$s2 + 1] = 0;
  HEAP32[$call$s2 + 2] = 0;
  HEAP32[$call$s2 + 3] = 0;
  HEAP8[$call + 16 | 0] = 0;
  HEAP32[$type_i_i_i >> 2] = 5;
  HEAPF32[$call$s2 + 5] = 0;
  HEAPF32[$call$s2 + 6] = 0;
  HEAPF32[$call$s2 + 7] = 0;
  HEAPF32[$call$s2 + 8] = 5;
  HEAPF32[$call$s2 + 9] = .699999988079071;
  return $0;
  return null;
}

function _emscripten_bind_b2DistanceJointDef____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2DistanceJointDef__set_length_p1($self, $arg0) {
  HEAPF32[$self + 36 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2DistanceJointDef__set_frequencyHz_p1($self, $arg0) {
  HEAPF32[$self + 40 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2GearJointDef__set_joint1_p1($self, $arg0) {
  HEAP32[$self + 20 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2GearJointDef__set_joint2_p1($self, $arg0) {
  HEAP32[$self + 24 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2GearJointDef__set_ratio_p1($self, $arg0) {
  HEAPF32[$self + 28 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2GearJointDef__get_joint1_p0($self) {
  return HEAP32[$self + 20 >> 2];
  return null;
}

function _emscripten_bind_b2GearJointDef__get_joint2_p0($self) {
  return HEAP32[$self + 24 >> 2];
  return null;
}

function _emscripten_bind_b2GearJointDef__get_ratio_p0($self) {
  return HEAPF32[$self + 28 >> 2];
  return null;
}

function _emscripten_bind_b2RopeJointDef__set_localAnchorA_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 20 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2RopeJointDef__get_maxLength_p0($self) {
  return HEAPF32[$self + 36 >> 2];
  return null;
}

function _emscripten_bind_b2RopeJointDef__set_localAnchorB_p1($self, $arg0) {
  var $0 = $arg0;
  var $1 = $self + 28 | 0;
  var $2$0 = HEAP32[$0 >> 2];
  var $2$1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = $2$0;
  HEAP32[$1 + 4 >> 2] = $2$1;
  return;
  return;
}

function _emscripten_bind_b2RopeJointDef__get_localAnchorA_p0($self) {
  return $self + 20 | 0;
  return null;
}

function _emscripten_bind_b2RopeJointDef__get_localAnchorB_p0($self) {
  return $self + 28 | 0;
  return null;
}

function _emscripten_bind_b2RopeJointDef__set_maxLength_p1($self, $arg0) {
  HEAPF32[$self + 36 >> 2] = $arg0;
  return;
  return;
}

function _emscripten_bind_b2DistanceJointDef__b2DistanceJointDef_p0() {
  var $call$s2;
  var $call = __Znwj(48), $call$s2 = $call >> 2;
  var $0 = $call;
  var $type_i_i_i = $call;
  HEAP32[$call$s2 + 1] = 0;
  HEAP32[$call$s2 + 2] = 0;
  HEAP32[$call$s2 + 3] = 0;
  HEAP8[$call + 16 | 0] = 0;
  HEAP32[$type_i_i_i >> 2] = 3;
  HEAPF32[$call$s2 + 5] = 0;
  HEAPF32[$call$s2 + 6] = 0;
  HEAPF32[$call$s2 + 7] = 0;
  HEAPF32[$call$s2 + 8] = 0;
  HEAPF32[$call$s2 + 9] = 1;
  HEAPF32[$call$s2 + 10] = 0;
  HEAPF32[$call$s2 + 11] = 0;
  return $0;
  return null;
}

function _emscripten_bind_b2DistanceJointDef__Initialize_p4($self, $arg0, $arg1, $arg2, $arg3) {
  HEAP32[$self + 8 >> 2] = $arg0;
  HEAP32[$self + 12 >> 2] = $arg1;
  var $x_i_i_i = $arg2 | 0;
  var $sub_i_i_i = HEAPF32[$x_i_i_i >> 2] - HEAPF32[$arg0 + 12 >> 2];
  var $y_i_i_i = $arg2 + 4 | 0;
  var $sub4_i_i_i = HEAPF32[$y_i_i_i >> 2] - HEAPF32[$arg0 + 16 >> 2];
  var $8 = HEAPF32[$arg0 + 24 >> 2];
  var $10 = HEAPF32[$arg0 + 20 >> 2];
  var $add16_i_i_i = $sub_i_i_i * -$10 + $8 * $sub4_i_i_i;
  var $11 = $self + 20 | 0;
  var $12 = (tempDoubleF32[0] = $8 * $sub_i_i_i + $10 * $sub4_i_i_i, tempDoubleI32[0]);
  var $13$0 = $12;
  var $14 = (tempDoubleF32[0] = $add16_i_i_i, tempDoubleI32[0]);
  var $17$1 = $14 | 0;
  HEAP32[$11 >> 2] = 0 | $13$0;
  HEAP32[$11 + 4 >> 2] = $17$1;
  var $x_i_i1_i = $arg3 | 0;
  var $sub_i_i3_i = HEAPF32[$x_i_i1_i >> 2] - HEAPF32[$arg1 + 12 >> 2];
  var $y_i_i4_i = $arg3 + 4 | 0;
  var $sub4_i_i6_i = HEAPF32[$y_i_i4_i >> 2] - HEAPF32[$arg1 + 16 >> 2];
  var $26 = HEAPF32[$arg1 + 24 >> 2];
  var $28 = HEAPF32[$arg1 + 20 >> 2];
  var $add16_i_i15_i = $sub_i_i3_i * -$28 + $26 * $sub4_i_i6_i;
  var $29 = $self + 28 | 0;
  var $30 = (tempDoubleF32[0] = $26 * $sub_i_i3_i + $28 * $sub4_i_i6_i, tempDoubleI32[0]);
  var $31$0 = $30;
  var $32 = (tempDoubleF32[0] = $add16_i_i15_i, tempDoubleI32[0]);
  var $35$1 = $32 | 0;
  HEAP32[$29 >> 2] = 0 | $31$0;
  HEAP32[$29 + 4 >> 2] = $35$1;
  var $sub_i_i = HEAPF32[$x_i_i1_i >> 2] - HEAPF32[$x_i_i_i >> 2];
  var $sub3_i_i = HEAPF32[$y_i_i4_i >> 2] - HEAPF32[$y_i_i_i >> 2];
  var $add_i_i = $sub_i_i * $sub_i_i + $sub3_i_i * $sub3_i_i;
  var $call_i_i_i = _sqrtf($add_i_i);
  HEAPF32[$self + 36 >> 2] = $call_i_i_i;
  return;
  return;
}

function _emscripten_bind_b2GearJointDef____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2GearJointDef__b2GearJointDef_p0() {
  var $call$s2;
  var $call = __Znwj(32), $call$s2 = $call >> 2;
  var $0 = $call;
  var $type_i_i_i = $call;
  HEAP32[$call$s2 + 1] = 0;
  HEAP32[$call$s2 + 2] = 0;
  HEAP32[$call$s2 + 3] = 0;
  HEAP8[$call + 16 | 0] = 0;
  HEAP32[$type_i_i_i >> 2] = 6;
  HEAP32[$call$s2 + 5] = 0;
  HEAP32[$call$s2 + 6] = 0;
  HEAPF32[$call$s2 + 7] = 1;
  return $0;
  return null;
}

function _emscripten_bind_b2RopeJointDef____destroy___p0($self) {
  if (($self | 0) != 0) {
    var $0 = $self;
    __ZdlPv($0);
  }
  return;
  return;
}

function _emscripten_bind_b2RopeJointDef__b2RopeJointDef_p0() {
  var $call$s2;
  var $call = __Znwj(40), $call$s2 = $call >> 2;
  var $0 = $call;
  var $type_i_i_i = $call;
  HEAP32[$call$s2 + 1] = 0;
  HEAP32[$call$s2 + 2] = 0;
  HEAP32[$call$s2 + 3] = 0;
  HEAP8[$call + 16 | 0] = 0;
  HEAP32[$type_i_i_i >> 2] = 10;
  HEAPF32[$call$s2 + 5] = -1;
  HEAPF32[$call$s2 + 6] = 0;
  HEAPF32[$call$s2 + 7] = 1;
  HEAPF32[$call$s2 + 8] = 0;
  HEAPF32[$call$s2 + 9] = 0;
  return $0;
  return null;
}

function _malloc($bytes) {
  var $add_ptr14_i_i$s2;
  var $sp_0_i_i_i$s2;
  var $R_1_i_i$s2;
  var $add_ptr4_sum_i45_i$s2;
  var $cond15_i_i$s2;
  var $213$s2;
  var $sp_0_i$s2;
  var $186$s2;
  var $tbase_281_i$s2;
  var $R_1_i36$s2;
  var $87$s2;
  var $t_221_i$s2;
  var $v_3_lcssa_i$s2;
  var $t_0_i19$s2;
  var $and143$s2;
  var $R_1_i$s2;
  var $v_0_ph_i$s2;
  var $nb_0$s2;
  var __label__;
  var $cmp = $bytes >>> 0 < 245;
  $if_then$$if_else136$2 : do {
    if ($cmp) {
      if ($bytes >>> 0 < 11) {
        var $cond = 16;
      } else {
        var $cond = $bytes + 11 & -8;
      }
      var $cond;
      var $shr = $cond >>> 3;
      var $0 = HEAPU32[__gm_ >> 2];
      var $shr3 = $0 >>> ($shr >>> 0);
      if (($shr3 & 3 | 0) != 0) {
        var $add8 = ($shr3 & 1 ^ 1) + $shr | 0;
        var $shl = $add8 << 1;
        var $1 = ($shl << 2) + __gm_ + 40 | 0;
        var $2 = ($shl + 2 << 2) + __gm_ + 40 | 0;
        var $3 = HEAPU32[$2 >> 2];
        var $fd9 = $3 + 8 | 0;
        var $4 = HEAPU32[$fd9 >> 2];
        if (($1 | 0) == ($4 | 0)) {
          HEAP32[__gm_ >> 2] = $0 & (1 << $add8 ^ -1);
        } else {
          if ($4 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
            _abort();
            throw "Reached an unreachable!";
          } else {
            HEAP32[$2 >> 2] = $4;
            HEAP32[$4 + 12 >> 2] = $1;
          }
        }
        var $shl20 = $add8 << 3;
        HEAP32[$3 + 4 >> 2] = $shl20 | 3;
        var $8 = $3 + ($shl20 | 4) | 0;
        var $or24 = HEAP32[$8 >> 2] | 1;
        HEAP32[$8 >> 2] = $or24;
        var $mem_0 = $fd9;
        __label__ = 334;
        break;
      }
      if ($cond >>> 0 <= HEAPU32[__gm_ + 8 >> 2] >>> 0) {
        var $nb_0 = $cond, $nb_0$s2 = $nb_0 >> 2;
        __label__ = 156;
        break;
      }
      if (($shr3 | 0) != 0) {
        var $shl37 = 2 << $shr;
        var $and41 = $shr3 << $shr & ($shl37 | -$shl37);
        var $sub44 = ($and41 & -$and41) - 1 | 0;
        var $and46 = $sub44 >>> 12 & 16;
        var $shr47 = $sub44 >>> ($and46 >>> 0);
        var $and49 = $shr47 >>> 5 & 8;
        var $shr51 = $shr47 >>> ($and49 >>> 0);
        var $and53 = $shr51 >>> 2 & 4;
        var $shr55 = $shr51 >>> ($and53 >>> 0);
        var $and57 = $shr55 >>> 1 & 2;
        var $shr59 = $shr55 >>> ($and57 >>> 0);
        var $and61 = $shr59 >>> 1 & 1;
        var $add64 = ($and49 | $and46 | $and53 | $and57 | $and61) + ($shr59 >>> ($and61 >>> 0)) | 0;
        var $shl65 = $add64 << 1;
        var $12 = ($shl65 << 2) + __gm_ + 40 | 0;
        var $13 = ($shl65 + 2 << 2) + __gm_ + 40 | 0;
        var $14 = HEAPU32[$13 >> 2];
        var $fd69 = $14 + 8 | 0;
        var $15 = HEAPU32[$fd69 >> 2];
        if (($12 | 0) == ($15 | 0)) {
          HEAP32[__gm_ >> 2] = $0 & (1 << $add64 ^ -1);
        } else {
          if ($15 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
            _abort();
            throw "Reached an unreachable!";
          } else {
            HEAP32[$13 >> 2] = $15;
            HEAP32[$15 + 12 >> 2] = $12;
          }
        }
        var $shl87 = $add64 << 3;
        var $sub88 = $shl87 - $cond | 0;
        HEAP32[$14 + 4 >> 2] = $cond | 3;
        var $18 = $14;
        var $19 = $18 + $cond | 0;
        HEAP32[$18 + ($cond | 4) >> 2] = $sub88 | 1;
        HEAP32[$18 + $shl87 >> 2] = $sub88;
        var $21 = HEAPU32[__gm_ + 8 >> 2];
        if (($21 | 0) != 0) {
          var $22 = HEAP32[__gm_ + 20 >> 2];
          var $shl100 = $21 >>> 2 & 1073741822;
          var $24 = ($shl100 << 2) + __gm_ + 40 | 0;
          var $25 = HEAPU32[__gm_ >> 2];
          var $shl103 = 1 << ($21 >>> 3);
          var $tobool105 = ($25 & $shl103 | 0) == 0;
          do {
            if ($tobool105) {
              HEAP32[__gm_ >> 2] = $25 | $shl103;
              var $F102_0 = $24;
              var $_pre_phi = ($shl100 + 2 << 2) + __gm_ + 40 | 0;
            } else {
              var $26 = ($shl100 + 2 << 2) + __gm_ + 40 | 0;
              var $27 = HEAPU32[$26 >> 2];
              if ($27 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                var $F102_0 = $27;
                var $_pre_phi = $26;
                break;
              }
              _abort();
              throw "Reached an unreachable!";
            }
          } while (0);
          var $_pre_phi;
          var $F102_0;
          HEAP32[$_pre_phi >> 2] = $22;
          HEAP32[$F102_0 + 12 >> 2] = $22;
          var $fd122 = $22 + 8 | 0;
          HEAP32[$fd122 >> 2] = $F102_0;
          var $bk123 = $22 + 12 | 0;
          HEAP32[$bk123 >> 2] = $24;
        }
        HEAP32[__gm_ + 8 >> 2] = $sub88;
        HEAP32[__gm_ + 20 >> 2] = $19;
        var $mem_0 = $fd69;
        __label__ = 334;
        break;
      }
      var $31 = HEAP32[__gm_ + 4 >> 2];
      if (($31 | 0) == 0) {
        var $nb_0 = $cond, $nb_0$s2 = $nb_0 >> 2;
        __label__ = 156;
        break;
      }
      var $sub2_i = ($31 & -$31) - 1 | 0;
      var $and3_i = $sub2_i >>> 12 & 16;
      var $shr4_i = $sub2_i >>> ($and3_i >>> 0);
      var $and6_i = $shr4_i >>> 5 & 8;
      var $shr7_i = $shr4_i >>> ($and6_i >>> 0);
      var $and9_i = $shr7_i >>> 2 & 4;
      var $shr11_i = $shr7_i >>> ($and9_i >>> 0);
      var $and13_i = $shr11_i >>> 1 & 2;
      var $shr15_i = $shr11_i >>> ($and13_i >>> 0);
      var $and17_i = $shr15_i >>> 1 & 1;
      var $32 = HEAPU32[__gm_ + (($and6_i | $and3_i | $and9_i | $and13_i | $and17_i) + ($shr15_i >>> ($and17_i >>> 0)) << 2) + 304 >> 2];
      var $v_0_ph_i = $32, $v_0_ph_i$s2 = $v_0_ph_i >> 2;
      var $rsize_0_ph_i = (HEAP32[$32 + 4 >> 2] & -8) - $cond | 0;
      $while_cond_outer_i$13 : while (1) {
        var $rsize_0_ph_i;
        var $v_0_ph_i;
        var $t_0_i = $v_0_ph_i;
        while (1) {
          var $t_0_i;
          var $34 = HEAP32[$t_0_i + 16 >> 2];
          if (($34 | 0) == 0) {
            var $35 = HEAP32[$t_0_i + 20 >> 2];
            if (($35 | 0) == 0) {
              break $while_cond_outer_i$13;
            }
            var $cond5_i = $35;
          } else {
            var $cond5_i = $34;
          }
          var $cond5_i;
          var $sub31_i = (HEAP32[$cond5_i + 4 >> 2] & -8) - $cond | 0;
          if ($sub31_i >>> 0 < $rsize_0_ph_i >>> 0) {
            var $v_0_ph_i = $cond5_i, $v_0_ph_i$s2 = $v_0_ph_i >> 2;
            var $rsize_0_ph_i = $sub31_i;
            continue $while_cond_outer_i$13;
          }
          var $t_0_i = $cond5_i;
        }
      }
      var $37 = $v_0_ph_i;
      var $38 = HEAPU32[__gm_ + 16 >> 2];
      var $cmp33_i = $37 >>> 0 < $38 >>> 0;
      do {
        if (!$cmp33_i) {
          var $add_ptr_i = $37 + $cond | 0;
          var $39 = $add_ptr_i;
          if ($37 >>> 0 >= $add_ptr_i >>> 0) {
            break;
          }
          var $40 = HEAPU32[$v_0_ph_i$s2 + 6];
          var $41 = HEAPU32[$v_0_ph_i$s2 + 3];
          var $cmp40_i = ($41 | 0) == ($v_0_ph_i | 0);
          do {
            if ($cmp40_i) {
              var $arrayidx55_i = $v_0_ph_i + 20 | 0;
              var $44 = HEAP32[$arrayidx55_i >> 2];
              if (($44 | 0) == 0) {
                var $arrayidx59_i = $v_0_ph_i + 16 | 0;
                var $45 = HEAP32[$arrayidx59_i >> 2];
                if (($45 | 0) == 0) {
                  var $R_1_i = 0, $R_1_i$s2 = $R_1_i >> 2;
                  break;
                }
                var $RP_0_i = $arrayidx59_i;
                var $R_0_i = $45;
              } else {
                var $RP_0_i = $arrayidx55_i;
                var $R_0_i = $44;
                __label__ = 38;
              }
              while (1) {
                var $R_0_i;
                var $RP_0_i;
                var $arrayidx65_i = $R_0_i + 20 | 0;
                var $46 = HEAP32[$arrayidx65_i >> 2];
                if (($46 | 0) != 0) {
                  var $RP_0_i = $arrayidx65_i;
                  var $R_0_i = $46;
                  continue;
                }
                var $arrayidx69_i = $R_0_i + 16 | 0;
                var $47 = HEAPU32[$arrayidx69_i >> 2];
                if (($47 | 0) == 0) {
                  break;
                }
                var $RP_0_i = $arrayidx69_i;
                var $R_0_i = $47;
              }
              if ($RP_0_i >>> 0 < $38 >>> 0) {
                _abort();
                throw "Reached an unreachable!";
              } else {
                HEAP32[$RP_0_i >> 2] = 0;
                var $R_1_i = $R_0_i, $R_1_i$s2 = $R_1_i >> 2;
              }
            } else {
              var $42 = HEAPU32[$v_0_ph_i$s2 + 2];
              if ($42 >>> 0 < $38 >>> 0) {
                _abort();
                throw "Reached an unreachable!";
              } else {
                HEAP32[$42 + 12 >> 2] = $41;
                HEAP32[$41 + 8 >> 2] = $42;
                var $R_1_i = $41, $R_1_i$s2 = $R_1_i >> 2;
              }
            }
          } while (0);
          var $R_1_i;
          var $cmp84_i = ($40 | 0) == 0;
          $if_end167_i$$if_then86_i$40 : do {
            if (!$cmp84_i) {
              var $index_i = $v_0_ph_i + 28 | 0;
              var $arrayidx88_i = (HEAP32[$index_i >> 2] << 2) + __gm_ + 304 | 0;
              var $cmp89_i = ($v_0_ph_i | 0) == (HEAP32[$arrayidx88_i >> 2] | 0);
              do {
                if ($cmp89_i) {
                  HEAP32[$arrayidx88_i >> 2] = $R_1_i;
                  if (($R_1_i | 0) != 0) {
                    break;
                  }
                  var $and97_i = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$index_i >> 2] ^ -1);
                  HEAP32[__gm_ + 4 >> 2] = $and97_i;
                  break $if_end167_i$$if_then86_i$40;
                }
                if ($40 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                  _abort();
                  throw "Reached an unreachable!";
                } else {
                  var $arrayidx107_i = $40 + 16 | 0;
                  if ((HEAP32[$arrayidx107_i >> 2] | 0) == ($v_0_ph_i | 0)) {
                    HEAP32[$arrayidx107_i >> 2] = $R_1_i;
                  } else {
                    HEAP32[$40 + 20 >> 2] = $R_1_i;
                  }
                  if (($R_1_i | 0) == 0) {
                    break $if_end167_i$$if_then86_i$40;
                  }
                }
              } while (0);
              if ($R_1_i >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                _abort();
                throw "Reached an unreachable!";
              } else {
                HEAP32[$R_1_i$s2 + 6] = $40;
                var $58 = HEAPU32[$v_0_ph_i$s2 + 4];
                if (($58 | 0) != 0) {
                  if ($58 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                    _abort();
                    throw "Reached an unreachable!";
                  } else {
                    HEAP32[$R_1_i$s2 + 4] = $58;
                    HEAP32[$58 + 24 >> 2] = $R_1_i;
                  }
                }
                var $61 = HEAPU32[$v_0_ph_i$s2 + 5];
                if (($61 | 0) == 0) {
                  break;
                }
                if ($61 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                  _abort();
                  throw "Reached an unreachable!";
                } else {
                  HEAP32[$R_1_i$s2 + 5] = $61;
                  HEAP32[$61 + 24 >> 2] = $R_1_i;
                }
              }
            }
          } while (0);
          if ($rsize_0_ph_i >>> 0 < 16) {
            var $add171_i = $rsize_0_ph_i + $cond | 0;
            HEAP32[$v_0_ph_i$s2 + 1] = $add171_i | 3;
            var $64 = $add171_i + ($37 + 4) | 0;
            var $or177_i = HEAP32[$64 >> 2] | 1;
            HEAP32[$64 >> 2] = $or177_i;
          } else {
            HEAP32[$v_0_ph_i$s2 + 1] = $cond | 3;
            HEAP32[$37 + ($cond | 4) >> 2] = $rsize_0_ph_i | 1;
            HEAP32[$37 + $rsize_0_ph_i + $cond >> 2] = $rsize_0_ph_i;
            var $67 = HEAPU32[__gm_ + 8 >> 2];
            if (($67 | 0) != 0) {
              var $68 = HEAPU32[__gm_ + 20 >> 2];
              var $shl189_i = $67 >>> 2 & 1073741822;
              var $70 = ($shl189_i << 2) + __gm_ + 40 | 0;
              var $71 = HEAPU32[__gm_ >> 2];
              var $shl192_i = 1 << ($67 >>> 3);
              var $tobool194_i = ($71 & $shl192_i | 0) == 0;
              do {
                if ($tobool194_i) {
                  HEAP32[__gm_ >> 2] = $71 | $shl192_i;
                  var $F191_0_i = $70;
                  var $_pre_phi_i = ($shl189_i + 2 << 2) + __gm_ + 40 | 0;
                } else {
                  var $72 = ($shl189_i + 2 << 2) + __gm_ + 40 | 0;
                  var $73 = HEAPU32[$72 >> 2];
                  if ($73 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                    var $F191_0_i = $73;
                    var $_pre_phi_i = $72;
                    break;
                  }
                  _abort();
                  throw "Reached an unreachable!";
                }
              } while (0);
              var $_pre_phi_i;
              var $F191_0_i;
              HEAP32[$_pre_phi_i >> 2] = $68;
              HEAP32[$F191_0_i + 12 >> 2] = $68;
              HEAP32[$68 + 8 >> 2] = $F191_0_i;
              HEAP32[$68 + 12 >> 2] = $70;
            }
            HEAP32[__gm_ + 8 >> 2] = $rsize_0_ph_i;
            HEAP32[__gm_ + 20 >> 2] = $39;
          }
          var $add_ptr219_i = $v_0_ph_i + 8 | 0;
          if (($add_ptr219_i | 0) == 0) {
            var $nb_0 = $cond, $nb_0$s2 = $nb_0 >> 2;
            __label__ = 156;
            break $if_then$$if_else136$2;
          }
          var $mem_0 = $add_ptr219_i;
          __label__ = 334;
          break $if_then$$if_else136$2;
        }
      } while (0);
      _abort();
      throw "Reached an unreachable!";
    } else {
      if ($bytes >>> 0 > 4294967231) {
        var $nb_0 = -1, $nb_0$s2 = $nb_0 >> 2;
        __label__ = 156;
        break;
      }
      var $add142 = $bytes + 11 | 0;
      var $and143 = $add142 & -8, $and143$s2 = $and143 >> 2;
      var $77 = HEAPU32[__gm_ + 4 >> 2];
      if (($77 | 0) == 0) {
        var $nb_0 = $and143, $nb_0$s2 = $nb_0 >> 2;
        __label__ = 156;
        break;
      }
      var $sub_i5 = -$and143 | 0;
      var $shr_i6 = $add142 >>> 8;
      var $cmp_i7 = ($shr_i6 | 0) == 0;
      do {
        if ($cmp_i7) {
          var $idx_0_i = 0;
        } else {
          if ($and143 >>> 0 > 16777215) {
            var $idx_0_i = 31;
            break;
          }
          var $and_i10 = ($shr_i6 + 1048320 | 0) >>> 16 & 8;
          var $shl_i11 = $shr_i6 << $and_i10;
          var $and8_i = ($shl_i11 + 520192 | 0) >>> 16 & 4;
          var $shl9_i = $shl_i11 << $and8_i;
          var $and12_i = ($shl9_i + 245760 | 0) >>> 16 & 2;
          var $add17_i = 14 - ($and8_i | $and_i10 | $and12_i) + ($shl9_i << $and12_i >>> 15) | 0;
          var $idx_0_i = $and143 >>> (($add17_i + 7 | 0) >>> 0) & 1 | $add17_i << 1;
        }
      } while (0);
      var $idx_0_i;
      var $78 = HEAPU32[__gm_ + ($idx_0_i << 2) + 304 >> 2];
      var $cmp24_i = ($78 | 0) == 0;
      $if_end53_i$$if_then25_i$112 : do {
        if ($cmp24_i) {
          var $v_2_i = 0;
          var $rsize_2_i = $sub_i5;
          var $t_1_i = 0;
        } else {
          if (($idx_0_i | 0) == 31) {
            var $cond_i = 0;
          } else {
            var $cond_i = 25 - ($idx_0_i >>> 1) | 0;
          }
          var $cond_i;
          var $v_0_i = 0;
          var $rsize_0_i = $sub_i5;
          var $t_0_i19 = $78, $t_0_i19$s2 = $t_0_i19 >> 2;
          var $sizebits_0_i = $and143 << $cond_i;
          var $rst_0_i = 0;
          while (1) {
            var $rst_0_i;
            var $sizebits_0_i;
            var $t_0_i19;
            var $rsize_0_i;
            var $v_0_i;
            var $and32_i = HEAP32[$t_0_i19$s2 + 1] & -8;
            var $sub33_i = $and32_i - $and143 | 0;
            if ($sub33_i >>> 0 < $rsize_0_i >>> 0) {
              if (($and32_i | 0) == ($and143 | 0)) {
                var $v_2_i = $t_0_i19;
                var $rsize_2_i = $sub33_i;
                var $t_1_i = $t_0_i19;
                break $if_end53_i$$if_then25_i$112;
              }
              var $v_1_i = $t_0_i19;
              var $rsize_1_i = $sub33_i;
            } else {
              var $v_1_i = $v_0_i;
              var $rsize_1_i = $rsize_0_i;
            }
            var $rsize_1_i;
            var $v_1_i;
            var $80 = HEAPU32[$t_0_i19$s2 + 5];
            var $81 = HEAPU32[(($sizebits_0_i >>> 31 << 2) + 16 >> 2) + $t_0_i19$s2];
            var $rst_1_i = ($80 | 0) == 0 | ($80 | 0) == ($81 | 0) ? $rst_0_i : $80;
            if (($81 | 0) == 0) {
              var $v_2_i = $v_1_i;
              var $rsize_2_i = $rsize_1_i;
              var $t_1_i = $rst_1_i;
              break $if_end53_i$$if_then25_i$112;
            }
            var $v_0_i = $v_1_i;
            var $rsize_0_i = $rsize_1_i;
            var $t_0_i19 = $81, $t_0_i19$s2 = $t_0_i19 >> 2;
            var $sizebits_0_i = $sizebits_0_i << 1;
            var $rst_0_i = $rst_1_i;
          }
        }
      } while (0);
      var $t_1_i;
      var $rsize_2_i;
      var $v_2_i;
      var $or_cond16_i = ($t_1_i | 0) == 0 & ($v_2_i | 0) == 0;
      do {
        if ($or_cond16_i) {
          var $shl59_i = 2 << $idx_0_i;
          var $and63_i = $77 & ($shl59_i | -$shl59_i);
          if (($and63_i | 0) == 0) {
            var $t_2_ph_i = $t_1_i;
            break;
          }
          var $sub69_i = ($and63_i & -$and63_i) - 1 | 0;
          var $and72_i = $sub69_i >>> 12 & 16;
          var $shr74_i = $sub69_i >>> ($and72_i >>> 0);
          var $and76_i = $shr74_i >>> 5 & 8;
          var $shr78_i = $shr74_i >>> ($and76_i >>> 0);
          var $and80_i = $shr78_i >>> 2 & 4;
          var $shr82_i = $shr78_i >>> ($and80_i >>> 0);
          var $and84_i = $shr82_i >>> 1 & 2;
          var $shr86_i = $shr82_i >>> ($and84_i >>> 0);
          var $and88_i = $shr86_i >>> 1 & 1;
          var $t_2_ph_i = HEAP32[__gm_ + (($and76_i | $and72_i | $and80_i | $and84_i | $and88_i) + ($shr86_i >>> ($and88_i >>> 0)) << 2) + 304 >> 2];
        } else {
          var $t_2_ph_i = $t_1_i;
        }
      } while (0);
      var $t_2_ph_i;
      var $cmp9620_i = ($t_2_ph_i | 0) == 0;
      $while_end_i25$$while_body_i24$128 : do {
        if ($cmp9620_i) {
          var $rsize_3_lcssa_i = $rsize_2_i;
          var $v_3_lcssa_i = $v_2_i, $v_3_lcssa_i$s2 = $v_3_lcssa_i >> 2;
        } else {
          var $t_221_i = $t_2_ph_i, $t_221_i$s2 = $t_221_i >> 2;
          var $rsize_322_i = $rsize_2_i;
          var $v_323_i = $v_2_i;
          while (1) {
            var $v_323_i;
            var $rsize_322_i;
            var $t_221_i;
            var $sub100_i = (HEAP32[$t_221_i$s2 + 1] & -8) - $and143 | 0;
            var $cmp101_i23 = $sub100_i >>> 0 < $rsize_322_i >>> 0;
            var $rsize_4_i = $cmp101_i23 ? $sub100_i : $rsize_322_i;
            var $v_4_i = $cmp101_i23 ? $t_221_i : $v_323_i;
            var $84 = HEAPU32[$t_221_i$s2 + 4];
            if (($84 | 0) != 0) {
              var $t_221_i = $84, $t_221_i$s2 = $t_221_i >> 2;
              var $rsize_322_i = $rsize_4_i;
              var $v_323_i = $v_4_i;
              continue;
            }
            var $85 = HEAPU32[$t_221_i$s2 + 5];
            if (($85 | 0) == 0) {
              var $rsize_3_lcssa_i = $rsize_4_i;
              var $v_3_lcssa_i = $v_4_i, $v_3_lcssa_i$s2 = $v_3_lcssa_i >> 2;
              break $while_end_i25$$while_body_i24$128;
            }
            var $t_221_i = $85, $t_221_i$s2 = $t_221_i >> 2;
            var $rsize_322_i = $rsize_4_i;
            var $v_323_i = $v_4_i;
          }
        }
      } while (0);
      var $v_3_lcssa_i;
      var $rsize_3_lcssa_i;
      if (($v_3_lcssa_i | 0) == 0) {
        var $nb_0 = $and143, $nb_0$s2 = $nb_0 >> 2;
        __label__ = 156;
        break;
      }
      if ($rsize_3_lcssa_i >>> 0 >= (HEAP32[__gm_ + 8 >> 2] - $and143 | 0) >>> 0) {
        var $nb_0 = $and143, $nb_0$s2 = $nb_0 >> 2;
        __label__ = 156;
        break;
      }
      var $87 = $v_3_lcssa_i, $87$s2 = $87 >> 2;
      var $88 = HEAPU32[__gm_ + 16 >> 2];
      var $cmp120_i26 = $87 >>> 0 < $88 >>> 0;
      do {
        if (!$cmp120_i26) {
          var $add_ptr_i27 = $87 + $and143 | 0;
          var $89 = $add_ptr_i27;
          if ($87 >>> 0 >= $add_ptr_i27 >>> 0) {
            break;
          }
          var $90 = HEAPU32[$v_3_lcssa_i$s2 + 6];
          var $91 = HEAPU32[$v_3_lcssa_i$s2 + 3];
          var $cmp127_i = ($91 | 0) == ($v_3_lcssa_i | 0);
          do {
            if ($cmp127_i) {
              var $arrayidx143_i = $v_3_lcssa_i + 20 | 0;
              var $94 = HEAP32[$arrayidx143_i >> 2];
              if (($94 | 0) == 0) {
                var $arrayidx147_i = $v_3_lcssa_i + 16 | 0;
                var $95 = HEAP32[$arrayidx147_i >> 2];
                if (($95 | 0) == 0) {
                  var $R_1_i36 = 0, $R_1_i36$s2 = $R_1_i36 >> 2;
                  break;
                }
                var $RP_0_i34 = $arrayidx147_i;
                var $R_0_i33 = $95;
              } else {
                var $RP_0_i34 = $arrayidx143_i;
                var $R_0_i33 = $94;
                __label__ = 103;
              }
              while (1) {
                var $R_0_i33;
                var $RP_0_i34;
                var $arrayidx153_i = $R_0_i33 + 20 | 0;
                var $96 = HEAP32[$arrayidx153_i >> 2];
                if (($96 | 0) != 0) {
                  var $RP_0_i34 = $arrayidx153_i;
                  var $R_0_i33 = $96;
                  continue;
                }
                var $arrayidx157_i = $R_0_i33 + 16 | 0;
                var $97 = HEAPU32[$arrayidx157_i >> 2];
                if (($97 | 0) == 0) {
                  break;
                }
                var $RP_0_i34 = $arrayidx157_i;
                var $R_0_i33 = $97;
              }
              if ($RP_0_i34 >>> 0 < $88 >>> 0) {
                _abort();
                throw "Reached an unreachable!";
              } else {
                HEAP32[$RP_0_i34 >> 2] = 0;
                var $R_1_i36 = $R_0_i33, $R_1_i36$s2 = $R_1_i36 >> 2;
              }
            } else {
              var $92 = HEAPU32[$v_3_lcssa_i$s2 + 2];
              if ($92 >>> 0 < $88 >>> 0) {
                _abort();
                throw "Reached an unreachable!";
              } else {
                HEAP32[$92 + 12 >> 2] = $91;
                HEAP32[$91 + 8 >> 2] = $92;
                var $R_1_i36 = $91, $R_1_i36$s2 = $R_1_i36 >> 2;
              }
            }
          } while (0);
          var $R_1_i36;
          var $cmp172_i = ($90 | 0) == 0;
          $if_end256_i$$if_then174_i$154 : do {
            if (!$cmp172_i) {
              var $index_i37 = $v_3_lcssa_i + 28 | 0;
              var $arrayidx176_i = (HEAP32[$index_i37 >> 2] << 2) + __gm_ + 304 | 0;
              var $cmp177_i = ($v_3_lcssa_i | 0) == (HEAP32[$arrayidx176_i >> 2] | 0);
              do {
                if ($cmp177_i) {
                  HEAP32[$arrayidx176_i >> 2] = $R_1_i36;
                  if (($R_1_i36 | 0) != 0) {
                    break;
                  }
                  var $and186_i = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$index_i37 >> 2] ^ -1);
                  HEAP32[__gm_ + 4 >> 2] = $and186_i;
                  break $if_end256_i$$if_then174_i$154;
                }
                if ($90 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                  _abort();
                  throw "Reached an unreachable!";
                } else {
                  var $arrayidx196_i = $90 + 16 | 0;
                  if ((HEAP32[$arrayidx196_i >> 2] | 0) == ($v_3_lcssa_i | 0)) {
                    HEAP32[$arrayidx196_i >> 2] = $R_1_i36;
                  } else {
                    HEAP32[$90 + 20 >> 2] = $R_1_i36;
                  }
                  if (($R_1_i36 | 0) == 0) {
                    break $if_end256_i$$if_then174_i$154;
                  }
                }
              } while (0);
              if ($R_1_i36 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                _abort();
                throw "Reached an unreachable!";
              } else {
                HEAP32[$R_1_i36$s2 + 6] = $90;
                var $108 = HEAPU32[$v_3_lcssa_i$s2 + 4];
                if (($108 | 0) != 0) {
                  if ($108 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                    _abort();
                    throw "Reached an unreachable!";
                  } else {
                    HEAP32[$R_1_i36$s2 + 4] = $108;
                    HEAP32[$108 + 24 >> 2] = $R_1_i36;
                  }
                }
                var $111 = HEAPU32[$v_3_lcssa_i$s2 + 5];
                if (($111 | 0) == 0) {
                  break;
                }
                if ($111 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                  _abort();
                  throw "Reached an unreachable!";
                } else {
                  HEAP32[$R_1_i36$s2 + 5] = $111;
                  HEAP32[$111 + 24 >> 2] = $R_1_i36;
                }
              }
            }
          } while (0);
          var $cmp257_i = $rsize_3_lcssa_i >>> 0 < 16;
          $if_then259_i$$if_else268_i$182 : do {
            if ($cmp257_i) {
              var $add260_i = $rsize_3_lcssa_i + $and143 | 0;
              HEAP32[$v_3_lcssa_i$s2 + 1] = $add260_i | 3;
              var $114 = $add260_i + ($87 + 4) | 0;
              var $or267_i = HEAP32[$114 >> 2] | 1;
              HEAP32[$114 >> 2] = $or267_i;
            } else {
              HEAP32[$v_3_lcssa_i$s2 + 1] = $and143 | 3;
              HEAP32[(($and143 | 4) >> 2) + $87$s2] = $rsize_3_lcssa_i | 1;
              HEAP32[($rsize_3_lcssa_i >> 2) + $87$s2 + $and143$s2] = $rsize_3_lcssa_i;
              if ($rsize_3_lcssa_i >>> 0 < 256) {
                var $shl280_i = $rsize_3_lcssa_i >>> 2 & 1073741822;
                var $118 = ($shl280_i << 2) + __gm_ + 40 | 0;
                var $119 = HEAPU32[__gm_ >> 2];
                var $shl283_i = 1 << ($rsize_3_lcssa_i >>> 3);
                var $tobool285_i = ($119 & $shl283_i | 0) == 0;
                do {
                  if ($tobool285_i) {
                    HEAP32[__gm_ >> 2] = $119 | $shl283_i;
                    var $F282_0_i = $118;
                    var $_pre_phi_i43 = ($shl280_i + 2 << 2) + __gm_ + 40 | 0;
                  } else {
                    var $120 = ($shl280_i + 2 << 2) + __gm_ + 40 | 0;
                    var $121 = HEAPU32[$120 >> 2];
                    if ($121 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                      var $F282_0_i = $121;
                      var $_pre_phi_i43 = $120;
                      break;
                    }
                    _abort();
                    throw "Reached an unreachable!";
                  }
                } while (0);
                var $_pre_phi_i43;
                var $F282_0_i;
                HEAP32[$_pre_phi_i43 >> 2] = $89;
                HEAP32[$F282_0_i + 12 >> 2] = $89;
                HEAP32[$and143$s2 + ($87$s2 + 2)] = $F282_0_i;
                HEAP32[$and143$s2 + ($87$s2 + 3)] = $118;
              } else {
                var $126 = $add_ptr_i27;
                var $shr310_i = $rsize_3_lcssa_i >>> 8;
                var $cmp311_i = ($shr310_i | 0) == 0;
                do {
                  if ($cmp311_i) {
                    var $I308_0_i = 0;
                  } else {
                    if ($rsize_3_lcssa_i >>> 0 > 16777215) {
                      var $I308_0_i = 31;
                      break;
                    }
                    var $and323_i = ($shr310_i + 1048320 | 0) >>> 16 & 8;
                    var $shl325_i = $shr310_i << $and323_i;
                    var $and328_i = ($shl325_i + 520192 | 0) >>> 16 & 4;
                    var $shl330_i = $shl325_i << $and328_i;
                    var $and333_i = ($shl330_i + 245760 | 0) >>> 16 & 2;
                    var $add338_i = 14 - ($and328_i | $and323_i | $and333_i) + ($shl330_i << $and333_i >>> 15) | 0;
                    var $I308_0_i = $rsize_3_lcssa_i >>> (($add338_i + 7 | 0) >>> 0) & 1 | $add338_i << 1;
                  }
                } while (0);
                var $I308_0_i;
                var $arrayidx347_i = ($I308_0_i << 2) + __gm_ + 304 | 0;
                HEAP32[$and143$s2 + ($87$s2 + 7)] = $I308_0_i;
                var $child349_i = $and143 + ($87 + 16) | 0;
                HEAP32[$and143$s2 + ($87$s2 + 5)] = 0;
                HEAP32[$child349_i >> 2] = 0;
                var $129 = HEAP32[__gm_ + 4 >> 2];
                var $shl354_i = 1 << $I308_0_i;
                if (($129 & $shl354_i | 0) == 0) {
                  var $or360_i = $129 | $shl354_i;
                  HEAP32[__gm_ + 4 >> 2] = $or360_i;
                  HEAP32[$arrayidx347_i >> 2] = $126;
                  HEAP32[$and143$s2 + ($87$s2 + 6)] = $arrayidx347_i;
                  HEAP32[$and143$s2 + ($87$s2 + 3)] = $126;
                  HEAP32[$and143$s2 + ($87$s2 + 2)] = $126;
                } else {
                  if (($I308_0_i | 0) == 31) {
                    var $cond375_i = 0;
                  } else {
                    var $cond375_i = 25 - ($I308_0_i >>> 1) | 0;
                  }
                  var $cond375_i;
                  var $K365_0_i = $rsize_3_lcssa_i << $cond375_i;
                  var $T_0_i = HEAP32[$arrayidx347_i >> 2];
                  while (1) {
                    var $T_0_i;
                    var $K365_0_i;
                    if ((HEAP32[$T_0_i + 4 >> 2] & -8 | 0) == ($rsize_3_lcssa_i | 0)) {
                      var $fd405_i = $T_0_i + 8 | 0;
                      var $142 = HEAPU32[$fd405_i >> 2];
                      var $144 = HEAPU32[__gm_ + 16 >> 2];
                      var $cmp407_i = $T_0_i >>> 0 < $144 >>> 0;
                      do {
                        if (!$cmp407_i) {
                          if ($142 >>> 0 < $144 >>> 0) {
                            break;
                          }
                          HEAP32[$142 + 12 >> 2] = $126;
                          HEAP32[$fd405_i >> 2] = $126;
                          HEAP32[$and143$s2 + ($87$s2 + 2)] = $142;
                          HEAP32[$and143$s2 + ($87$s2 + 3)] = $T_0_i;
                          HEAP32[$and143$s2 + ($87$s2 + 6)] = 0;
                          break $if_then259_i$$if_else268_i$182;
                        }
                      } while (0);
                      _abort();
                      throw "Reached an unreachable!";
                    } else {
                      var $arrayidx386_i = ($K365_0_i >>> 31 << 2) + $T_0_i + 16 | 0;
                      var $136 = HEAPU32[$arrayidx386_i >> 2];
                      if (($136 | 0) == 0) {
                        if ($arrayidx386_i >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                          HEAP32[$arrayidx386_i >> 2] = $126;
                          HEAP32[$and143$s2 + ($87$s2 + 6)] = $T_0_i;
                          HEAP32[$and143$s2 + ($87$s2 + 3)] = $126;
                          HEAP32[$and143$s2 + ($87$s2 + 2)] = $126;
                          break $if_then259_i$$if_else268_i$182;
                        }
                        _abort();
                        throw "Reached an unreachable!";
                      } else {
                        var $K365_0_i = $K365_0_i << 1;
                        var $T_0_i = $136;
                      }
                    }
                  }
                }
              }
            }
          } while (0);
          var $add_ptr426_i = $v_3_lcssa_i + 8 | 0;
          if (($add_ptr426_i | 0) == 0) {
            var $nb_0 = $and143, $nb_0$s2 = $nb_0 >> 2;
            __label__ = 156;
            break $if_then$$if_else136$2;
          }
          var $mem_0 = $add_ptr426_i;
          __label__ = 334;
          break $if_then$$if_else136$2;
        }
      } while (0);
      _abort();
      throw "Reached an unreachable!";
    }
  } while (0);
  $if_end153$$postaction$220 : do {
    if (__label__ == 156) {
      var $nb_0;
      var $150 = HEAPU32[__gm_ + 8 >> 2];
      if ($nb_0 >>> 0 > $150 >>> 0) {
        var $159 = HEAPU32[__gm_ + 12 >> 2];
        if ($nb_0 >>> 0 < $159 >>> 0) {
          var $sub186 = $159 - $nb_0 | 0;
          HEAP32[__gm_ + 12 >> 2] = $sub186;
          var $160 = HEAPU32[__gm_ + 24 >> 2];
          var $161 = $160;
          HEAP32[__gm_ + 24 >> 2] = $161 + $nb_0 | 0;
          HEAP32[($161 + 4 >> 2) + $nb_0$s2] = $sub186 | 1;
          HEAP32[$160 + 4 >> 2] = $nb_0 | 3;
          var $mem_0 = $160 + 8 | 0;
        } else {
          var $cmp_i44 = (HEAP32[_mparams >> 2] | 0) == 0;
          do {
            if ($cmp_i44) {
              if ((HEAP32[_mparams >> 2] | 0) != 0) {
                break;
              }
              var $call_i_i = _sysconf(8);
              if (($call_i_i - 1 & $call_i_i | 0) == 0) {
                HEAP32[_mparams + 8 >> 2] = $call_i_i;
                HEAP32[_mparams + 4 >> 2] = $call_i_i;
                HEAP32[_mparams + 12 >> 2] = -1;
                HEAP32[_mparams + 16 >> 2] = 2097152;
                HEAP32[_mparams + 20 >> 2] = 0;
                HEAP32[__gm_ + 440 >> 2] = 0;
                var $call6_i_i = _time(0);
                HEAP32[_mparams >> 2] = $call6_i_i & -16 ^ 1431655768;
              } else {
                _abort();
                throw "Reached an unreachable!";
              }
            }
          } while (0);
          var $tobool11_i = (HEAP32[__gm_ + 440 >> 2] & 4 | 0) == 0;
          do {
            if ($tobool11_i) {
              var $168 = HEAP32[__gm_ + 24 >> 2];
              var $cmp13_i = ($168 | 0) == 0;
              $if_then17_i$$cond_false_i46$236 : do {
                if ($cmp13_i) {
                  __label__ = 175;
                } else {
                  var $169 = $168;
                  var $sp_0_i_i = __gm_ + 444 | 0;
                  while (1) {
                    var $sp_0_i_i;
                    var $base_i_i = $sp_0_i_i | 0;
                    var $170 = HEAPU32[$base_i_i >> 2];
                    if ($170 >>> 0 <= $169 >>> 0) {
                      var $size_i_i = $sp_0_i_i + 4 | 0;
                      if (($170 + HEAP32[$size_i_i >> 2] | 0) >>> 0 > $169 >>> 0) {
                        break;
                      }
                    }
                    var $172 = HEAPU32[$sp_0_i_i + 8 >> 2];
                    if (($172 | 0) == 0) {
                      __label__ = 175;
                      break $if_then17_i$$cond_false_i46$236;
                    }
                    var $sp_0_i_i = $172;
                  }
                  if (($sp_0_i_i | 0) == 0) {
                    __label__ = 175;
                    break;
                  }
                  var $177 = HEAP32[_mparams + 8 >> 2];
                  var $and50_i = $nb_0 + 47 - HEAP32[__gm_ + 12 >> 2] + $177 & -$177;
                  if ($and50_i >>> 0 >= 2147483647) {
                    __label__ = 183;
                    break;
                  }
                  var $call53_i = _sbrk($and50_i);
                  if (($call53_i | 0) == (HEAP32[$base_i_i >> 2] + HEAP32[$size_i_i >> 2] | 0)) {
                    var $tbase_0_i = $call53_i;
                    var $asize_1_i = $and50_i;
                    var $br_0_i = $call53_i;
                    __label__ = 182;
                    break;
                  }
                  var $br_066_i = $call53_i;
                  var $asize_167_i = $and50_i;
                  __label__ = 184;
                  break;
                }
              } while (0);
              do {
                if (__label__ == 175) {
                  var $call18_i = _sbrk(0);
                  if (($call18_i | 0) == -1) {
                    __label__ = 183;
                    break;
                  }
                  var $173 = HEAP32[_mparams + 8 >> 2];
                  var $and23_i = $173 + ($nb_0 + 47) & -$173;
                  var $174 = $call18_i;
                  var $175 = HEAP32[_mparams + 4 >> 2];
                  var $sub24_i = $175 - 1 | 0;
                  if (($sub24_i & $174 | 0) == 0) {
                    var $asize_0_i = $and23_i;
                  } else {
                    var $asize_0_i = $and23_i - $174 + ($sub24_i + $174 & -$175) | 0;
                  }
                  var $asize_0_i;
                  if ($asize_0_i >>> 0 >= 2147483647) {
                    __label__ = 183;
                    break;
                  }
                  var $call38_i = _sbrk($asize_0_i);
                  if (($call38_i | 0) == ($call18_i | 0)) {
                    var $tbase_0_i = $call18_i;
                    var $asize_1_i = $asize_0_i;
                    var $br_0_i = $call38_i;
                    __label__ = 182;
                    break;
                  }
                  var $br_066_i = $call38_i;
                  var $asize_167_i = $asize_0_i;
                  __label__ = 184;
                  break;
                }
              } while (0);
              if (__label__ == 183) {
                var $or91_i = HEAP32[__gm_ + 440 >> 2] | 4;
                HEAP32[__gm_ + 440 >> 2] = $or91_i;
                __label__ = 192;
                break;
              } else if (__label__ == 182) {
                var $br_0_i;
                var $asize_1_i;
                var $tbase_0_i;
                if (($tbase_0_i | 0) != -1) {
                  var $tsize_280_i = $asize_1_i;
                  var $tbase_281_i = $tbase_0_i, $tbase_281_i$s2 = $tbase_281_i >> 2;
                  __label__ = 195;
                  break;
                }
                var $br_066_i = $br_0_i;
                var $asize_167_i = $asize_1_i;
              }
              var $asize_167_i;
              var $br_066_i;
              var $sub82_i = -$asize_167_i | 0;
              var $or_cond_i56 = ($br_066_i | 0) != -1 & $asize_167_i >>> 0 < 2147483647;
              do {
                if ($or_cond_i56) {
                  if ($asize_167_i >>> 0 >= ($nb_0 + 48 | 0) >>> 0) {
                    var $asize_2_i = $asize_167_i;
                    __label__ = 190;
                    break;
                  }
                  var $181 = HEAP32[_mparams + 8 >> 2];
                  var $and74_i = $nb_0 + 47 - $asize_167_i + $181 & -$181;
                  if ($and74_i >>> 0 >= 2147483647) {
                    var $asize_2_i = $asize_167_i;
                    __label__ = 190;
                    break;
                  }
                  var $call77_i = _sbrk($and74_i);
                  if (($call77_i | 0) == -1) {
                    var $call83_i = _sbrk($sub82_i);
                    __label__ = 191;
                    break;
                  }
                  var $asize_2_i = $and74_i + $asize_167_i | 0;
                  __label__ = 190;
                  break;
                } else {
                  var $asize_2_i = $asize_167_i;
                  __label__ = 190;
                }
              } while (0);
              if (__label__ == 190) {
                var $asize_2_i;
                if (($br_066_i | 0) != -1) {
                  var $tsize_280_i = $asize_2_i;
                  var $tbase_281_i = $br_066_i, $tbase_281_i$s2 = $tbase_281_i >> 2;
                  __label__ = 195;
                  break;
                }
              }
              var $or_i61 = HEAP32[__gm_ + 440 >> 2] | 4;
              HEAP32[__gm_ + 440 >> 2] = $or_i61;
              __label__ = 192;
              break;
            }
            __label__ = 192;
          } while (0);
          do {
            if (__label__ == 192) {
              var $183 = HEAP32[_mparams + 8 >> 2];
              var $and103_i = $183 + ($nb_0 + 47) & -$183;
              if ($and103_i >>> 0 >= 2147483647) {
                __label__ = 333;
                break;
              }
              var $call108_i = _sbrk($and103_i);
              var $call109_i = _sbrk(0);
              if (!(($call109_i | 0) != -1 & ($call108_i | 0) != -1 & $call108_i >>> 0 < $call109_i >>> 0)) {
                __label__ = 333;
                break;
              }
              var $sub_ptr_sub_i = $call109_i - $call108_i | 0;
              if ($sub_ptr_sub_i >>> 0 <= ($nb_0 + 40 | 0) >>> 0 | ($call108_i | 0) == -1) {
                __label__ = 333;
                break;
              }
              var $tsize_280_i = $sub_ptr_sub_i;
              var $tbase_281_i = $call108_i, $tbase_281_i$s2 = $tbase_281_i >> 2;
              __label__ = 195;
              break;
            }
          } while (0);
          do {
            if (__label__ == 195) {
              var $tbase_281_i;
              var $tsize_280_i;
              var $add125_i = HEAP32[__gm_ + 432 >> 2] + $tsize_280_i | 0;
              HEAP32[__gm_ + 432 >> 2] = $add125_i;
              if ($add125_i >>> 0 > HEAPU32[__gm_ + 436 >> 2] >>> 0) {
                HEAP32[__gm_ + 436 >> 2] = $add125_i;
              }
              var $186 = HEAPU32[__gm_ + 24 >> 2], $186$s2 = $186 >> 2;
              var $cmp132_i63 = ($186 | 0) == 0;
              $if_then133_i$$while_cond_i65$276 : do {
                if ($cmp132_i63) {
                  var $187 = HEAPU32[__gm_ + 16 >> 2];
                  if (($187 | 0) == 0 | $tbase_281_i >>> 0 < $187 >>> 0) {
                    HEAP32[__gm_ + 16 >> 2] = $tbase_281_i;
                  }
                  HEAP32[__gm_ + 444 >> 2] = $tbase_281_i;
                  HEAP32[__gm_ + 448 >> 2] = $tsize_280_i;
                  HEAP32[__gm_ + 456 >> 2] = 0;
                  var $188 = HEAP32[_mparams >> 2];
                  HEAP32[__gm_ + 36 >> 2] = $188;
                  HEAP32[__gm_ + 32 >> 2] = -1;
                  var $i_02_i_i = 0;
                  while (1) {
                    var $i_02_i_i;
                    var $shl_i_i = $i_02_i_i << 1;
                    var $189 = ($shl_i_i << 2) + __gm_ + 40 | 0;
                    HEAP32[__gm_ + ($shl_i_i + 3 << 2) + 40 >> 2] = $189;
                    HEAP32[__gm_ + ($shl_i_i + 2 << 2) + 40 >> 2] = $189;
                    var $inc_i_i = $i_02_i_i + 1 | 0;
                    if (($inc_i_i | 0) == 32) {
                      break;
                    }
                    var $i_02_i_i = $inc_i_i;
                  }
                  var $192 = $tbase_281_i + 8 | 0;
                  if (($192 & 7 | 0) == 0) {
                    var $cond_i_i = 0;
                  } else {
                    var $cond_i_i = -$192 & 7;
                  }
                  var $cond_i_i;
                  var $sub5_i_i = $tsize_280_i - 40 - $cond_i_i | 0;
                  HEAP32[__gm_ + 24 >> 2] = $tbase_281_i + $cond_i_i | 0;
                  HEAP32[__gm_ + 12 >> 2] = $sub5_i_i;
                  HEAP32[($cond_i_i + 4 >> 2) + $tbase_281_i$s2] = $sub5_i_i | 1;
                  HEAP32[($tsize_280_i - 36 >> 2) + $tbase_281_i$s2] = 40;
                  var $197 = HEAP32[_mparams + 16 >> 2];
                  HEAP32[__gm_ + 28 >> 2] = $197;
                } else {
                  var $sp_0_i = __gm_ + 444 | 0, $sp_0_i$s2 = $sp_0_i >> 2;
                  while (1) {
                    var $sp_0_i;
                    if (($sp_0_i | 0) == 0) {
                      break;
                    }
                    var $198 = HEAPU32[$sp_0_i$s2];
                    var $size162_i = $sp_0_i + 4 | 0;
                    var $199 = HEAPU32[$size162_i >> 2];
                    var $add_ptr163_i = $198 + $199 | 0;
                    if (($tbase_281_i | 0) == ($add_ptr163_i | 0)) {
                      if ((HEAP32[$sp_0_i$s2 + 3] & 8 | 0) != 0) {
                        break;
                      }
                      var $202 = $186;
                      if (!($202 >>> 0 >= $198 >>> 0 & $202 >>> 0 < $add_ptr163_i >>> 0)) {
                        break;
                      }
                      HEAP32[$size162_i >> 2] = $199 + $tsize_280_i | 0;
                      var $203 = HEAP32[__gm_ + 24 >> 2];
                      var $add189_i = HEAP32[__gm_ + 12 >> 2] + $tsize_280_i | 0;
                      var $205 = $203;
                      var $206 = $203 + 8 | 0;
                      if (($206 & 7 | 0) == 0) {
                        var $cond_i23_i = 0;
                      } else {
                        var $cond_i23_i = -$206 & 7;
                      }
                      var $cond_i23_i;
                      var $208 = $205 + $cond_i23_i | 0;
                      var $sub5_i25_i = $add189_i - $cond_i23_i | 0;
                      HEAP32[__gm_ + 24 >> 2] = $208;
                      HEAP32[__gm_ + 12 >> 2] = $sub5_i25_i;
                      var $or_i26_i = $sub5_i25_i | 1;
                      var $209 = $cond_i23_i + ($205 + 4) | 0;
                      HEAP32[$209 >> 2] = $or_i26_i;
                      var $210 = $add189_i + ($205 + 4) | 0;
                      HEAP32[$210 >> 2] = 40;
                      var $211 = HEAP32[_mparams + 16 >> 2];
                      HEAP32[__gm_ + 28 >> 2] = $211;
                      break $if_then133_i$$while_cond_i65$276;
                    }
                    var $sp_0_i = HEAP32[$sp_0_i$s2 + 2], $sp_0_i$s2 = $sp_0_i >> 2;
                  }
                  if ($tbase_281_i >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                    HEAP32[__gm_ + 16 >> 2] = $tbase_281_i;
                  }
                  var $add_ptr201_i = $tbase_281_i + $tsize_280_i | 0;
                  var $sp_1_i = __gm_ + 444 | 0;
                  while (1) {
                    var $sp_1_i;
                    if (($sp_1_i | 0) == 0) {
                      __label__ = 295;
                      break;
                    }
                    var $base200_i = $sp_1_i | 0;
                    var $213 = HEAPU32[$base200_i >> 2], $213$s2 = $213 >> 2;
                    if (($213 | 0) == ($add_ptr201_i | 0)) {
                      __label__ = 219;
                      break;
                    }
                    var $sp_1_i = HEAP32[$sp_1_i + 8 >> 2];
                  }
                  do {
                    if (__label__ == 219) {
                      if ((HEAP32[$sp_1_i + 12 >> 2] & 8 | 0) != 0) {
                        break;
                      }
                      HEAP32[$base200_i >> 2] = $tbase_281_i;
                      var $size219_i = $sp_1_i + 4 | 0;
                      var $add220_i = HEAP32[$size219_i >> 2] + $tsize_280_i | 0;
                      HEAP32[$size219_i >> 2] = $add220_i;
                      var $217 = $tbase_281_i + 8 | 0;
                      if (($217 & 7 | 0) == 0) {
                        var $cond_i38_i = 0;
                      } else {
                        var $cond_i38_i = -$217 & 7;
                      }
                      var $cond_i38_i;
                      var $219 = $213 + 8 | 0;
                      if (($219 & 7 | 0) == 0) {
                        var $cond15_i_i = 0, $cond15_i_i$s2 = $cond15_i_i >> 2;
                      } else {
                        var $cond15_i_i = -$219 & 7, $cond15_i_i$s2 = $cond15_i_i >> 2;
                      }
                      var $cond15_i_i;
                      var $add_ptr16_i_i = $213 + $cond15_i_i | 0;
                      var $221 = $add_ptr16_i_i;
                      var $add_ptr4_sum_i45_i = $cond_i38_i + $nb_0 | 0, $add_ptr4_sum_i45_i$s2 = $add_ptr4_sum_i45_i >> 2;
                      var $add_ptr17_i_i = $tbase_281_i + $add_ptr4_sum_i45_i | 0;
                      var $222 = $add_ptr17_i_i;
                      var $sub18_i_i = $add_ptr16_i_i - ($tbase_281_i + $cond_i38_i) - $nb_0 | 0;
                      HEAP32[($cond_i38_i + 4 >> 2) + $tbase_281_i$s2] = $nb_0 | 3;
                      var $cmp20_i_i = ($221 | 0) == (HEAP32[__gm_ + 24 >> 2] | 0);
                      $if_then_i47_i$$if_else_i_i$315 : do {
                        if ($cmp20_i_i) {
                          var $add_i_i = HEAP32[__gm_ + 12 >> 2] + $sub18_i_i | 0;
                          HEAP32[__gm_ + 12 >> 2] = $add_i_i;
                          HEAP32[__gm_ + 24 >> 2] = $222;
                          var $or22_i_i = $add_i_i | 1;
                          HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 1)] = $or22_i_i;
                        } else {
                          if (($221 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
                            var $add26_i_i = HEAP32[__gm_ + 8 >> 2] + $sub18_i_i | 0;
                            HEAP32[__gm_ + 8 >> 2] = $add26_i_i;
                            HEAP32[__gm_ + 20 >> 2] = $222;
                            var $or28_i_i = $add26_i_i | 1;
                            HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 1)] = $or28_i_i;
                            var $prev_foot_i49_i = $tbase_281_i + $add26_i_i + $add_ptr4_sum_i45_i | 0;
                            HEAP32[$prev_foot_i49_i >> 2] = $add26_i_i;
                          } else {
                            var $231 = HEAPU32[$cond15_i_i$s2 + ($213$s2 + 1)];
                            if (($231 & 3 | 0) == 1) {
                              var $and37_i_i = $231 & -8;
                              var $shr_i50_i = $231 >>> 3;
                              var $cmp38_i_i = $231 >>> 0 < 256;
                              $if_then39_i_i$$if_else59_i_i$323 : do {
                                if ($cmp38_i_i) {
                                  var $233 = HEAPU32[(($cond15_i_i | 8) >> 2) + $213$s2];
                                  var $235 = HEAPU32[$cond15_i_i$s2 + ($213$s2 + 3)];
                                  if (($233 | 0) == ($235 | 0)) {
                                    var $and43_i_i = HEAP32[__gm_ >> 2] & (1 << $shr_i50_i ^ -1);
                                    HEAP32[__gm_ >> 2] = $and43_i_i;
                                  } else {
                                    var $238 = (($231 >>> 2 & 1073741822) << 2) + __gm_ + 40 | 0;
                                    var $cmp46_i54_i = ($233 | 0) == ($238 | 0);
                                    do {
                                      if ($cmp46_i54_i) {
                                        __label__ = 234;
                                      } else {
                                        if ($233 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                                          __label__ = 237;
                                          break;
                                        }
                                        __label__ = 234;
                                        break;
                                      }
                                    } while (0);
                                    do {
                                      if (__label__ == 234) {
                                        if (($235 | 0) != ($238 | 0)) {
                                          if ($235 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                                            break;
                                          }
                                        }
                                        HEAP32[$233 + 12 >> 2] = $235;
                                        HEAP32[$235 + 8 >> 2] = $233;
                                        break $if_then39_i_i$$if_else59_i_i$323;
                                      }
                                    } while (0);
                                    _abort();
                                    throw "Reached an unreachable!";
                                  }
                                } else {
                                  var $243 = $add_ptr16_i_i;
                                  var $245 = HEAPU32[(($cond15_i_i | 24) >> 2) + $213$s2];
                                  var $247 = HEAPU32[$cond15_i_i$s2 + ($213$s2 + 3)];
                                  var $cmp61_i_i = ($247 | 0) == ($243 | 0);
                                  do {
                                    if ($cmp61_i_i) {
                                      var $add_ptr16_sum56_i_i = $cond15_i_i | 16;
                                      var $252 = $add_ptr16_sum56_i_i + ($213 + 4) | 0;
                                      var $253 = HEAP32[$252 >> 2];
                                      if (($253 | 0) == 0) {
                                        var $arrayidx81_i_i = $213 + $add_ptr16_sum56_i_i | 0;
                                        var $254 = HEAP32[$arrayidx81_i_i >> 2];
                                        if (($254 | 0) == 0) {
                                          var $R_1_i_i = 0, $R_1_i_i$s2 = $R_1_i_i >> 2;
                                          break;
                                        }
                                        var $RP_0_i_i = $arrayidx81_i_i;
                                        var $R_0_i_i = $254;
                                      } else {
                                        var $RP_0_i_i = $252;
                                        var $R_0_i_i = $253;
                                        __label__ = 244;
                                      }
                                      while (1) {
                                        var $R_0_i_i;
                                        var $RP_0_i_i;
                                        var $arrayidx86_i_i = $R_0_i_i + 20 | 0;
                                        var $255 = HEAP32[$arrayidx86_i_i >> 2];
                                        if (($255 | 0) != 0) {
                                          var $RP_0_i_i = $arrayidx86_i_i;
                                          var $R_0_i_i = $255;
                                          continue;
                                        }
                                        var $arrayidx91_i58_i = $R_0_i_i + 16 | 0;
                                        var $256 = HEAPU32[$arrayidx91_i58_i >> 2];
                                        if (($256 | 0) == 0) {
                                          break;
                                        }
                                        var $RP_0_i_i = $arrayidx91_i58_i;
                                        var $R_0_i_i = $256;
                                      }
                                      if ($RP_0_i_i >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                                        _abort();
                                        throw "Reached an unreachable!";
                                      } else {
                                        HEAP32[$RP_0_i_i >> 2] = 0;
                                        var $R_1_i_i = $R_0_i_i, $R_1_i_i$s2 = $R_1_i_i >> 2;
                                      }
                                    } else {
                                      var $249 = HEAPU32[(($cond15_i_i | 8) >> 2) + $213$s2];
                                      if ($249 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                                        _abort();
                                        throw "Reached an unreachable!";
                                      } else {
                                        HEAP32[$249 + 12 >> 2] = $247;
                                        HEAP32[$247 + 8 >> 2] = $249;
                                        var $R_1_i_i = $247, $R_1_i_i$s2 = $R_1_i_i >> 2;
                                      }
                                    }
                                  } while (0);
                                  var $R_1_i_i;
                                  if (($245 | 0) == 0) {
                                    break;
                                  }
                                  var $259 = $cond15_i_i + ($213 + 28) | 0;
                                  var $arrayidx108_i_i = (HEAP32[$259 >> 2] << 2) + __gm_ + 304 | 0;
                                  var $cmp109_i_i = ($243 | 0) == (HEAP32[$arrayidx108_i_i >> 2] | 0);
                                  do {
                                    if ($cmp109_i_i) {
                                      HEAP32[$arrayidx108_i_i >> 2] = $R_1_i_i;
                                      if (($R_1_i_i | 0) != 0) {
                                        break;
                                      }
                                      var $and118_i_i = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$259 >> 2] ^ -1);
                                      HEAP32[__gm_ + 4 >> 2] = $and118_i_i;
                                      break $if_then39_i_i$$if_else59_i_i$323;
                                    }
                                    if ($245 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                                      _abort();
                                      throw "Reached an unreachable!";
                                    } else {
                                      var $arrayidx128_i_i = $245 + 16 | 0;
                                      if ((HEAP32[$arrayidx128_i_i >> 2] | 0) == ($243 | 0)) {
                                        HEAP32[$arrayidx128_i_i >> 2] = $R_1_i_i;
                                      } else {
                                        HEAP32[$245 + 20 >> 2] = $R_1_i_i;
                                      }
                                      if (($R_1_i_i | 0) == 0) {
                                        break $if_then39_i_i$$if_else59_i_i$323;
                                      }
                                    }
                                  } while (0);
                                  if ($R_1_i_i >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                                    _abort();
                                    throw "Reached an unreachable!";
                                  } else {
                                    HEAP32[$R_1_i_i$s2 + 6] = $245;
                                    var $add_ptr16_sum2627_i_i = $cond15_i_i | 16;
                                    var $269 = HEAPU32[($add_ptr16_sum2627_i_i >> 2) + $213$s2];
                                    if (($269 | 0) != 0) {
                                      if ($269 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                                        _abort();
                                        throw "Reached an unreachable!";
                                      } else {
                                        HEAP32[$R_1_i_i$s2 + 4] = $269;
                                        HEAP32[$269 + 24 >> 2] = $R_1_i_i;
                                      }
                                    }
                                    var $273 = HEAPU32[($add_ptr16_sum2627_i_i + 4 >> 2) + $213$s2];
                                    if (($273 | 0) == 0) {
                                      break;
                                    }
                                    if ($273 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                                      _abort();
                                      throw "Reached an unreachable!";
                                    } else {
                                      HEAP32[$R_1_i_i$s2 + 5] = $273;
                                      HEAP32[$273 + 24 >> 2] = $R_1_i_i;
                                    }
                                  }
                                }
                              } while (0);
                              var $oldfirst_0_i_i = $213 + ($and37_i_i | $cond15_i_i) | 0;
                              var $qsize_0_i_i = $and37_i_i + $sub18_i_i | 0;
                            } else {
                              var $oldfirst_0_i_i = $221;
                              var $qsize_0_i_i = $sub18_i_i;
                            }
                            var $qsize_0_i_i;
                            var $oldfirst_0_i_i;
                            var $head193_i_i = $oldfirst_0_i_i + 4 | 0;
                            var $and194_i_i = HEAP32[$head193_i_i >> 2] & -2;
                            HEAP32[$head193_i_i >> 2] = $and194_i_i;
                            HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 1)] = $qsize_0_i_i | 1;
                            HEAP32[($qsize_0_i_i >> 2) + $tbase_281_i$s2 + $add_ptr4_sum_i45_i$s2] = $qsize_0_i_i;
                            if ($qsize_0_i_i >>> 0 < 256) {
                              var $shl206_i_i = $qsize_0_i_i >>> 2 & 1073741822;
                              var $280 = ($shl206_i_i << 2) + __gm_ + 40 | 0;
                              var $281 = HEAPU32[__gm_ >> 2];
                              var $shl211_i_i = 1 << ($qsize_0_i_i >>> 3);
                              var $tobool213_i_i = ($281 & $shl211_i_i | 0) == 0;
                              do {
                                if ($tobool213_i_i) {
                                  HEAP32[__gm_ >> 2] = $281 | $shl211_i_i;
                                  var $F209_0_i_i = $280;
                                  var $_pre_phi_i61_i = ($shl206_i_i + 2 << 2) + __gm_ + 40 | 0;
                                } else {
                                  var $282 = ($shl206_i_i + 2 << 2) + __gm_ + 40 | 0;
                                  var $283 = HEAPU32[$282 >> 2];
                                  if ($283 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                                    var $F209_0_i_i = $283;
                                    var $_pre_phi_i61_i = $282;
                                    break;
                                  }
                                  _abort();
                                  throw "Reached an unreachable!";
                                }
                              } while (0);
                              var $_pre_phi_i61_i;
                              var $F209_0_i_i;
                              HEAP32[$_pre_phi_i61_i >> 2] = $222;
                              HEAP32[$F209_0_i_i + 12 >> 2] = $222;
                              HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 2)] = $F209_0_i_i;
                              HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 3)] = $280;
                            } else {
                              var $288 = $add_ptr17_i_i;
                              var $shr238_i_i = $qsize_0_i_i >>> 8;
                              var $cmp239_i_i = ($shr238_i_i | 0) == 0;
                              do {
                                if ($cmp239_i_i) {
                                  var $I237_0_i_i = 0;
                                } else {
                                  if ($qsize_0_i_i >>> 0 > 16777215) {
                                    var $I237_0_i_i = 31;
                                    break;
                                  }
                                  var $and249_i_i = ($shr238_i_i + 1048320 | 0) >>> 16 & 8;
                                  var $shl250_i_i = $shr238_i_i << $and249_i_i;
                                  var $and253_i_i = ($shl250_i_i + 520192 | 0) >>> 16 & 4;
                                  var $shl255_i_i = $shl250_i_i << $and253_i_i;
                                  var $and258_i_i = ($shl255_i_i + 245760 | 0) >>> 16 & 2;
                                  var $add263_i_i = 14 - ($and253_i_i | $and249_i_i | $and258_i_i) + ($shl255_i_i << $and258_i_i >>> 15) | 0;
                                  var $I237_0_i_i = $qsize_0_i_i >>> (($add263_i_i + 7 | 0) >>> 0) & 1 | $add263_i_i << 1;
                                }
                              } while (0);
                              var $I237_0_i_i;
                              var $arrayidx272_i_i = ($I237_0_i_i << 2) + __gm_ + 304 | 0;
                              HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 7)] = $I237_0_i_i;
                              HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 5)] = 0;
                              HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 4)] = 0;
                              var $291 = HEAP32[__gm_ + 4 >> 2];
                              var $shl279_i_i = 1 << $I237_0_i_i;
                              if (($291 & $shl279_i_i | 0) == 0) {
                                var $or285_i_i = $291 | $shl279_i_i;
                                HEAP32[__gm_ + 4 >> 2] = $or285_i_i;
                                HEAP32[$arrayidx272_i_i >> 2] = $288;
                                HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 6)] = $arrayidx272_i_i;
                                HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 3)] = $288;
                                HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 2)] = $288;
                              } else {
                                if (($I237_0_i_i | 0) == 31) {
                                  var $cond300_i_i = 0;
                                } else {
                                  var $cond300_i_i = 25 - ($I237_0_i_i >>> 1) | 0;
                                }
                                var $cond300_i_i;
                                var $K290_0_i_i = $qsize_0_i_i << $cond300_i_i;
                                var $T_0_i62_i = HEAP32[$arrayidx272_i_i >> 2];
                                while (1) {
                                  var $T_0_i62_i;
                                  var $K290_0_i_i;
                                  if ((HEAP32[$T_0_i62_i + 4 >> 2] & -8 | 0) == ($qsize_0_i_i | 0)) {
                                    var $fd329_i_i = $T_0_i62_i + 8 | 0;
                                    var $304 = HEAPU32[$fd329_i_i >> 2];
                                    var $306 = HEAPU32[__gm_ + 16 >> 2];
                                    var $cmp331_i_i = $T_0_i62_i >>> 0 < $306 >>> 0;
                                    do {
                                      if (!$cmp331_i_i) {
                                        if ($304 >>> 0 < $306 >>> 0) {
                                          break;
                                        }
                                        HEAP32[$304 + 12 >> 2] = $288;
                                        HEAP32[$fd329_i_i >> 2] = $288;
                                        HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 2)] = $304;
                                        HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 3)] = $T_0_i62_i;
                                        HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 6)] = 0;
                                        break $if_then_i47_i$$if_else_i_i$315;
                                      }
                                    } while (0);
                                    _abort();
                                    throw "Reached an unreachable!";
                                  } else {
                                    var $arrayidx310_i_i = ($K290_0_i_i >>> 31 << 2) + $T_0_i62_i + 16 | 0;
                                    var $298 = HEAPU32[$arrayidx310_i_i >> 2];
                                    if (($298 | 0) == 0) {
                                      if ($arrayidx310_i_i >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                                        HEAP32[$arrayidx310_i_i >> 2] = $288;
                                        HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 6)] = $T_0_i62_i;
                                        HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 3)] = $288;
                                        HEAP32[$add_ptr4_sum_i45_i$s2 + ($tbase_281_i$s2 + 2)] = $288;
                                        break $if_then_i47_i$$if_else_i_i$315;
                                      }
                                      _abort();
                                      throw "Reached an unreachable!";
                                    } else {
                                      var $K290_0_i_i = $K290_0_i_i << 1;
                                      var $T_0_i62_i = $298;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } while (0);
                      var $mem_0 = $tbase_281_i + ($cond_i38_i | 8) | 0;
                      break $if_end153$$postaction$220;
                    }
                  } while (0);
                  var $311 = $186;
                  var $sp_0_i_i_i = __gm_ + 444 | 0, $sp_0_i_i_i$s2 = $sp_0_i_i_i >> 2;
                  while (1) {
                    var $sp_0_i_i_i;
                    var $312 = HEAPU32[$sp_0_i_i_i$s2];
                    if ($312 >>> 0 <= $311 >>> 0) {
                      var $313 = HEAPU32[$sp_0_i_i_i$s2 + 1];
                      if (($312 + $313 | 0) >>> 0 > $311 >>> 0) {
                        var $316 = $312;
                        var $315 = $313;
                        break;
                      }
                    }
                    var $314 = HEAPU32[$sp_0_i_i_i$s2 + 2];
                    if (($314 | 0) != 0) {
                      var $sp_0_i_i_i = $314, $sp_0_i_i_i$s2 = $sp_0_i_i_i >> 2;
                      continue;
                    }
                    var $316 = 0;
                    var $315 = 4;
                    break;
                  }
                  var $315;
                  var $316;
                  var $add_ptr_i9_i = $316 + $315 | 0;
                  var $317 = $316 + ($315 - 39) | 0;
                  if (($317 & 7 | 0) == 0) {
                    var $cond_i13_i = 0;
                  } else {
                    var $cond_i13_i = -$317 & 7;
                  }
                  var $cond_i13_i;
                  var $add_ptr7_i_i = $316 + ($315 - 47) + $cond_i13_i | 0;
                  var $cond13_i_i = $add_ptr7_i_i >>> 0 < ($186 + 16 | 0) >>> 0 ? $311 : $add_ptr7_i_i;
                  var $add_ptr14_i_i = $cond13_i_i + 8 | 0, $add_ptr14_i_i$s2 = $add_ptr14_i_i >> 2;
                  var $320 = $add_ptr14_i_i;
                  var $321 = $tbase_281_i + 8 | 0;
                  if (($321 & 7 | 0) == 0) {
                    var $cond_i_i_i = 0;
                  } else {
                    var $cond_i_i_i = -$321 & 7;
                  }
                  var $cond_i_i_i;
                  var $sub5_i_i_i = $tsize_280_i - 40 - $cond_i_i_i | 0;
                  HEAP32[__gm_ + 24 >> 2] = $tbase_281_i + $cond_i_i_i | 0;
                  HEAP32[__gm_ + 12 >> 2] = $sub5_i_i_i;
                  HEAP32[($cond_i_i_i + 4 >> 2) + $tbase_281_i$s2] = $sub5_i_i_i | 1;
                  HEAP32[($tsize_280_i - 36 >> 2) + $tbase_281_i$s2] = 40;
                  var $326 = HEAP32[_mparams + 16 >> 2];
                  HEAP32[__gm_ + 28 >> 2] = $326;
                  HEAP32[$cond13_i_i + 4 >> 2] = 27;
                  HEAP32[$add_ptr14_i_i$s2] = HEAP32[__gm_ + 444 >> 2];
                  HEAP32[$add_ptr14_i_i$s2 + 1] = HEAP32[__gm_ + 448 >> 2];
                  HEAP32[$add_ptr14_i_i$s2 + 2] = HEAP32[__gm_ + 452 >> 2];
                  HEAP32[$add_ptr14_i_i$s2 + 3] = HEAP32[__gm_ + 456 >> 2];
                  HEAP32[__gm_ + 444 >> 2] = $tbase_281_i;
                  HEAP32[__gm_ + 448 >> 2] = $tsize_280_i;
                  HEAP32[__gm_ + 456 >> 2] = 0;
                  HEAP32[__gm_ + 452 >> 2] = $320;
                  var $328 = $cond13_i_i + 28 | 0;
                  HEAP32[$328 >> 2] = 7;
                  var $cmp2713_i_i = ($cond13_i_i + 32 | 0) >>> 0 < $add_ptr_i9_i >>> 0;
                  $if_then_i15_i$$for_end_i_i$429 : do {
                    if ($cmp2713_i_i) {
                      var $add_ptr2414_i_i = $328;
                      while (1) {
                        var $add_ptr2414_i_i;
                        var $330 = $add_ptr2414_i_i + 4 | 0;
                        HEAP32[$330 >> 2] = 7;
                        if (($add_ptr2414_i_i + 8 | 0) >>> 0 >= $add_ptr_i9_i >>> 0) {
                          break $if_then_i15_i$$for_end_i_i$429;
                        }
                        var $add_ptr2414_i_i = $330;
                      }
                    }
                  } while (0);
                  if (($cond13_i_i | 0) == ($311 | 0)) {
                    break;
                  }
                  var $sub_ptr_sub_i_i = $cond13_i_i - $186 | 0;
                  var $add_ptr30_i_i = $311 + $sub_ptr_sub_i_i | 0;
                  var $333 = $sub_ptr_sub_i_i + ($311 + 4) | 0;
                  var $and32_i_i = HEAP32[$333 >> 2] & -2;
                  HEAP32[$333 >> 2] = $and32_i_i;
                  HEAP32[$186$s2 + 1] = $sub_ptr_sub_i_i | 1;
                  HEAP32[$add_ptr30_i_i >> 2] = $sub_ptr_sub_i_i;
                  if ($sub_ptr_sub_i_i >>> 0 < 256) {
                    var $shl_i16_i = $sub_ptr_sub_i_i >>> 2 & 1073741822;
                    var $336 = ($shl_i16_i << 2) + __gm_ + 40 | 0;
                    var $337 = HEAPU32[__gm_ >> 2];
                    var $shl39_i_i = 1 << ($sub_ptr_sub_i_i >>> 3);
                    var $tobool_i_i = ($337 & $shl39_i_i | 0) == 0;
                    do {
                      if ($tobool_i_i) {
                        HEAP32[__gm_ >> 2] = $337 | $shl39_i_i;
                        var $F_0_i_i = $336;
                        var $_pre_phi_i_i = ($shl_i16_i + 2 << 2) + __gm_ + 40 | 0;
                      } else {
                        var $338 = ($shl_i16_i + 2 << 2) + __gm_ + 40 | 0;
                        var $339 = HEAPU32[$338 >> 2];
                        if ($339 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                          var $F_0_i_i = $339;
                          var $_pre_phi_i_i = $338;
                          break;
                        }
                        _abort();
                        throw "Reached an unreachable!";
                      }
                    } while (0);
                    var $_pre_phi_i_i;
                    var $F_0_i_i;
                    HEAP32[$_pre_phi_i_i >> 2] = $186;
                    HEAP32[$F_0_i_i + 12 >> 2] = $186;
                    HEAP32[$186$s2 + 2] = $F_0_i_i;
                    HEAP32[$186$s2 + 3] = $336;
                  } else {
                    var $342 = $186;
                    var $shr58_i_i = $sub_ptr_sub_i_i >>> 8;
                    var $cmp59_i_i = ($shr58_i_i | 0) == 0;
                    do {
                      if ($cmp59_i_i) {
                        var $I57_0_i_i = 0;
                      } else {
                        if ($sub_ptr_sub_i_i >>> 0 > 16777215) {
                          var $I57_0_i_i = 31;
                          break;
                        }
                        var $and69_i_i = ($shr58_i_i + 1048320 | 0) >>> 16 & 8;
                        var $shl70_i_i = $shr58_i_i << $and69_i_i;
                        var $and73_i_i = ($shl70_i_i + 520192 | 0) >>> 16 & 4;
                        var $shl75_i_i = $shl70_i_i << $and73_i_i;
                        var $and78_i_i = ($shl75_i_i + 245760 | 0) >>> 16 & 2;
                        var $add83_i_i = 14 - ($and73_i_i | $and69_i_i | $and78_i_i) + ($shl75_i_i << $and78_i_i >>> 15) | 0;
                        var $I57_0_i_i = $sub_ptr_sub_i_i >>> (($add83_i_i + 7 | 0) >>> 0) & 1 | $add83_i_i << 1;
                      }
                    } while (0);
                    var $I57_0_i_i;
                    var $arrayidx91_i_i = ($I57_0_i_i << 2) + __gm_ + 304 | 0;
                    HEAP32[$186$s2 + 7] = $I57_0_i_i;
                    HEAP32[$186$s2 + 5] = 0;
                    HEAP32[$186$s2 + 4] = 0;
                    var $344 = HEAP32[__gm_ + 4 >> 2];
                    var $shl95_i_i = 1 << $I57_0_i_i;
                    if (($344 & $shl95_i_i | 0) == 0) {
                      var $or101_i_i = $344 | $shl95_i_i;
                      HEAP32[__gm_ + 4 >> 2] = $or101_i_i;
                      HEAP32[$arrayidx91_i_i >> 2] = $342;
                      HEAP32[$186$s2 + 6] = $arrayidx91_i_i;
                      HEAP32[$186$s2 + 3] = $186;
                      HEAP32[$186$s2 + 2] = $186;
                    } else {
                      if (($I57_0_i_i | 0) == 31) {
                        var $cond115_i_i = 0;
                      } else {
                        var $cond115_i_i = 25 - ($I57_0_i_i >>> 1) | 0;
                      }
                      var $cond115_i_i;
                      var $K105_0_i_i = $sub_ptr_sub_i_i << $cond115_i_i;
                      var $T_0_i_i = HEAP32[$arrayidx91_i_i >> 2];
                      while (1) {
                        var $T_0_i_i;
                        var $K105_0_i_i;
                        if ((HEAP32[$T_0_i_i + 4 >> 2] & -8 | 0) == ($sub_ptr_sub_i_i | 0)) {
                          var $fd145_i_i = $T_0_i_i + 8 | 0;
                          var $350 = HEAPU32[$fd145_i_i >> 2];
                          var $352 = HEAPU32[__gm_ + 16 >> 2];
                          var $cmp147_i_i = $T_0_i_i >>> 0 < $352 >>> 0;
                          do {
                            if (!$cmp147_i_i) {
                              if ($350 >>> 0 < $352 >>> 0) {
                                break;
                              }
                              HEAP32[$350 + 12 >> 2] = $342;
                              HEAP32[$fd145_i_i >> 2] = $342;
                              HEAP32[$186$s2 + 2] = $350;
                              HEAP32[$186$s2 + 3] = $T_0_i_i;
                              HEAP32[$186$s2 + 6] = 0;
                              break $if_then133_i$$while_cond_i65$276;
                            }
                          } while (0);
                          _abort();
                          throw "Reached an unreachable!";
                        } else {
                          var $arrayidx126_i_i = ($K105_0_i_i >>> 31 << 2) + $T_0_i_i + 16 | 0;
                          var $347 = HEAPU32[$arrayidx126_i_i >> 2];
                          if (($347 | 0) == 0) {
                            if ($arrayidx126_i_i >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                              HEAP32[$arrayidx126_i_i >> 2] = $342;
                              HEAP32[$186$s2 + 6] = $T_0_i_i;
                              HEAP32[$186$s2 + 3] = $186;
                              HEAP32[$186$s2 + 2] = $186;
                              break $if_then133_i$$while_cond_i65$276;
                            }
                            _abort();
                            throw "Reached an unreachable!";
                          } else {
                            var $K105_0_i_i = $K105_0_i_i << 1;
                            var $T_0_i_i = $347;
                          }
                        }
                      }
                    }
                  }
                }
              } while (0);
              var $354 = HEAPU32[__gm_ + 12 >> 2];
              if ($354 >>> 0 <= $nb_0 >>> 0) {
                break;
              }
              var $sub230_i = $354 - $nb_0 | 0;
              HEAP32[__gm_ + 12 >> 2] = $sub230_i;
              var $355 = HEAPU32[__gm_ + 24 >> 2];
              var $356 = $355;
              HEAP32[__gm_ + 24 >> 2] = $356 + $nb_0 | 0;
              HEAP32[($356 + 4 >> 2) + $nb_0$s2] = $sub230_i | 1;
              HEAP32[$355 + 4 >> 2] = $nb_0 | 3;
              var $mem_0 = $355 + 8 | 0;
              break $if_end153$$postaction$220;
            }
          } while (0);
          var $call242_i = ___errno();
          HEAP32[$call242_i >> 2] = 12;
          var $mem_0 = 0;
        }
      } else {
        var $sub158 = $150 - $nb_0 | 0;
        var $151 = HEAPU32[__gm_ + 20 >> 2];
        if ($sub158 >>> 0 > 15) {
          var $152 = $151;
          HEAP32[__gm_ + 20 >> 2] = $152 + $nb_0 | 0;
          HEAP32[__gm_ + 8 >> 2] = $sub158;
          HEAP32[($152 + 4 >> 2) + $nb_0$s2] = $sub158 | 1;
          HEAP32[$152 + $150 >> 2] = $sub158;
          HEAP32[$151 + 4 >> 2] = $nb_0 | 3;
        } else {
          HEAP32[__gm_ + 8 >> 2] = 0;
          HEAP32[__gm_ + 20 >> 2] = 0;
          HEAP32[$151 + 4 >> 2] = $150 | 3;
          var $156 = $150 + ($151 + 4) | 0;
          var $or178 = HEAP32[$156 >> 2] | 1;
          HEAP32[$156 >> 2] = $or178;
        }
        var $mem_0 = $151 + 8 | 0;
      }
    }
  } while (0);
  var $mem_0;
  return $mem_0;
  return null;
}

function _free($mem) {
  var $R288_1$s2;
  var $R_1$s2;
  var $p_0$s2;
  var $48$s2;
  var $add_ptr_sum1$s2;
  var $and5$s2;
  var $mem$s2 = $mem >> 2;
  var __label__;
  var $cmp = ($mem | 0) == 0;
  $if_end586$$if_then$2 : do {
    if (!$cmp) {
      var $add_ptr = $mem - 8 | 0;
      var $0 = $add_ptr;
      var $1 = HEAPU32[__gm_ + 16 >> 2];
      var $cmp1 = $add_ptr >>> 0 < $1 >>> 0;
      $erroraction$$land_rhs$4 : do {
        if (!$cmp1) {
          var $3 = HEAPU32[$mem - 4 >> 2];
          var $and = $3 & 3;
          if (($and | 0) == 1) {
            break;
          }
          var $and5 = $3 & -8, $and5$s2 = $and5 >> 2;
          var $add_ptr6 = $mem + ($and5 - 8) | 0;
          var $4 = $add_ptr6;
          var $tobool9 = ($3 & 1 | 0) == 0;
          $if_then10$$if_end198$7 : do {
            if ($tobool9) {
              var $5 = HEAPU32[$add_ptr >> 2];
              if (($and | 0) == 0) {
                break $if_end586$$if_then$2;
              }
              var $add_ptr_sum1 = -8 - $5 | 0, $add_ptr_sum1$s2 = $add_ptr_sum1 >> 2;
              var $add_ptr16 = $mem + $add_ptr_sum1 | 0;
              var $6 = $add_ptr16;
              var $add17 = $5 + $and5 | 0;
              if ($add_ptr16 >>> 0 < $1 >>> 0) {
                break $erroraction$$land_rhs$4;
              }
              if (($6 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
                var $48$s2 = ($mem + ($and5 - 4) | 0) >> 2;
                if ((HEAP32[$48$s2] & 3 | 0) != 3) {
                  var $p_0 = $6, $p_0$s2 = $p_0 >> 2;
                  var $psize_0 = $add17;
                  break;
                }
                HEAP32[__gm_ + 8 >> 2] = $add17;
                var $and189 = HEAP32[$48$s2] & -2;
                HEAP32[$48$s2] = $and189;
                HEAP32[$add_ptr_sum1$s2 + ($mem$s2 + 1)] = $add17 | 1;
                HEAP32[$add_ptr6 >> 2] = $add17;
                break $if_end586$$if_then$2;
              }
              if ($5 >>> 0 < 256) {
                var $9 = HEAPU32[$add_ptr_sum1$s2 + ($mem$s2 + 2)];
                var $11 = HEAPU32[$add_ptr_sum1$s2 + ($mem$s2 + 3)];
                if (($9 | 0) == ($11 | 0)) {
                  var $and32 = HEAP32[__gm_ >> 2] & (1 << ($5 >>> 3) ^ -1);
                  HEAP32[__gm_ >> 2] = $and32;
                  var $p_0 = $6, $p_0$s2 = $p_0 >> 2;
                  var $psize_0 = $add17;
                } else {
                  var $14 = (($5 >>> 2 & 1073741822) << 2) + __gm_ + 40 | 0;
                  var $or_cond = ($9 | 0) != ($14 | 0) & $9 >>> 0 < $1 >>> 0;
                  do {
                    if (!$or_cond) {
                      if (!(($11 | 0) == ($14 | 0) | $11 >>> 0 >= $1 >>> 0)) {
                        break;
                      }
                      HEAP32[$9 + 12 >> 2] = $11;
                      HEAP32[$11 + 8 >> 2] = $9;
                      var $p_0 = $6, $p_0$s2 = $p_0 >> 2;
                      var $psize_0 = $add17;
                      break $if_then10$$if_end198$7;
                    }
                  } while (0);
                  _abort();
                  throw "Reached an unreachable!";
                }
              } else {
                var $17 = $add_ptr16;
                var $19 = HEAPU32[$add_ptr_sum1$s2 + ($mem$s2 + 6)];
                var $21 = HEAPU32[$add_ptr_sum1$s2 + ($mem$s2 + 3)];
                var $cmp57 = ($21 | 0) == ($17 | 0);
                do {
                  if ($cmp57) {
                    var $25 = $add_ptr_sum1 + ($mem + 20) | 0;
                    var $26 = HEAP32[$25 >> 2];
                    if (($26 | 0) == 0) {
                      var $arrayidx78 = $add_ptr_sum1 + ($mem + 16) | 0;
                      var $27 = HEAP32[$arrayidx78 >> 2];
                      if (($27 | 0) == 0) {
                        var $R_1 = 0, $R_1$s2 = $R_1 >> 2;
                        break;
                      }
                      var $RP_0 = $arrayidx78;
                      var $R_0 = $27;
                    } else {
                      var $RP_0 = $25;
                      var $R_0 = $26;
                      __label__ = 20;
                    }
                    while (1) {
                      var $R_0;
                      var $RP_0;
                      var $arrayidx83 = $R_0 + 20 | 0;
                      var $28 = HEAP32[$arrayidx83 >> 2];
                      if (($28 | 0) != 0) {
                        var $RP_0 = $arrayidx83;
                        var $R_0 = $28;
                        continue;
                      }
                      var $arrayidx88 = $R_0 + 16 | 0;
                      var $29 = HEAPU32[$arrayidx88 >> 2];
                      if (($29 | 0) == 0) {
                        break;
                      }
                      var $RP_0 = $arrayidx88;
                      var $R_0 = $29;
                    }
                    if ($RP_0 >>> 0 < $1 >>> 0) {
                      _abort();
                      throw "Reached an unreachable!";
                    } else {
                      HEAP32[$RP_0 >> 2] = 0;
                      var $R_1 = $R_0, $R_1$s2 = $R_1 >> 2;
                    }
                  } else {
                    var $23 = HEAPU32[$add_ptr_sum1$s2 + ($mem$s2 + 2)];
                    if ($23 >>> 0 < $1 >>> 0) {
                      _abort();
                      throw "Reached an unreachable!";
                    } else {
                      HEAP32[$23 + 12 >> 2] = $21;
                      HEAP32[$21 + 8 >> 2] = $23;
                      var $R_1 = $21, $R_1$s2 = $R_1 >> 2;
                    }
                  }
                } while (0);
                var $R_1;
                if (($19 | 0) == 0) {
                  var $p_0 = $6, $p_0$s2 = $p_0 >> 2;
                  var $psize_0 = $add17;
                  break;
                }
                var $31 = $add_ptr_sum1 + ($mem + 28) | 0;
                var $arrayidx104 = (HEAP32[$31 >> 2] << 2) + __gm_ + 304 | 0;
                var $cmp105 = ($17 | 0) == (HEAP32[$arrayidx104 >> 2] | 0);
                do {
                  if ($cmp105) {
                    HEAP32[$arrayidx104 >> 2] = $R_1;
                    if (($R_1 | 0) != 0) {
                      break;
                    }
                    var $and114 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$31 >> 2] ^ -1);
                    HEAP32[__gm_ + 4 >> 2] = $and114;
                    var $p_0 = $6, $p_0$s2 = $p_0 >> 2;
                    var $psize_0 = $add17;
                    break $if_then10$$if_end198$7;
                  }
                  if ($19 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                    _abort();
                    throw "Reached an unreachable!";
                  } else {
                    var $arrayidx123 = $19 + 16 | 0;
                    if ((HEAP32[$arrayidx123 >> 2] | 0) == ($17 | 0)) {
                      HEAP32[$arrayidx123 >> 2] = $R_1;
                    } else {
                      HEAP32[$19 + 20 >> 2] = $R_1;
                    }
                    if (($R_1 | 0) == 0) {
                      var $p_0 = $6, $p_0$s2 = $p_0 >> 2;
                      var $psize_0 = $add17;
                      break $if_then10$$if_end198$7;
                    }
                  }
                } while (0);
                if ($R_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                  _abort();
                  throw "Reached an unreachable!";
                } else {
                  HEAP32[$R_1$s2 + 6] = $19;
                  var $41 = HEAPU32[$add_ptr_sum1$s2 + ($mem$s2 + 4)];
                  if (($41 | 0) != 0) {
                    if ($41 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                      _abort();
                      throw "Reached an unreachable!";
                    } else {
                      HEAP32[$R_1$s2 + 4] = $41;
                      HEAP32[$41 + 24 >> 2] = $R_1;
                    }
                  }
                  var $45 = HEAPU32[$add_ptr_sum1$s2 + ($mem$s2 + 5)];
                  if (($45 | 0) == 0) {
                    var $p_0 = $6, $p_0$s2 = $p_0 >> 2;
                    var $psize_0 = $add17;
                    break;
                  }
                  if ($45 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                    _abort();
                    throw "Reached an unreachable!";
                  } else {
                    HEAP32[$R_1$s2 + 5] = $45;
                    HEAP32[$45 + 24 >> 2] = $R_1;
                    var $p_0 = $6, $p_0$s2 = $p_0 >> 2;
                    var $psize_0 = $add17;
                  }
                }
              }
            } else {
              var $p_0 = $0, $p_0$s2 = $p_0 >> 2;
              var $psize_0 = $and5;
            }
          } while (0);
          var $psize_0;
          var $p_0;
          var $52 = $p_0;
          if ($52 >>> 0 >= $add_ptr6 >>> 0) {
            break;
          }
          var $53 = $mem + ($and5 - 4) | 0;
          var $54 = HEAPU32[$53 >> 2];
          if (($54 & 1 | 0) == 0) {
            break;
          }
          var $tobool212 = ($54 & 2 | 0) == 0;
          do {
            if ($tobool212) {
              if (($4 | 0) == (HEAP32[__gm_ + 24 >> 2] | 0)) {
                var $add217 = HEAP32[__gm_ + 12 >> 2] + $psize_0 | 0;
                HEAP32[__gm_ + 12 >> 2] = $add217;
                HEAP32[__gm_ + 24 >> 2] = $p_0;
                var $or218 = $add217 | 1;
                HEAP32[$p_0$s2 + 1] = $or218;
                if (($p_0 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
                  HEAP32[__gm_ + 20 >> 2] = 0;
                  HEAP32[__gm_ + 8 >> 2] = 0;
                }
                if ($add217 >>> 0 <= HEAPU32[__gm_ + 28 >> 2] >>> 0) {
                  break $if_end586$$if_then$2;
                }
                var $59 = _sys_trim(0);
                break $if_end586$$if_then$2;
              }
              if (($4 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
                var $add232 = HEAP32[__gm_ + 8 >> 2] + $psize_0 | 0;
                HEAP32[__gm_ + 8 >> 2] = $add232;
                HEAP32[__gm_ + 20 >> 2] = $p_0;
                var $or233 = $add232 | 1;
                HEAP32[$p_0$s2 + 1] = $or233;
                var $prev_foot236 = $52 + $add232 | 0;
                HEAP32[$prev_foot236 >> 2] = $add232;
                break $if_end586$$if_then$2;
              }
              var $add240 = ($54 & -8) + $psize_0 | 0;
              var $shr241 = $54 >>> 3;
              var $cmp242 = $54 >>> 0 < 256;
              $if_then244$$if_else284$82 : do {
                if ($cmp242) {
                  var $63 = HEAPU32[$mem$s2 + $and5$s2];
                  var $65 = HEAPU32[(($and5 | 4) >> 2) + $mem$s2];
                  if (($63 | 0) == ($65 | 0)) {
                    var $and256 = HEAP32[__gm_ >> 2] & (1 << $shr241 ^ -1);
                    HEAP32[__gm_ >> 2] = $and256;
                  } else {
                    var $68 = (($54 >>> 2 & 1073741822) << 2) + __gm_ + 40 | 0;
                    var $cmp260 = ($63 | 0) == ($68 | 0);
                    do {
                      if ($cmp260) {
                        __label__ = 62;
                      } else {
                        if ($63 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                          __label__ = 65;
                          break;
                        }
                        __label__ = 62;
                        break;
                      }
                    } while (0);
                    do {
                      if (__label__ == 62) {
                        if (($65 | 0) != ($68 | 0)) {
                          if ($65 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                            break;
                          }
                        }
                        HEAP32[$63 + 12 >> 2] = $65;
                        HEAP32[$65 + 8 >> 2] = $63;
                        break $if_then244$$if_else284$82;
                      }
                    } while (0);
                    _abort();
                    throw "Reached an unreachable!";
                  }
                } else {
                  var $73 = $add_ptr6;
                  var $75 = HEAPU32[$and5$s2 + ($mem$s2 + 4)];
                  var $77 = HEAPU32[(($and5 | 4) >> 2) + $mem$s2];
                  var $cmp290 = ($77 | 0) == ($73 | 0);
                  do {
                    if ($cmp290) {
                      var $82 = $and5 + ($mem + 12) | 0;
                      var $83 = HEAP32[$82 >> 2];
                      if (($83 | 0) == 0) {
                        var $arrayidx313 = $and5 + ($mem + 8) | 0;
                        var $84 = HEAP32[$arrayidx313 >> 2];
                        if (($84 | 0) == 0) {
                          var $R288_1 = 0, $R288_1$s2 = $R288_1 >> 2;
                          break;
                        }
                        var $RP306_0 = $arrayidx313;
                        var $R288_0 = $84;
                      } else {
                        var $RP306_0 = $82;
                        var $R288_0 = $83;
                        __label__ = 72;
                      }
                      while (1) {
                        var $R288_0;
                        var $RP306_0;
                        var $arrayidx320 = $R288_0 + 20 | 0;
                        var $85 = HEAP32[$arrayidx320 >> 2];
                        if (($85 | 0) != 0) {
                          var $RP306_0 = $arrayidx320;
                          var $R288_0 = $85;
                          continue;
                        }
                        var $arrayidx325 = $R288_0 + 16 | 0;
                        var $86 = HEAPU32[$arrayidx325 >> 2];
                        if (($86 | 0) == 0) {
                          break;
                        }
                        var $RP306_0 = $arrayidx325;
                        var $R288_0 = $86;
                      }
                      if ($RP306_0 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                        _abort();
                        throw "Reached an unreachable!";
                      } else {
                        HEAP32[$RP306_0 >> 2] = 0;
                        var $R288_1 = $R288_0, $R288_1$s2 = $R288_1 >> 2;
                      }
                    } else {
                      var $79 = HEAPU32[$mem$s2 + $and5$s2];
                      if ($79 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                        _abort();
                        throw "Reached an unreachable!";
                      } else {
                        HEAP32[$79 + 12 >> 2] = $77;
                        HEAP32[$77 + 8 >> 2] = $79;
                        var $R288_1 = $77, $R288_1$s2 = $R288_1 >> 2;
                      }
                    }
                  } while (0);
                  var $R288_1;
                  if (($75 | 0) == 0) {
                    break;
                  }
                  var $89 = $and5 + ($mem + 20) | 0;
                  var $arrayidx345 = (HEAP32[$89 >> 2] << 2) + __gm_ + 304 | 0;
                  var $cmp346 = ($73 | 0) == (HEAP32[$arrayidx345 >> 2] | 0);
                  do {
                    if ($cmp346) {
                      HEAP32[$arrayidx345 >> 2] = $R288_1;
                      if (($R288_1 | 0) != 0) {
                        break;
                      }
                      var $and355 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$89 >> 2] ^ -1);
                      HEAP32[__gm_ + 4 >> 2] = $and355;
                      break $if_then244$$if_else284$82;
                    }
                    if ($75 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                      _abort();
                      throw "Reached an unreachable!";
                    } else {
                      var $arrayidx364 = $75 + 16 | 0;
                      if ((HEAP32[$arrayidx364 >> 2] | 0) == ($73 | 0)) {
                        HEAP32[$arrayidx364 >> 2] = $R288_1;
                      } else {
                        HEAP32[$75 + 20 >> 2] = $R288_1;
                      }
                      if (($R288_1 | 0) == 0) {
                        break $if_then244$$if_else284$82;
                      }
                    }
                  } while (0);
                  if ($R288_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                    _abort();
                    throw "Reached an unreachable!";
                  } else {
                    HEAP32[$R288_1$s2 + 6] = $75;
                    var $99 = HEAPU32[$and5$s2 + ($mem$s2 + 2)];
                    if (($99 | 0) != 0) {
                      if ($99 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                        _abort();
                        throw "Reached an unreachable!";
                      } else {
                        HEAP32[$R288_1$s2 + 4] = $99;
                        HEAP32[$99 + 24 >> 2] = $R288_1;
                      }
                    }
                    var $103 = HEAPU32[$and5$s2 + ($mem$s2 + 3)];
                    if (($103 | 0) == 0) {
                      break;
                    }
                    if ($103 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                      _abort();
                      throw "Reached an unreachable!";
                    } else {
                      HEAP32[$R288_1$s2 + 5] = $103;
                      HEAP32[$103 + 24 >> 2] = $R288_1;
                    }
                  }
                }
              } while (0);
              HEAP32[$p_0$s2 + 1] = $add240 | 1;
              HEAP32[$52 + $add240 >> 2] = $add240;
              if (($p_0 | 0) != (HEAP32[__gm_ + 20 >> 2] | 0)) {
                var $psize_1 = $add240;
                break;
              }
              HEAP32[__gm_ + 8 >> 2] = $add240;
              break $if_end586$$if_then$2;
            } else {
              HEAP32[$53 >> 2] = $54 & -2;
              HEAP32[$p_0$s2 + 1] = $psize_0 | 1;
              HEAP32[$52 + $psize_0 >> 2] = $psize_0;
              var $psize_1 = $psize_0;
            }
          } while (0);
          var $psize_1;
          if ($psize_1 >>> 0 < 256) {
            var $shl450 = $psize_1 >>> 2 & 1073741822;
            var $108 = ($shl450 << 2) + __gm_ + 40 | 0;
            var $109 = HEAPU32[__gm_ >> 2];
            var $shl453 = 1 << ($psize_1 >>> 3);
            var $tobool455 = ($109 & $shl453 | 0) == 0;
            do {
              if ($tobool455) {
                HEAP32[__gm_ >> 2] = $109 | $shl453;
                var $F452_0 = $108;
                var $_pre_phi = ($shl450 + 2 << 2) + __gm_ + 40 | 0;
              } else {
                var $110 = ($shl450 + 2 << 2) + __gm_ + 40 | 0;
                var $111 = HEAPU32[$110 >> 2];
                if ($111 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                  var $F452_0 = $111;
                  var $_pre_phi = $110;
                  break;
                }
                _abort();
                throw "Reached an unreachable!";
              }
            } while (0);
            var $_pre_phi;
            var $F452_0;
            HEAP32[$_pre_phi >> 2] = $p_0;
            HEAP32[$F452_0 + 12 >> 2] = $p_0;
            HEAP32[$p_0$s2 + 2] = $F452_0;
            HEAP32[$p_0$s2 + 3] = $108;
            break $if_end586$$if_then$2;
          }
          var $114 = $p_0;
          var $shr477 = $psize_1 >>> 8;
          var $cmp478 = ($shr477 | 0) == 0;
          do {
            if ($cmp478) {
              var $I476_0 = 0;
            } else {
              if ($psize_1 >>> 0 > 16777215) {
                var $I476_0 = 31;
                break;
              }
              var $and487 = ($shr477 + 1048320 | 0) >>> 16 & 8;
              var $shl488 = $shr477 << $and487;
              var $and491 = ($shl488 + 520192 | 0) >>> 16 & 4;
              var $shl493 = $shl488 << $and491;
              var $and496 = ($shl493 + 245760 | 0) >>> 16 & 2;
              var $add501 = 14 - ($and491 | $and487 | $and496) + ($shl493 << $and496 >>> 15) | 0;
              var $I476_0 = $psize_1 >>> (($add501 + 7 | 0) >>> 0) & 1 | $add501 << 1;
            }
          } while (0);
          var $I476_0;
          var $arrayidx509 = ($I476_0 << 2) + __gm_ + 304 | 0;
          HEAP32[$p_0$s2 + 7] = $I476_0;
          HEAP32[$p_0$s2 + 5] = 0;
          HEAP32[$p_0$s2 + 4] = 0;
          var $116 = HEAP32[__gm_ + 4 >> 2];
          var $shl515 = 1 << $I476_0;
          var $tobool517 = ($116 & $shl515 | 0) == 0;
          $if_then518$$if_else524$154 : do {
            if ($tobool517) {
              var $or520 = $116 | $shl515;
              HEAP32[__gm_ + 4 >> 2] = $or520;
              HEAP32[$arrayidx509 >> 2] = $114;
              HEAP32[$p_0$s2 + 6] = $arrayidx509;
              HEAP32[$p_0$s2 + 3] = $p_0;
              HEAP32[$p_0$s2 + 2] = $p_0;
            } else {
              if (($I476_0 | 0) == 31) {
                var $cond = 0;
              } else {
                var $cond = 25 - ($I476_0 >>> 1) | 0;
              }
              var $cond;
              var $K525_0 = $psize_1 << $cond;
              var $T_0 = HEAP32[$arrayidx509 >> 2];
              while (1) {
                var $T_0;
                var $K525_0;
                if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($psize_1 | 0)) {
                  var $fd559 = $T_0 + 8 | 0;
                  var $122 = HEAPU32[$fd559 >> 2];
                  var $124 = HEAPU32[__gm_ + 16 >> 2];
                  var $cmp560 = $T_0 >>> 0 < $124 >>> 0;
                  do {
                    if (!$cmp560) {
                      if ($122 >>> 0 < $124 >>> 0) {
                        break;
                      }
                      HEAP32[$122 + 12 >> 2] = $114;
                      HEAP32[$fd559 >> 2] = $114;
                      HEAP32[$p_0$s2 + 2] = $122;
                      HEAP32[$p_0$s2 + 3] = $T_0;
                      HEAP32[$p_0$s2 + 6] = 0;
                      break $if_then518$$if_else524$154;
                    }
                  } while (0);
                  _abort();
                  throw "Reached an unreachable!";
                } else {
                  var $arrayidx541 = ($K525_0 >>> 31 << 2) + $T_0 + 16 | 0;
                  var $119 = HEAPU32[$arrayidx541 >> 2];
                  if (($119 | 0) == 0) {
                    if ($arrayidx541 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
                      HEAP32[$arrayidx541 >> 2] = $114;
                      HEAP32[$p_0$s2 + 6] = $T_0;
                      HEAP32[$p_0$s2 + 3] = $p_0;
                      HEAP32[$p_0$s2 + 2] = $p_0;
                      break $if_then518$$if_else524$154;
                    }
                    _abort();
                    throw "Reached an unreachable!";
                  } else {
                    var $K525_0 = $K525_0 << 1;
                    var $T_0 = $119;
                  }
                }
              }
            }
          } while (0);
          var $dec = HEAP32[__gm_ + 32 >> 2] - 1 | 0;
          HEAP32[__gm_ + 32 >> 2] = $dec;
          if (($dec | 0) != 0) {
            break $if_end586$$if_then$2;
          }
          var $sp_01_i = HEAP32[__gm_ + 452 >> 2];
          var $cmp2_i = ($sp_01_i | 0) == 0;
          $release_unused_segments_exit$$if_end255_i$177 : do {
            if (!$cmp2_i) {
              var $sp_03_i = $sp_01_i;
              while (1) {
                var $sp_03_i;
                var $sp_0_i = HEAP32[$sp_03_i + 8 >> 2];
                if (($sp_0_i | 0) == 0) {
                  break $release_unused_segments_exit$$if_end255_i$177;
                }
                var $sp_03_i = $sp_0_i;
              }
            }
          } while (0);
          HEAP32[__gm_ + 32 >> 2] = -1;
          break $if_end586$$if_then$2;
        }
      } while (0);
      _abort();
      throw "Reached an unreachable!";
    }
  } while (0);
  return;
  return;
}

function _malloc_footprint() {
  return HEAP32[__gm_ + 432 >> 2];
  return null;
}

function _malloc_max_footprint() {
  return HEAP32[__gm_ + 436 >> 2];
  return null;
}

function _calloc($n_elements, $elem_size) {
  var $cmp = ($n_elements | 0) == 0;
  do {
    if ($cmp) {
      var $req_0 = 0;
    } else {
      var $mul = $elem_size * $n_elements | 0;
      if (($elem_size | $n_elements) >>> 0 <= 65535) {
        var $req_0 = $mul;
        break;
      }
      var $div = Math.floor(($mul >>> 0) / ($n_elements >>> 0));
      if (($div | 0) == ($elem_size | 0)) {
        var $req_0 = $mul;
        break;
      }
      var $req_0 = -1;
    }
  } while (0);
  var $req_0;
  var $call = _malloc($req_0);
  var $cmp4 = ($call | 0) == 0;
  do {
    if (!$cmp4) {
      if ((HEAP32[$call - 4 >> 2] & 3 | 0) == 0) {
        break;
      }
      _memset($call, 0, $req_0, 1);
    }
  } while (0);
  return $call;
  return null;
}

function _memalign($alignment, $bytes) {
  var $3$s2;
  var $cmp_i = $alignment >>> 0 < 9;
  do {
    if ($cmp_i) {
      var $call_i = _malloc($bytes);
      var $retval_0_i = $call_i;
    } else {
      var $alignment_addr_0_i = $alignment >>> 0 < 16 ? 16 : $alignment;
      var $cmp4_i = ($alignment_addr_0_i - 1 & $alignment_addr_0_i | 0) == 0;
      $if_end7_i$$while_cond_preheader_i$74 : do {
        if ($cmp4_i) {
          var $alignment_addr_1_i = $alignment_addr_0_i;
        } else {
          if ($alignment_addr_0_i >>> 0 <= 16) {
            var $alignment_addr_1_i = 16;
            break;
          }
          var $a_04_i = 16;
          while (1) {
            var $a_04_i;
            var $shl_i = $a_04_i << 1;
            if ($shl_i >>> 0 >= $alignment_addr_0_i >>> 0) {
              var $alignment_addr_1_i = $shl_i;
              break $if_end7_i$$while_cond_preheader_i$74;
            }
            var $a_04_i = $shl_i;
          }
        }
      } while (0);
      var $alignment_addr_1_i;
      if ((-64 - $alignment_addr_1_i | 0) >>> 0 > $bytes >>> 0) {
        if ($bytes >>> 0 < 11) {
          var $cond_i = 16;
        } else {
          var $cond_i = $bytes + 11 & -8;
        }
        var $cond_i;
        var $call21_i = _malloc($cond_i + ($alignment_addr_1_i + 12) | 0);
        if (($call21_i | 0) == 0) {
          var $retval_0_i = 0;
          break;
        }
        var $add_ptr_i = $call21_i - 8 | 0;
        if ((($call21_i >>> 0) % ($alignment_addr_1_i >>> 0) | 0) == 0) {
          var $p_0_in_i = $add_ptr_i;
          var $leader_1_i = 0;
        } else {
          var $2 = $call21_i + ($alignment_addr_1_i - 1) & -$alignment_addr_1_i;
          var $add_ptr30_i = $2 - 8 | 0;
          var $sub_ptr_rhs_cast_i = $add_ptr_i;
          if (($add_ptr30_i - $sub_ptr_rhs_cast_i | 0) >>> 0 > 15) {
            var $cond36_i = $add_ptr30_i;
          } else {
            var $cond36_i = $2 + ($alignment_addr_1_i - 8) | 0;
          }
          var $cond36_i;
          var $sub_ptr_sub39_i = $cond36_i - $sub_ptr_rhs_cast_i | 0;
          var $3$s2 = ($call21_i - 4 | 0) >> 2;
          var $4 = HEAP32[$3$s2];
          var $sub41_i = ($4 & -8) - $sub_ptr_sub39_i | 0;
          if (($4 & 3 | 0) == 0) {
            var $add46_i = HEAP32[$add_ptr_i >> 2] + $sub_ptr_sub39_i | 0;
            HEAP32[$cond36_i >> 2] = $add46_i;
            HEAP32[$cond36_i + 4 >> 2] = $sub41_i;
            var $p_0_in_i = $cond36_i;
            var $leader_1_i = 0;
          } else {
            var $7 = $cond36_i + 4 | 0;
            var $or52_i = $sub41_i | HEAP32[$7 >> 2] & 1 | 2;
            HEAP32[$7 >> 2] = $or52_i;
            var $9 = $sub41_i + ($cond36_i + 4) | 0;
            var $or56_i = HEAP32[$9 >> 2] | 1;
            HEAP32[$9 >> 2] = $or56_i;
            var $or60_i = $sub_ptr_sub39_i | HEAP32[$3$s2] & 1 | 2;
            HEAP32[$3$s2] = $or60_i;
            var $12 = $call21_i + ($sub_ptr_sub39_i - 4) | 0;
            var $or64_i = HEAP32[$12 >> 2] | 1;
            HEAP32[$12 >> 2] = $or64_i;
            var $p_0_in_i = $cond36_i;
            var $leader_1_i = $call21_i;
          }
        }
        var $leader_1_i;
        var $p_0_in_i;
        var $14 = $p_0_in_i + 4 | 0;
        var $15 = HEAPU32[$14 >> 2];
        var $cmp70_i = ($15 & 3 | 0) == 0;
        do {
          if ($cmp70_i) {
            var $trailer_0_i = 0;
          } else {
            var $and73_i = $15 & -8;
            if ($and73_i >>> 0 <= ($cond_i + 16 | 0) >>> 0) {
              var $trailer_0_i = 0;
              break;
            }
            var $sub77_i = $and73_i - $cond_i | 0;
            HEAP32[$14 >> 2] = $cond_i | $15 & 1 | 2;
            HEAP32[$p_0_in_i + ($cond_i | 4) >> 2] = $sub77_i | 3;
            var $17 = $p_0_in_i + ($and73_i | 4) | 0;
            var $or94_i = HEAP32[$17 >> 2] | 1;
            HEAP32[$17 >> 2] = $or94_i;
            var $trailer_0_i = $cond_i + ($p_0_in_i + 8) | 0;
          }
        } while (0);
        var $trailer_0_i;
        if (($leader_1_i | 0) != 0) {
          _free($leader_1_i);
        }
        if (($trailer_0_i | 0) != 0) {
          _free($trailer_0_i);
        }
        var $retval_0_i = $p_0_in_i + 8 | 0;
      } else {
        var $call13_i = ___errno();
        HEAP32[$call13_i >> 2] = 12;
        var $retval_0_i = 0;
      }
    }
  } while (0);
  var $retval_0_i;
  return $retval_0_i;
  return null;
}

function _independent_calloc($n_elements, $elem_size, $chunks) {
  var __stackBase__ = STACKTOP;
  STACKTOP += 4;
  var $sz = __stackBase__;
  HEAP32[$sz >> 2] = $elem_size;
  var $call = _ialloc($n_elements, $sz, 3, $chunks);
  STACKTOP = __stackBase__;
  return $call;
  return null;
}

function _independent_comalloc($n_elements, $sizes, $chunks) {
  var $call = _ialloc($n_elements, $sizes, 0, $chunks);
  return $call;
  return null;
}

function _sys_trim($pad) {
  var $size$s2;
  var $sp_0_i$s2;
  var $cmp = (HEAP32[_mparams >> 2] | 0) == 0;
  do {
    if ($cmp) {
      if ((HEAP32[_mparams >> 2] | 0) != 0) {
        break;
      }
      var $call_i = _sysconf(8);
      if (($call_i - 1 & $call_i | 0) == 0) {
        HEAP32[_mparams + 8 >> 2] = $call_i;
        HEAP32[_mparams + 4 >> 2] = $call_i;
        HEAP32[_mparams + 12 >> 2] = -1;
        HEAP32[_mparams + 16 >> 2] = 2097152;
        HEAP32[_mparams + 20 >> 2] = 0;
        HEAP32[__gm_ + 440 >> 2] = 0;
        var $call6_i = _time(0);
        HEAP32[_mparams >> 2] = $call6_i & -16 ^ 1431655768;
      } else {
        _abort();
        throw "Reached an unreachable!";
      }
    }
  } while (0);
  var $cmp1 = $pad >>> 0 < 4294967232;
  $land_lhs_true$$if_end51$9 : do {
    if ($cmp1) {
      var $2 = HEAPU32[__gm_ + 24 >> 2];
      if (($2 | 0) == 0) {
        var $released_2 = 0;
        break;
      }
      var $3 = HEAPU32[__gm_ + 12 >> 2];
      var $cmp3 = $3 >>> 0 > ($pad + 40 | 0) >>> 0;
      do {
        if ($cmp3) {
          var $4 = HEAPU32[_mparams + 8 >> 2];
          var $add7 = -40 - $pad - 1 + $3 + $4 | 0;
          var $div = Math.floor(($add7 >>> 0) / ($4 >>> 0));
          var $mul = ($div - 1) * $4 | 0;
          var $5 = $2;
          var $sp_0_i = __gm_ + 444 | 0, $sp_0_i$s2 = $sp_0_i >> 2;
          while (1) {
            var $sp_0_i;
            var $6 = HEAPU32[$sp_0_i$s2];
            if ($6 >>> 0 <= $5 >>> 0) {
              if (($6 + HEAP32[$sp_0_i$s2 + 1] | 0) >>> 0 > $5 >>> 0) {
                var $retval_0_i = $sp_0_i;
                break;
              }
            }
            var $8 = HEAPU32[$sp_0_i$s2 + 2];
            if (($8 | 0) == 0) {
              var $retval_0_i = 0;
              break;
            }
            var $sp_0_i = $8, $sp_0_i$s2 = $sp_0_i >> 2;
          }
          var $retval_0_i;
          if ((HEAP32[$retval_0_i + 12 >> 2] & 8 | 0) != 0) {
            break;
          }
          var $call20 = _sbrk(0);
          var $size$s2 = ($retval_0_i + 4 | 0) >> 2;
          if (($call20 | 0) != (HEAP32[$retval_0_i >> 2] + HEAP32[$size$s2] | 0)) {
            break;
          }
          var $sub19_mul = $mul >>> 0 > 2147483646 ? -2147483648 - $4 | 0 : $mul;
          var $sub23 = -$sub19_mul | 0;
          var $call24 = _sbrk($sub23);
          var $call25 = _sbrk(0);
          if (!(($call24 | 0) != -1 & $call25 >>> 0 < $call20 >>> 0)) {
            break;
          }
          var $sub_ptr_sub = $call20 - $call25 | 0;
          if (($call20 | 0) == ($call25 | 0)) {
            break;
          }
          var $sub37 = HEAP32[$size$s2] - $sub_ptr_sub | 0;
          HEAP32[$size$s2] = $sub37;
          var $sub38 = HEAP32[__gm_ + 432 >> 2] - $sub_ptr_sub | 0;
          HEAP32[__gm_ + 432 >> 2] = $sub38;
          var $14 = HEAP32[__gm_ + 24 >> 2];
          var $sub41 = HEAP32[__gm_ + 12 >> 2] - $sub_ptr_sub | 0;
          var $16 = $14;
          var $17 = $14 + 8 | 0;
          if (($17 & 7 | 0) == 0) {
            var $cond_i = 0;
          } else {
            var $cond_i = -$17 & 7;
          }
          var $cond_i;
          var $19 = $16 + $cond_i | 0;
          var $sub5_i = $sub41 - $cond_i | 0;
          HEAP32[__gm_ + 24 >> 2] = $19;
          HEAP32[__gm_ + 12 >> 2] = $sub5_i;
          var $or_i = $sub5_i | 1;
          var $20 = $cond_i + ($16 + 4) | 0;
          HEAP32[$20 >> 2] = $or_i;
          var $21 = $sub41 + ($16 + 4) | 0;
          HEAP32[$21 >> 2] = 40;
          var $22 = HEAP32[_mparams + 16 >> 2];
          HEAP32[__gm_ + 28 >> 2] = $22;
          var $released_2 = ($call20 | 0) != ($call25 | 0);
          break $land_lhs_true$$if_end51$9;
        }
      } while (0);
      if (HEAPU32[__gm_ + 12 >> 2] >>> 0 <= HEAPU32[__gm_ + 28 >> 2] >>> 0) {
        var $released_2 = 0;
        break;
      }
      HEAP32[__gm_ + 28 >> 2] = -1;
      var $released_2 = 0;
    } else {
      var $released_2 = 0;
    }
  } while (0);
  var $released_2;
  return $released_2 & 1;
  return null;
}

function _realloc($oldmem, $bytes) {
  var $4$s2;
  var $0$s2;
  var $cmp = ($oldmem | 0) == 0;
  $if_then$$if_else$41 : do {
    if ($cmp) {
      var $call = _malloc($bytes);
      var $retval_0 = $call;
    } else {
      if ($bytes >>> 0 > 4294967231) {
        var $call_i = ___errno();
        HEAP32[$call_i >> 2] = 12;
        var $retval_0 = 0;
      } else {
        var $add_ptr_i = $oldmem - 8 | 0;
        var $0$s2 = ($oldmem - 4 | 0) >> 2;
        var $1 = HEAPU32[$0$s2];
        var $and_i = $1 & -8;
        var $add_ptr_sum_i = $and_i - 8 | 0;
        var $2 = $oldmem + $add_ptr_sum_i | 0;
        var $cmp2_i = $add_ptr_i >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0;
        do {
          if (!$cmp2_i) {
            var $and4_i = $1 & 3;
            if (!(($and4_i | 0) != 1 & ($add_ptr_sum_i | 0) > -8)) {
              break;
            }
            var $4$s2 = ($oldmem + ($and_i - 4) | 0) >> 2;
            if ((HEAP32[$4$s2] & 1 | 0) == 0) {
              break;
            }
            if ($bytes >>> 0 < 11) {
              var $cond_i = 16;
            } else {
              var $cond_i = $bytes + 11 & -8;
            }
            var $cond_i;
            var $cmp17_i = ($and4_i | 0) == 0;
            $if_then18_i$$if_else_i$54 : do {
              if ($cmp17_i) {
                if ($cond_i >>> 0 < 256 | $and_i >>> 0 < ($cond_i | 4) >>> 0) {
                  break;
                }
                if (!(($and_i - $cond_i | 0) >>> 0 > HEAP32[_mparams + 8 >> 2] << 1 >>> 0 | ($add_ptr_i | 0) == 0)) {
                  var $retval_0 = $oldmem;
                  break $if_then$$if_else$41;
                }
              } else {
                var $cmp20_i = $and_i >>> 0 < $cond_i >>> 0;
                do {
                  if (!$cmp20_i) {
                    var $sub_i = $and_i - $cond_i | 0;
                    if ($sub_i >>> 0 <= 15) {
                      break;
                    }
                    HEAP32[$0$s2] = $1 & 1 | $cond_i | 2;
                    HEAP32[$oldmem + ($cond_i - 4) >> 2] = $sub_i | 3;
                    var $or37_i = HEAP32[$4$s2] | 1;
                    HEAP32[$4$s2] = $or37_i;
                    var $add_ptr38_i = $oldmem + $cond_i | 0;
                    if (($add_ptr38_i | 0) == 0) {
                      var $retval_0 = $oldmem;
                      break $if_then$$if_else$41;
                    }
                    _free($add_ptr38_i);
                    var $retval_0 = $oldmem;
                    break $if_then$$if_else$41;
                  }
                  if (($2 | 0) != (HEAP32[__gm_ + 24 >> 2] | 0)) {
                    break $if_then18_i$$if_else_i$54;
                  }
                  var $add43_i = HEAP32[__gm_ + 12 >> 2] + $and_i | 0;
                  if ($add43_i >>> 0 <= $cond_i >>> 0) {
                    break $if_then18_i$$if_else_i$54;
                  }
                  var $sub48_i = $add43_i - $cond_i | 0;
                  var $9 = $oldmem + ($cond_i - 8) | 0;
                  HEAP32[$0$s2] = $1 & 1 | $cond_i | 2;
                  var $or58_i = $sub48_i | 1;
                  HEAP32[$oldmem + ($cond_i - 4) >> 2] = $or58_i;
                  HEAP32[__gm_ + 24 >> 2] = $9;
                  HEAP32[__gm_ + 12 >> 2] = $sub48_i;
                } while (0);
                if (($add_ptr_i | 0) != 0) {
                  var $retval_0 = $oldmem;
                  break $if_then$$if_else$41;
                }
              }
            } while (0);
            var $call74_i = _malloc($bytes);
            if (($call74_i | 0) == 0) {
              var $retval_0 = 0;
              break $if_then$$if_else$41;
            }
            var $cond80_i = (HEAP32[$0$s2] & 3 | 0) == 0 ? 8 : 4;
            var $sub81_i = $and_i - $cond80_i | 0;
            var $cond86_i = $sub81_i >>> 0 < $bytes >>> 0 ? $sub81_i : $bytes;
            _memcpy($call74_i, $oldmem, $cond86_i, 1);
            _free($oldmem);
            var $retval_0 = $call74_i;
            break $if_then$$if_else$41;
          }
        } while (0);
        _abort();
        throw "Reached an unreachable!";
      }
    }
  } while (0);
  var $retval_0;
  return $retval_0;
  return null;
}

function _ialloc($n_elements, $sizes, $opts, $chunks) {
  var $marray_1$s2;
  var __label__;
  var $cmp = (HEAP32[_mparams >> 2] | 0) == 0;
  do {
    if ($cmp) {
      if ((HEAP32[_mparams >> 2] | 0) != 0) {
        break;
      }
      var $call_i = _sysconf(8);
      if (($call_i - 1 & $call_i | 0) == 0) {
        HEAP32[_mparams + 8 >> 2] = $call_i;
        HEAP32[_mparams + 4 >> 2] = $call_i;
        HEAP32[_mparams + 12 >> 2] = -1;
        HEAP32[_mparams + 16 >> 2] = 2097152;
        HEAP32[_mparams + 20 >> 2] = 0;
        HEAP32[__gm_ + 440 >> 2] = 0;
        var $call6_i = _time(0);
        HEAP32[_mparams >> 2] = $call6_i & -16 ^ 1431655768;
      } else {
        _abort();
        throw "Reached an unreachable!";
      }
    }
  } while (0);
  var $cmp1 = ($chunks | 0) == 0;
  var $cmp2 = ($n_elements | 0) == 0;
  do {
    if ($cmp1) {
      if ($cmp2) {
        var $call6 = _malloc(0);
        var $retval_0 = $call6;
        __label__ = 32;
        break;
      }
      var $mul = $n_elements << 2;
      if ($mul >>> 0 < 11) {
        var $marray_0 = 0;
        var $array_size_0 = 16;
        __label__ = 11;
        break;
      }
      var $marray_0 = 0;
      var $array_size_0 = $mul + 11 & -8;
      __label__ = 11;
      break;
    } else {
      if ($cmp2) {
        var $retval_0 = $chunks;
        __label__ = 32;
        break;
      }
      var $marray_0 = $chunks;
      var $array_size_0 = 0;
      __label__ = 11;
      break;
    }
  } while (0);
  do {
    if (__label__ == 11) {
      var $array_size_0;
      var $marray_0;
      var $tobool13 = ($opts & 1 | 0) == 0;
      $for_cond_preheader$$if_then14$124 : do {
        if ($tobool13) {
          if ($cmp2) {
            var $element_size_0 = 0;
            var $contents_size_1 = 0;
            break;
          }
          var $contents_size_08 = 0;
          var $i_09 = 0;
          while (1) {
            var $i_09;
            var $contents_size_08;
            var $4 = HEAPU32[$sizes + ($i_09 << 2) >> 2];
            if ($4 >>> 0 < 11) {
              var $cond34 = 16;
            } else {
              var $cond34 = $4 + 11 & -8;
            }
            var $cond34;
            var $add35 = $cond34 + $contents_size_08 | 0;
            var $inc = $i_09 + 1 | 0;
            if (($inc | 0) == ($n_elements | 0)) {
              var $element_size_0 = 0;
              var $contents_size_1 = $add35;
              break $for_cond_preheader$$if_then14$124;
            }
            var $contents_size_08 = $add35;
            var $i_09 = $inc;
          }
        } else {
          var $3 = HEAPU32[$sizes >> 2];
          if ($3 >>> 0 < 11) {
            var $cond22 = 16;
          } else {
            var $cond22 = $3 + 11 & -8;
          }
          var $cond22;
          var $element_size_0 = $cond22;
          var $contents_size_1 = $cond22 * $n_elements | 0;
        }
      } while (0);
      var $contents_size_1;
      var $element_size_0;
      var $call40 = _malloc($array_size_0 - 4 + $contents_size_1 | 0);
      if (($call40 | 0) == 0) {
        var $retval_0 = 0;
        break;
      }
      var $add_ptr = $call40 - 8 | 0;
      var $and48 = HEAP32[$call40 - 4 >> 2] & -8;
      if (($opts & 2 | 0) != 0) {
        var $sub53 = -4 - $array_size_0 + $and48 | 0;
        _memset($call40, 0, $sub53, 1);
      }
      if (($marray_0 | 0) == 0) {
        var $7 = $call40 + $contents_size_1 | 0;
        var $or60 = $and48 - $contents_size_1 | 3;
        HEAP32[$call40 + ($contents_size_1 - 4) >> 2] = $or60;
        var $marray_1 = $7, $marray_1$s2 = $marray_1 >> 2;
        var $remainder_size_0 = $contents_size_1;
      } else {
        var $marray_1 = $marray_0, $marray_1$s2 = $marray_1 >> 2;
        var $remainder_size_0 = $and48;
      }
      var $remainder_size_0;
      var $marray_1;
      HEAP32[$marray_1$s2] = $call40;
      var $sub66 = $n_elements - 1 | 0;
      var $cmp672 = ($sub66 | 0) == 0;
      $if_else88$$if_then68_lr_ph$143 : do {
        if ($cmp672) {
          var $p_0_in_lcssa = $add_ptr;
          var $remainder_size_1_lcssa = $remainder_size_0;
        } else {
          if (($element_size_0 | 0) == 0) {
            var $p_0_in3_us = $add_ptr;
            var $remainder_size_14_us = $remainder_size_0;
            var $i_15_us = 0;
            while (1) {
              var $i_15_us;
              var $remainder_size_14_us;
              var $p_0_in3_us;
              var $10 = HEAPU32[$sizes + ($i_15_us << 2) >> 2];
              if ($10 >>> 0 < 11) {
                var $size_0_us = 16;
              } else {
                var $size_0_us = $10 + 11 & -8;
              }
              var $size_0_us;
              var $sub83_us = $remainder_size_14_us - $size_0_us | 0;
              HEAP32[$p_0_in3_us + 4 >> 2] = $size_0_us | 3;
              var $add_ptr87_us = $p_0_in3_us + $size_0_us | 0;
              var $inc94_us = $i_15_us + 1 | 0;
              HEAP32[($inc94_us << 2 >> 2) + $marray_1$s2] = $size_0_us + ($p_0_in3_us + 8) | 0;
              if (($inc94_us | 0) == ($sub66 | 0)) {
                var $p_0_in_lcssa = $add_ptr87_us;
                var $remainder_size_1_lcssa = $sub83_us;
                break $if_else88$$if_then68_lr_ph$143;
              }
              var $p_0_in3_us = $add_ptr87_us;
              var $remainder_size_14_us = $sub83_us;
              var $i_15_us = $inc94_us;
            }
          } else {
            var $or85 = $element_size_0 | 3;
            var $add_ptr87_sum = $element_size_0 + 8 | 0;
            var $p_0_in3 = $add_ptr;
            var $remainder_size_14 = $remainder_size_0;
            var $i_15 = 0;
            while (1) {
              var $i_15;
              var $remainder_size_14;
              var $p_0_in3;
              var $sub83 = $remainder_size_14 - $element_size_0 | 0;
              HEAP32[$p_0_in3 + 4 >> 2] = $or85;
              var $add_ptr87 = $p_0_in3 + $element_size_0 | 0;
              var $inc94 = $i_15 + 1 | 0;
              HEAP32[($inc94 << 2 >> 2) + $marray_1$s2] = $p_0_in3 + $add_ptr87_sum | 0;
              if (($inc94 | 0) == ($sub66 | 0)) {
                var $p_0_in_lcssa = $add_ptr87;
                var $remainder_size_1_lcssa = $sub83;
                break $if_else88$$if_then68_lr_ph$143;
              }
              var $p_0_in3 = $add_ptr87;
              var $remainder_size_14 = $sub83;
              var $i_15 = $inc94;
            }
          }
        }
      } while (0);
      var $remainder_size_1_lcssa;
      var $p_0_in_lcssa;
      HEAP32[$p_0_in_lcssa + 4 >> 2] = $remainder_size_1_lcssa | 3;
      var $retval_0 = $marray_1;
    }
  } while (0);
  var $retval_0;
  return $retval_0;
  return null;
}

function _valloc($bytes) {
  var $cmp = (HEAP32[_mparams >> 2] | 0) == 0;
  do {
    if ($cmp) {
      if ((HEAP32[_mparams >> 2] | 0) != 0) {
        break;
      }
      var $call_i = _sysconf(8);
      if (($call_i - 1 & $call_i | 0) == 0) {
        HEAP32[_mparams + 8 >> 2] = $call_i;
        HEAP32[_mparams + 4 >> 2] = $call_i;
        HEAP32[_mparams + 12 >> 2] = -1;
        HEAP32[_mparams + 16 >> 2] = 2097152;
        HEAP32[_mparams + 20 >> 2] = 0;
        HEAP32[__gm_ + 440 >> 2] = 0;
        var $call6_i = _time(0);
        HEAP32[_mparams >> 2] = $call6_i & -16 ^ 1431655768;
      } else {
        _abort();
        throw "Reached an unreachable!";
      }
    }
  } while (0);
  var $2 = HEAP32[_mparams + 4 >> 2];
  var $call1 = _memalign($2, $bytes);
  return $call1;
  return null;
}

function _pvalloc($bytes) {
  var $cmp = (HEAP32[_mparams >> 2] | 0) == 0;
  do {
    if ($cmp) {
      if ((HEAP32[_mparams >> 2] | 0) != 0) {
        break;
      }
      var $call_i = _sysconf(8);
      if (($call_i - 1 & $call_i | 0) == 0) {
        HEAP32[_mparams + 8 >> 2] = $call_i;
        HEAP32[_mparams + 4 >> 2] = $call_i;
        HEAP32[_mparams + 12 >> 2] = -1;
        HEAP32[_mparams + 16 >> 2] = 2097152;
        HEAP32[_mparams + 20 >> 2] = 0;
        HEAP32[__gm_ + 440 >> 2] = 0;
        var $call6_i = _time(0);
        HEAP32[_mparams >> 2] = $call6_i & -16 ^ 1431655768;
      } else {
        _abort();
        throw "Reached an unreachable!";
      }
    }
  } while (0);
  var $2 = HEAP32[_mparams + 4 >> 2];
  var $and = $bytes - 1 + $2 & -$2;
  var $call2 = _memalign($2, $and);
  return $call2;
  return null;
}

function _malloc_trim($pad) {
  var $cmp = (HEAP32[_mparams >> 2] | 0) == 0;
  do {
    if ($cmp) {
      if ((HEAP32[_mparams >> 2] | 0) != 0) {
        break;
      }
      var $call_i = _sysconf(8);
      if (($call_i - 1 & $call_i | 0) == 0) {
        HEAP32[_mparams + 8 >> 2] = $call_i;
        HEAP32[_mparams + 4 >> 2] = $call_i;
        HEAP32[_mparams + 12 >> 2] = -1;
        HEAP32[_mparams + 16 >> 2] = 2097152;
        HEAP32[_mparams + 20 >> 2] = 0;
        HEAP32[__gm_ + 440 >> 2] = 0;
        var $call6_i = _time(0);
        HEAP32[_mparams >> 2] = $call6_i & -16 ^ 1431655768;
      } else {
        _abort();
        throw "Reached an unreachable!";
      }
    }
  } while (0);
  var $call1 = _sys_trim($pad);
  return $call1;
  return null;
}

function __ZNKSt9bad_alloc4whatEv($this) {
  return STRING_TABLE.__str337 | 0;
  return null;
}

function __ZNKSt20bad_array_new_length4whatEv($this) {
  return STRING_TABLE.__str1438 | 0;
  return null;
}

function __ZSt15get_new_handlerv() {
  var $0 = (tempValue = HEAP32[__ZL13__new_handler >> 2], HEAP32[__ZL13__new_handler >> 2] = tempValue, tempValue);
  return $0;
  return null;
}

function __ZSt15set_new_handlerPFvvE($handler) {
  var $0 = $handler;
  var $1 = (tempValue = HEAP32[__ZL13__new_handler >> 2], HEAP32[__ZL13__new_handler >> 2] = $0, tempValue);
  return $1;
  return null;
}

function _malloc_usable_size($mem) {
  var $cmp = ($mem | 0) == 0;
  do {
    if ($cmp) {
      var $retval_0 = 0;
    } else {
      var $1 = HEAP32[$mem - 4 >> 2];
      var $and = $1 & 3;
      if (($and | 0) == 1) {
        var $retval_0 = 0;
        break;
      }
      var $cond = ($and | 0) == 0 ? 8 : 4;
      var $retval_0 = ($1 & -8) - $cond | 0;
    }
  } while (0);
  var $retval_0;
  return $retval_0;
  return null;
}

function __ZNSt9bad_allocC2Ev($this) {
  HEAP32[$this >> 2] = __ZTVSt9bad_alloc + 8 | 0;
  return;
  return;
}

function __ZNSt20bad_array_new_lengthC2Ev($this) {
  HEAP32[$this >> 2] = __ZTVSt20bad_array_new_length + 8 | 0;
  return;
  return;
}

function __ZdlPv($ptr) {
  if (($ptr | 0) != 0) {
    _free($ptr);
  }
  return;
  return;
}

function __ZdlPvRKSt9nothrow_t($ptr, $0) {
  __ZdlPv($ptr);
  return;
  return;
}

function __ZdaPv($ptr) {
  __ZdlPv($ptr);
  return;
  return;
}

function __ZdaPvRKSt9nothrow_t($ptr, $0) {
  __ZdaPv($ptr);
  return;
  return;
}

function __ZNSt9bad_allocD0Ev($this) {
  var $0 = $this | 0;
  __ZNSt9exceptionD2Ev($0);
  var $1 = $this;
  __ZdlPv($1);
  return;
  return;
}

function __ZNSt9bad_allocD2Ev($this) {
  var $0 = $this | 0;
  __ZNSt9exceptionD2Ev($0);
  return;
  return;
}

function __ZNSt20bad_array_new_lengthD0Ev($this) {
  var $0 = $this | 0;
  __ZNSt9exceptionD2Ev($0);
  var $1 = $this;
  __ZdlPv($1);
  return;
  return;
}

function _mallinfo($agg_result) {
  var $agg_result$s2 = $agg_result >> 2;
  var $cmp_i = (HEAP32[_mparams >> 2] | 0) == 0;
  do {
    if ($cmp_i) {
      if ((HEAP32[_mparams >> 2] | 0) != 0) {
        break;
      }
      var $call_i_i = _sysconf(8);
      if (($call_i_i - 1 & $call_i_i | 0) == 0) {
        HEAP32[_mparams + 8 >> 2] = $call_i_i;
        HEAP32[_mparams + 4 >> 2] = $call_i_i;
        HEAP32[_mparams + 12 >> 2] = -1;
        HEAP32[_mparams + 16 >> 2] = 2097152;
        HEAP32[_mparams + 20 >> 2] = 0;
        HEAP32[__gm_ + 440 >> 2] = 0;
        var $call6_i_i = _time(0);
        HEAP32[_mparams >> 2] = $call6_i_i & -16 ^ 1431655768;
      } else {
        _abort();
        throw "Reached an unreachable!";
      }
    }
  } while (0);
  var $2 = HEAPU32[__gm_ + 24 >> 2];
  if (($2 | 0) == 0) {
    var $nm_0_0_i = 0;
    var $nm_1_0_i = 0;
    var $nm_9_0_i = 0;
    var $nm_8_0_i = 0;
    var $nm_4_0_i = 0;
    var $nm_5_0_i = 0;
    var $nm_7_0_i = 0;
  } else {
    var $3 = HEAPU32[__gm_ + 12 >> 2];
    var $add_i = $3 + 40 | 0;
    var $s_01_i = __gm_ + 444 | 0;
    var $sum_02_i = $add_i;
    var $mfree_03_i = $add_i;
    var $nfree_04_i = 1;
    while (1) {
      var $nfree_04_i;
      var $mfree_03_i;
      var $sum_02_i;
      var $s_01_i;
      var $4 = HEAPU32[$s_01_i >> 2];
      var $5 = $4 + 8 | 0;
      if (($5 & 7 | 0) == 0) {
        var $cond_i = 0;
      } else {
        var $cond_i = -$5 & 7;
      }
      var $cond_i;
      var $size_i = $s_01_i + 4 | 0;
      var $q_0_in_i = $4 + $cond_i | 0;
      var $nfree_1_i = $nfree_04_i;
      var $mfree_1_i = $mfree_03_i;
      var $sum_1_i = $sum_02_i;
      while (1) {
        var $sum_1_i;
        var $mfree_1_i;
        var $nfree_1_i;
        var $q_0_in_i;
        if ($q_0_in_i >>> 0 < $4 >>> 0) {
          break;
        }
        if ($q_0_in_i >>> 0 >= ($4 + HEAP32[$size_i >> 2] | 0) >>> 0 | ($q_0_in_i | 0) == ($2 | 0)) {
          break;
        }
        var $9 = HEAP32[$q_0_in_i + 4 >> 2];
        if (($9 | 0) == 7) {
          break;
        }
        var $and22_i = $9 & -8;
        var $add23_i = $and22_i + $sum_1_i | 0;
        if (($9 & 3 | 0) == 1) {
          var $nfree_2_i = $nfree_1_i + 1 | 0;
          var $mfree_2_i = $and22_i + $mfree_1_i | 0;
        } else {
          var $nfree_2_i = $nfree_1_i;
          var $mfree_2_i = $mfree_1_i;
        }
        var $mfree_2_i;
        var $nfree_2_i;
        var $q_0_in_i = $q_0_in_i + $and22_i | 0;
        var $nfree_1_i = $nfree_2_i;
        var $mfree_1_i = $mfree_2_i;
        var $sum_1_i = $add23_i;
      }
      var $10 = HEAPU32[$s_01_i + 8 >> 2];
      if (($10 | 0) == 0) {
        break;
      }
      var $s_01_i = $10;
      var $sum_02_i = $sum_1_i;
      var $mfree_03_i = $mfree_1_i;
      var $nfree_04_i = $nfree_1_i;
    }
    var $11 = HEAP32[__gm_ + 432 >> 2];
    var $nm_0_0_i = $sum_1_i;
    var $nm_1_0_i = $nfree_1_i;
    var $nm_9_0_i = $3;
    var $nm_8_0_i = $mfree_1_i;
    var $nm_4_0_i = $11 - $sum_1_i | 0;
    var $nm_5_0_i = HEAP32[__gm_ + 436 >> 2];
    var $nm_7_0_i = $11 - $mfree_1_i | 0;
  }
  var $nm_7_0_i;
  var $nm_5_0_i;
  var $nm_4_0_i;
  var $nm_8_0_i;
  var $nm_9_0_i;
  var $nm_1_0_i;
  var $nm_0_0_i;
  HEAP32[$agg_result$s2] = $nm_0_0_i;
  HEAP32[$agg_result$s2 + 1] = $nm_1_0_i;
  HEAP32[$agg_result$s2 + 2] = 0;
  HEAP32[$agg_result$s2 + 3] = 0;
  HEAP32[$agg_result$s2 + 4] = $nm_4_0_i;
  HEAP32[$agg_result$s2 + 5] = $nm_5_0_i;
  HEAP32[$agg_result$s2 + 6] = 0;
  HEAP32[$agg_result$s2 + 7] = $nm_7_0_i;
  HEAP32[$agg_result$s2 + 8] = $nm_8_0_i;
  HEAP32[$agg_result$s2 + 9] = $nm_9_0_i;
  return;
  return;
}

function _malloc_stats() {
  var $cmp_i = (HEAP32[_mparams >> 2] | 0) == 0;
  do {
    if ($cmp_i) {
      if ((HEAP32[_mparams >> 2] | 0) != 0) {
        break;
      }
      var $call_i_i = _sysconf(8);
      if (($call_i_i - 1 & $call_i_i | 0) == 0) {
        HEAP32[_mparams + 8 >> 2] = $call_i_i;
        HEAP32[_mparams + 4 >> 2] = $call_i_i;
        HEAP32[_mparams + 12 >> 2] = -1;
        HEAP32[_mparams + 16 >> 2] = 2097152;
        HEAP32[_mparams + 20 >> 2] = 0;
        HEAP32[__gm_ + 440 >> 2] = 0;
        var $call6_i_i = _time(0);
        HEAP32[_mparams >> 2] = $call6_i_i & -16 ^ 1431655768;
      } else {
        _abort();
        throw "Reached an unreachable!";
      }
    }
  } while (0);
  var $2 = HEAPU32[__gm_ + 24 >> 2];
  var $cmp1_i = ($2 | 0) == 0;
  $internal_malloc_stats_exit$$if_then_i$35 : do {
    if ($cmp1_i) {
      var $maxfp_0_i = 0;
      var $fp_0_i = 0;
      var $used_3_i = 0;
    } else {
      var $3 = HEAP32[__gm_ + 436 >> 2];
      var $4 = HEAPU32[__gm_ + 432 >> 2];
      var $s_01_i = __gm_ + 444 | 0;
      var $used_02_i = $4 - 40 - HEAP32[__gm_ + 12 >> 2] | 0;
      while (1) {
        var $used_02_i;
        var $s_01_i;
        var $6 = HEAPU32[$s_01_i >> 2];
        var $7 = $6 + 8 | 0;
        if (($7 & 7 | 0) == 0) {
          var $cond_i = 0;
        } else {
          var $cond_i = -$7 & 7;
        }
        var $cond_i;
        var $size_i = $s_01_i + 4 | 0;
        var $q_0_in_i = $6 + $cond_i | 0;
        var $used_1_i = $used_02_i;
        while (1) {
          var $used_1_i;
          var $q_0_in_i;
          if ($q_0_in_i >>> 0 < $6 >>> 0) {
            break;
          }
          if ($q_0_in_i >>> 0 >= ($6 + HEAP32[$size_i >> 2] | 0) >>> 0 | ($q_0_in_i | 0) == ($2 | 0)) {
            break;
          }
          var $11 = HEAP32[$q_0_in_i + 4 >> 2];
          if (($11 | 0) == 7) {
            break;
          }
          var $and27_i = $11 & -8;
          var $sub28_i = ($11 & 3 | 0) == 1 ? $and27_i : 0;
          var $used_2_i = $used_1_i - $sub28_i | 0;
          var $q_0_in_i = $q_0_in_i + $and27_i | 0;
          var $used_1_i = $used_2_i;
        }
        var $12 = HEAPU32[$s_01_i + 8 >> 2];
        if (($12 | 0) == 0) {
          var $maxfp_0_i = $3;
          var $fp_0_i = $4;
          var $used_3_i = $used_1_i;
          break $internal_malloc_stats_exit$$if_then_i$35;
        }
        var $s_01_i = $12;
        var $used_02_i = $used_1_i;
      }
    }
  } while (0);
  var $used_3_i;
  var $fp_0_i;
  var $maxfp_0_i;
  var $14 = HEAP32[HEAP32[__impure_ptr >> 2] + 12 >> 2];
  var $call34_i = _fprintf($14, STRING_TABLE.__str34 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $maxfp_0_i, tempInt));
  var $16 = HEAP32[HEAP32[__impure_ptr >> 2] + 12 >> 2];
  var $call36_i = _fprintf($16, STRING_TABLE.__str135 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $fp_0_i, tempInt));
  var $18 = HEAP32[HEAP32[__impure_ptr >> 2] + 12 >> 2];
  var $call38_i = _fprintf($18, STRING_TABLE.__str236 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $used_3_i, tempInt));
  return;
  return;
}

function _mallopt($param_number, $value) {
  var __label__;
  var $cmp_i = (HEAP32[_mparams >> 2] | 0) == 0;
  do {
    if ($cmp_i) {
      if ((HEAP32[_mparams >> 2] | 0) != 0) {
        break;
      }
      var $call_i_i = _sysconf(8);
      if (($call_i_i - 1 & $call_i_i | 0) == 0) {
        HEAP32[_mparams + 8 >> 2] = $call_i_i;
        HEAP32[_mparams + 4 >> 2] = $call_i_i;
        HEAP32[_mparams + 12 >> 2] = -1;
        HEAP32[_mparams + 16 >> 2] = 2097152;
        HEAP32[_mparams + 20 >> 2] = 0;
        HEAP32[__gm_ + 440 >> 2] = 0;
        var $call6_i_i = _time(0);
        HEAP32[_mparams >> 2] = $call6_i_i & -16 ^ 1431655768;
      } else {
        _abort();
        throw "Reached an unreachable!";
      }
    } else {
      __label__ = 5;
    }
  } while (0);
  do {
    if ($param_number == -1) {
      HEAP32[_mparams + 16 >> 2] = $value;
      var $retval_0_i = 1;
    } else if ($param_number == -2) {
      if (HEAPU32[_mparams + 4 >> 2] >>> 0 > $value >>> 0) {
        var $retval_0_i = 0;
        break;
      }
      if (($value - 1 & $value | 0) != 0) {
        var $retval_0_i = 0;
        break;
      }
      HEAP32[_mparams + 8 >> 2] = $value;
      var $retval_0_i = 1;
    } else if ($param_number == -3) {
      HEAP32[_mparams + 12 >> 2] = $value;
      var $retval_0_i = 1;
    } else {
      var $retval_0_i = 0;
    }
  } while (0);
  var $retval_0_i;
  return $retval_0_i;
  return null;
}

function __Znwj($size) {
  var $size_addr_0_ph = ($size | 0) == 0 ? 1 : $size;
  while (1) {
    var $call = _malloc($size_addr_0_ph);
    if (($call | 0) == 0) {
      var $0 = (tempValue = HEAP32[__ZL13__new_handler >> 2], HEAP32[__ZL13__new_handler >> 2] = tempValue, tempValue);
      if (($0 | 0) == 0) {
        var $exception = ___cxa_allocate_exception(4);
        HEAP32[$exception >> 2] = __ZTVSt9bad_alloc + 8 | 0;
        ___cxa_throw($exception, __ZTISt9bad_alloc, 32);
        throw "Reached an unreachable!";
      } else {
        var $1 = $0;
        FUNCTION_TABLE[$1]();
      }
    } else {
      return $call;
    }
  }
  return null;
}

function __ZnwjRKSt9nothrow_t($size, $0) {
  var $call = __Znwj($size);
  var $p_0 = $call;
  var $p_0;
  return $p_0;
  return null;
}

function __Znaj($size) {
  var $call = __Znwj($size);
  return $call;
  return null;
}

function __ZnajRKSt9nothrow_t($size, $nothrow) {
  var $call = __Znaj($size);
  var $p_0 = $call;
  var $p_0;
  return $p_0;
  return null;
}

function __ZSt17__throw_bad_allocv() {
  var $exception = ___cxa_allocate_exception(4);
  HEAP32[$exception >> 2] = __ZTVSt9bad_alloc + 8 | 0;
  ___cxa_throw($exception, __ZTISt9bad_alloc, 32);
  throw "Reached an unreachable!";
}

function ___gxx_personality_v0() {}

var __ZSt9terminatev;

function _memcpy(dest, src, num, align) {
  if (num >= 20 && src % 2 == dest % 2) {
    if (src % 4 == dest % 4) {
      var stop = src + num;
      while (src % 4) {
        HEAP8[dest++] = HEAP8[src++];
      }
      var src4 = src >> 2, dest4 = dest >> 2, stop4 = stop >> 2;
      while (src4 < stop4) {
        HEAP32[dest4++] = HEAP32[src4++];
      }
      src = src4 << 2;
      dest = dest4 << 2;
      while (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
    } else {
      var stop = src + num;
      if (src % 2) {
        HEAP8[dest++] = HEAP8[src++];
      }
      var src2 = src >> 1, dest2 = dest >> 1, stop2 = stop >> 1;
      while (src2 < stop2) {
        HEAP16[dest2++] = HEAP16[src2++];
      }
      src = src2 << 1;
      dest = dest2 << 1;
      if (src < stop) {
        HEAP8[dest++] = HEAP8[src++];
      }
    }
  } else {
    while (num--) {
      HEAP8[dest++] = HEAP8[src++];
    }
  }
}

var _llvm_memcpy_p0i8_p0i8_i32 = _memcpy;

var _sqrtf = Math.sqrt;

function _llvm_lifetime_start() {}

function _llvm_lifetime_end() {}

function ___assert_func(filename, line, func, condition) {
  throw "Assertion failed: " + Pointer_stringify(condition) + ", at: " + [ Pointer_stringify(filename), line, Pointer_stringify(func) ];
}

function _memset(ptr, value, num, align) {
  if (num >= 20) {
    var stop = ptr + num;
    while (ptr % 4) {
      HEAP8[ptr++] = value;
    }
    if (value < 0) value += 256;
    var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | value << 8 | value << 16 | value << 24;
    while (ptr4 < stop4) {
      HEAP32[ptr4++] = value4;
    }
    ptr = ptr4 << 2;
    while (ptr < stop) {
      HEAP8[ptr++] = value;
    }
  } else {
    while (num--) {
      HEAP8[ptr++] = value;
    }
  }
}

var _llvm_memset_p0i8_i32 = _memset;

var _sinf = Math.sin;

var _cosf = Math.cos;

var _floorf = Math.floor;

function ___cxa_pure_virtual() {
  ABORT = true;
  throw "Pure virtual function called!";
}

var _llvm_va_start;

var ERRNO_CODES = {
  E2BIG: 7,
  EACCES: 13,
  EADDRINUSE: 98,
  EADDRNOTAVAIL: 99,
  EAFNOSUPPORT: 97,
  EAGAIN: 11,
  EALREADY: 114,
  EBADF: 9,
  EBADMSG: 74,
  EBUSY: 16,
  ECANCELED: 125,
  ECHILD: 10,
  ECONNABORTED: 103,
  ECONNREFUSED: 111,
  ECONNRESET: 104,
  EDEADLK: 35,
  EDESTADDRREQ: 89,
  EDOM: 33,
  EDQUOT: 122,
  EEXIST: 17,
  EFAULT: 14,
  EFBIG: 27,
  EHOSTUNREACH: 113,
  EIDRM: 43,
  EILSEQ: 84,
  EINPROGRESS: 115,
  EINTR: 4,
  EINVAL: 22,
  EIO: 5,
  EISCONN: 106,
  EISDIR: 21,
  ELOOP: 40,
  EMFILE: 24,
  EMLINK: 31,
  EMSGSIZE: 90,
  EMULTIHOP: 72,
  ENAMETOOLONG: 36,
  ENETDOWN: 100,
  ENETRESET: 102,
  ENETUNREACH: 101,
  ENFILE: 23,
  ENOBUFS: 105,
  ENODATA: 61,
  ENODEV: 19,
  ENOENT: 2,
  ENOEXEC: 8,
  ENOLCK: 37,
  ENOLINK: 67,
  ENOMEM: 12,
  ENOMSG: 42,
  ENOPROTOOPT: 92,
  ENOSPC: 28,
  ENOSR: 63,
  ENOSTR: 60,
  ENOSYS: 38,
  ENOTCONN: 107,
  ENOTDIR: 20,
  ENOTEMPTY: 39,
  ENOTRECOVERABLE: 131,
  ENOTSOCK: 88,
  ENOTSUP: 95,
  ENOTTY: 25,
  ENXIO: 6,
  EOVERFLOW: 75,
  EOWNERDEAD: 130,
  EPERM: 1,
  EPIPE: 32,
  EPROTO: 71,
  EPROTONOSUPPORT: 93,
  EPROTOTYPE: 91,
  ERANGE: 34,
  EROFS: 30,
  ESPIPE: 29,
  ESRCH: 3,
  ESTALE: 116,
  ETIME: 62,
  ETIMEDOUT: 110,
  ETXTBSY: 26,
  EWOULDBLOCK: 11,
  EXDEV: 18
};

function ___setErrNo(value) {
  if (!___setErrNo.ret) ___setErrNo.ret = allocate([ 0 ], "i32", ALLOC_STATIC);
  HEAP32[___setErrNo.ret >> 2] = value;
  return value;
}

var _stdin = 0;

var _stdout = 0;

var _stderr = 0;

var __impure_ptr = 0;

var FS = {
  currentPath: "/",
  nextInode: 2,
  streams: [ null ],
  ignorePermissions: true,
  absolutePath: (function(relative, base) {
    if (typeof relative !== "string") return null;
    if (base === undefined) base = FS.currentPath;
    if (relative && relative[0] == "/") base = "";
    var full = base + "/" + relative;
    var parts = full.split("/").reverse();
    var absolute = [ "" ];
    while (parts.length) {
      var part = parts.pop();
      if (part == "" || part == ".") {} else if (part == "..") {
        if (absolute.length > 1) absolute.pop();
      } else {
        absolute.push(part);
      }
    }
    return absolute.length == 1 ? "/" : absolute.join("/");
  }),
  analyzePath: (function(path, dontResolveLastLink, linksVisited) {
    var ret = {
      isRoot: false,
      exists: false,
      error: 0,
      name: null,
      path: null,
      object: null,
      parentExists: false,
      parentPath: null,
      parentObject: null
    };
    path = FS.absolutePath(path);
    if (path == "/") {
      ret.isRoot = true;
      ret.exists = ret.parentExists = true;
      ret.name = "/";
      ret.path = ret.parentPath = "/";
      ret.object = ret.parentObject = FS.root;
    } else if (path !== null) {
      linksVisited = linksVisited || 0;
      path = path.slice(1).split("/");
      var current = FS.root;
      var traversed = [ "" ];
      while (path.length) {
        if (path.length == 1 && current.isFolder) {
          ret.parentExists = true;
          ret.parentPath = traversed.length == 1 ? "/" : traversed.join("/");
          ret.parentObject = current;
          ret.name = path[0];
        }
        var target = path.shift();
        if (!current.isFolder) {
          ret.error = ERRNO_CODES.ENOTDIR;
          break;
        } else if (!current.read) {
          ret.error = ERRNO_CODES.EACCES;
          break;
        } else if (!current.contents.hasOwnProperty(target)) {
          ret.error = ERRNO_CODES.ENOENT;
          break;
        }
        current = current.contents[target];
        if (current.link && !(dontResolveLastLink && path.length == 0)) {
          if (linksVisited > 40) {
            ret.error = ERRNO_CODES.ELOOP;
            break;
          }
          var link = FS.absolutePath(current.link, traversed.join("/"));
          return FS.analyzePath([ link ].concat(path).join("/"), dontResolveLastLink, linksVisited + 1);
        }
        traversed.push(target);
        if (path.length == 0) {
          ret.exists = true;
          ret.path = traversed.join("/");
          ret.object = current;
        }
      }
      return ret;
    }
    return ret;
  }),
  findObject: (function(path, dontResolveLastLink) {
    FS.ensureRoot();
    var ret = FS.analyzePath(path, dontResolveLastLink);
    if (ret.exists) {
      return ret.object;
    } else {
      ___setErrNo(ret.error);
      return null;
    }
  }),
  createObject: (function(parent, name, properties, canRead, canWrite) {
    if (!parent) parent = "/";
    if (typeof parent === "string") parent = FS.findObject(parent);
    if (!parent) {
      ___setErrNo(ERRNO_CODES.EACCES);
      throw new Error("Parent path must exist.");
    }
    if (!parent.isFolder) {
      ___setErrNo(ERRNO_CODES.ENOTDIR);
      throw new Error("Parent must be a folder.");
    }
    if (!parent.write && !FS.ignorePermissions) {
      ___setErrNo(ERRNO_CODES.EACCES);
      throw new Error("Parent folder must be writeable.");
    }
    if (!name || name == "." || name == "..") {
      ___setErrNo(ERRNO_CODES.ENOENT);
      throw new Error("Name must not be empty.");
    }
    if (parent.contents.hasOwnProperty(name)) {
      ___setErrNo(ERRNO_CODES.EEXIST);
      throw new Error("Can't overwrite object.");
    }
    parent.contents[name] = {
      read: canRead === undefined ? true : canRead,
      write: canWrite === undefined ? false : canWrite,
      timestamp: Date.now(),
      inodeNumber: FS.nextInode++
    };
    for (var key in properties) {
      if (properties.hasOwnProperty(key)) {
        parent.contents[name][key] = properties[key];
      }
    }
    return parent.contents[name];
  }),
  createFolder: (function(parent, name, canRead, canWrite) {
    var properties = {
      isFolder: true,
      isDevice: false,
      contents: {}
    };
    return FS.createObject(parent, name, properties, canRead, canWrite);
  }),
  createPath: (function(parent, path, canRead, canWrite) {
    var current = FS.findObject(parent);
    if (current === null) throw new Error("Invalid parent.");
    path = path.split("/").reverse();
    while (path.length) {
      var part = path.pop();
      if (!part) continue;
      if (!current.contents.hasOwnProperty(part)) {
        FS.createFolder(current, part, canRead, canWrite);
      }
      current = current.contents[part];
    }
    return current;
  }),
  createFile: (function(parent, name, properties, canRead, canWrite) {
    properties.isFolder = false;
    return FS.createObject(parent, name, properties, canRead, canWrite);
  }),
  createDataFile: (function(parent, name, data, canRead, canWrite) {
    if (typeof data === "string") {
      var dataArray = [];
      for (var i = 0; i < data.length; i++) dataArray.push(data.charCodeAt(i));
      data = dataArray;
    }
    var properties = {
      isDevice: false,
      contents: data
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createLazyFile: (function(parent, name, url, canRead, canWrite) {
    var properties = {
      isDevice: false,
      url: url
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createLink: (function(parent, name, target, canRead, canWrite) {
    var properties = {
      isDevice: false,
      link: target
    };
    return FS.createFile(parent, name, properties, canRead, canWrite);
  }),
  createDevice: (function(parent, name, input, output) {
    if (!(input || output)) {
      throw new Error("A device must have at least one callback defined.");
    }
    var ops = {
      isDevice: true,
      input: input,
      output: output
    };
    return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
  }),
  forceLoadFile: (function(obj) {
    if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
    var success = true;
    if (typeof XMLHttpRequest !== "undefined") {
      var xhr = new XMLHttpRequest;
      xhr.open("GET", obj.url, false);
      if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
      if (xhr.overrideMimeType) {
        xhr.overrideMimeType("text/plain; charset=x-user-defined");
      }
      xhr.send(null);
      if (xhr.status != 200 && xhr.status != 0) success = false;
      if (xhr.response !== undefined) {
        obj.contents = new Uint8Array(xhr.response || []);
      } else {
        obj.contents = intArrayFromString(xhr.responseText || "", true);
      }
    } else if (typeof read !== "undefined") {
      try {
        obj.contents = intArrayFromString(read(obj.url), true);
      } catch (e) {
        success = false;
      }
    } else {
      throw new Error("Cannot load without read() or XMLHttpRequest.");
    }
    if (!success) ___setErrNo(ERRNO_CODES.EIO);
    return success;
  }),
  ensureRoot: (function() {
    if (FS.root) return;
    FS.root = {
      read: true,
      write: true,
      isFolder: true,
      isDevice: false,
      timestamp: Date.now(),
      inodeNumber: 1,
      contents: {}
    };
  }),
  init: (function(input, output, error) {
    assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
    FS.init.initialized = true;
    FS.ensureRoot();
    if (!input) input = (function() {
      if (!input.cache || !input.cache.length) {
        var result;
        if (typeof window != "undefined" && typeof window.prompt == "function") {
          result = window.prompt("Input: ");
        } else if (typeof readline == "function") {
          result = readline();
        }
        if (!result) result = "";
        input.cache = intArrayFromString(result + "\n", true);
      }
      return input.cache.shift();
    });
    if (!output) output = (function(val) {
      if (val === null || val === "\n".charCodeAt(0)) {
        output.printer(output.buffer.join(""));
        output.buffer = [];
      } else {
        output.buffer.push(String.fromCharCode(val));
      }
    });
    if (!output.printer) output.printer = print;
    if (!output.buffer) output.buffer = [];
    if (!error) error = output;
    FS.createFolder("/", "tmp", true, true);
    var devFolder = FS.createFolder("/", "dev", true, true);
    var stdin = FS.createDevice(devFolder, "stdin", input);
    var stdout = FS.createDevice(devFolder, "stdout", null, output);
    var stderr = FS.createDevice(devFolder, "stderr", null, error);
    FS.createDevice(devFolder, "tty", input, output);
    FS.streams[1] = {
      path: "/dev/stdin",
      object: stdin,
      position: 0,
      isRead: true,
      isWrite: false,
      isAppend: false,
      error: false,
      eof: false,
      ungotten: []
    };
    FS.streams[2] = {
      path: "/dev/stdout",
      object: stdout,
      position: 0,
      isRead: false,
      isWrite: true,
      isAppend: false,
      error: false,
      eof: false,
      ungotten: []
    };
    FS.streams[3] = {
      path: "/dev/stderr",
      object: stderr,
      position: 0,
      isRead: false,
      isWrite: true,
      isAppend: false,
      error: false,
      eof: false,
      ungotten: []
    };
    _stdin = allocate([ 1 ], "void*", ALLOC_STATIC);
    _stdout = allocate([ 2 ], "void*", ALLOC_STATIC);
    _stderr = allocate([ 3 ], "void*", ALLOC_STATIC);
    FS.createPath("/", "dev/shm/tmp", true, true);
    FS.streams[_stdin] = FS.streams[1];
    FS.streams[_stdout] = FS.streams[2];
    FS.streams[_stderr] = FS.streams[3];
    __impure_ptr = allocate([ allocate([ 0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0 ], "void*", ALLOC_STATIC) ], "void*", ALLOC_STATIC);
  }),
  quit: (function() {
    if (!FS.init.initialized) return;
    if (FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output("\n".charCodeAt(0));
    if (FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output("\n".charCodeAt(0));
  })
};

function _pwrite(fildes, buf, nbyte, offset) {
  var stream = FS.streams[fildes];
  if (!stream || stream.object.isDevice) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isWrite) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (stream.object.isFolder) {
    ___setErrNo(ERRNO_CODES.EISDIR);
    return -1;
  } else if (nbyte < 0 || offset < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    var contents = stream.object.contents;
    while (contents.length < offset) contents.push(0);
    for (var i = 0; i < nbyte; i++) {
      contents[offset + i] = HEAPU8[buf + i];
    }
    stream.object.timestamp = Date.now();
    return i;
  }
}

function _write(fildes, buf, nbyte) {
  var stream = FS.streams[fildes];
  if (!stream) {
    ___setErrNo(ERRNO_CODES.EBADF);
    return -1;
  } else if (!stream.isWrite) {
    ___setErrNo(ERRNO_CODES.EACCES);
    return -1;
  } else if (nbyte < 0) {
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
  } else {
    if (stream.object.isDevice) {
      if (stream.object.output) {
        for (var i = 0; i < nbyte; i++) {
          try {
            stream.object.output(HEAP8[buf + i]);
          } catch (e) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        stream.object.timestamp = Date.now();
        return i;
      } else {
        ___setErrNo(ERRNO_CODES.ENXIO);
        return -1;
      }
    } else {
      var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
      if (bytesWritten != -1) stream.position += bytesWritten;
      return bytesWritten;
    }
  }
}

function _fwrite(ptr, size, nitems, stream) {
  var bytesToWrite = nitems * size;
  if (bytesToWrite == 0) return 0;
  var bytesWritten = _write(stream, ptr, bytesToWrite);
  if (bytesWritten == -1) {
    if (FS.streams[stream]) FS.streams[stream].error = true;
    return -1;
  } else {
    return Math.floor(bytesWritten / size);
  }
}

function __formatString(format, varargs) {
  var textIndex = format;
  var argIndex = 0;
  function getNextArg(type) {
    var ret;
    if (type === "double") {
      ret = (tempDoubleI32[0] = HEAP32[varargs + argIndex >> 2], tempDoubleI32[1] = HEAP32[varargs + argIndex + 4 >> 2], tempDoubleF64[0]);
    } else if (type == "i64") {
      ret = [ HEAP32[varargs + argIndex >> 2], HEAP32[varargs + argIndex + 4 >> 2] ];
    } else {
      type = "i32";
      ret = HEAP32[varargs + argIndex >> 2];
    }
    argIndex += Runtime.getNativeFieldSize(type);
    return ret;
  }
  var ret = [];
  var curr, next, currArg;
  while (1) {
    var startTextIndex = textIndex;
    curr = HEAP8[textIndex];
    if (curr === 0) break;
    next = HEAP8[textIndex + 1];
    if (curr == "%".charCodeAt(0)) {
      var flagAlwaysSigned = false;
      var flagLeftAlign = false;
      var flagAlternative = false;
      var flagZeroPad = false;
      flagsLoop : while (1) {
        switch (next) {
         case "+".charCodeAt(0):
          flagAlwaysSigned = true;
          break;
         case "-".charCodeAt(0):
          flagLeftAlign = true;
          break;
         case "#".charCodeAt(0):
          flagAlternative = true;
          break;
         case "0".charCodeAt(0):
          if (flagZeroPad) {
            break flagsLoop;
          } else {
            flagZeroPad = true;
            break;
          }
         default:
          break flagsLoop;
        }
        textIndex++;
        next = HEAP8[textIndex + 1];
      }
      var width = 0;
      if (next == "*".charCodeAt(0)) {
        width = getNextArg("i32");
        textIndex++;
        next = HEAP8[textIndex + 1];
      } else {
        while (next >= "0".charCodeAt(0) && next <= "9".charCodeAt(0)) {
          width = width * 10 + (next - "0".charCodeAt(0));
          textIndex++;
          next = HEAP8[textIndex + 1];
        }
      }
      var precisionSet = false;
      if (next == ".".charCodeAt(0)) {
        var precision = 0;
        precisionSet = true;
        textIndex++;
        next = HEAP8[textIndex + 1];
        if (next == "*".charCodeAt(0)) {
          precision = getNextArg("i32");
          textIndex++;
        } else {
          while (1) {
            var precisionChr = HEAP8[textIndex + 1];
            if (precisionChr < "0".charCodeAt(0) || precisionChr > "9".charCodeAt(0)) break;
            precision = precision * 10 + (precisionChr - "0".charCodeAt(0));
            textIndex++;
          }
        }
        next = HEAP8[textIndex + 1];
      } else {
        var precision = 6;
      }
      var argSize;
      switch (String.fromCharCode(next)) {
       case "h":
        var nextNext = HEAP8[textIndex + 2];
        if (nextNext == "h".charCodeAt(0)) {
          textIndex++;
          argSize = 1;
        } else {
          argSize = 2;
        }
        break;
       case "l":
        var nextNext = HEAP8[textIndex + 2];
        if (nextNext == "l".charCodeAt(0)) {
          textIndex++;
          argSize = 8;
        } else {
          argSize = 4;
        }
        break;
       case "L":
       case "q":
       case "j":
        argSize = 8;
        break;
       case "z":
       case "t":
       case "I":
        argSize = 4;
        break;
       default:
        argSize = null;
      }
      if (argSize) textIndex++;
      next = HEAP8[textIndex + 1];
      if ([ "d", "i", "u", "o", "x", "X", "p" ].indexOf(String.fromCharCode(next)) != -1) {
        var signed = next == "d".charCodeAt(0) || next == "i".charCodeAt(0);
        argSize = argSize || 4;
        var currArg = getNextArg("i" + argSize * 8);
        if (argSize == 8) {
          currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == "u".charCodeAt(0));
        }
        if (argSize <= 4) {
          var limit = Math.pow(256, argSize) - 1;
          currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
        }
        var currAbsArg = Math.abs(currArg);
        var argText;
        var prefix = "";
        if (next == "d".charCodeAt(0) || next == "i".charCodeAt(0)) {
          argText = reSign(currArg, 8 * argSize, 1).toString(10);
        } else if (next == "u".charCodeAt(0)) {
          argText = unSign(currArg, 8 * argSize, 1).toString(10);
          currArg = Math.abs(currArg);
        } else if (next == "o".charCodeAt(0)) {
          argText = (flagAlternative ? "0" : "") + currAbsArg.toString(8);
        } else if (next == "x".charCodeAt(0) || next == "X".charCodeAt(0)) {
          prefix = flagAlternative ? "0x" : "";
          if (currArg < 0) {
            currArg = -currArg;
            argText = (currAbsArg - 1).toString(16);
            var buffer = [];
            for (var i = 0; i < argText.length; i++) {
              buffer.push((15 - parseInt(argText[i], 16)).toString(16));
            }
            argText = buffer.join("");
            while (argText.length < argSize * 2) argText = "f" + argText;
          } else {
            argText = currAbsArg.toString(16);
          }
          if (next == "X".charCodeAt(0)) {
            prefix = prefix.toUpperCase();
            argText = argText.toUpperCase();
          }
        } else if (next == "p".charCodeAt(0)) {
          if (currAbsArg === 0) {
            argText = "(nil)";
          } else {
            prefix = "0x";
            argText = currAbsArg.toString(16);
          }
        }
        if (precisionSet) {
          while (argText.length < precision) {
            argText = "0" + argText;
          }
        }
        if (flagAlwaysSigned) {
          if (currArg < 0) {
            prefix = "-" + prefix;
          } else {
            prefix = "+" + prefix;
          }
        }
        while (prefix.length + argText.length < width) {
          if (flagLeftAlign) {
            argText += " ";
          } else {
            if (flagZeroPad) {
              argText = "0" + argText;
            } else {
              prefix = " " + prefix;
            }
          }
        }
        argText = prefix + argText;
        argText.split("").forEach((function(chr) {
          ret.push(chr.charCodeAt(0));
        }));
      } else if ([ "f", "F", "e", "E", "g", "G" ].indexOf(String.fromCharCode(next)) != -1) {
        var currArg = getNextArg("double");
        var argText;
        if (isNaN(currArg)) {
          argText = "nan";
          flagZeroPad = false;
        } else if (!isFinite(currArg)) {
          argText = (currArg < 0 ? "-" : "") + "inf";
          flagZeroPad = false;
        } else {
          var isGeneral = false;
          var effectivePrecision = Math.min(precision, 20);
          if (next == "g".charCodeAt(0) || next == "G".charCodeAt(0)) {
            isGeneral = true;
            precision = precision || 1;
            var exponent = parseInt(currArg.toExponential(effectivePrecision).split("e")[1], 10);
            if (precision > exponent && exponent >= -4) {
              next = (next == "g".charCodeAt(0) ? "f" : "F").charCodeAt(0);
              precision -= exponent + 1;
            } else {
              next = (next == "g".charCodeAt(0) ? "e" : "E").charCodeAt(0);
              precision--;
            }
            effectivePrecision = Math.min(precision, 20);
          }
          if (next == "e".charCodeAt(0) || next == "E".charCodeAt(0)) {
            argText = currArg.toExponential(effectivePrecision);
            if (/[eE][-+]\d$/.test(argText)) {
              argText = argText.slice(0, -1) + "0" + argText.slice(-1);
            }
          } else if (next == "f".charCodeAt(0) || next == "F".charCodeAt(0)) {
            argText = currArg.toFixed(effectivePrecision);
          }
          var parts = argText.split("e");
          if (isGeneral && !flagAlternative) {
            while (parts[0].length > 1 && parts[0].indexOf(".") != -1 && (parts[0].slice(-1) == "0" || parts[0].slice(-1) == ".")) {
              parts[0] = parts[0].slice(0, -1);
            }
          } else {
            if (flagAlternative && argText.indexOf(".") == -1) parts[0] += ".";
            while (precision > effectivePrecision++) parts[0] += "0";
          }
          argText = parts[0] + (parts.length > 1 ? "e" + parts[1] : "");
          if (next == "E".charCodeAt(0)) argText = argText.toUpperCase();
          if (flagAlwaysSigned && currArg >= 0) {
            argText = "+" + argText;
          }
        }
        while (argText.length < width) {
          if (flagLeftAlign) {
            argText += " ";
          } else {
            if (flagZeroPad && (argText[0] == "-" || argText[0] == "+")) {
              argText = argText[0] + "0" + argText.slice(1);
            } else {
              argText = (flagZeroPad ? "0" : " ") + argText;
            }
          }
        }
        if (next < "a".charCodeAt(0)) argText = argText.toUpperCase();
        argText.split("").forEach((function(chr) {
          ret.push(chr.charCodeAt(0));
        }));
      } else if (next == "s".charCodeAt(0)) {
        var arg = getNextArg("i8*");
        var copiedString;
        if (arg) {
          copiedString = String_copy(arg);
          if (precisionSet && copiedString.length > precision) {
            copiedString = copiedString.slice(0, precision);
          }
        } else {
          copiedString = intArrayFromString("(null)", true);
        }
        if (!flagLeftAlign) {
          while (copiedString.length < width--) {
            ret.push(" ".charCodeAt(0));
          }
        }
        ret = ret.concat(copiedString);
        if (flagLeftAlign) {
          while (copiedString.length < width--) {
            ret.push(" ".charCodeAt(0));
          }
        }
      } else if (next == "c".charCodeAt(0)) {
        if (flagLeftAlign) ret.push(getNextArg("i8"));
        while (--width > 0) {
          ret.push(" ".charCodeAt(0));
        }
        if (!flagLeftAlign) ret.push(getNextArg("i8"));
      } else if (next == "n".charCodeAt(0)) {
        var ptr = getNextArg("i32*");
        HEAP32[ptr >> 2] = ret.length;
      } else if (next == "%".charCodeAt(0)) {
        ret.push(curr);
      } else {
        for (var i = startTextIndex; i < textIndex + 2; i++) {
          ret.push(HEAP8[i]);
        }
      }
      textIndex += 2;
    } else {
      ret.push(curr);
      textIndex += 1;
    }
  }
  return ret;
}

function _fprintf(stream, format, varargs) {
  var result = __formatString(format, varargs);
  var stack = Runtime.stackSave();
  var ret = _fwrite(allocate(result, "i8", ALLOC_STACK), 1, result.length, stream);
  Runtime.stackRestore(stack);
  return ret;
}

function _printf(format, varargs) {
  var stdout = HEAP32[_stdout >> 2];
  return _fprintf(stdout, format, varargs);
}

var _vprintf = _printf;

function _llvm_va_end() {}

function _gettimeofday(ptr) {
  var indexes = Runtime.calculateStructAlignment({
    fields: [ "i32", "i32" ]
  });
  var now = Date.now();
  HEAP32[ptr + indexes[0] >> 2] = Math.floor(now / 1e3);
  HEAP32[ptr + indexes[1] >> 2] = Math.floor((now - 1e3 * Math.floor(now / 1e3)) * 1e3);
  return 0;
}

var _expf = Math.exp;

var _atan2f = Math.atan2;

function ___cxa_guard_acquire(variable) {
  if (!HEAP8[variable]) {
    HEAP8[variable] = 1;
    return 1;
  }
  return 0;
}

function ___cxa_guard_release() {}

function _abort(code) {
  ABORT = true;
  throw "ABORT: " + code + ", at " + (new Error).stack;
}

function _sysconf(name) {
  switch (name) {
   case 8:
    return PAGE_SIZE;
   case 54:
   case 56:
   case 21:
   case 61:
   case 63:
   case 22:
   case 67:
   case 23:
   case 24:
   case 25:
   case 26:
   case 27:
   case 69:
   case 28:
   case 101:
   case 70:
   case 71:
   case 29:
   case 30:
   case 199:
   case 75:
   case 76:
   case 32:
   case 43:
   case 44:
   case 80:
   case 46:
   case 47:
   case 45:
   case 48:
   case 49:
   case 42:
   case 82:
   case 33:
   case 7:
   case 108:
   case 109:
   case 107:
   case 112:
   case 119:
   case 121:
    return 200809;
   case 13:
   case 104:
   case 94:
   case 95:
   case 34:
   case 35:
   case 77:
   case 81:
   case 83:
   case 84:
   case 85:
   case 86:
   case 87:
   case 88:
   case 89:
   case 90:
   case 91:
   case 94:
   case 95:
   case 110:
   case 111:
   case 113:
   case 114:
   case 115:
   case 116:
   case 117:
   case 118:
   case 120:
   case 40:
   case 16:
   case 79:
   case 19:
    return -1;
   case 92:
   case 93:
   case 5:
   case 72:
   case 6:
   case 74:
   case 92:
   case 93:
   case 96:
   case 97:
   case 98:
   case 99:
   case 102:
   case 103:
   case 105:
    return 1;
   case 38:
   case 66:
   case 50:
   case 51:
   case 4:
    return 1024;
   case 15:
   case 64:
   case 41:
    return 32;
   case 55:
   case 37:
   case 17:
    return 2147483647;
   case 18:
   case 1:
    return 47839;
   case 59:
   case 57:
    return 99;
   case 68:
   case 58:
    return 2048;
   case 0:
    return 2097152;
   case 3:
    return 65536;
   case 14:
    return 32768;
   case 73:
    return 32767;
   case 39:
    return 16384;
   case 60:
    return 1e3;
   case 106:
    return 700;
   case 52:
    return 256;
   case 62:
    return 255;
   case 2:
    return 100;
   case 65:
    return 64;
   case 36:
    return 20;
   case 100:
    return 16;
   case 20:
    return 6;
   case 53:
    return 4;
  }
  ___setErrNo(ERRNO_CODES.EINVAL);
  return -1;
}

function _time(ptr) {
  var ret = Math.floor(Date.now() / 1e3);
  if (ptr) {
    HEAP32[ptr >> 2] = ret;
  }
  return ret;
}

function ___errno_location() {
  return ___setErrNo.ret;
}

var ___errno = ___errno_location;

function _sbrk(bytes) {
  var self = _sbrk;
  if (!self.called) {
    STATICTOP = alignMemoryPage(STATICTOP);
    self.called = true;
  }
  var ret = STATICTOP;
  if (bytes != 0) Runtime.staticAlloc(bytes);
  return ret;
}

function ___cxa_allocate_exception(size) {
  return _malloc(size);
}

function _llvm_eh_exception() {
  return HEAP32[_llvm_eh_exception.buf >> 2];
}

function __ZSt18uncaught_exceptionv() {
  return !!__ZSt18uncaught_exceptionv.uncaught_exception;
}

function ___cxa_throw(ptr, type, destructor) {
  print("Compiled code throwing an exception, " + [ ptr, type, destructor ] + ", at " + (new Error).stack);
  HEAP32[_llvm_eh_exception.buf >> 2] = ptr;
  HEAP32[_llvm_eh_exception.buf + 4 >> 2] = type;
  HEAP32[_llvm_eh_exception.buf + 8 >> 2] = destructor;
  if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
    __ZSt18uncaught_exceptionv.uncaught_exception = 1;
  } else {
    __ZSt18uncaught_exceptionv.uncaught_exception++;
  }
  throw ptr;
}

function ___cxa_call_unexpected(exception) {
  ABORT = true;
  throw exception;
}

function ___cxa_begin_catch(ptr) {
  __ZSt18uncaught_exceptionv.uncaught_exception--;
  return ptr;
}

function ___cxa_free_exception(ptr) {
  return _free(ptr);
}

function ___cxa_end_catch() {
  if (___cxa_end_catch.rethrown) {
    ___cxa_end_catch.rethrown = false;
    return;
  }
  __THREW__ = false;
  HEAP32[_llvm_eh_exception.buf + 4 >> 2] = 0;
  var ptr = HEAP32[_llvm_eh_exception.buf >> 2];
  var destructor = HEAP32[_llvm_eh_exception.buf + 8 >> 2];
  if (destructor) {
    FUNCTION_TABLE[destructor](ptr);
    HEAP32[_llvm_eh_exception.buf + 8 >> 2] = 0;
  }
  if (ptr) {
    ___cxa_free_exception(ptr);
    HEAP32[_llvm_eh_exception.buf >> 2] = 0;
  }
}

var __ZNSt9exceptionD2Ev;

var _llvm_memset_p0i8_i64 = _memset;

__ATINIT__.unshift({
  func: (function() {
    FS.ignorePermissions = false;
    if (!FS.init.initialized) FS.init();
  })
});

__ATEXIT__.push({
  func: (function() {
    FS.quit();
  })
});

___setErrNo(0);

_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);

Module.callMain = function callMain(args) {
  var argc = args.length + 1;
  function pad() {
    for (var i = 0; i < 4 - 1; i++) {
      argv.push(0);
    }
  }
  var argv = [ allocate(intArrayFromString("/bin/this.program"), "i8", ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc - 1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, "i32", ALLOC_STATIC);
  return _main(argc, argv, 0);
};

var _b2_gjkCalls;

var _b2_gjkIters;

var _b2_gjkMaxIters;

var _b2_toiCalls;

var _b2_toiIters;

var _b2_toiMaxIters;

var _b2_toiRootIters;

var _b2_toiMaxRootIters;

var __ZTV12b2ChainShape;

var __ZTVN10__cxxabiv120__si_class_type_infoE;

var __ZTVN10__cxxabiv117__class_type_infoE;

var __ZTI7b2Shape;

var __ZTI12b2ChainShape;

var __ZTV13b2CircleShape;

var __ZTI13b2CircleShape;

var __ZTV11b2EdgeShape;

var __ZTI11b2EdgeShape;

var __ZTV14b2PolygonShape;

var __ZTI14b2PolygonShape;

var __ZN16b2BlockAllocator12s_blockSizesE;

var __ZN16b2BlockAllocator17s_blockSizeLookupE;

var __ZN16b2BlockAllocator28s_blockSizeLookupInitializedE;

var __ZTV6b2Draw;

var __ZTI6b2Draw;

var _b2Vec2_zero;

__ATINIT__ = __ATINIT__.concat([]);

var _b2_version;

var _b2_defaultFilter;

var _b2_defaultListener;

var __ZTV17b2ContactListener;

var __ZTI17b2ContactListener;

var __ZTV15b2ContactFilter;

var __ZTI15b2ContactFilter;

var __ZTV23b2ChainAndCircleContact;

var __ZTI9b2Contact;

var __ZTI23b2ChainAndCircleContact;

var __ZTV24b2ChainAndPolygonContact;

var __ZTI24b2ChainAndPolygonContact;

var __ZTV15b2CircleContact;

var __ZTI15b2CircleContact;

var __ZN9b2Contact11s_registersE;

var __ZN9b2Contact13s_initializedE;

var __ZTV9b2Contact;

var __ZTV22b2EdgeAndCircleContact;

var __ZTI22b2EdgeAndCircleContact;

var __ZTV23b2EdgeAndPolygonContact;

var __ZTI23b2EdgeAndPolygonContact;

var __ZTV25b2PolygonAndCircleContact;

var __ZTI25b2PolygonAndCircleContact;

var __ZTV16b2PolygonContact;

var __ZTI16b2PolygonContact;

var __ZTV15b2DistanceJoint;

var __ZTI7b2Joint;

var __ZTI15b2DistanceJoint;

var __ZTV15b2FrictionJoint;

var __ZTI15b2FrictionJoint;

var __ZTV11b2GearJoint;

var __ZTI11b2GearJoint;

var __ZTV7b2Joint;

var __ZTV12b2MouseJoint;

var __ZTI12b2MouseJoint;

var __ZTV16b2PrismaticJoint;

var __ZTI16b2PrismaticJoint;

var __ZTV13b2PulleyJoint;

var __ZTI13b2PulleyJoint;

var __ZTV15b2RevoluteJoint;

var __ZTI15b2RevoluteJoint;

var __ZTV11b2RopeJoint;

var __ZTI11b2RopeJoint;

var __ZTV11b2WeldJoint;

var __ZTI11b2WeldJoint;

var __ZTV12b2WheelJoint;

var __ZTI12b2WheelJoint;

var _ret;

var __ZGVZ38emscripten_bind_b2World__GetGravity_p0E3ret;

var _ret1;

var __ZGVZ38emscripten_bind_b2Joint__GetAnchorA_p0E3ret;

var _ret2;

var __ZGVZ38emscripten_bind_b2Joint__GetAnchorB_p0E3ret;

var _ret3;

var __ZGVZ44emscripten_bind_b2Joint__GetReactionForce_p1E3ret;

var _ret4;

var __ZGVZ40emscripten_bind_b2Body__GetLocalPoint_p1E3ret;

var _ret5;

var __ZGVZ44emscripten_bind_b2Body__GetLinearVelocity_p0E3ret;

var _ret6;

var __ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1E3ret;

var _ret7;

var __ZGVZ41emscripten_bind_b2Body__GetWorldVector_p1E3ret;

var _ret8;

var __ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1E3ret;

var _ret9;

var __ZGVZ40emscripten_bind_b2Body__GetWorldPoint_p1E3ret;

var _ret10;

var __ZGVZ41emscripten_bind_b2Body__GetLocalVector_p1E3ret;

var _ret11;

var __ZGVZ31emscripten_bind_b2Vec2__Skew_p0E3ret;

var _ret12;

var __ZGVZ33emscripten_bind_b2Vec2__op_sub_p0E3ret;

var _ret13;

var __ZGVZ33emscripten_bind_b2Vec3__op_sub_p0E3ret;

var _ret14;

var __ZGVZ34emscripten_bind_b2Rot__GetYAxis_p0E3ret;

var _ret15;

var __ZGVZ34emscripten_bind_b2Rot__GetXAxis_p0E3ret;

var _llvm_used;

var __gm_;

var _mparams;

var __impure_ptr;

var __ZSt7nothrow;

var __ZL13__new_handler;

var __ZTVSt9bad_alloc;

var __ZTVSt20bad_array_new_length;

var __ZTISt9exception;

var __ZTISt9bad_alloc;

var __ZTISt20bad_array_new_length;

var __ZN12b2BroadPhaseC1Ev;

var __ZN12b2BroadPhaseD1Ev;

var __ZN13b2DynamicTreeC1Ev;

var __ZN13b2DynamicTreeD1Ev;

var __ZN12b2ChainShapeD1Ev;

var __ZN16b2BlockAllocatorC1Ev;

var __ZN16b2BlockAllocatorD1Ev;

var __ZN16b2StackAllocatorC1Ev;

var __ZN16b2StackAllocatorD1Ev;

var __ZN7b2TimerC1Ev;

var __ZN6b2BodyC1EPK9b2BodyDefP7b2World;

var __ZN6b2BodyD1Ev;

var __ZN16b2ContactManagerC1Ev;

var __ZN9b2FixtureC1Ev;

var __ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener;

var __ZN8b2IslandD1Ev;

var __ZN7b2WorldC1ERK6b2Vec2;

var __ZN7b2WorldD1Ev;

var __ZN23b2ChainAndCircleContactC1EP9b2FixtureiS1_i;

var __ZN24b2ChainAndPolygonContactC1EP9b2FixtureiS1_i;

var __ZN15b2CircleContactC1EP9b2FixtureS1_;

var __ZN15b2ContactSolverC1EP18b2ContactSolverDef;

var __ZN15b2ContactSolverD1Ev;

var __ZN22b2EdgeAndCircleContactC1EP9b2FixtureS1_;

var __ZN23b2EdgeAndPolygonContactC1EP9b2FixtureS1_;

var __ZN25b2PolygonAndCircleContactC1EP9b2FixtureS1_;

var __ZN16b2PolygonContactC1EP9b2FixtureS1_;

var __ZN15b2DistanceJointC1EPK18b2DistanceJointDef;

var __ZN15b2FrictionJointC1EPK18b2FrictionJointDef;

var __ZN11b2GearJointC1EPK14b2GearJointDef;

var __ZN12b2MouseJointC1EPK15b2MouseJointDef;

var __ZN16b2PrismaticJointC1EPK19b2PrismaticJointDef;

var __ZN13b2PulleyJointC1EPK16b2PulleyJointDef;

var __ZN15b2RevoluteJointC1EPK18b2RevoluteJointDef;

var __ZN11b2RopeJointC1EPK14b2RopeJointDef;

var __ZN11b2WeldJointC1EPK14b2WeldJointDef;

var __ZN12b2WheelJointC1EPK15b2WheelJointDef;

var __ZN6b2RopeC1Ev;

var __ZN6b2RopeD1Ev;

var __ZNSt9bad_allocC1Ev;

var __ZNSt9bad_allocD1Ev;

var __ZNSt20bad_array_new_lengthC1Ev;

var __ZNSt20bad_array_new_lengthD1Ev;

var __ZNSt20bad_array_new_lengthD2Ev;

STRING_TABLE.__str = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 67, 111, 108, 108, 105, 115, 105, 111, 110, 47, 98, 50, 67, 111, 108, 108, 105, 100, 101, 69, 100, 103, 101, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_ = allocate([ 118, 111, 105, 100, 32, 98, 50, 67, 111, 108, 108, 105, 100, 101, 69, 100, 103, 101, 65, 110, 100, 67, 105, 114, 99, 108, 101, 40, 98, 50, 77, 97, 110, 105, 102, 111, 108, 100, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 69, 100, 103, 101, 83, 104, 97, 112, 101, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 67, 105, 114, 99, 108, 101, 83, 104, 97, 112, 101, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1 = allocate([ 100, 101, 110, 32, 62, 32, 48, 46, 48, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 67, 111, 108, 108, 105, 115, 105, 111, 110, 47, 98, 50, 67, 111, 108, 108, 105, 100, 101, 80, 111, 108, 121, 103, 111, 110, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_ = allocate([ 118, 111, 105, 100, 32, 98, 50, 70, 105, 110, 100, 73, 110, 99, 105, 100, 101, 110, 116, 69, 100, 103, 101, 40, 98, 50, 67, 108, 105, 112, 86, 101, 114, 116, 101, 120, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 80, 111, 108, 121, 103, 111, 110, 83, 104, 97, 112, 101, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 44, 32, 105, 110, 116, 51, 50, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 80, 111, 108, 121, 103, 111, 110, 83, 104, 97, 112, 101, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str13 = allocate([ 48, 32, 60, 61, 32, 101, 100, 103, 101, 49, 32, 38, 38, 32, 101, 100, 103, 101, 49, 32, 60, 32, 112, 111, 108, 121, 49, 45, 62, 109, 95, 118, 101, 114, 116, 101, 120, 67, 111, 117, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_ = allocate([ 102, 108, 111, 97, 116, 51, 50, 32, 98, 50, 69, 100, 103, 101, 83, 101, 112, 97, 114, 97, 116, 105, 111, 110, 40, 99, 111, 110, 115, 116, 32, 98, 50, 80, 111, 108, 121, 103, 111, 110, 83, 104, 97, 112, 101, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 44, 32, 105, 110, 116, 51, 50, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 80, 111, 108, 121, 103, 111, 110, 83, 104, 97, 112, 101, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 41, 0 ], "i8", ALLOC_STATIC);

_b2_gjkCalls = allocate(1, "i32", ALLOC_STATIC);

_b2_gjkIters = allocate(1, "i32", ALLOC_STATIC);

_b2_gjkMaxIters = allocate(1, "i32", ALLOC_STATIC);

STRING_TABLE.__str6 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 67, 111, 108, 108, 105, 115, 105, 111, 110, 47, 98, 50, 68, 105, 115, 116, 97, 110, 99, 101, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN15b2DistanceProxy3SetEPK7b2Shapei = allocate([ 118, 111, 105, 100, 32, 98, 50, 68, 105, 115, 116, 97, 110, 99, 101, 80, 114, 111, 120, 121, 58, 58, 83, 101, 116, 40, 99, 111, 110, 115, 116, 32, 98, 50, 83, 104, 97, 112, 101, 32, 42, 44, 32, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str17 = allocate([ 48, 32, 60, 61, 32, 105, 110, 100, 101, 120, 32, 38, 38, 32, 105, 110, 100, 101, 120, 32, 60, 32, 99, 104, 97, 105, 110, 45, 62, 109, 95, 99, 111, 117, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput = allocate([ 118, 111, 105, 100, 32, 98, 50, 68, 105, 115, 116, 97, 110, 99, 101, 40, 98, 50, 68, 105, 115, 116, 97, 110, 99, 101, 79, 117, 116, 112, 117, 116, 32, 42, 44, 32, 98, 50, 83, 105, 109, 112, 108, 101, 120, 67, 97, 99, 104, 101, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 68, 105, 115, 116, 97, 110, 99, 101, 73, 110, 112, 117, 116, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex9GetMetricEv = allocate([ 102, 108, 111, 97, 116, 51, 50, 32, 98, 50, 83, 105, 109, 112, 108, 101, 120, 58, 58, 71, 101, 116, 77, 101, 116, 114, 105, 99, 40, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_ = allocate([ 118, 111, 105, 100, 32, 98, 50, 83, 105, 109, 112, 108, 101, 120, 58, 58, 71, 101, 116, 87, 105, 116, 110, 101, 115, 115, 80, 111, 105, 110, 116, 115, 40, 98, 50, 86, 101, 99, 50, 32, 42, 44, 32, 98, 50, 86, 101, 99, 50, 32, 42, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 67, 111, 108, 108, 105, 115, 105, 111, 110, 47, 98, 50, 68, 105, 115, 116, 97, 110, 99, 101, 46, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK15b2DistanceProxy9GetVertexEi = allocate([ 99, 111, 110, 115, 116, 32, 98, 50, 86, 101, 99, 50, 32, 38, 98, 50, 68, 105, 115, 116, 97, 110, 99, 101, 80, 114, 111, 120, 121, 58, 58, 71, 101, 116, 86, 101, 114, 116, 101, 120, 40, 105, 110, 116, 51, 50, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4 = allocate([ 48, 32, 60, 61, 32, 105, 110, 100, 101, 120, 32, 38, 38, 32, 105, 110, 100, 101, 120, 32, 60, 32, 109, 95, 99, 111, 117, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex18GetSearchDirectionEv = allocate([ 98, 50, 86, 101, 99, 50, 32, 98, 50, 83, 105, 109, 112, 108, 101, 120, 58, 58, 71, 101, 116, 83, 101, 97, 114, 99, 104, 68, 105, 114, 101, 99, 116, 105, 111, 110, 40, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK9b2Simplex15GetClosestPointEv = allocate([ 98, 50, 86, 101, 99, 50, 32, 98, 50, 83, 105, 109, 112, 108, 101, 120, 58, 58, 71, 101, 116, 67, 108, 111, 115, 101, 115, 116, 80, 111, 105, 110, 116, 40, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_ = allocate([ 118, 111, 105, 100, 32, 98, 50, 83, 105, 109, 112, 108, 101, 120, 58, 58, 82, 101, 97, 100, 67, 97, 99, 104, 101, 40, 99, 111, 110, 115, 116, 32, 98, 50, 83, 105, 109, 112, 108, 101, 120, 67, 97, 99, 104, 101, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 68, 105, 115, 116, 97, 110, 99, 101, 80, 114, 111, 120, 121, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 68, 105, 115, 116, 97, 110, 99, 101, 80, 114, 111, 120, 121, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str5 = allocate([ 99, 97, 99, 104, 101, 45, 62, 99, 111, 117, 110, 116, 32, 60, 61, 32, 51, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str14 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 67, 111, 108, 108, 105, 115, 105, 111, 110, 47, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree12AllocateNodeEv = allocate([ 105, 110, 116, 51, 50, 32, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 65, 108, 108, 111, 99, 97, 116, 101, 78, 111, 100, 101, 40, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str115 = allocate([ 109, 95, 110, 111, 100, 101, 67, 111, 117, 110, 116, 32, 61, 61, 32, 109, 95, 110, 111, 100, 101, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree8FreeNodeEi = allocate([ 118, 111, 105, 100, 32, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 70, 114, 101, 101, 78, 111, 100, 101, 40, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str216 = allocate([ 48, 32, 60, 61, 32, 110, 111, 100, 101, 73, 100, 32, 38, 38, 32, 110, 111, 100, 101, 73, 100, 32, 60, 32, 109, 95, 110, 111, 100, 101, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str317 = allocate([ 48, 32, 60, 32, 109, 95, 110, 111, 100, 101, 67, 111, 117, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree12DestroyProxyEi = allocate([ 118, 111, 105, 100, 32, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 68, 101, 115, 116, 114, 111, 121, 80, 114, 111, 120, 121, 40, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str519 = allocate([ 109, 95, 110, 111, 100, 101, 115, 91, 112, 114, 111, 120, 121, 73, 100, 93, 46, 73, 115, 76, 101, 97, 102, 40, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2 = allocate([ 98, 111, 111, 108, 32, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 77, 111, 118, 101, 80, 114, 111, 120, 121, 40, 105, 110, 116, 51, 50, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 65, 65, 66, 66, 32, 38, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 86, 101, 99, 50, 32, 38, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree10InsertLeafEi = allocate([ 118, 111, 105, 100, 32, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 73, 110, 115, 101, 114, 116, 76, 101, 97, 102, 40, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str620 = allocate([ 99, 104, 105, 108, 100, 49, 32, 33, 61, 32, 40, 45, 49, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str7 = allocate([ 99, 104, 105, 108, 100, 50, 32, 33, 61, 32, 40, 45, 49, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN13b2DynamicTree7BalanceEi = allocate([ 105, 110, 116, 51, 50, 32, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 66, 97, 108, 97, 110, 99, 101, 40, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str8 = allocate([ 105, 65, 32, 33, 61, 32, 40, 45, 49, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str9 = allocate([ 48, 32, 60, 61, 32, 105, 66, 32, 38, 38, 32, 105, 66, 32, 60, 32, 109, 95, 110, 111, 100, 101, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str10 = allocate([ 48, 32, 60, 61, 32, 105, 67, 32, 38, 38, 32, 105, 67, 32, 60, 32, 109, 95, 110, 111, 100, 101, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11 = allocate([ 48, 32, 60, 61, 32, 105, 70, 32, 38, 38, 32, 105, 70, 32, 60, 32, 109, 95, 110, 111, 100, 101, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str12 = allocate([ 48, 32, 60, 61, 32, 105, 71, 32, 38, 38, 32, 105, 71, 32, 60, 32, 109, 95, 110, 111, 100, 101, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1321 = allocate([ 109, 95, 110, 111, 100, 101, 115, 91, 67, 45, 62, 112, 97, 114, 101, 110, 116, 93, 46, 99, 104, 105, 108, 100, 50, 32, 61, 61, 32, 105, 65, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1422 = allocate([ 48, 32, 60, 61, 32, 105, 68, 32, 38, 38, 32, 105, 68, 32, 60, 32, 109, 95, 110, 111, 100, 101, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str15 = allocate([ 48, 32, 60, 61, 32, 105, 69, 32, 38, 38, 32, 105, 69, 32, 60, 32, 109, 95, 110, 111, 100, 101, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str16 = allocate([ 109, 95, 110, 111, 100, 101, 115, 91, 66, 45, 62, 112, 97, 114, 101, 110, 116, 93, 46, 99, 104, 105, 108, 100, 50, 32, 61, 61, 32, 105, 65, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree13ComputeHeightEi = allocate([ 105, 110, 116, 51, 50, 32, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 67, 111, 109, 112, 117, 116, 101, 72, 101, 105, 103, 104, 116, 40, 105, 110, 116, 51, 50, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree17ValidateStructureEi = allocate([ 118, 111, 105, 100, 32, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 86, 97, 108, 105, 100, 97, 116, 101, 83, 116, 114, 117, 99, 116, 117, 114, 101, 40, 105, 110, 116, 51, 50, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1723 = allocate([ 109, 95, 110, 111, 100, 101, 115, 91, 105, 110, 100, 101, 120, 93, 46, 112, 97, 114, 101, 110, 116, 32, 61, 61, 32, 40, 45, 49, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str19 = allocate([ 99, 104, 105, 108, 100, 50, 32, 61, 61, 32, 40, 45, 49, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str20 = allocate([ 110, 111, 100, 101, 45, 62, 104, 101, 105, 103, 104, 116, 32, 61, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str21 = allocate([ 48, 32, 60, 61, 32, 99, 104, 105, 108, 100, 49, 32, 38, 38, 32, 99, 104, 105, 108, 100, 49, 32, 60, 32, 109, 95, 110, 111, 100, 101, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str22 = allocate([ 48, 32, 60, 61, 32, 99, 104, 105, 108, 100, 50, 32, 38, 38, 32, 99, 104, 105, 108, 100, 50, 32, 60, 32, 109, 95, 110, 111, 100, 101, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str23 = allocate([ 109, 95, 110, 111, 100, 101, 115, 91, 99, 104, 105, 108, 100, 49, 93, 46, 112, 97, 114, 101, 110, 116, 32, 61, 61, 32, 105, 110, 100, 101, 120, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str24 = allocate([ 109, 95, 110, 111, 100, 101, 115, 91, 99, 104, 105, 108, 100, 50, 93, 46, 112, 97, 114, 101, 110, 116, 32, 61, 61, 32, 105, 110, 100, 101, 120, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree15ValidateMetricsEi = allocate([ 118, 111, 105, 100, 32, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 86, 97, 108, 105, 100, 97, 116, 101, 77, 101, 116, 114, 105, 99, 115, 40, 105, 110, 116, 51, 50, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str25 = allocate([ 110, 111, 100, 101, 45, 62, 104, 101, 105, 103, 104, 116, 32, 61, 61, 32, 104, 101, 105, 103, 104, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str26 = allocate([ 97, 97, 98, 98, 46, 108, 111, 119, 101, 114, 66, 111, 117, 110, 100, 32, 61, 61, 32, 110, 111, 100, 101, 45, 62, 97, 97, 98, 98, 46, 108, 111, 119, 101, 114, 66, 111, 117, 110, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str27 = allocate([ 97, 97, 98, 98, 46, 117, 112, 112, 101, 114, 66, 111, 117, 110, 100, 32, 61, 61, 32, 110, 111, 100, 101, 45, 62, 97, 97, 98, 98, 46, 117, 112, 112, 101, 114, 66, 111, 117, 110, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree8ValidateEv = allocate([ 118, 111, 105, 100, 32, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 86, 97, 108, 105, 100, 97, 116, 101, 40, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2824 = allocate([ 48, 32, 60, 61, 32, 102, 114, 101, 101, 73, 110, 100, 101, 120, 32, 38, 38, 32, 102, 114, 101, 101, 73, 110, 100, 101, 120, 32, 60, 32, 109, 95, 110, 111, 100, 101, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str29 = allocate([ 71, 101, 116, 72, 101, 105, 103, 104, 116, 40, 41, 32, 61, 61, 32, 67, 111, 109, 112, 117, 116, 101, 72, 101, 105, 103, 104, 116, 40, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str30 = allocate([ 109, 95, 110, 111, 100, 101, 67, 111, 117, 110, 116, 32, 43, 32, 102, 114, 101, 101, 67, 111, 117, 110, 116, 32, 61, 61, 32, 109, 95, 110, 111, 100, 101, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree13GetMaxBalanceEv = allocate([ 105, 110, 116, 51, 50, 32, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 71, 101, 116, 77, 97, 120, 66, 97, 108, 97, 110, 99, 101, 40, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str31 = allocate([ 110, 111, 100, 101, 45, 62, 73, 115, 76, 101, 97, 102, 40, 41, 32, 61, 61, 32, 102, 97, 108, 115, 101, 0 ], "i8", ALLOC_STATIC);

_b2_toiCalls = allocate(1, "i32", ALLOC_STATIC);

_b2_toiIters = allocate(1, "i32", ALLOC_STATIC);

_b2_toiMaxIters = allocate(1, "i32", ALLOC_STATIC);

_b2_toiRootIters = allocate(1, "i32", ALLOC_STATIC);

_b2_toiMaxRootIters = allocate(1, "i32", ALLOC_STATIC);

STRING_TABLE.__str35 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 67, 111, 108, 108, 105, 115, 105, 111, 110, 47, 98, 50, 84, 105, 109, 101, 79, 102, 73, 109, 112, 97, 99, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput = allocate([ 118, 111, 105, 100, 32, 98, 50, 84, 105, 109, 101, 79, 102, 73, 109, 112, 97, 99, 116, 40, 98, 50, 84, 79, 73, 79, 117, 116, 112, 117, 116, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 79, 73, 73, 110, 112, 117, 116, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str136 = allocate([ 116, 97, 114, 103, 101, 116, 32, 62, 32, 116, 111, 108, 101, 114, 97, 110, 99, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK20b2SeparationFunction8EvaluateEiif = allocate([ 102, 108, 111, 97, 116, 51, 50, 32, 98, 50, 83, 101, 112, 97, 114, 97, 116, 105, 111, 110, 70, 117, 110, 99, 116, 105, 111, 110, 58, 58, 69, 118, 97, 108, 117, 97, 116, 101, 40, 105, 110, 116, 51, 50, 44, 32, 105, 110, 116, 51, 50, 44, 32, 102, 108, 111, 97, 116, 51, 50, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f = allocate([ 102, 108, 111, 97, 116, 51, 50, 32, 98, 50, 83, 101, 112, 97, 114, 97, 116, 105, 111, 110, 70, 117, 110, 99, 116, 105, 111, 110, 58, 58, 70, 105, 110, 100, 77, 105, 110, 83, 101, 112, 97, 114, 97, 116, 105, 111, 110, 40, 105, 110, 116, 51, 50, 32, 42, 44, 32, 105, 110, 116, 51, 50, 32, 42, 44, 32, 102, 108, 111, 97, 116, 51, 50, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f = allocate([ 102, 108, 111, 97, 116, 51, 50, 32, 98, 50, 83, 101, 112, 97, 114, 97, 116, 105, 111, 110, 70, 117, 110, 99, 116, 105, 111, 110, 58, 58, 73, 110, 105, 116, 105, 97, 108, 105, 122, 101, 40, 99, 111, 110, 115, 116, 32, 98, 50, 83, 105, 109, 112, 108, 101, 120, 67, 97, 99, 104, 101, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 68, 105, 115, 116, 97, 110, 99, 101, 80, 114, 111, 120, 121, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 83, 119, 101, 101, 112, 32, 38, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 68, 105, 115, 116, 97, 110, 99, 101, 80, 114, 111, 120, 121, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 83, 119, 101, 101, 112, 32, 38, 44, 32, 102, 108, 111, 97, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str541 = allocate([ 48, 32, 60, 32, 99, 111, 117, 110, 116, 32, 38, 38, 32, 99, 111, 117, 110, 116, 32, 60, 32, 51, 0 ], "i8", ALLOC_STATIC);

__ZTV12b2ChainShape = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 36, 0, 0, 0, 38, 0, 0, 0, 40, 0, 0, 0, 42, 0, 0, 0, 44, 0, 0, 0, 46, 0, 0, 0, 48, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str42 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 67, 111, 108, 108, 105, 115, 105, 111, 110, 47, 83, 104, 97, 112, 101, 115, 47, 98, 50, 67, 104, 97, 105, 110, 83, 104, 97, 112, 101, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape10CreateLoopEPK6b2Vec2i = allocate([ 118, 111, 105, 100, 32, 98, 50, 67, 104, 97, 105, 110, 83, 104, 97, 112, 101, 58, 58, 67, 114, 101, 97, 116, 101, 76, 111, 111, 112, 40, 99, 111, 110, 115, 116, 32, 98, 50, 86, 101, 99, 50, 32, 42, 44, 32, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str143 = allocate([ 109, 95, 118, 101, 114, 116, 105, 99, 101, 115, 32, 61, 61, 32, 95, 95, 110, 117, 108, 108, 32, 38, 38, 32, 109, 95, 99, 111, 117, 110, 116, 32, 61, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN12b2ChainShape11CreateChainEPK6b2Vec2i = allocate([ 118, 111, 105, 100, 32, 98, 50, 67, 104, 97, 105, 110, 83, 104, 97, 112, 101, 58, 58, 67, 114, 101, 97, 116, 101, 67, 104, 97, 105, 110, 40, 99, 111, 110, 115, 116, 32, 98, 50, 86, 101, 99, 50, 32, 42, 44, 32, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str345 = allocate([ 99, 111, 117, 110, 116, 32, 62, 61, 32, 50, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei = allocate([ 118, 111, 105, 100, 32, 98, 50, 67, 104, 97, 105, 110, 83, 104, 97, 112, 101, 58, 58, 71, 101, 116, 67, 104, 105, 108, 100, 69, 100, 103, 101, 40, 98, 50, 69, 100, 103, 101, 83, 104, 97, 112, 101, 32, 42, 44, 32, 105, 110, 116, 51, 50, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str446 = allocate([ 48, 32, 60, 61, 32, 105, 110, 100, 101, 120, 32, 38, 38, 32, 105, 110, 100, 101, 120, 32, 60, 32, 109, 95, 99, 111, 117, 110, 116, 32, 45, 32, 49, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi = allocate([ 118, 105, 114, 116, 117, 97, 108, 32, 98, 111, 111, 108, 32, 98, 50, 67, 104, 97, 105, 110, 83, 104, 97, 112, 101, 58, 58, 82, 97, 121, 67, 97, 115, 116, 40, 98, 50, 82, 97, 121, 67, 97, 115, 116, 79, 117, 116, 112, 117, 116, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 82, 97, 121, 67, 97, 115, 116, 73, 110, 112, 117, 116, 32, 38, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 44, 32, 105, 110, 116, 51, 50, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str547 = allocate([ 99, 104, 105, 108, 100, 73, 110, 100, 101, 120, 32, 60, 32, 109, 95, 99, 111, 117, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi = allocate([ 118, 105, 114, 116, 117, 97, 108, 32, 118, 111, 105, 100, 32, 98, 50, 67, 104, 97, 105, 110, 83, 104, 97, 112, 101, 58, 58, 67, 111, 109, 112, 117, 116, 101, 65, 65, 66, 66, 40, 98, 50, 65, 65, 66, 66, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 44, 32, 105, 110, 116, 51, 50, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS12b2ChainShape = allocate([ 49, 50, 98, 50, 67, 104, 97, 105, 110, 83, 104, 97, 112, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS7b2Shape = allocate([ 55, 98, 50, 83, 104, 97, 112, 101, 0 ], "i8", ALLOC_STATIC);

__ZTI7b2Shape = allocate(8, "*", ALLOC_STATIC);

__ZTI12b2ChainShape = allocate(12, "*", ALLOC_STATIC);

__ZTV13b2CircleShape = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 52, 0, 0, 0, 54, 0, 0, 0, 56, 0, 0, 0, 58, 0, 0, 0, 60, 0, 0, 0, 62, 0, 0, 0, 64, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__ZTS13b2CircleShape = allocate([ 49, 51, 98, 50, 67, 105, 114, 99, 108, 101, 83, 104, 97, 112, 101, 0 ], "i8", ALLOC_STATIC);

__ZTI13b2CircleShape = allocate(12, "*", ALLOC_STATIC);

__ZTV11b2EdgeShape = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 68, 0, 0, 0, 70, 0, 0, 0, 72, 0, 0, 0, 74, 0, 0, 0, 76, 0, 0, 0, 78, 0, 0, 0, 80, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__ZTS11b2EdgeShape = allocate([ 49, 49, 98, 50, 69, 100, 103, 101, 83, 104, 97, 112, 101, 0 ], "i8", ALLOC_STATIC);

__ZTI11b2EdgeShape = allocate(12, "*", ALLOC_STATIC);

STRING_TABLE.__str52 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 67, 111, 108, 108, 105, 115, 105, 111, 110, 47, 83, 104, 97, 112, 101, 115, 47, 98, 50, 80, 111, 108, 121, 103, 111, 110, 83, 104, 97, 112, 101, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN14b2PolygonShape3SetEPK6b2Vec2i = allocate([ 118, 111, 105, 100, 32, 98, 50, 80, 111, 108, 121, 103, 111, 110, 83, 104, 97, 112, 101, 58, 58, 83, 101, 116, 40, 99, 111, 110, 115, 116, 32, 98, 50, 86, 101, 99, 50, 32, 42, 44, 32, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str153 = allocate([ 51, 32, 60, 61, 32, 99, 111, 117, 110, 116, 32, 38, 38, 32, 99, 111, 117, 110, 116, 32, 60, 61, 32, 56, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str254 = allocate([ 101, 100, 103, 101, 46, 76, 101, 110, 103, 116, 104, 83, 113, 117, 97, 114, 101, 100, 40, 41, 32, 62, 32, 49, 46, 49, 57, 50, 48, 57, 50, 57, 48, 69, 45, 48, 55, 70, 32, 42, 32, 49, 46, 49, 57, 50, 48, 57, 50, 57, 48, 69, 45, 48, 55, 70, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi = allocate([ 118, 105, 114, 116, 117, 97, 108, 32, 98, 111, 111, 108, 32, 98, 50, 80, 111, 108, 121, 103, 111, 110, 83, 104, 97, 112, 101, 58, 58, 82, 97, 121, 67, 97, 115, 116, 40, 98, 50, 82, 97, 121, 67, 97, 115, 116, 79, 117, 116, 112, 117, 116, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 82, 97, 121, 67, 97, 115, 116, 73, 110, 112, 117, 116, 32, 38, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 44, 32, 105, 110, 116, 51, 50, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str355 = allocate([ 48, 46, 48, 102, 32, 60, 61, 32, 108, 111, 119, 101, 114, 32, 38, 38, 32, 108, 111, 119, 101, 114, 32, 60, 61, 32, 105, 110, 112, 117, 116, 46, 109, 97, 120, 70, 114, 97, 99, 116, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf = allocate([ 118, 105, 114, 116, 117, 97, 108, 32, 118, 111, 105, 100, 32, 98, 50, 80, 111, 108, 121, 103, 111, 110, 83, 104, 97, 112, 101, 58, 58, 67, 111, 109, 112, 117, 116, 101, 77, 97, 115, 115, 40, 98, 50, 77, 97, 115, 115, 68, 97, 116, 97, 32, 42, 44, 32, 102, 108, 111, 97, 116, 51, 50, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str456 = allocate([ 109, 95, 118, 101, 114, 116, 101, 120, 67, 111, 117, 110, 116, 32, 62, 61, 32, 51, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str557 = allocate([ 97, 114, 101, 97, 32, 62, 32, 49, 46, 49, 57, 50, 48, 57, 50, 57, 48, 69, 45, 48, 55, 70, 0 ], "i8", ALLOC_STATIC);

__ZTV14b2PolygonShape = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 84, 0, 0, 0, 86, 0, 0, 0, 88, 0, 0, 0, 90, 0, 0, 0, 92, 0, 0, 0, 94, 0, 0, 0, 96, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__ZTS14b2PolygonShape = allocate([ 49, 52, 98, 50, 80, 111, 108, 121, 103, 111, 110, 83, 104, 97, 112, 101, 0 ], "i8", ALLOC_STATIC);

__ZTI14b2PolygonShape = allocate(12, "*", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZL15ComputeCentroidPK6b2Vec2i = allocate([ 98, 50, 86, 101, 99, 50, 32, 67, 111, 109, 112, 117, 116, 101, 67, 101, 110, 116, 114, 111, 105, 100, 40, 99, 111, 110, 115, 116, 32, 98, 50, 86, 101, 99, 50, 32, 42, 44, 32, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str658 = allocate([ 99, 111, 117, 110, 116, 32, 62, 61, 32, 51, 0 ], "i8", ALLOC_STATIC);

__ZN16b2BlockAllocator12s_blockSizesE = allocate([ 16, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 128, 0, 0, 0, 160, 0, 0, 0, 192, 0, 0, 0, 224, 0, 0, 0, 256, 0, 0, 0, 320, 0, 0, 0, 384, 0, 0, 0, 448, 0, 0, 0, 512, 0, 0, 0, 640, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

__ZN16b2BlockAllocator17s_blockSizeLookupE = allocate(641, "i8", ALLOC_STATIC);

__ZN16b2BlockAllocator28s_blockSizeLookupInitializedE = allocate(1, "i8", ALLOC_STATIC);

STRING_TABLE.__str59 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 67, 111, 109, 109, 111, 110, 47, 98, 50, 66, 108, 111, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocatorC2Ev = allocate([ 98, 50, 66, 108, 111, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 58, 58, 98, 50, 66, 108, 111, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 40, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str160 = allocate([ 106, 32, 60, 32, 98, 50, 95, 98, 108, 111, 99, 107, 83, 105, 122, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator8AllocateEi = allocate([ 118, 111, 105, 100, 32, 42, 98, 50, 66, 108, 111, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 58, 58, 65, 108, 108, 111, 99, 97, 116, 101, 40, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str261 = allocate([ 48, 32, 60, 32, 115, 105, 122, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str362 = allocate([ 48, 32, 60, 61, 32, 105, 110, 100, 101, 120, 32, 38, 38, 32, 105, 110, 100, 101, 120, 32, 60, 32, 98, 50, 95, 98, 108, 111, 99, 107, 83, 105, 122, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str463 = allocate([ 98, 108, 111, 99, 107, 67, 111, 117, 110, 116, 32, 42, 32, 98, 108, 111, 99, 107, 83, 105, 122, 101, 32, 60, 61, 32, 98, 50, 95, 99, 104, 117, 110, 107, 83, 105, 122, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN16b2BlockAllocator4FreeEPvi = allocate([ 118, 111, 105, 100, 32, 98, 50, 66, 108, 111, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 58, 58, 70, 114, 101, 101, 40, 118, 111, 105, 100, 32, 42, 44, 32, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

__ZTV6b2Draw = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 100, 0, 0, 0, 102, 0, 0, 0, 102, 0, 0, 0, 102, 0, 0, 0, 102, 0, 0, 0, 102, 0, 0, 0, 102, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__ZTS6b2Draw = allocate([ 54, 98, 50, 68, 114, 97, 119, 0 ], "i8", ALLOC_STATIC);

__ZTI6b2Draw = allocate(8, "*", ALLOC_STATIC);

_b2Vec2_zero = allocate(8, "float", ALLOC_STATIC);

_b2_version = allocate([ 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

STRING_TABLE.__str72 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 67, 111, 109, 109, 111, 110, 47, 98, 50, 83, 116, 97, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocatorD2Ev = allocate([ 98, 50, 83, 116, 97, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 58, 58, 126, 98, 50, 83, 116, 97, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 40, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str173 = allocate([ 109, 95, 105, 110, 100, 101, 120, 32, 61, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str274 = allocate([ 109, 95, 101, 110, 116, 114, 121, 67, 111, 117, 110, 116, 32, 61, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator8AllocateEi = allocate([ 118, 111, 105, 100, 32, 42, 98, 50, 83, 116, 97, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 58, 58, 65, 108, 108, 111, 99, 97, 116, 101, 40, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str375 = allocate([ 109, 95, 101, 110, 116, 114, 121, 67, 111, 117, 110, 116, 32, 60, 32, 98, 50, 95, 109, 97, 120, 83, 116, 97, 99, 107, 69, 110, 116, 114, 105, 101, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN16b2StackAllocator4FreeEPv = allocate([ 118, 111, 105, 100, 32, 98, 50, 83, 116, 97, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 58, 58, 70, 114, 101, 101, 40, 118, 111, 105, 100, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str476 = allocate([ 109, 95, 101, 110, 116, 114, 121, 67, 111, 117, 110, 116, 32, 62, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str577 = allocate([ 112, 32, 61, 61, 32, 101, 110, 116, 114, 121, 45, 62, 100, 97, 116, 97, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str78 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 98, 50, 66, 111, 100, 121, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN6b2BodyC2EPK9b2BodyDefP7b2World = allocate([ 98, 50, 66, 111, 100, 121, 58, 58, 98, 50, 66, 111, 100, 121, 40, 99, 111, 110, 115, 116, 32, 98, 50, 66, 111, 100, 121, 68, 101, 102, 32, 42, 44, 32, 98, 50, 87, 111, 114, 108, 100, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str179 = allocate([ 98, 100, 45, 62, 112, 111, 115, 105, 116, 105, 111, 110, 46, 73, 115, 86, 97, 108, 105, 100, 40, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str280 = allocate([ 98, 100, 45, 62, 108, 105, 110, 101, 97, 114, 86, 101, 108, 111, 99, 105, 116, 121, 46, 73, 115, 86, 97, 108, 105, 100, 40, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str381 = allocate([ 98, 50, 73, 115, 86, 97, 108, 105, 100, 40, 98, 100, 45, 62, 97, 110, 103, 108, 101, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str482 = allocate([ 98, 50, 73, 115, 86, 97, 108, 105, 100, 40, 98, 100, 45, 62, 97, 110, 103, 117, 108, 97, 114, 86, 101, 108, 111, 99, 105, 116, 121, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str583 = allocate([ 98, 50, 73, 115, 86, 97, 108, 105, 100, 40, 98, 100, 45, 62, 97, 110, 103, 117, 108, 97, 114, 68, 97, 109, 112, 105, 110, 103, 41, 32, 38, 38, 32, 98, 100, 45, 62, 97, 110, 103, 117, 108, 97, 114, 68, 97, 109, 112, 105, 110, 103, 32, 62, 61, 32, 48, 46, 48, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str684 = allocate([ 98, 50, 73, 115, 86, 97, 108, 105, 100, 40, 98, 100, 45, 62, 108, 105, 110, 101, 97, 114, 68, 97, 109, 112, 105, 110, 103, 41, 32, 38, 38, 32, 98, 100, 45, 62, 108, 105, 110, 101, 97, 114, 68, 97, 109, 112, 105, 110, 103, 32, 62, 61, 32, 48, 46, 48, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body7SetTypeE10b2BodyType = allocate([ 118, 111, 105, 100, 32, 98, 50, 66, 111, 100, 121, 58, 58, 83, 101, 116, 84, 121, 112, 101, 40, 98, 50, 66, 111, 100, 121, 84, 121, 112, 101, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str785 = allocate([ 109, 95, 119, 111, 114, 108, 100, 45, 62, 73, 115, 76, 111, 99, 107, 101, 100, 40, 41, 32, 61, 61, 32, 102, 97, 108, 115, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body13CreateFixtureEPK12b2FixtureDef = allocate([ 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 98, 50, 66, 111, 100, 121, 58, 58, 67, 114, 101, 97, 116, 101, 70, 105, 120, 116, 117, 114, 101, 40, 99, 111, 110, 115, 116, 32, 98, 50, 70, 105, 120, 116, 117, 114, 101, 68, 101, 102, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body14DestroyFixtureEP9b2Fixture = allocate([ 118, 111, 105, 100, 32, 98, 50, 66, 111, 100, 121, 58, 58, 68, 101, 115, 116, 114, 111, 121, 70, 105, 120, 116, 117, 114, 101, 40, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str886 = allocate([ 102, 105, 120, 116, 117, 114, 101, 45, 62, 109, 95, 98, 111, 100, 121, 32, 61, 61, 32, 116, 104, 105, 115, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str987 = allocate([ 109, 95, 102, 105, 120, 116, 117, 114, 101, 67, 111, 117, 110, 116, 32, 62, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1088 = allocate([ 102, 111, 117, 110, 100, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body13ResetMassDataEv = allocate([ 118, 111, 105, 100, 32, 98, 50, 66, 111, 100, 121, 58, 58, 82, 101, 115, 101, 116, 77, 97, 115, 115, 68, 97, 116, 97, 40, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1189 = allocate([ 109, 95, 116, 121, 112, 101, 32, 61, 61, 32, 98, 50, 95, 100, 121, 110, 97, 109, 105, 99, 66, 111, 100, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1290 = allocate([ 109, 95, 73, 32, 62, 32, 48, 46, 48, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body11SetMassDataEPK10b2MassData = allocate([ 118, 111, 105, 100, 32, 98, 50, 66, 111, 100, 121, 58, 58, 83, 101, 116, 77, 97, 115, 115, 68, 97, 116, 97, 40, 99, 111, 110, 115, 116, 32, 98, 50, 77, 97, 115, 115, 68, 97, 116, 97, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body12SetTransformERK6b2Vec2f = allocate([ 118, 111, 105, 100, 32, 98, 50, 66, 111, 100, 121, 58, 58, 83, 101, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 40, 99, 111, 110, 115, 116, 32, 98, 50, 86, 101, 99, 50, 32, 38, 44, 32, 102, 108, 111, 97, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Body9SetActiveEb = allocate([ 118, 111, 105, 100, 32, 98, 50, 66, 111, 100, 121, 58, 58, 83, 101, 116, 65, 99, 116, 105, 118, 101, 40, 98, 111, 111, 108, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1492 = allocate([ 32, 32, 98, 50, 66, 111, 100, 121, 68, 101, 102, 32, 98, 100, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1593 = allocate([ 32, 32, 98, 100, 46, 116, 121, 112, 101, 32, 61, 32, 98, 50, 66, 111, 100, 121, 84, 121, 112, 101, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1694 = allocate([ 32, 32, 98, 100, 46, 112, 111, 115, 105, 116, 105, 111, 110, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1795 = allocate([ 32, 32, 98, 100, 46, 97, 110, 103, 108, 101, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1896 = allocate([ 32, 32, 98, 100, 46, 108, 105, 110, 101, 97, 114, 86, 101, 108, 111, 99, 105, 116, 121, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1997 = allocate([ 32, 32, 98, 100, 46, 97, 110, 103, 117, 108, 97, 114, 86, 101, 108, 111, 99, 105, 116, 121, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2098 = allocate([ 32, 32, 98, 100, 46, 108, 105, 110, 101, 97, 114, 68, 97, 109, 112, 105, 110, 103, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2199 = allocate([ 32, 32, 98, 100, 46, 97, 110, 103, 117, 108, 97, 114, 68, 97, 109, 112, 105, 110, 103, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str22100 = allocate([ 32, 32, 98, 100, 46, 97, 108, 108, 111, 119, 83, 108, 101, 101, 112, 32, 61, 32, 98, 111, 111, 108, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str23101 = allocate([ 32, 32, 98, 100, 46, 97, 119, 97, 107, 101, 32, 61, 32, 98, 111, 111, 108, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str24102 = allocate([ 32, 32, 98, 100, 46, 102, 105, 120, 101, 100, 82, 111, 116, 97, 116, 105, 111, 110, 32, 61, 32, 98, 111, 111, 108, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str25103 = allocate([ 32, 32, 98, 100, 46, 98, 117, 108, 108, 101, 116, 32, 61, 32, 98, 111, 111, 108, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str26104 = allocate([ 32, 32, 98, 100, 46, 97, 99, 116, 105, 118, 101, 32, 61, 32, 98, 111, 111, 108, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str27105 = allocate([ 32, 32, 98, 100, 46, 103, 114, 97, 118, 105, 116, 121, 83, 99, 97, 108, 101, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str28106 = allocate([ 32, 32, 98, 111, 100, 105, 101, 115, 91, 37, 100, 93, 32, 61, 32, 109, 95, 119, 111, 114, 108, 100, 45, 62, 67, 114, 101, 97, 116, 101, 66, 111, 100, 121, 40, 38, 98, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str30108 = allocate([ 32, 32, 123, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str31109 = allocate([ 32, 32, 125, 10, 0 ], "i8", ALLOC_STATIC);

_b2_defaultFilter = allocate(4, "*", ALLOC_STATIC);

_b2_defaultListener = allocate(4, "*", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree11GetUserDataEi = allocate([ 118, 111, 105, 100, 32, 42, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 71, 101, 116, 85, 115, 101, 114, 68, 97, 116, 97, 40, 105, 110, 116, 51, 50, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2111 = allocate([ 48, 32, 60, 61, 32, 112, 114, 111, 120, 121, 73, 100, 32, 38, 38, 32, 112, 114, 111, 120, 121, 73, 100, 32, 60, 32, 109, 95, 110, 111, 100, 101, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree10GetFatAABBEi = allocate([ 99, 111, 110, 115, 116, 32, 98, 50, 65, 65, 66, 66, 32, 38, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 71, 101, 116, 70, 97, 116, 65, 65, 66, 66, 40, 105, 110, 116, 51, 50, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

__ZTV17b2ContactListener = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 106, 0, 0, 0, 108, 0, 0, 0, 110, 0, 0, 0, 112, 0, 0, 0, 114, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__ZTS17b2ContactListener = allocate([ 49, 55, 98, 50, 67, 111, 110, 116, 97, 99, 116, 76, 105, 115, 116, 101, 110, 101, 114, 0 ], "i8", ALLOC_STATIC);

__ZTI17b2ContactListener = allocate(8, "*", ALLOC_STATIC);

STRING_TABLE.__str121 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 98, 50, 70, 105, 120, 116, 117, 114, 101, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Fixture7DestroyEP16b2BlockAllocator = allocate([ 118, 111, 105, 100, 32, 98, 50, 70, 105, 120, 116, 117, 114, 101, 58, 58, 68, 101, 115, 116, 114, 111, 121, 40, 98, 50, 66, 108, 111, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1122 = allocate([ 109, 95, 112, 114, 111, 120, 121, 67, 111, 117, 110, 116, 32, 61, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform = allocate([ 118, 111, 105, 100, 32, 98, 50, 70, 105, 120, 116, 117, 114, 101, 58, 58, 67, 114, 101, 97, 116, 101, 80, 114, 111, 120, 105, 101, 115, 40, 98, 50, 66, 114, 111, 97, 100, 80, 104, 97, 115, 101, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3124 = allocate([ 32, 32, 32, 32, 98, 50, 70, 105, 120, 116, 117, 114, 101, 68, 101, 102, 32, 102, 100, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4125 = allocate([ 32, 32, 32, 32, 102, 100, 46, 102, 114, 105, 99, 116, 105, 111, 110, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str5126 = allocate([ 32, 32, 32, 32, 102, 100, 46, 114, 101, 115, 116, 105, 116, 117, 116, 105, 111, 110, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str6127 = allocate([ 32, 32, 32, 32, 102, 100, 46, 100, 101, 110, 115, 105, 116, 121, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str7128 = allocate([ 32, 32, 32, 32, 102, 100, 46, 105, 115, 83, 101, 110, 115, 111, 114, 32, 61, 32, 98, 111, 111, 108, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str8129 = allocate([ 32, 32, 32, 32, 102, 100, 46, 102, 105, 108, 116, 101, 114, 46, 99, 97, 116, 101, 103, 111, 114, 121, 66, 105, 116, 115, 32, 61, 32, 117, 105, 110, 116, 49, 54, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str9130 = allocate([ 32, 32, 32, 32, 102, 100, 46, 102, 105, 108, 116, 101, 114, 46, 109, 97, 115, 107, 66, 105, 116, 115, 32, 61, 32, 117, 105, 110, 116, 49, 54, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str10131 = allocate([ 32, 32, 32, 32, 102, 100, 46, 102, 105, 108, 116, 101, 114, 46, 103, 114, 111, 117, 112, 73, 110, 100, 101, 120, 32, 61, 32, 105, 110, 116, 49, 54, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11132 = allocate([ 32, 32, 32, 32, 98, 50, 67, 105, 114, 99, 108, 101, 83, 104, 97, 112, 101, 32, 115, 104, 97, 112, 101, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str12133 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 109, 95, 114, 97, 100, 105, 117, 115, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str13134 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 109, 95, 112, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str14135 = allocate([ 32, 32, 32, 32, 98, 50, 69, 100, 103, 101, 83, 104, 97, 112, 101, 32, 115, 104, 97, 112, 101, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str15136 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 109, 95, 118, 101, 114, 116, 101, 120, 48, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str16137 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 109, 95, 118, 101, 114, 116, 101, 120, 49, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str17138 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 109, 95, 118, 101, 114, 116, 101, 120, 50, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str18139 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 109, 95, 118, 101, 114, 116, 101, 120, 51, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str19140 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 109, 95, 104, 97, 115, 86, 101, 114, 116, 101, 120, 48, 32, 61, 32, 98, 111, 111, 108, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str20141 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 109, 95, 104, 97, 115, 86, 101, 114, 116, 101, 120, 51, 32, 61, 32, 98, 111, 111, 108, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str21142 = allocate([ 32, 32, 32, 32, 98, 50, 80, 111, 108, 121, 103, 111, 110, 83, 104, 97, 112, 101, 32, 115, 104, 97, 112, 101, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str22143 = allocate([ 32, 32, 32, 32, 98, 50, 86, 101, 99, 50, 32, 118, 115, 91, 37, 100, 93, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str23144 = allocate([ 32, 32, 32, 32, 118, 115, 91, 37, 100, 93, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str24145 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 83, 101, 116, 40, 118, 115, 44, 32, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str25146 = allocate([ 32, 32, 32, 32, 98, 50, 67, 104, 97, 105, 110, 83, 104, 97, 112, 101, 32, 115, 104, 97, 112, 101, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str26147 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 67, 114, 101, 97, 116, 101, 67, 104, 97, 105, 110, 40, 118, 115, 44, 32, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str27148 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 109, 95, 112, 114, 101, 118, 86, 101, 114, 116, 101, 120, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str28149 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 109, 95, 110, 101, 120, 116, 86, 101, 114, 116, 101, 120, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str29150 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 109, 95, 104, 97, 115, 80, 114, 101, 118, 86, 101, 114, 116, 101, 120, 32, 61, 32, 98, 111, 111, 108, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str30151 = allocate([ 32, 32, 32, 32, 115, 104, 97, 112, 101, 46, 109, 95, 104, 97, 115, 78, 101, 120, 116, 86, 101, 114, 116, 101, 120, 32, 61, 32, 98, 111, 111, 108, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str31152 = allocate([ 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str32153 = allocate([ 32, 32, 32, 32, 102, 100, 46, 115, 104, 97, 112, 101, 32, 61, 32, 38, 115, 104, 97, 112, 101, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str33 = allocate([ 32, 32, 32, 32, 98, 111, 100, 105, 101, 115, 91, 37, 100, 93, 45, 62, 67, 114, 101, 97, 116, 101, 70, 105, 120, 116, 117, 114, 101, 40, 38, 102, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str170 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 98, 50, 73, 115, 108, 97, 110, 100, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island8SolveTOIERK10b2TimeStepii = allocate([ 118, 111, 105, 100, 32, 98, 50, 73, 115, 108, 97, 110, 100, 58, 58, 83, 111, 108, 118, 101, 84, 79, 73, 40, 99, 111, 110, 115, 116, 32, 98, 50, 84, 105, 109, 101, 83, 116, 101, 112, 32, 38, 44, 32, 105, 110, 116, 51, 50, 44, 32, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1171 = allocate([ 116, 111, 105, 73, 110, 100, 101, 120, 65, 32, 60, 32, 109, 95, 98, 111, 100, 121, 67, 111, 117, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2172 = allocate([ 116, 111, 105, 73, 110, 100, 101, 120, 66, 32, 60, 32, 109, 95, 98, 111, 100, 121, 67, 111, 117, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str174 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 98, 50, 87, 111, 114, 108, 100, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World10CreateBodyEPK9b2BodyDef = allocate([ 98, 50, 66, 111, 100, 121, 32, 42, 98, 50, 87, 111, 114, 108, 100, 58, 58, 67, 114, 101, 97, 116, 101, 66, 111, 100, 121, 40, 99, 111, 110, 115, 116, 32, 98, 50, 66, 111, 100, 121, 68, 101, 102, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1175 = allocate([ 73, 115, 76, 111, 99, 107, 101, 100, 40, 41, 32, 61, 61, 32, 102, 97, 108, 115, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World11DestroyBodyEP6b2Body = allocate([ 118, 111, 105, 100, 32, 98, 50, 87, 111, 114, 108, 100, 58, 58, 68, 101, 115, 116, 114, 111, 121, 66, 111, 100, 121, 40, 98, 50, 66, 111, 100, 121, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2176 = allocate([ 109, 95, 98, 111, 100, 121, 67, 111, 117, 110, 116, 32, 62, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World11CreateJointEPK10b2JointDef = allocate([ 98, 50, 74, 111, 105, 110, 116, 32, 42, 98, 50, 87, 111, 114, 108, 100, 58, 58, 67, 114, 101, 97, 116, 101, 74, 111, 105, 110, 116, 40, 99, 111, 110, 115, 116, 32, 98, 50, 74, 111, 105, 110, 116, 68, 101, 102, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World12DestroyJointEP7b2Joint = allocate([ 118, 111, 105, 100, 32, 98, 50, 87, 111, 114, 108, 100, 58, 58, 68, 101, 115, 116, 114, 111, 121, 74, 111, 105, 110, 116, 40, 98, 50, 74, 111, 105, 110, 116, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3177 = allocate([ 109, 95, 106, 111, 105, 110, 116, 67, 111, 117, 110, 116, 32, 62, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World5SolveERK10b2TimeStep = allocate([ 118, 111, 105, 100, 32, 98, 50, 87, 111, 114, 108, 100, 58, 58, 83, 111, 108, 118, 101, 40, 99, 111, 110, 115, 116, 32, 98, 50, 84, 105, 109, 101, 83, 116, 101, 112, 32, 38, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4178 = allocate([ 98, 45, 62, 73, 115, 65, 99, 116, 105, 118, 101, 40, 41, 32, 61, 61, 32, 116, 114, 117, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str5179 = allocate([ 115, 116, 97, 99, 107, 67, 111, 117, 110, 116, 32, 60, 32, 115, 116, 97, 99, 107, 83, 105, 122, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World8SolveTOIERK10b2TimeStep = allocate([ 118, 111, 105, 100, 32, 98, 50, 87, 111, 114, 108, 100, 58, 58, 83, 111, 108, 118, 101, 84, 79, 73, 40, 99, 111, 110, 115, 116, 32, 98, 50, 84, 105, 109, 101, 83, 116, 101, 112, 32, 38, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str6180 = allocate([ 116, 121, 112, 101, 65, 32, 61, 61, 32, 98, 50, 95, 100, 121, 110, 97, 109, 105, 99, 66, 111, 100, 121, 32, 124, 124, 32, 116, 121, 112, 101, 66, 32, 61, 61, 32, 98, 50, 95, 100, 121, 110, 97, 109, 105, 99, 66, 111, 100, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str7181 = allocate([ 97, 108, 112, 104, 97, 48, 32, 60, 32, 49, 46, 48, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color = allocate([ 118, 111, 105, 100, 32, 98, 50, 87, 111, 114, 108, 100, 58, 58, 68, 114, 97, 119, 83, 104, 97, 112, 101, 40, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 67, 111, 108, 111, 114, 32, 38, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str8182 = allocate([ 118, 101, 114, 116, 101, 120, 67, 111, 117, 110, 116, 32, 60, 61, 32, 56, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str9183 = allocate([ 98, 50, 86, 101, 99, 50, 32, 103, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str10184 = allocate([ 109, 95, 119, 111, 114, 108, 100, 45, 62, 83, 101, 116, 71, 114, 97, 118, 105, 116, 121, 40, 103, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11185 = allocate([ 98, 50, 66, 111, 100, 121, 42, 42, 32, 98, 111, 100, 105, 101, 115, 32, 61, 32, 40, 98, 50, 66, 111, 100, 121, 42, 42, 41, 98, 50, 65, 108, 108, 111, 99, 40, 37, 100, 32, 42, 32, 115, 105, 122, 101, 111, 102, 40, 98, 50, 66, 111, 100, 121, 42, 41, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str12186 = allocate([ 98, 50, 74, 111, 105, 110, 116, 42, 42, 32, 106, 111, 105, 110, 116, 115, 32, 61, 32, 40, 98, 50, 74, 111, 105, 110, 116, 42, 42, 41, 98, 50, 65, 108, 108, 111, 99, 40, 37, 100, 32, 42, 32, 115, 105, 122, 101, 111, 102, 40, 98, 50, 74, 111, 105, 110, 116, 42, 41, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str13187 = allocate([ 123, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str14188 = allocate([ 125, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str15189 = allocate([ 98, 50, 70, 114, 101, 101, 40, 106, 111, 105, 110, 116, 115, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str16190 = allocate([ 98, 50, 70, 114, 101, 101, 40, 98, 111, 100, 105, 101, 115, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str17191 = allocate([ 106, 111, 105, 110, 116, 115, 32, 61, 32, 78, 85, 76, 76, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str18192 = allocate([ 98, 111, 100, 105, 101, 115, 32, 61, 32, 78, 85, 76, 76, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str19193 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 67, 111, 108, 108, 105, 115, 105, 111, 110, 47, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 46, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput = allocate([ 118, 111, 105, 100, 32, 98, 50, 68, 121, 110, 97, 109, 105, 99, 84, 114, 101, 101, 58, 58, 82, 97, 121, 67, 97, 115, 116, 40, 98, 50, 87, 111, 114, 108, 100, 82, 97, 121, 67, 97, 115, 116, 87, 114, 97, 112, 112, 101, 114, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 82, 97, 121, 67, 97, 115, 116, 73, 110, 112, 117, 116, 32, 38, 41, 32, 99, 111, 110, 115, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str20194 = allocate([ 114, 46, 76, 101, 110, 103, 116, 104, 83, 113, 117, 97, 114, 101, 100, 40, 41, 32, 62, 32, 48, 46, 48, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str24201 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 67, 111, 109, 109, 111, 110, 47, 98, 50, 77, 97, 116, 104, 46, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Sweep7AdvanceEf = allocate([ 118, 111, 105, 100, 32, 98, 50, 83, 119, 101, 101, 112, 58, 58, 65, 100, 118, 97, 110, 99, 101, 40, 102, 108, 111, 97, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str25202 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 98, 50, 73, 115, 108, 97, 110, 100, 46, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP7b2Joint = allocate([ 118, 111, 105, 100, 32, 98, 50, 73, 115, 108, 97, 110, 100, 58, 58, 65, 100, 100, 40, 98, 50, 74, 111, 105, 110, 116, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str26203 = allocate([ 109, 95, 106, 111, 105, 110, 116, 67, 111, 117, 110, 116, 32, 60, 32, 109, 95, 106, 111, 105, 110, 116, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP9b2Contact = allocate([ 118, 111, 105, 100, 32, 98, 50, 73, 115, 108, 97, 110, 100, 58, 58, 65, 100, 100, 40, 98, 50, 67, 111, 110, 116, 97, 99, 116, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str27204 = allocate([ 109, 95, 99, 111, 110, 116, 97, 99, 116, 67, 111, 117, 110, 116, 32, 60, 32, 109, 95, 99, 111, 110, 116, 97, 99, 116, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN8b2Island3AddEP6b2Body = allocate([ 118, 111, 105, 100, 32, 98, 50, 73, 115, 108, 97, 110, 100, 58, 58, 65, 100, 100, 40, 98, 50, 66, 111, 100, 121, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str28205 = allocate([ 109, 95, 98, 111, 100, 121, 67, 111, 117, 110, 116, 32, 60, 32, 109, 95, 98, 111, 100, 121, 67, 97, 112, 97, 99, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

__ZTV15b2ContactFilter = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 118, 0, 0, 0, 120, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__ZTS15b2ContactFilter = allocate([ 49, 53, 98, 50, 67, 111, 110, 116, 97, 99, 116, 70, 105, 108, 116, 101, 114, 0 ], "i8", ALLOC_STATIC);

__ZTI15b2ContactFilter = allocate(8, "*", ALLOC_STATIC);

__ZTV23b2ChainAndCircleContact = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 124, 0, 0, 0, 126, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str208 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 67, 111, 110, 116, 97, 99, 116, 115, 47, 98, 50, 67, 104, 97, 105, 110, 65, 110, 100, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i = allocate([ 98, 50, 67, 104, 97, 105, 110, 65, 110, 100, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 58, 58, 98, 50, 67, 104, 97, 105, 110, 65, 110, 100, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 40, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 44, 32, 105, 110, 116, 51, 50, 44, 32, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 44, 32, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS23b2ChainAndCircleContact = allocate([ 50, 51, 98, 50, 67, 104, 97, 105, 110, 65, 110, 100, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS9b2Contact = allocate([ 57, 98, 50, 67, 111, 110, 116, 97, 99, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI9b2Contact = allocate(8, "*", ALLOC_STATIC);

__ZTI23b2ChainAndCircleContact = allocate(12, "*", ALLOC_STATIC);

__ZTV24b2ChainAndPolygonContact = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 130, 0, 0, 0, 132, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str211 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 67, 111, 110, 116, 97, 99, 116, 115, 47, 98, 50, 67, 104, 97, 105, 110, 65, 110, 100, 80, 111, 108, 121, 103, 111, 110, 67, 111, 110, 116, 97, 99, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i = allocate([ 98, 50, 67, 104, 97, 105, 110, 65, 110, 100, 80, 111, 108, 121, 103, 111, 110, 67, 111, 110, 116, 97, 99, 116, 58, 58, 98, 50, 67, 104, 97, 105, 110, 65, 110, 100, 80, 111, 108, 121, 103, 111, 110, 67, 111, 110, 116, 97, 99, 116, 40, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 44, 32, 105, 110, 116, 51, 50, 44, 32, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 44, 32, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1212 = allocate([ 109, 95, 102, 105, 120, 116, 117, 114, 101, 65, 45, 62, 71, 101, 116, 84, 121, 112, 101, 40, 41, 32, 61, 61, 32, 98, 50, 83, 104, 97, 112, 101, 58, 58, 101, 95, 99, 104, 97, 105, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS24b2ChainAndPolygonContact = allocate([ 50, 52, 98, 50, 67, 104, 97, 105, 110, 65, 110, 100, 80, 111, 108, 121, 103, 111, 110, 67, 111, 110, 116, 97, 99, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI24b2ChainAndPolygonContact = allocate(12, "*", ALLOC_STATIC);

__ZTV15b2CircleContact = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 136, 0, 0, 0, 138, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str214 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 67, 111, 110, 116, 97, 99, 116, 115, 47, 98, 50, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN15b2CircleContactC2EP9b2FixtureS1_ = allocate([ 98, 50, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 58, 58, 98, 50, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 40, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 44, 32, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1215 = allocate([ 109, 95, 102, 105, 120, 116, 117, 114, 101, 65, 45, 62, 71, 101, 116, 84, 121, 112, 101, 40, 41, 32, 61, 61, 32, 98, 50, 83, 104, 97, 112, 101, 58, 58, 101, 95, 99, 105, 114, 99, 108, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS15b2CircleContact = allocate([ 49, 53, 98, 50, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI15b2CircleContact = allocate(12, "*", ALLOC_STATIC);

__ZN9b2Contact11s_registersE = allocate(192, [ "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i8", 0, 0, 0 ], ALLOC_STATIC);

__ZN9b2Contact13s_initializedE = allocate(1, "i8", ALLOC_STATIC);

STRING_TABLE.__str217 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 67, 111, 110, 116, 97, 99, 116, 115, 47, 98, 50, 67, 111, 110, 116, 97, 99, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_ = allocate([ 115, 116, 97, 116, 105, 99, 32, 118, 111, 105, 100, 32, 98, 50, 67, 111, 110, 116, 97, 99, 116, 58, 58, 65, 100, 100, 84, 121, 112, 101, 40, 98, 50, 67, 111, 110, 116, 97, 99, 116, 67, 114, 101, 97, 116, 101, 70, 99, 110, 32, 42, 44, 32, 98, 50, 67, 111, 110, 116, 97, 99, 116, 68, 101, 115, 116, 114, 111, 121, 70, 99, 110, 32, 42, 44, 32, 98, 50, 83, 104, 97, 112, 101, 58, 58, 84, 121, 112, 101, 44, 32, 98, 50, 83, 104, 97, 112, 101, 58, 58, 84, 121, 112, 101, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1218 = allocate([ 48, 32, 60, 61, 32, 116, 121, 112, 101, 49, 32, 38, 38, 32, 116, 121, 112, 101, 49, 32, 60, 32, 98, 50, 83, 104, 97, 112, 101, 58, 58, 101, 95, 116, 121, 112, 101, 67, 111, 117, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2219 = allocate([ 48, 32, 60, 61, 32, 116, 121, 112, 101, 50, 32, 38, 38, 32, 116, 121, 112, 101, 50, 32, 60, 32, 98, 50, 83, 104, 97, 112, 101, 58, 58, 101, 95, 116, 121, 112, 101, 67, 111, 117, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator = allocate([ 115, 116, 97, 116, 105, 99, 32, 98, 50, 67, 111, 110, 116, 97, 99, 116, 32, 42, 98, 50, 67, 111, 110, 116, 97, 99, 116, 58, 58, 67, 114, 101, 97, 116, 101, 40, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 44, 32, 105, 110, 116, 51, 50, 44, 32, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 44, 32, 105, 110, 116, 51, 50, 44, 32, 98, 50, 66, 108, 111, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN9b2Contact7DestroyEPS_P16b2BlockAllocator = allocate([ 115, 116, 97, 116, 105, 99, 32, 118, 111, 105, 100, 32, 98, 50, 67, 111, 110, 116, 97, 99, 116, 58, 58, 68, 101, 115, 116, 114, 111, 121, 40, 98, 50, 67, 111, 110, 116, 97, 99, 116, 32, 42, 44, 32, 98, 50, 66, 108, 111, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3220 = allocate([ 115, 95, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100, 32, 61, 61, 32, 116, 114, 117, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4221 = allocate([ 48, 32, 60, 61, 32, 116, 121, 112, 101, 65, 32, 38, 38, 32, 116, 121, 112, 101, 66, 32, 60, 32, 98, 50, 83, 104, 97, 112, 101, 58, 58, 101, 95, 116, 121, 112, 101, 67, 111, 117, 110, 116, 0 ], "i8", ALLOC_STATIC);

__ZTV9b2Contact = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 140, 0, 0, 0, 142, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str230 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 67, 111, 110, 116, 97, 99, 116, 115, 47, 98, 50, 67, 111, 110, 116, 97, 99, 116, 83, 111, 108, 118, 101, 114, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolverC2EP18b2ContactSolverDef = allocate([ 98, 50, 67, 111, 110, 116, 97, 99, 116, 83, 111, 108, 118, 101, 114, 58, 58, 98, 50, 67, 111, 110, 116, 97, 99, 116, 83, 111, 108, 118, 101, 114, 40, 98, 50, 67, 111, 110, 116, 97, 99, 116, 83, 111, 108, 118, 101, 114, 68, 101, 102, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1231 = allocate([ 112, 111, 105, 110, 116, 67, 111, 117, 110, 116, 32, 62, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolver29InitializeVelocityConstraintsEv = allocate([ 118, 111, 105, 100, 32, 98, 50, 67, 111, 110, 116, 97, 99, 116, 83, 111, 108, 118, 101, 114, 58, 58, 73, 110, 105, 116, 105, 97, 108, 105, 122, 101, 86, 101, 108, 111, 99, 105, 116, 121, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 115, 40, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2232 = allocate([ 109, 97, 110, 105, 102, 111, 108, 100, 45, 62, 112, 111, 105, 110, 116, 67, 111, 117, 110, 116, 32, 62, 32, 48, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN15b2ContactSolver24SolveVelocityConstraintsEv = allocate([ 118, 111, 105, 100, 32, 98, 50, 67, 111, 110, 116, 97, 99, 116, 83, 111, 108, 118, 101, 114, 58, 58, 83, 111, 108, 118, 101, 86, 101, 108, 111, 99, 105, 116, 121, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 115, 40, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3233 = allocate([ 112, 111, 105, 110, 116, 67, 111, 117, 110, 116, 32, 61, 61, 32, 49, 32, 124, 124, 32, 112, 111, 105, 110, 116, 67, 111, 117, 110, 116, 32, 61, 61, 32, 50, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4234 = allocate([ 97, 46, 120, 32, 62, 61, 32, 48, 46, 48, 102, 32, 38, 38, 32, 97, 46, 121, 32, 62, 61, 32, 48, 46, 48, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i = allocate([ 118, 111, 105, 100, 32, 98, 50, 80, 111, 115, 105, 116, 105, 111, 110, 83, 111, 108, 118, 101, 114, 77, 97, 110, 105, 102, 111, 108, 100, 58, 58, 73, 110, 105, 116, 105, 97, 108, 105, 122, 101, 40, 98, 50, 67, 111, 110, 116, 97, 99, 116, 80, 111, 115, 105, 116, 105, 111, 110, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 84, 114, 97, 110, 115, 102, 111, 114, 109, 32, 38, 44, 32, 105, 110, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str5235 = allocate([ 112, 99, 45, 62, 112, 111, 105, 110, 116, 67, 111, 117, 110, 116, 32, 62, 32, 48, 0 ], "i8", ALLOC_STATIC);

__ZTV22b2EdgeAndCircleContact = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0, 146, 0, 0, 0, 148, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str252 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 67, 111, 110, 116, 97, 99, 116, 115, 47, 98, 50, 69, 100, 103, 101, 65, 110, 100, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_ = allocate([ 98, 50, 69, 100, 103, 101, 65, 110, 100, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 58, 58, 98, 50, 69, 100, 103, 101, 65, 110, 100, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 40, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 44, 32, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS22b2EdgeAndCircleContact = allocate([ 50, 50, 98, 50, 69, 100, 103, 101, 65, 110, 100, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI22b2EdgeAndCircleContact = allocate(12, "*", ALLOC_STATIC);

__ZTV23b2EdgeAndPolygonContact = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 152, 0, 0, 0, 154, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str259 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 67, 111, 110, 116, 97, 99, 116, 115, 47, 98, 50, 69, 100, 103, 101, 65, 110, 100, 80, 111, 108, 121, 103, 111, 110, 67, 111, 110, 116, 97, 99, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_ = allocate([ 98, 50, 69, 100, 103, 101, 65, 110, 100, 80, 111, 108, 121, 103, 111, 110, 67, 111, 110, 116, 97, 99, 116, 58, 58, 98, 50, 69, 100, 103, 101, 65, 110, 100, 80, 111, 108, 121, 103, 111, 110, 67, 111, 110, 116, 97, 99, 116, 40, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 44, 32, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1260 = allocate([ 109, 95, 102, 105, 120, 116, 117, 114, 101, 65, 45, 62, 71, 101, 116, 84, 121, 112, 101, 40, 41, 32, 61, 61, 32, 98, 50, 83, 104, 97, 112, 101, 58, 58, 101, 95, 101, 100, 103, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS23b2EdgeAndPolygonContact = allocate([ 50, 51, 98, 50, 69, 100, 103, 101, 65, 110, 100, 80, 111, 108, 121, 103, 111, 110, 67, 111, 110, 116, 97, 99, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI23b2EdgeAndPolygonContact = allocate(12, "*", ALLOC_STATIC);

__ZTV25b2PolygonAndCircleContact = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 158, 0, 0, 0, 160, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str266 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 67, 111, 110, 116, 97, 99, 116, 115, 47, 98, 50, 80, 111, 108, 121, 103, 111, 110, 65, 110, 100, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_ = allocate([ 98, 50, 80, 111, 108, 121, 103, 111, 110, 65, 110, 100, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 58, 58, 98, 50, 80, 111, 108, 121, 103, 111, 110, 65, 110, 100, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 40, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 44, 32, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2268 = allocate([ 109, 95, 102, 105, 120, 116, 117, 114, 101, 66, 45, 62, 71, 101, 116, 84, 121, 112, 101, 40, 41, 32, 61, 61, 32, 98, 50, 83, 104, 97, 112, 101, 58, 58, 101, 95, 99, 105, 114, 99, 108, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS25b2PolygonAndCircleContact = allocate([ 50, 53, 98, 50, 80, 111, 108, 121, 103, 111, 110, 65, 110, 100, 67, 105, 114, 99, 108, 101, 67, 111, 110, 116, 97, 99, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI25b2PolygonAndCircleContact = allocate(12, "*", ALLOC_STATIC);

__ZTV16b2PolygonContact = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 164, 0, 0, 0, 166, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str273 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 67, 111, 110, 116, 97, 99, 116, 115, 47, 98, 50, 80, 111, 108, 121, 103, 111, 110, 67, 111, 110, 116, 97, 99, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PolygonContactC2EP9b2FixtureS1_ = allocate([ 98, 50, 80, 111, 108, 121, 103, 111, 110, 67, 111, 110, 116, 97, 99, 116, 58, 58, 98, 50, 80, 111, 108, 121, 103, 111, 110, 67, 111, 110, 116, 97, 99, 116, 40, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 44, 32, 98, 50, 70, 105, 120, 116, 117, 114, 101, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1274 = allocate([ 109, 95, 102, 105, 120, 116, 117, 114, 101, 65, 45, 62, 71, 101, 116, 84, 121, 112, 101, 40, 41, 32, 61, 61, 32, 98, 50, 83, 104, 97, 112, 101, 58, 58, 101, 95, 112, 111, 108, 121, 103, 111, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2275 = allocate([ 109, 95, 102, 105, 120, 116, 117, 114, 101, 66, 45, 62, 71, 101, 116, 84, 121, 112, 101, 40, 41, 32, 61, 61, 32, 98, 50, 83, 104, 97, 112, 101, 58, 58, 101, 95, 112, 111, 108, 121, 103, 111, 110, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS16b2PolygonContact = allocate([ 49, 54, 98, 50, 80, 111, 108, 121, 103, 111, 110, 67, 111, 110, 116, 97, 99, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI16b2PolygonContact = allocate(12, "*", ALLOC_STATIC);

__ZTV15b2DistanceJoint = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 170, 0, 0, 0, 172, 0, 0, 0, 174, 0, 0, 0, 176, 0, 0, 0, 178, 0, 0, 0, 180, 0, 0, 0, 182, 0, 0, 0, 184, 0, 0, 0, 186, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str281 = allocate([ 32, 32, 98, 50, 68, 105, 115, 116, 97, 110, 99, 101, 74, 111, 105, 110, 116, 68, 101, 102, 32, 106, 100, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str6287 = allocate([ 32, 32, 106, 100, 46, 108, 101, 110, 103, 116, 104, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS15b2DistanceJoint = allocate([ 49, 53, 98, 50, 68, 105, 115, 116, 97, 110, 99, 101, 74, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS7b2Joint = allocate([ 55, 98, 50, 74, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI7b2Joint = allocate(8, "*", ALLOC_STATIC);

__ZTI15b2DistanceJoint = allocate(12, "*", ALLOC_STATIC);

__ZTV15b2FrictionJoint = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 190, 0, 0, 0, 192, 0, 0, 0, 194, 0, 0, 0, 196, 0, 0, 0, 198, 0, 0, 0, 200, 0, 0, 0, 202, 0, 0, 0, 204, 0, 0, 0, 206, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str291 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 74, 111, 105, 110, 116, 115, 47, 98, 50, 70, 114, 105, 99, 116, 105, 111, 110, 74, 111, 105, 110, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN15b2FrictionJoint11SetMaxForceEf = allocate([ 118, 111, 105, 100, 32, 98, 50, 70, 114, 105, 99, 116, 105, 111, 110, 74, 111, 105, 110, 116, 58, 58, 83, 101, 116, 77, 97, 120, 70, 111, 114, 99, 101, 40, 102, 108, 111, 97, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1292 = allocate([ 98, 50, 73, 115, 86, 97, 108, 105, 100, 40, 102, 111, 114, 99, 101, 41, 32, 38, 38, 32, 102, 111, 114, 99, 101, 32, 62, 61, 32, 48, 46, 48, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN15b2FrictionJoint12SetMaxTorqueEf = allocate([ 118, 111, 105, 100, 32, 98, 50, 70, 114, 105, 99, 116, 105, 111, 110, 74, 111, 105, 110, 116, 58, 58, 83, 101, 116, 77, 97, 120, 84, 111, 114, 113, 117, 101, 40, 102, 108, 111, 97, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2293 = allocate([ 98, 50, 73, 115, 86, 97, 108, 105, 100, 40, 116, 111, 114, 113, 117, 101, 41, 32, 38, 38, 32, 116, 111, 114, 113, 117, 101, 32, 62, 61, 32, 48, 46, 48, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3294 = allocate([ 32, 32, 98, 50, 70, 114, 105, 99, 116, 105, 111, 110, 74, 111, 105, 110, 116, 68, 101, 102, 32, 106, 100, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str9300 = allocate([ 32, 32, 106, 100, 46, 109, 97, 120, 70, 111, 114, 99, 101, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str10301 = allocate([ 32, 32, 106, 100, 46, 109, 97, 120, 84, 111, 114, 113, 117, 101, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS15b2FrictionJoint = allocate([ 49, 53, 98, 50, 70, 114, 105, 99, 116, 105, 111, 110, 74, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI15b2FrictionJoint = allocate(12, "*", ALLOC_STATIC);

__ZTV11b2GearJoint = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 210, 0, 0, 0, 212, 0, 0, 0, 214, 0, 0, 0, 216, 0, 0, 0, 218, 0, 0, 0, 220, 0, 0, 0, 222, 0, 0, 0, 224, 0, 0, 0, 226, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str303 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 74, 111, 105, 110, 116, 115, 47, 98, 50, 71, 101, 97, 114, 74, 111, 105, 110, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN11b2GearJointC2EPK14b2GearJointDef = allocate([ 98, 50, 71, 101, 97, 114, 74, 111, 105, 110, 116, 58, 58, 98, 50, 71, 101, 97, 114, 74, 111, 105, 110, 116, 40, 99, 111, 110, 115, 116, 32, 98, 50, 71, 101, 97, 114, 74, 111, 105, 110, 116, 68, 101, 102, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1304 = allocate([ 109, 95, 116, 121, 112, 101, 65, 32, 61, 61, 32, 101, 95, 114, 101, 118, 111, 108, 117, 116, 101, 74, 111, 105, 110, 116, 32, 124, 124, 32, 109, 95, 116, 121, 112, 101, 65, 32, 61, 61, 32, 101, 95, 112, 114, 105, 115, 109, 97, 116, 105, 99, 74, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2305 = allocate([ 109, 95, 116, 121, 112, 101, 66, 32, 61, 61, 32, 101, 95, 114, 101, 118, 111, 108, 117, 116, 101, 74, 111, 105, 110, 116, 32, 124, 124, 32, 109, 95, 116, 121, 112, 101, 66, 32, 61, 61, 32, 101, 95, 112, 114, 105, 115, 109, 97, 116, 105, 99, 74, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN11b2GearJoint8SetRatioEf = allocate([ 118, 111, 105, 100, 32, 98, 50, 71, 101, 97, 114, 74, 111, 105, 110, 116, 58, 58, 83, 101, 116, 82, 97, 116, 105, 111, 40, 102, 108, 111, 97, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3306 = allocate([ 98, 50, 73, 115, 86, 97, 108, 105, 100, 40, 114, 97, 116, 105, 111, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4307 = allocate([ 32, 32, 98, 50, 71, 101, 97, 114, 74, 111, 105, 110, 116, 68, 101, 102, 32, 106, 100, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str8311 = allocate([ 32, 32, 106, 100, 46, 106, 111, 105, 110, 116, 49, 32, 61, 32, 106, 111, 105, 110, 116, 115, 91, 37, 100, 93, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str9312 = allocate([ 32, 32, 106, 100, 46, 106, 111, 105, 110, 116, 50, 32, 61, 32, 106, 111, 105, 110, 116, 115, 91, 37, 100, 93, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS11b2GearJoint = allocate([ 49, 49, 98, 50, 71, 101, 97, 114, 74, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI11b2GearJoint = allocate(12, "*", ALLOC_STATIC);

STRING_TABLE.__str315 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 74, 111, 105, 110, 116, 115, 47, 98, 50, 74, 111, 105, 110, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator = allocate([ 115, 116, 97, 116, 105, 99, 32, 98, 50, 74, 111, 105, 110, 116, 32, 42, 98, 50, 74, 111, 105, 110, 116, 58, 58, 67, 114, 101, 97, 116, 101, 40, 99, 111, 110, 115, 116, 32, 98, 50, 74, 111, 105, 110, 116, 68, 101, 102, 32, 42, 44, 32, 98, 50, 66, 108, 111, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1316 = allocate([ 102, 97, 108, 115, 101, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN7b2Joint7DestroyEPS_P16b2BlockAllocator = allocate([ 115, 116, 97, 116, 105, 99, 32, 118, 111, 105, 100, 32, 98, 50, 74, 111, 105, 110, 116, 58, 58, 68, 101, 115, 116, 114, 111, 121, 40, 98, 50, 74, 111, 105, 110, 116, 32, 42, 44, 32, 98, 50, 66, 108, 111, 99, 107, 65, 108, 108, 111, 99, 97, 116, 111, 114, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

__ZTV7b2Joint = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 102, 0, 0, 0, 102, 0, 0, 0, 102, 0, 0, 0, 228, 0, 0, 0, 230, 0, 0, 0, 232, 0, 0, 0, 102, 0, 0, 0, 102, 0, 0, 0, 102, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN7b2JointC2EPK10b2JointDef = allocate([ 98, 50, 74, 111, 105, 110, 116, 58, 58, 98, 50, 74, 111, 105, 110, 116, 40, 99, 111, 110, 115, 116, 32, 98, 50, 74, 111, 105, 110, 116, 68, 101, 102, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2317 = allocate([ 100, 101, 102, 45, 62, 98, 111, 100, 121, 65, 32, 33, 61, 32, 100, 101, 102, 45, 62, 98, 111, 100, 121, 66, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3318 = allocate([ 47, 47, 32, 68, 117, 109, 112, 32, 105, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 102, 111, 114, 32, 116, 104, 105, 115, 32, 106, 111, 105, 110, 116, 32, 116, 121, 112, 101, 46, 10, 0 ], "i8", ALLOC_STATIC);

__ZTV12b2MouseJoint = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 236, 0, 0, 0, 238, 0, 0, 0, 240, 0, 0, 0, 242, 0, 0, 0, 244, 0, 0, 0, 246, 0, 0, 0, 248, 0, 0, 0, 250, 0, 0, 0, 252, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str325 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 74, 111, 105, 110, 116, 115, 47, 98, 50, 77, 111, 117, 115, 101, 74, 111, 105, 110, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJointC2EPK15b2MouseJointDef = allocate([ 98, 50, 77, 111, 117, 115, 101, 74, 111, 105, 110, 116, 58, 58, 98, 50, 77, 111, 117, 115, 101, 74, 111, 105, 110, 116, 40, 99, 111, 110, 115, 116, 32, 98, 50, 77, 111, 117, 115, 101, 74, 111, 105, 110, 116, 68, 101, 102, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1326 = allocate([ 100, 101, 102, 45, 62, 116, 97, 114, 103, 101, 116, 46, 73, 115, 86, 97, 108, 105, 100, 40, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2327 = allocate([ 98, 50, 73, 115, 86, 97, 108, 105, 100, 40, 100, 101, 102, 45, 62, 109, 97, 120, 70, 111, 114, 99, 101, 41, 32, 38, 38, 32, 100, 101, 102, 45, 62, 109, 97, 120, 70, 111, 114, 99, 101, 32, 62, 61, 32, 48, 46, 48, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3328 = allocate([ 98, 50, 73, 115, 86, 97, 108, 105, 100, 40, 100, 101, 102, 45, 62, 102, 114, 101, 113, 117, 101, 110, 99, 121, 72, 122, 41, 32, 38, 38, 32, 100, 101, 102, 45, 62, 102, 114, 101, 113, 117, 101, 110, 99, 121, 72, 122, 32, 62, 61, 32, 48, 46, 48, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4329 = allocate([ 98, 50, 73, 115, 86, 97, 108, 105, 100, 40, 100, 101, 102, 45, 62, 100, 97, 109, 112, 105, 110, 103, 82, 97, 116, 105, 111, 41, 32, 38, 38, 32, 100, 101, 102, 45, 62, 100, 97, 109, 112, 105, 110, 103, 82, 97, 116, 105, 111, 32, 62, 61, 32, 48, 46, 48, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData = allocate([ 118, 105, 114, 116, 117, 97, 108, 32, 118, 111, 105, 100, 32, 98, 50, 77, 111, 117, 115, 101, 74, 111, 105, 110, 116, 58, 58, 73, 110, 105, 116, 86, 101, 108, 111, 99, 105, 116, 121, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 115, 40, 99, 111, 110, 115, 116, 32, 98, 50, 83, 111, 108, 118, 101, 114, 68, 97, 116, 97, 32, 38, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str5330 = allocate([ 100, 32, 43, 32, 104, 32, 42, 32, 107, 32, 62, 32, 49, 46, 49, 57, 50, 48, 57, 50, 57, 48, 69, 45, 48, 55, 70, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS12b2MouseJoint = allocate([ 49, 50, 98, 50, 77, 111, 117, 115, 101, 74, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI12b2MouseJoint = allocate(12, "*", ALLOC_STATIC);

STRING_TABLE.__str6331 = allocate([ 77, 111, 117, 115, 101, 32, 106, 111, 105, 110, 116, 32, 100, 117, 109, 112, 105, 110, 103, 32, 105, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 46, 10, 0 ], "i8", ALLOC_STATIC);

__ZTV16b2PrismaticJoint = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 256, 0, 0, 0, 258, 0, 0, 0, 260, 0, 0, 0, 262, 0, 0, 0, 264, 0, 0, 0, 266, 0, 0, 0, 268, 0, 0, 0, 270, 0, 0, 0, 272, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str334 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 74, 111, 105, 110, 116, 115, 47, 98, 50, 80, 114, 105, 115, 109, 97, 116, 105, 99, 74, 111, 105, 110, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PrismaticJoint9SetLimitsEff = allocate([ 118, 111, 105, 100, 32, 98, 50, 80, 114, 105, 115, 109, 97, 116, 105, 99, 74, 111, 105, 110, 116, 58, 58, 83, 101, 116, 76, 105, 109, 105, 116, 115, 40, 102, 108, 111, 97, 116, 51, 50, 44, 32, 102, 108, 111, 97, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2336 = allocate([ 32, 32, 98, 50, 80, 114, 105, 115, 109, 97, 116, 105, 99, 74, 111, 105, 110, 116, 68, 101, 102, 32, 106, 100, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11345 = allocate([ 32, 32, 106, 100, 46, 108, 111, 119, 101, 114, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str12346 = allocate([ 32, 32, 106, 100, 46, 117, 112, 112, 101, 114, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str15349 = allocate([ 32, 32, 106, 100, 46, 109, 97, 120, 77, 111, 116, 111, 114, 70, 111, 114, 99, 101, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS16b2PrismaticJoint = allocate([ 49, 54, 98, 50, 80, 114, 105, 115, 109, 97, 116, 105, 99, 74, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI16b2PrismaticJoint = allocate(12, "*", ALLOC_STATIC);

STRING_TABLE.__str353 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 74, 111, 105, 110, 116, 115, 47, 98, 50, 80, 117, 108, 108, 101, 121, 74, 111, 105, 110, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_f = allocate([ 118, 111, 105, 100, 32, 98, 50, 80, 117, 108, 108, 101, 121, 74, 111, 105, 110, 116, 68, 101, 102, 58, 58, 73, 110, 105, 116, 105, 97, 108, 105, 122, 101, 40, 98, 50, 66, 111, 100, 121, 32, 42, 44, 32, 98, 50, 66, 111, 100, 121, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 86, 101, 99, 50, 32, 38, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 86, 101, 99, 50, 32, 38, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 86, 101, 99, 50, 32, 38, 44, 32, 99, 111, 110, 115, 116, 32, 98, 50, 86, 101, 99, 50, 32, 38, 44, 32, 102, 108, 111, 97, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1354 = allocate([ 114, 97, 116, 105, 111, 32, 62, 32, 49, 46, 49, 57, 50, 48, 57, 50, 57, 48, 69, 45, 48, 55, 70, 0 ], "i8", ALLOC_STATIC);

__ZTV13b2PulleyJoint = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 276, 0, 0, 0, 278, 0, 0, 0, 280, 0, 0, 0, 282, 0, 0, 0, 284, 0, 0, 0, 286, 0, 0, 0, 288, 0, 0, 0, 290, 0, 0, 0, 292, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN13b2PulleyJointC2EPK16b2PulleyJointDef = allocate([ 98, 50, 80, 117, 108, 108, 101, 121, 74, 111, 105, 110, 116, 58, 58, 98, 50, 80, 117, 108, 108, 101, 121, 74, 111, 105, 110, 116, 40, 99, 111, 110, 115, 116, 32, 98, 50, 80, 117, 108, 108, 101, 121, 74, 111, 105, 110, 116, 68, 101, 102, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2355 = allocate([ 100, 101, 102, 45, 62, 114, 97, 116, 105, 111, 32, 33, 61, 32, 48, 46, 48, 102, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3356 = allocate([ 32, 32, 98, 50, 80, 117, 108, 108, 101, 121, 74, 111, 105, 110, 116, 68, 101, 102, 32, 106, 100, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str7360 = allocate([ 32, 32, 106, 100, 46, 103, 114, 111, 117, 110, 100, 65, 110, 99, 104, 111, 114, 65, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str8361 = allocate([ 32, 32, 106, 100, 46, 103, 114, 111, 117, 110, 100, 65, 110, 99, 104, 111, 114, 66, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11364 = allocate([ 32, 32, 106, 100, 46, 108, 101, 110, 103, 116, 104, 65, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str12365 = allocate([ 32, 32, 106, 100, 46, 108, 101, 110, 103, 116, 104, 66, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str13366 = allocate([ 32, 32, 106, 100, 46, 114, 97, 116, 105, 111, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS13b2PulleyJoint = allocate([ 49, 51, 98, 50, 80, 117, 108, 108, 101, 121, 74, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI13b2PulleyJoint = allocate(12, "*", ALLOC_STATIC);

__ZTV15b2RevoluteJoint = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 294, 0, 0, 0, 296, 0, 0, 0, 298, 0, 0, 0, 300, 0, 0, 0, 302, 0, 0, 0, 304, 0, 0, 0, 306, 0, 0, 0, 308, 0, 0, 0, 310, 0, 0, 0, 312, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str374 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 68, 121, 110, 97, 109, 105, 99, 115, 47, 74, 111, 105, 110, 116, 115, 47, 98, 50, 82, 101, 118, 111, 108, 117, 116, 101, 74, 111, 105, 110, 116, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN15b2RevoluteJoint9SetLimitsEff = allocate([ 118, 111, 105, 100, 32, 98, 50, 82, 101, 118, 111, 108, 117, 116, 101, 74, 111, 105, 110, 116, 58, 58, 83, 101, 116, 76, 105, 109, 105, 116, 115, 40, 102, 108, 111, 97, 116, 51, 50, 44, 32, 102, 108, 111, 97, 116, 51, 50, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1375 = allocate([ 108, 111, 119, 101, 114, 32, 60, 61, 32, 117, 112, 112, 101, 114, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2376 = allocate([ 32, 32, 98, 50, 82, 101, 118, 111, 108, 117, 116, 101, 74, 111, 105, 110, 116, 68, 101, 102, 32, 106, 100, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str9383 = allocate([ 32, 32, 106, 100, 46, 101, 110, 97, 98, 108, 101, 76, 105, 109, 105, 116, 32, 61, 32, 98, 111, 111, 108, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str10384 = allocate([ 32, 32, 106, 100, 46, 108, 111, 119, 101, 114, 65, 110, 103, 108, 101, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11385 = allocate([ 32, 32, 106, 100, 46, 117, 112, 112, 101, 114, 65, 110, 103, 108, 101, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS15b2RevoluteJoint = allocate([ 49, 53, 98, 50, 82, 101, 118, 111, 108, 117, 116, 101, 74, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI15b2RevoluteJoint = allocate(12, "*", ALLOC_STATIC);

__ZTV11b2RopeJoint = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 314, 0, 0, 0, 316, 0, 0, 0, 318, 0, 0, 0, 320, 0, 0, 0, 322, 0, 0, 0, 324, 0, 0, 0, 326, 0, 0, 0, 328, 0, 0, 0, 330, 0, 0, 0, 332, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str392 = allocate([ 32, 32, 98, 50, 82, 111, 112, 101, 74, 111, 105, 110, 116, 68, 101, 102, 32, 106, 100, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str6398 = allocate([ 32, 32, 106, 100, 46, 109, 97, 120, 76, 101, 110, 103, 116, 104, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS11b2RopeJoint = allocate([ 49, 49, 98, 50, 82, 111, 112, 101, 74, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI11b2RopeJoint = allocate(12, "*", ALLOC_STATIC);

__ZTV11b2WeldJoint = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 334, 0, 0, 0, 336, 0, 0, 0, 338, 0, 0, 0, 340, 0, 0, 0, 342, 0, 0, 0, 344, 0, 0, 0, 346, 0, 0, 0, 348, 0, 0, 0, 350, 0, 0, 0, 352, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str402 = allocate([ 32, 32, 98, 50, 87, 101, 108, 100, 74, 111, 105, 110, 116, 68, 101, 102, 32, 106, 100, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str6408 = allocate([ 32, 32, 106, 100, 46, 114, 101, 102, 101, 114, 101, 110, 99, 101, 65, 110, 103, 108, 101, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS11b2WeldJoint = allocate([ 49, 49, 98, 50, 87, 101, 108, 100, 74, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI11b2WeldJoint = allocate(12, "*", ALLOC_STATIC);

__ZTV12b2WheelJoint = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 354, 0, 0, 0, 356, 0, 0, 0, 358, 0, 0, 0, 360, 0, 0, 0, 362, 0, 0, 0, 364, 0, 0, 0, 366, 0, 0, 0, 368, 0, 0, 0, 370, 0, 0, 0, 372, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str414 = allocate([ 32, 32, 98, 50, 87, 104, 101, 101, 108, 74, 111, 105, 110, 116, 68, 101, 102, 32, 106, 100, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1415 = allocate([ 32, 32, 106, 100, 46, 98, 111, 100, 121, 65, 32, 61, 32, 98, 111, 100, 105, 101, 115, 91, 37, 100, 93, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str2416 = allocate([ 32, 32, 106, 100, 46, 98, 111, 100, 121, 66, 32, 61, 32, 98, 111, 100, 105, 101, 115, 91, 37, 100, 93, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str3417 = allocate([ 32, 32, 106, 100, 46, 99, 111, 108, 108, 105, 100, 101, 67, 111, 110, 110, 101, 99, 116, 101, 100, 32, 61, 32, 98, 111, 111, 108, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str4418 = allocate([ 32, 32, 106, 100, 46, 108, 111, 99, 97, 108, 65, 110, 99, 104, 111, 114, 65, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str5419 = allocate([ 32, 32, 106, 100, 46, 108, 111, 99, 97, 108, 65, 110, 99, 104, 111, 114, 66, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str6420 = allocate([ 32, 32, 106, 100, 46, 108, 111, 99, 97, 108, 65, 120, 105, 115, 65, 46, 83, 101, 116, 40, 37, 46, 49, 53, 108, 101, 102, 44, 32, 37, 46, 49, 53, 108, 101, 102, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str7421 = allocate([ 32, 32, 106, 100, 46, 101, 110, 97, 98, 108, 101, 77, 111, 116, 111, 114, 32, 61, 32, 98, 111, 111, 108, 40, 37, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str8422 = allocate([ 32, 32, 106, 100, 46, 109, 111, 116, 111, 114, 83, 112, 101, 101, 100, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str9423 = allocate([ 32, 32, 106, 100, 46, 109, 97, 120, 77, 111, 116, 111, 114, 84, 111, 114, 113, 117, 101, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str10424 = allocate([ 32, 32, 106, 100, 46, 102, 114, 101, 113, 117, 101, 110, 99, 121, 72, 122, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str11425 = allocate([ 32, 32, 106, 100, 46, 100, 97, 109, 112, 105, 110, 103, 82, 97, 116, 105, 111, 32, 61, 32, 37, 46, 49, 53, 108, 101, 102, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str12426 = allocate([ 32, 32, 106, 111, 105, 110, 116, 115, 91, 37, 100, 93, 32, 61, 32, 109, 95, 119, 111, 114, 108, 100, 45, 62, 67, 114, 101, 97, 116, 101, 74, 111, 105, 110, 116, 40, 38, 106, 100, 41, 59, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTS12b2WheelJoint = allocate([ 49, 50, 98, 50, 87, 104, 101, 101, 108, 74, 111, 105, 110, 116, 0 ], "i8", ALLOC_STATIC);

__ZTI12b2WheelJoint = allocate(12, "*", ALLOC_STATIC);

STRING_TABLE.__str429 = allocate([ 66, 111, 120, 50, 68, 95, 118, 50, 46, 50, 46, 49, 47, 66, 111, 120, 50, 68, 47, 82, 111, 112, 101, 47, 98, 50, 82, 111, 112, 101, 46, 99, 112, 112, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.___PRETTY_FUNCTION____ZN6b2Rope10InitializeEPK9b2RopeDef = allocate([ 118, 111, 105, 100, 32, 98, 50, 82, 111, 112, 101, 58, 58, 73, 110, 105, 116, 105, 97, 108, 105, 122, 101, 40, 99, 111, 110, 115, 116, 32, 98, 50, 82, 111, 112, 101, 68, 101, 102, 32, 42, 41, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str1430 = allocate([ 100, 101, 102, 45, 62, 99, 111, 117, 110, 116, 32, 62, 61, 32, 51, 0 ], "i8", ALLOC_STATIC);

_ret = allocate(8, "float", ALLOC_STATIC);

__ZGVZ38emscripten_bind_b2World__GetGravity_p0E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret1 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ38emscripten_bind_b2Joint__GetAnchorA_p0E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret2 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ38emscripten_bind_b2Joint__GetAnchorB_p0E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret3 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ44emscripten_bind_b2Joint__GetReactionForce_p1E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret4 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ40emscripten_bind_b2Body__GetLocalPoint_p1E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret5 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ44emscripten_bind_b2Body__GetLinearVelocity_p0E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret6 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret7 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ41emscripten_bind_b2Body__GetWorldVector_p1E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret8 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ58emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret9 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ40emscripten_bind_b2Body__GetWorldPoint_p1E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret10 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ41emscripten_bind_b2Body__GetLocalVector_p1E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret11 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ31emscripten_bind_b2Vec2__Skew_p0E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret12 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ33emscripten_bind_b2Vec2__op_sub_p0E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret13 = allocate(12, "float", ALLOC_STATIC);

__ZGVZ33emscripten_bind_b2Vec3__op_sub_p0E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret14 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ34emscripten_bind_b2Rot__GetYAxis_p0E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_ret15 = allocate(8, "float", ALLOC_STATIC);

__ZGVZ34emscripten_bind_b2Rot__GetXAxis_p0E3ret = allocate(1, [ "i64", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_llvm_used = allocate([ 374, 0, 0, 0, 376, 0, 0, 0, 378, 0, 0, 0, 380, 0, 0, 0, 382, 0, 0, 0, 384, 0, 0, 0, 386, 0, 0, 0, 388, 0, 0, 0, 390, 0, 0, 0, 392, 0, 0, 0, 394, 0, 0, 0, 396, 0, 0, 0, 398, 0, 0, 0, 400, 0, 0, 0, 402, 0, 0, 0, 404, 0, 0, 0, 406, 0, 0, 0, 408, 0, 0, 0, 410, 0, 0, 0, 412, 0, 0, 0, 414, 0, 0, 0, 416, 0, 0, 0, 418, 0, 0, 0, 420, 0, 0, 0, 422, 0, 0, 0, 424, 0, 0, 0, 426, 0, 0, 0, 428, 0, 0, 0, 430, 0, 0, 0, 432, 0, 0, 0, 434, 0, 0, 0, 436, 0, 0, 0, 438, 0, 0, 0, 440, 0, 0, 0, 442, 0, 0, 0, 444, 0, 0, 0, 446, 0, 0, 0, 448, 0, 0, 0, 450, 0, 0, 0, 452, 0, 0, 0, 454, 0, 0, 0, 456, 0, 0, 0, 458, 0, 0, 0, 460, 0, 0, 0, 462, 0, 0, 0, 464, 0, 0, 0, 466, 0, 0, 0, 468, 0, 0, 0, 470, 0, 0, 0, 472, 0, 0, 0, 474, 0, 0, 0, 476, 0, 0, 0, 478, 0, 0, 0, 480, 0, 0, 0, 482, 0, 0, 0, 484, 0, 0, 0, 486, 0, 0, 0, 488, 0, 0, 0, 490, 0, 0, 0, 492, 0, 0, 0, 494, 0, 0, 0, 496, 0, 0, 0, 498, 0, 0, 0, 500, 0, 0, 0, 502, 0, 0, 0, 504, 0, 0, 0, 506, 0, 0, 0, 508, 0, 0, 0, 510, 0, 0, 0, 512, 0, 0, 0, 514, 0, 0, 0, 516, 0, 0, 0, 518, 0, 0, 0, 520, 0, 0, 0, 522, 0, 0, 0, 524, 0, 0, 0, 526, 0, 0, 0, 528, 0, 0, 0, 530, 0, 0, 0, 532, 0, 0, 0, 534, 0, 0, 0, 536, 0, 0, 0, 538, 0, 0, 0, 540, 0, 0, 0, 542, 0, 0, 0, 544, 0, 0, 0, 546, 0, 0, 0, 548, 0, 0, 0, 550, 0, 0, 0, 552, 0, 0, 0, 554, 0, 0, 0, 556, 0, 0, 0, 558, 0, 0, 0, 560, 0, 0, 0, 562, 0, 0, 0, 564, 0, 0, 0, 566, 0, 0, 0, 568, 0, 0, 0, 570, 0, 0, 0, 572, 0, 0, 0, 574, 0, 0, 0, 576, 0, 0, 0, 578, 0, 0, 0, 580, 0, 0, 0, 582, 0, 0, 0, 584, 0, 0, 0, 586, 0, 0, 0, 588, 0, 0, 0, 590, 0, 0, 0, 592, 0, 0, 0, 594, 0, 0, 0, 596, 0, 0, 0, 598, 0, 0, 0, 600, 0, 0, 0, 602, 0, 0, 0, 604, 0, 0, 0, 606, 0, 0, 0, 608, 0, 0, 0, 610, 0, 0, 0, 612, 0, 0, 0, 614, 0, 0, 0, 616, 0, 0, 0, 618, 0, 0, 0, 620, 0, 0, 0, 622, 0, 0, 0, 624, 0, 0, 0, 626, 0, 0, 0, 628, 0, 0, 0, 630, 0, 0, 0, 632, 0, 0, 0, 634, 0, 0, 0, 636, 0, 0, 0, 638, 0, 0, 0, 640, 0, 0, 0, 642, 0, 0, 0, 644, 0, 0, 0, 646, 0, 0, 0, 648, 0, 0, 0, 650, 0, 0, 0, 652, 0, 0, 0, 654, 0, 0, 0, 656, 0, 0, 0, 658, 0, 0, 0, 660, 0, 0, 0, 662, 0, 0, 0, 664, 0, 0, 0, 666, 0, 0, 0, 668, 0, 0, 0, 670, 0, 0, 0, 672, 0, 0, 0, 674, 0, 0, 0, 676, 0, 0, 0, 678, 0, 0, 0, 680, 0, 0, 0, 682, 0, 0, 0, 684, 0, 0, 0, 686, 0, 0, 0, 688, 0, 0, 0, 690, 0, 0, 0, 692, 0, 0, 0, 694, 0, 0, 0, 696, 0, 0, 0, 698, 0, 0, 0, 700, 0, 0, 0, 702, 0, 0, 0, 704, 0, 0, 0, 706, 0, 0, 0, 708, 0, 0, 0, 710, 0, 0, 0, 712, 0, 0, 0, 714, 0, 0, 0, 716, 0, 0, 0, 718, 0, 0, 0, 720, 0, 0, 0, 722, 0, 0, 0, 724, 0, 0, 0, 726, 0, 0, 0, 728, 0, 0, 0, 730, 0, 0, 0, 732, 0, 0, 0, 734, 0, 0, 0, 736, 0, 0, 0, 738, 0, 0, 0, 740, 0, 0, 0, 742, 0, 0, 0, 744, 0, 0, 0, 746, 0, 0, 0, 748, 0, 0, 0, 750, 0, 0, 0, 752, 0, 0, 0, 754, 0, 0, 0, 756, 0, 0, 0, 758, 0, 0, 0, 760, 0, 0, 0, 762, 0, 0, 0, 764, 0, 0, 0, 766, 0, 0, 0, 768, 0, 0, 0, 770, 0, 0, 0, 772, 0, 0, 0, 774, 0, 0, 0, 776, 0, 0, 0, 778, 0, 0, 0, 780, 0, 0, 0, 782, 0, 0, 0, 784, 0, 0, 0, 786, 0, 0, 0, 788, 0, 0, 0, 790, 0, 0, 0, 792, 0, 0, 0, 794, 0, 0, 0, 796, 0, 0, 0, 798, 0, 0, 0, 800, 0, 0, 0, 802, 0, 0, 0, 804, 0, 0, 0, 806, 0, 0, 0, 808, 0, 0, 0, 810, 0, 0, 0, 812, 0, 0, 0, 814, 0, 0, 0, 816, 0, 0, 0, 818, 0, 0, 0, 820, 0, 0, 0, 822, 0, 0, 0, 824, 0, 0, 0, 826, 0, 0, 0, 828, 0, 0, 0, 830, 0, 0, 0, 832, 0, 0, 0, 834, 0, 0, 0, 836, 0, 0, 0, 838, 0, 0, 0, 840, 0, 0, 0, 842, 0, 0, 0, 844, 0, 0, 0, 846, 0, 0, 0, 848, 0, 0, 0, 850, 0, 0, 0, 852, 0, 0, 0, 854, 0, 0, 0, 856, 0, 0, 0, 858, 0, 0, 0, 860, 0, 0, 0, 862, 0, 0, 0, 864, 0, 0, 0, 866, 0, 0, 0, 868, 0, 0, 0, 870, 0, 0, 0, 872, 0, 0, 0, 874, 0, 0, 0, 876, 0, 0, 0, 878, 0, 0, 0, 880, 0, 0, 0, 882, 0, 0, 0, 884, 0, 0, 0, 886, 0, 0, 0, 888, 0, 0, 0, 890, 0, 0, 0, 892, 0, 0, 0, 894, 0, 0, 0, 896, 0, 0, 0, 898, 0, 0, 0, 900, 0, 0, 0, 902, 0, 0, 0, 904, 0, 0, 0, 906, 0, 0, 0, 908, 0, 0, 0, 910, 0, 0, 0, 912, 0, 0, 0, 914, 0, 0, 0, 916, 0, 0, 0, 918, 0, 0, 0, 920, 0, 0, 0, 922, 0, 0, 0, 924, 0, 0, 0, 926, 0, 0, 0, 928, 0, 0, 0, 930, 0, 0, 0, 932, 0, 0, 0, 934, 0, 0, 0, 936, 0, 0, 0, 938, 0, 0, 0, 940, 0, 0, 0, 942, 0, 0, 0, 944, 0, 0, 0, 946, 0, 0, 0, 948, 0, 0, 0, 950, 0, 0, 0, 952, 0, 0, 0, 954, 0, 0, 0, 956, 0, 0, 0, 958, 0, 0, 0, 960, 0, 0, 0, 962, 0, 0, 0, 964, 0, 0, 0, 966, 0, 0, 0, 968, 0, 0, 0, 970, 0, 0, 0, 972, 0, 0, 0, 974, 0, 0, 0, 976, 0, 0, 0, 978, 0, 0, 0, 980, 0, 0, 0, 982, 0, 0, 0, 984, 0, 0, 0, 986, 0, 0, 0, 988, 0, 0, 0, 990, 0, 0, 0, 992, 0, 0, 0, 994, 0, 0, 0, 996, 0, 0, 0, 998, 0, 0, 0, 1e3, 0, 0, 0, 1002, 0, 0, 0, 1004, 0, 0, 0, 1006, 0, 0, 0, 1008, 0, 0, 0, 1010, 0, 0, 0, 1012, 0, 0, 0, 1014, 0, 0, 0, 1016, 0, 0, 0, 1018, 0, 0, 0, 1020, 0, 0, 0, 1022, 0, 0, 0, 1024, 0, 0, 0, 1026, 0, 0, 0, 1028, 0, 0, 0, 1030, 0, 0, 0, 1032, 0, 0, 0, 1034, 0, 0, 0, 1036, 0, 0, 0, 1038, 0, 0, 0, 1040, 0, 0, 0, 1042, 0, 0, 0, 1044, 0, 0, 0, 1046, 0, 0, 0, 1048, 0, 0, 0, 1050, 0, 0, 0, 1052, 0, 0, 0, 1054, 0, 0, 0, 1056, 0, 0, 0, 1058, 0, 0, 0, 1060, 0, 0, 0, 1062, 0, 0, 0, 1064, 0, 0, 0, 1066, 0, 0, 0, 1068, 0, 0, 0, 1070, 0, 0, 0, 1072, 0, 0, 0, 1074, 0, 0, 0, 1076, 0, 0, 0, 1078, 0, 0, 0, 1080, 0, 0, 0, 1082, 0, 0, 0, 1084, 0, 0, 0, 1086, 0, 0, 0, 1088, 0, 0, 0, 1090, 0, 0, 0, 1092, 0, 0, 0, 1094, 0, 0, 0, 1096, 0, 0, 0, 1098, 0, 0, 0, 1100, 0, 0, 0, 1102, 0, 0, 0, 1104, 0, 0, 0, 1106, 0, 0, 0, 1108, 0, 0, 0, 1110, 0, 0, 0, 1112, 0, 0, 0, 1114, 0, 0, 0, 1116, 0, 0, 0, 1118, 0, 0, 0, 1120, 0, 0, 0, 1122, 0, 0, 0, 1124, 0, 0, 0, 1126, 0, 0, 0, 1128, 0, 0, 0, 1130, 0, 0, 0, 1132, 0, 0, 0, 1134, 0, 0, 0, 1136, 0, 0, 0, 1138, 0, 0, 0, 1140, 0, 0, 0, 1142, 0, 0, 0, 1144, 0, 0, 0, 1146, 0, 0, 0, 1148, 0, 0, 0, 1150, 0, 0, 0, 1152, 0, 0, 0, 1154, 0, 0, 0, 1156, 0, 0, 0, 1158, 0, 0, 0, 1160, 0, 0, 0, 1162, 0, 0, 0, 1164, 0, 0, 0, 1166, 0, 0, 0, 1168, 0, 0, 0, 1170, 0, 0, 0, 1172, 0, 0, 0, 1174, 0, 0, 0, 1176, 0, 0, 0, 1178, 0, 0, 0, 1180, 0, 0, 0, 1182, 0, 0, 0, 1184, 0, 0, 0, 1186, 0, 0, 0, 1188, 0, 0, 0, 1190, 0, 0, 0, 1192, 0, 0, 0, 1194, 0, 0, 0, 1196, 0, 0, 0, 1198, 0, 0, 0, 1200, 0, 0, 0, 1202, 0, 0, 0, 1204, 0, 0, 0, 1206, 0, 0, 0, 1208, 0, 0, 0, 1210, 0, 0, 0, 1212, 0, 0, 0, 1214, 0, 0, 0, 1216, 0, 0, 0, 1218, 0, 0, 0, 1220, 0, 0, 0, 1222, 0, 0, 0, 1224, 0, 0, 0, 1226, 0, 0, 0, 1228, 0, 0, 0, 1230, 0, 0, 0, 1232, 0, 0, 0, 1234, 0, 0, 0, 1236, 0, 0, 0, 1238, 0, 0, 0, 1240, 0, 0, 0, 1242, 0, 0, 0, 1244, 0, 0, 0, 1246, 0, 0, 0, 1248, 0, 0, 0, 1250, 0, 0, 0, 1252, 0, 0, 0, 1254, 0, 0, 0, 1256, 0, 0, 0, 1258, 0, 0, 0, 1260, 0, 0, 0, 1262, 0, 0, 0, 1264, 0, 0, 0, 1266, 0, 0, 0, 1268, 0, 0, 0, 1270, 0, 0, 0, 1272, 0, 0, 0, 1274, 0, 0, 0, 1276, 0, 0, 0, 1278, 0, 0, 0, 1280, 0, 0, 0, 1282, 0, 0, 0, 1284, 0, 0, 0, 1286, 0, 0, 0, 1288, 0, 0, 0, 1290, 0, 0, 0, 1292, 0, 0, 0, 1294, 0, 0, 0, 1296, 0, 0, 0, 1298, 0, 0, 0, 1300, 0, 0, 0, 1302, 0, 0, 0, 1304, 0, 0, 0, 1306, 0, 0, 0, 1308, 0, 0, 0, 1310, 0, 0, 0, 1312, 0, 0, 0, 1314, 0, 0, 0, 1316, 0, 0, 0, 1318, 0, 0, 0, 1320, 0, 0, 0, 1322, 0, 0, 0, 1324, 0, 0, 0, 1326, 0, 0, 0, 1328, 0, 0, 0, 1330, 0, 0, 0, 1332, 0, 0, 0, 1334, 0, 0, 0, 1336, 0, 0, 0, 1338, 0, 0, 0, 1340, 0, 0, 0, 1342, 0, 0, 0, 1344, 0, 0, 0, 1346, 0, 0, 0, 1348, 0, 0, 0, 1350, 0, 0, 0, 1352, 0, 0, 0, 1354, 0, 0, 0, 1356, 0, 0, 0, 1358, 0, 0, 0, 1360, 0, 0, 0, 1362, 0, 0, 0, 1364, 0, 0, 0, 1366, 0, 0, 0, 1368, 0, 0, 0, 1370, 0, 0, 0, 1372, 0, 0, 0, 1374, 0, 0, 0, 1376, 0, 0, 0, 1378, 0, 0, 0, 1380, 0, 0, 0, 1382, 0, 0, 0, 1384, 0, 0, 0, 1386, 0, 0, 0, 1388, 0, 0, 0, 1390, 0, 0, 0, 1392, 0, 0, 0, 1394, 0, 0, 0, 1396, 0, 0, 0, 1398, 0, 0, 0, 1400, 0, 0, 0, 1402, 0, 0, 0, 1404, 0, 0, 0, 1406, 0, 0, 0, 1408, 0, 0, 0, 1410, 0, 0, 0, 1412, 0, 0, 0, 1414, 0, 0, 0, 1416, 0, 0, 0, 1418, 0, 0, 0, 1420, 0, 0, 0, 1422, 0, 0, 0, 1424, 0, 0, 0, 1426, 0, 0, 0, 1428, 0, 0, 0, 1430, 0, 0, 0, 1432, 0, 0, 0, 1434, 0, 0, 0, 1436, 0, 0, 0, 1438, 0, 0, 0, 1440, 0, 0, 0, 1442, 0, 0, 0, 1444, 0, 0, 0, 1446, 0, 0, 0, 1448, 0, 0, 0, 1450, 0, 0, 0, 1452, 0, 0, 0, 1454, 0, 0, 0, 1456, 0, 0, 0, 1458, 0, 0, 0, 1460, 0, 0, 0, 1462, 0, 0, 0, 1464, 0, 0, 0, 1466, 0, 0, 0, 1468, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

__gm_ = allocate(468, [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

_mparams = allocate(24, "i32", ALLOC_STATIC);

STRING_TABLE.__str34 = allocate([ 109, 97, 120, 32, 115, 121, 115, 116, 101, 109, 32, 98, 121, 116, 101, 115, 32, 61, 32, 37, 49, 48, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str135 = allocate([ 115, 121, 115, 116, 101, 109, 32, 98, 121, 116, 101, 115, 32, 32, 32, 32, 32, 61, 32, 37, 49, 48, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__str236 = allocate([ 105, 110, 32, 117, 115, 101, 32, 98, 121, 116, 101, 115, 32, 32, 32, 32, 32, 61, 32, 37, 49, 48, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

__ZSt7nothrow = allocate([ undef ], "i8", ALLOC_STATIC);

__ZL13__new_handler = allocate(1, "void ()*", ALLOC_STATIC);

__ZTVSt9bad_alloc = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 1470, 0, 0, 0, 1472, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str337 = allocate([ 115, 116, 100, 58, 58, 98, 97, 100, 95, 97, 108, 108, 111, 99, 0 ], "i8", ALLOC_STATIC);

__ZTVSt20bad_array_new_length = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 1474, 0, 0, 0, 1476, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

allocate(1, "void*", ALLOC_STATIC);

STRING_TABLE.__str1438 = allocate([ 98, 97, 100, 95, 97, 114, 114, 97, 121, 95, 110, 101, 119, 95, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

STRING_TABLE.__ZTSSt9bad_alloc = allocate([ 83, 116, 57, 98, 97, 100, 95, 97, 108, 108, 111, 99, 0 ], "i8", ALLOC_STATIC);

__ZTISt9bad_alloc = allocate(12, "*", ALLOC_STATIC);

STRING_TABLE.__ZTSSt20bad_array_new_length = allocate([ 83, 116, 50, 48, 98, 97, 100, 95, 97, 114, 114, 97, 121, 95, 110, 101, 119, 95, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

__ZTISt20bad_array_new_length = allocate(12, "*", ALLOC_STATIC);

HEAP32[__ZTV12b2ChainShape + 4 >> 2] = __ZTI12b2ChainShape;

__ZTVN10__cxxabiv120__si_class_type_infoE = allocate([ 2, 0, 0, 0, 0 ], [ "i8*", 0, 0, 0, 0 ], ALLOC_STATIC);

__ZTVN10__cxxabiv117__class_type_infoE = allocate([ 1, 0, 0, 0, 0 ], [ "i8*", 0, 0, 0, 0 ], ALLOC_STATIC);

HEAP32[__ZTI7b2Shape >> 2] = __ZTVN10__cxxabiv117__class_type_infoE + 8 | 0;

HEAP32[__ZTI7b2Shape + 4 >> 2] = STRING_TABLE.__ZTS7b2Shape | 0;

HEAP32[__ZTI12b2ChainShape >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI12b2ChainShape + 4 >> 2] = STRING_TABLE.__ZTS12b2ChainShape | 0;

HEAP32[__ZTI12b2ChainShape + 8 >> 2] = __ZTI7b2Shape;

HEAP32[__ZTV13b2CircleShape + 4 >> 2] = __ZTI13b2CircleShape;

HEAP32[__ZTI13b2CircleShape >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI13b2CircleShape + 4 >> 2] = STRING_TABLE.__ZTS13b2CircleShape | 0;

HEAP32[__ZTI13b2CircleShape + 8 >> 2] = __ZTI7b2Shape;

HEAP32[__ZTV11b2EdgeShape + 4 >> 2] = __ZTI11b2EdgeShape;

HEAP32[__ZTI11b2EdgeShape >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI11b2EdgeShape + 4 >> 2] = STRING_TABLE.__ZTS11b2EdgeShape | 0;

HEAP32[__ZTI11b2EdgeShape + 8 >> 2] = __ZTI7b2Shape;

HEAP32[__ZTV14b2PolygonShape + 4 >> 2] = __ZTI14b2PolygonShape;

HEAP32[__ZTI14b2PolygonShape >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI14b2PolygonShape + 4 >> 2] = STRING_TABLE.__ZTS14b2PolygonShape | 0;

HEAP32[__ZTI14b2PolygonShape + 8 >> 2] = __ZTI7b2Shape;

HEAP32[__ZTV6b2Draw + 4 >> 2] = __ZTI6b2Draw;

HEAP32[__ZTI6b2Draw >> 2] = __ZTVN10__cxxabiv117__class_type_infoE + 8 | 0;

HEAP32[__ZTI6b2Draw + 4 >> 2] = STRING_TABLE.__ZTS6b2Draw | 0;

HEAP32[_b2_defaultFilter >> 2] = __ZTV15b2ContactFilter + 8 | 0;

HEAP32[_b2_defaultListener >> 2] = __ZTV17b2ContactListener + 8 | 0;

HEAP32[__ZTV17b2ContactListener + 4 >> 2] = __ZTI17b2ContactListener;

HEAP32[__ZTI17b2ContactListener >> 2] = __ZTVN10__cxxabiv117__class_type_infoE + 8 | 0;

HEAP32[__ZTI17b2ContactListener + 4 >> 2] = STRING_TABLE.__ZTS17b2ContactListener | 0;

HEAP32[__ZTV15b2ContactFilter + 4 >> 2] = __ZTI15b2ContactFilter;

HEAP32[__ZTI15b2ContactFilter >> 2] = __ZTVN10__cxxabiv117__class_type_infoE + 8 | 0;

HEAP32[__ZTI15b2ContactFilter + 4 >> 2] = STRING_TABLE.__ZTS15b2ContactFilter | 0;

HEAP32[__ZTV23b2ChainAndCircleContact + 4 >> 2] = __ZTI23b2ChainAndCircleContact;

HEAP32[__ZTI9b2Contact >> 2] = __ZTVN10__cxxabiv117__class_type_infoE + 8 | 0;

HEAP32[__ZTI9b2Contact + 4 >> 2] = STRING_TABLE.__ZTS9b2Contact | 0;

HEAP32[__ZTI23b2ChainAndCircleContact >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI23b2ChainAndCircleContact + 4 >> 2] = STRING_TABLE.__ZTS23b2ChainAndCircleContact | 0;

HEAP32[__ZTI23b2ChainAndCircleContact + 8 >> 2] = __ZTI9b2Contact;

HEAP32[__ZTV24b2ChainAndPolygonContact + 4 >> 2] = __ZTI24b2ChainAndPolygonContact;

HEAP32[__ZTI24b2ChainAndPolygonContact >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI24b2ChainAndPolygonContact + 4 >> 2] = STRING_TABLE.__ZTS24b2ChainAndPolygonContact | 0;

HEAP32[__ZTI24b2ChainAndPolygonContact + 8 >> 2] = __ZTI9b2Contact;

HEAP32[__ZTV15b2CircleContact + 4 >> 2] = __ZTI15b2CircleContact;

HEAP32[__ZTI15b2CircleContact >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI15b2CircleContact + 4 >> 2] = STRING_TABLE.__ZTS15b2CircleContact | 0;

HEAP32[__ZTI15b2CircleContact + 8 >> 2] = __ZTI9b2Contact;

HEAP32[__ZTV9b2Contact + 4 >> 2] = __ZTI9b2Contact;

HEAP32[__ZTV22b2EdgeAndCircleContact + 4 >> 2] = __ZTI22b2EdgeAndCircleContact;

HEAP32[__ZTI22b2EdgeAndCircleContact >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI22b2EdgeAndCircleContact + 4 >> 2] = STRING_TABLE.__ZTS22b2EdgeAndCircleContact | 0;

HEAP32[__ZTI22b2EdgeAndCircleContact + 8 >> 2] = __ZTI9b2Contact;

HEAP32[__ZTV23b2EdgeAndPolygonContact + 4 >> 2] = __ZTI23b2EdgeAndPolygonContact;

HEAP32[__ZTI23b2EdgeAndPolygonContact >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI23b2EdgeAndPolygonContact + 4 >> 2] = STRING_TABLE.__ZTS23b2EdgeAndPolygonContact | 0;

HEAP32[__ZTI23b2EdgeAndPolygonContact + 8 >> 2] = __ZTI9b2Contact;

HEAP32[__ZTV25b2PolygonAndCircleContact + 4 >> 2] = __ZTI25b2PolygonAndCircleContact;

HEAP32[__ZTI25b2PolygonAndCircleContact >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI25b2PolygonAndCircleContact + 4 >> 2] = STRING_TABLE.__ZTS25b2PolygonAndCircleContact | 0;

HEAP32[__ZTI25b2PolygonAndCircleContact + 8 >> 2] = __ZTI9b2Contact;

HEAP32[__ZTV16b2PolygonContact + 4 >> 2] = __ZTI16b2PolygonContact;

HEAP32[__ZTI16b2PolygonContact >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI16b2PolygonContact + 4 >> 2] = STRING_TABLE.__ZTS16b2PolygonContact | 0;

HEAP32[__ZTI16b2PolygonContact + 8 >> 2] = __ZTI9b2Contact;

HEAP32[__ZTV15b2DistanceJoint + 4 >> 2] = __ZTI15b2DistanceJoint;

HEAP32[__ZTI7b2Joint >> 2] = __ZTVN10__cxxabiv117__class_type_infoE + 8 | 0;

HEAP32[__ZTI7b2Joint + 4 >> 2] = STRING_TABLE.__ZTS7b2Joint | 0;

HEAP32[__ZTI15b2DistanceJoint >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI15b2DistanceJoint + 4 >> 2] = STRING_TABLE.__ZTS15b2DistanceJoint | 0;

HEAP32[__ZTI15b2DistanceJoint + 8 >> 2] = __ZTI7b2Joint;

HEAP32[__ZTV15b2FrictionJoint + 4 >> 2] = __ZTI15b2FrictionJoint;

HEAP32[__ZTI15b2FrictionJoint >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI15b2FrictionJoint + 4 >> 2] = STRING_TABLE.__ZTS15b2FrictionJoint | 0;

HEAP32[__ZTI15b2FrictionJoint + 8 >> 2] = __ZTI7b2Joint;

HEAP32[__ZTV11b2GearJoint + 4 >> 2] = __ZTI11b2GearJoint;

HEAP32[__ZTI11b2GearJoint >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI11b2GearJoint + 4 >> 2] = STRING_TABLE.__ZTS11b2GearJoint | 0;

HEAP32[__ZTI11b2GearJoint + 8 >> 2] = __ZTI7b2Joint;

HEAP32[__ZTV7b2Joint + 4 >> 2] = __ZTI7b2Joint;

HEAP32[__ZTV12b2MouseJoint + 4 >> 2] = __ZTI12b2MouseJoint;

HEAP32[__ZTI12b2MouseJoint >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI12b2MouseJoint + 4 >> 2] = STRING_TABLE.__ZTS12b2MouseJoint | 0;

HEAP32[__ZTI12b2MouseJoint + 8 >> 2] = __ZTI7b2Joint;

HEAP32[__ZTV16b2PrismaticJoint + 4 >> 2] = __ZTI16b2PrismaticJoint;

HEAP32[__ZTI16b2PrismaticJoint >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI16b2PrismaticJoint + 4 >> 2] = STRING_TABLE.__ZTS16b2PrismaticJoint | 0;

HEAP32[__ZTI16b2PrismaticJoint + 8 >> 2] = __ZTI7b2Joint;

HEAP32[__ZTV13b2PulleyJoint + 4 >> 2] = __ZTI13b2PulleyJoint;

HEAP32[__ZTI13b2PulleyJoint >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI13b2PulleyJoint + 4 >> 2] = STRING_TABLE.__ZTS13b2PulleyJoint | 0;

HEAP32[__ZTI13b2PulleyJoint + 8 >> 2] = __ZTI7b2Joint;

HEAP32[__ZTV15b2RevoluteJoint + 4 >> 2] = __ZTI15b2RevoluteJoint;

HEAP32[__ZTI15b2RevoluteJoint >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI15b2RevoluteJoint + 4 >> 2] = STRING_TABLE.__ZTS15b2RevoluteJoint | 0;

HEAP32[__ZTI15b2RevoluteJoint + 8 >> 2] = __ZTI7b2Joint;

HEAP32[__ZTV11b2RopeJoint + 4 >> 2] = __ZTI11b2RopeJoint;

HEAP32[__ZTI11b2RopeJoint >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI11b2RopeJoint + 4 >> 2] = STRING_TABLE.__ZTS11b2RopeJoint | 0;

HEAP32[__ZTI11b2RopeJoint + 8 >> 2] = __ZTI7b2Joint;

HEAP32[__ZTV11b2WeldJoint + 4 >> 2] = __ZTI11b2WeldJoint;

HEAP32[__ZTI11b2WeldJoint >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI11b2WeldJoint + 4 >> 2] = STRING_TABLE.__ZTS11b2WeldJoint | 0;

HEAP32[__ZTI11b2WeldJoint + 8 >> 2] = __ZTI7b2Joint;

HEAP32[__ZTV12b2WheelJoint + 4 >> 2] = __ZTI12b2WheelJoint;

HEAP32[__ZTI12b2WheelJoint >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTI12b2WheelJoint + 4 >> 2] = STRING_TABLE.__ZTS12b2WheelJoint | 0;

HEAP32[__ZTI12b2WheelJoint + 8 >> 2] = __ZTI7b2Joint;

HEAP32[__ZTVSt9bad_alloc + 4 >> 2] = __ZTISt9bad_alloc;

HEAP32[__ZTVSt20bad_array_new_length + 4 >> 2] = __ZTISt20bad_array_new_length;

HEAP32[__ZTISt9bad_alloc >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTISt9bad_alloc + 4 >> 2] = STRING_TABLE.__ZTSSt9bad_alloc | 0;

HEAP32[__ZTISt9bad_alloc + 8 >> 2] = __ZTISt9exception;

HEAP32[__ZTISt20bad_array_new_length >> 2] = __ZTVN10__cxxabiv120__si_class_type_infoE + 8 | 0;

HEAP32[__ZTISt20bad_array_new_length + 4 >> 2] = STRING_TABLE.__ZTSSt20bad_array_new_length | 0;

HEAP32[__ZTISt20bad_array_new_length + 8 >> 2] = __ZTISt9bad_alloc;

__ZN12b2BroadPhaseC1Ev = 1478;

__ZN12b2BroadPhaseD1Ev = 1480;

__ZN13b2DynamicTreeC1Ev = 1482;

__ZN13b2DynamicTreeD1Ev = 1484;

__ZN12b2ChainShapeD1Ev = 34;

__ZN16b2BlockAllocatorC1Ev = 1486;

__ZN16b2BlockAllocatorD1Ev = 1488;

__ZN16b2StackAllocatorC1Ev = 1490;

__ZN16b2StackAllocatorD1Ev = 1492;

__ZN7b2TimerC1Ev = 1494;

__ZN6b2BodyC1EPK9b2BodyDefP7b2World = 1496;

__ZN6b2BodyD1Ev = 1498;

__ZN16b2ContactManagerC1Ev = 1500;

__ZN9b2FixtureC1Ev = 1502;

__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener = 1504;

__ZN8b2IslandD1Ev = 1506;

__ZN7b2WorldC1ERK6b2Vec2 = 1508;

__ZN7b2WorldD1Ev = 1510;

__ZN23b2ChainAndCircleContactC1EP9b2FixtureiS1_i = 1512;

__ZN24b2ChainAndPolygonContactC1EP9b2FixtureiS1_i = 1514;

__ZN15b2CircleContactC1EP9b2FixtureS1_ = 1516;

__ZN15b2ContactSolverC1EP18b2ContactSolverDef = 1518;

__ZN15b2ContactSolverD1Ev = 1520;

__ZN22b2EdgeAndCircleContactC1EP9b2FixtureS1_ = 1522;

__ZN23b2EdgeAndPolygonContactC1EP9b2FixtureS1_ = 1524;

__ZN25b2PolygonAndCircleContactC1EP9b2FixtureS1_ = 1526;

__ZN16b2PolygonContactC1EP9b2FixtureS1_ = 1528;

__ZN15b2DistanceJointC1EPK18b2DistanceJointDef = 1530;

__ZN15b2FrictionJointC1EPK18b2FrictionJointDef = 1532;

__ZN11b2GearJointC1EPK14b2GearJointDef = 1534;

__ZN12b2MouseJointC1EPK15b2MouseJointDef = 1536;

__ZN16b2PrismaticJointC1EPK19b2PrismaticJointDef = 1538;

__ZN13b2PulleyJointC1EPK16b2PulleyJointDef = 1540;

__ZN15b2RevoluteJointC1EPK18b2RevoluteJointDef = 1542;

__ZN11b2RopeJointC1EPK14b2RopeJointDef = 1544;

__ZN11b2WeldJointC1EPK14b2WeldJointDef = 1546;

__ZN12b2WheelJointC1EPK15b2WheelJointDef = 1548;

__ZN6b2RopeC1Ev = 1550;

__ZN6b2RopeD1Ev = 1552;

__ZNSt9bad_allocC1Ev = 1554;

__ZNSt9bad_allocD1Ev = 32;

__ZNSt20bad_array_new_lengthC1Ev = 1556;

__ZNSt20bad_array_new_lengthD1Ev = 32;

__ZNSt20bad_array_new_lengthD2Ev = 32;

FUNCTION_TABLE = [ 0, 0, __Z14b2PairLessThanRK6b2PairS1_, 0, __ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator, 0, __ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator, 0, __ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator, 0, __ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator, 0, __ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator, 0, __ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator, 0, __ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator, 0, __ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator, 0, __ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator, 0, __ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator, 0, __ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator, 0, __ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator, 0, __ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator, 0, __ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator, 0, __ZNSt9bad_allocD2Ev, 0, __ZN12b2ChainShapeD2Ev, 0, __ZN12b2ChainShapeD0Ev, 0, __ZNK12b2ChainShape5CloneEP16b2BlockAllocator, 0, __ZNK12b2ChainShape13GetChildCountEv, 0, __ZNK12b2ChainShape9TestPointERK11b2TransformRK6b2Vec2, 0, __ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi, 0, __ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi, 0, __ZNK12b2ChainShape11ComputeMassEP10b2MassDataf, 0, __ZN13b2CircleShapeD1Ev, 0, __ZN13b2CircleShapeD0Ev, 0, __ZNK13b2CircleShape5CloneEP16b2BlockAllocator, 0, __ZNK13b2CircleShape13GetChildCountEv, 0, __ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2, 0, __ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi, 0, __ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi, 0, __ZNK13b2CircleShape11ComputeMassEP10b2MassDataf, 0, __ZN11b2EdgeShapeD1Ev, 0, __ZN11b2EdgeShapeD0Ev, 0, __ZNK11b2EdgeShape5CloneEP16b2BlockAllocator, 0, __ZNK11b2EdgeShape13GetChildCountEv, 0, __ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2, 0, __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi, 0, __ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi, 0, __ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf, 0, __ZN14b2PolygonShapeD1Ev, 0, __ZN14b2PolygonShapeD0Ev, 0, __ZNK14b2PolygonShape5CloneEP16b2BlockAllocator, 0, __ZNK14b2PolygonShape13GetChildCountEv, 0, __ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2, 0, __ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi, 0, __ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi, 0, __ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf, 0, __ZN6b2DrawD1Ev, 0, __ZN6b2DrawD0Ev, 0, ___cxa_pure_virtual, 0, __ZN17b2ContactListenerD1Ev, 0, __ZN17b2ContactListenerD0Ev, 0, __ZN17b2ContactListener12BeginContactEP9b2Contact, 0, __ZN17b2ContactListener10EndContactEP9b2Contact, 0, __ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold, 0, __ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse, 0, __ZN15b2ContactFilterD1Ev, 0, __ZN15b2ContactFilterD0Ev, 0, __ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_, 0, __ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_, 0, __ZN23b2ChainAndCircleContactD1Ev, 0, __ZN23b2ChainAndCircleContactD0Ev, 0, __ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_, 0, __ZN24b2ChainAndPolygonContactD1Ev, 0, __ZN24b2ChainAndPolygonContactD0Ev, 0, __ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_, 0, __ZN15b2CircleContactD1Ev, 0, __ZN15b2CircleContactD0Ev, 0, __ZN9b2ContactD1Ev, 0, __ZN9b2ContactD0Ev, 0, __ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_, 0, __ZN22b2EdgeAndCircleContactD1Ev, 0, __ZN22b2EdgeAndCircleContactD0Ev, 0, __ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_, 0, __ZN23b2EdgeAndPolygonContactD1Ev, 0, __ZN23b2EdgeAndPolygonContactD0Ev, 0, __ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_, 0, __ZN25b2PolygonAndCircleContactD1Ev, 0, __ZN25b2PolygonAndCircleContactD0Ev, 0, __ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_, 0, __ZN16b2PolygonContactD1Ev, 0, __ZN16b2PolygonContactD0Ev, 0, __ZNK15b2DistanceJoint10GetAnchorAEv, 0, __ZNK15b2DistanceJoint10GetAnchorBEv, 0, __ZNK15b2DistanceJoint16GetReactionForceEf, 0, __ZNK15b2DistanceJoint17GetReactionTorqueEf, 0, __ZN15b2DistanceJoint4DumpEv, 0, __ZN15b2DistanceJointD1Ev, 0, __ZN15b2DistanceJointD0Ev, 0, __ZN15b2DistanceJoint23InitVelocityConstraintsERK12b2SolverData, 0, __ZN15b2DistanceJoint24SolveVelocityConstraintsERK12b2SolverData, 0, __ZN15b2DistanceJoint24SolvePositionConstraintsERK12b2SolverData, 0, __ZNK15b2FrictionJoint10GetAnchorAEv, 0, __ZNK15b2FrictionJoint10GetAnchorBEv, 0, __ZNK15b2FrictionJoint16GetReactionForceEf, 0, __ZNK15b2FrictionJoint17GetReactionTorqueEf, 0, __ZN15b2FrictionJoint4DumpEv, 0, __ZN15b2FrictionJointD1Ev, 0, __ZN15b2FrictionJointD0Ev, 0, __ZN15b2FrictionJoint23InitVelocityConstraintsERK12b2SolverData, 0, __ZN15b2FrictionJoint24SolveVelocityConstraintsERK12b2SolverData, 0, __ZN15b2FrictionJoint24SolvePositionConstraintsERK12b2SolverData, 0, __ZNK11b2GearJoint10GetAnchorAEv, 0, __ZNK11b2GearJoint10GetAnchorBEv, 0, __ZNK11b2GearJoint16GetReactionForceEf, 0, __ZNK11b2GearJoint17GetReactionTorqueEf, 0, __ZN11b2GearJoint4DumpEv, 0, __ZN11b2GearJointD1Ev, 0, __ZN11b2GearJointD0Ev, 0, __ZN11b2GearJoint23InitVelocityConstraintsERK12b2SolverData, 0, __ZN11b2GearJoint24SolveVelocityConstraintsERK12b2SolverData, 0, __ZN11b2GearJoint24SolvePositionConstraintsERK12b2SolverData, 0, __ZN7b2Joint4DumpEv, 0, __ZN7b2JointD1Ev, 0, __ZN7b2JointD0Ev, 0, __ZNK12b2MouseJoint10GetAnchorAEv, 0, __ZNK12b2MouseJoint10GetAnchorBEv, 0, __ZNK12b2MouseJoint16GetReactionForceEf, 0, __ZNK12b2MouseJoint17GetReactionTorqueEf, 0, __ZN12b2MouseJoint4DumpEv, 0, __ZN12b2MouseJointD1Ev, 0, __ZN12b2MouseJointD0Ev, 0, __ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData, 0, __ZN12b2MouseJoint24SolveVelocityConstraintsERK12b2SolverData, 0, __ZN12b2MouseJoint24SolvePositionConstraintsERK12b2SolverData, 0, __ZNK16b2PrismaticJoint10GetAnchorAEv, 0, __ZNK16b2PrismaticJoint10GetAnchorBEv, 0, __ZNK16b2PrismaticJoint16GetReactionForceEf, 0, __ZNK16b2PrismaticJoint17GetReactionTorqueEf, 0, __ZN16b2PrismaticJoint4DumpEv, 0, __ZN16b2PrismaticJointD1Ev, 0, __ZN16b2PrismaticJointD0Ev, 0, __ZN16b2PrismaticJoint23InitVelocityConstraintsERK12b2SolverData, 0, __ZN16b2PrismaticJoint24SolveVelocityConstraintsERK12b2SolverData, 0, __ZN16b2PrismaticJoint24SolvePositionConstraintsERK12b2SolverData, 0, __ZNK13b2PulleyJoint10GetAnchorAEv, 0, __ZNK13b2PulleyJoint10GetAnchorBEv, 0, __ZNK13b2PulleyJoint16GetReactionForceEf, 0, __ZNK13b2PulleyJoint17GetReactionTorqueEf, 0, __ZN13b2PulleyJoint4DumpEv, 0, __ZN13b2PulleyJointD1Ev, 0, __ZN13b2PulleyJointD0Ev, 0, __ZN13b2PulleyJoint23InitVelocityConstraintsERK12b2SolverData, 0, __ZN13b2PulleyJoint24SolveVelocityConstraintsERK12b2SolverData, 0, __ZN13b2PulleyJoint24SolvePositionConstraintsERK12b2SolverData, 0, __ZNK15b2RevoluteJoint10GetAnchorAEv, 0, __ZNK15b2RevoluteJoint10GetAnchorBEv, 0, __ZNK15b2RevoluteJoint16GetReactionForceEf, 0, __ZNK15b2RevoluteJoint17GetReactionTorqueEf, 0, __ZN15b2RevoluteJoint4DumpEv, 0, __ZN15b2RevoluteJointD1Ev, 0, __ZN15b2RevoluteJointD0Ev, 0, __ZN15b2RevoluteJoint23InitVelocityConstraintsERK12b2SolverData, 0, __ZN15b2RevoluteJoint24SolveVelocityConstraintsERK12b2SolverData, 0, __ZN15b2RevoluteJoint24SolvePositionConstraintsERK12b2SolverData, 0, __ZNK11b2RopeJoint10GetAnchorAEv, 0, __ZNK11b2RopeJoint10GetAnchorBEv, 0, __ZNK11b2RopeJoint16GetReactionForceEf, 0, __ZNK11b2RopeJoint17GetReactionTorqueEf, 0, __ZN11b2RopeJoint4DumpEv, 0, __ZN11b2RopeJointD1Ev, 0, __ZN11b2RopeJointD0Ev, 0, __ZN11b2RopeJoint23InitVelocityConstraintsERK12b2SolverData, 0, __ZN11b2RopeJoint24SolveVelocityConstraintsERK12b2SolverData, 0, __ZN11b2RopeJoint24SolvePositionConstraintsERK12b2SolverData, 0, __ZNK11b2WeldJoint10GetAnchorAEv, 0, __ZNK11b2WeldJoint10GetAnchorBEv, 0, __ZNK11b2WeldJoint16GetReactionForceEf, 0, __ZNK11b2WeldJoint17GetReactionTorqueEf, 0, __ZN11b2WeldJoint4DumpEv, 0, __ZN11b2WeldJointD1Ev, 0, __ZN11b2WeldJointD0Ev, 0, __ZN11b2WeldJoint23InitVelocityConstraintsERK12b2SolverData, 0, __ZN11b2WeldJoint24SolveVelocityConstraintsERK12b2SolverData, 0, __ZN11b2WeldJoint24SolvePositionConstraintsERK12b2SolverData, 0, __ZNK12b2WheelJoint10GetAnchorAEv, 0, __ZNK12b2WheelJoint10GetAnchorBEv, 0, __ZNK12b2WheelJoint16GetReactionForceEf, 0, __ZNK12b2WheelJoint17GetReactionTorqueEf, 0, __ZN12b2WheelJoint4DumpEv, 0, __ZN12b2WheelJointD1Ev, 0, __ZN12b2WheelJointD0Ev, 0, __ZN12b2WheelJoint23InitVelocityConstraintsERK12b2SolverData, 0, __ZN12b2WheelJoint24SolveVelocityConstraintsERK12b2SolverData, 0, __ZN12b2WheelJoint24SolvePositionConstraintsERK12b2SolverData, 0, _emscripten_bind_b2ContactManager__get_m_contactFilter_p0, 0, _emscripten_bind_b2ContactManager__get_m_contactCount_p0, 0, _emscripten_bind_b2ContactManager__set_m_contactFilter_p1, 0, _emscripten_bind_b2ContactManager__b2ContactManager_p0, 0, _emscripten_bind_b2ContactManager__AddPair_p2, 0, _emscripten_bind_b2ContactManager__set_m_allocator_p1, 0, _emscripten_bind_b2ContactManager__set_m_contactCount_p1, 0, _emscripten_bind_b2ContactManager__Collide_p0, 0, _emscripten_bind_b2ContactManager__set_m_contactList_p1, 0, _emscripten_bind_b2ContactManager__FindNewContacts_p0, 0, _emscripten_bind_b2ContactManager__get_m_contactListener_p0, 0, _emscripten_bind_b2ContactManager____destroy___p0, 0, _emscripten_bind_b2ContactManager__set_m_contactListener_p1, 0, _emscripten_bind_b2ContactManager__get_m_broadPhase_p0, 0, _emscripten_bind_b2ContactManager__Destroy_p1, 0, _emscripten_bind_b2ContactManager__set_m_broadPhase_p1, 0, _emscripten_bind_b2ContactManager__get_m_contactList_p0, 0, _emscripten_bind_b2ContactManager__get_m_allocator_p0, 0, _emscripten_bind_b2BroadPhase__GetTreeQuality_p0, 0, _emscripten_bind_b2BroadPhase__GetFatAABB_p1, 0, _emscripten_bind_b2BroadPhase__GetUserData_p1, 0, _emscripten_bind_b2BroadPhase____destroy___p0, 0, _emscripten_bind_b2BroadPhase__GetTreeHeight_p0, 0, _emscripten_bind_b2BroadPhase__b2BroadPhase_p0, 0, _emscripten_bind_b2BroadPhase__GetProxyCount_p0, 0, _emscripten_bind_b2BroadPhase__GetTreeBalance_p0, 0, _emscripten_bind_b2BroadPhase__TestOverlap_p2, 0, _emscripten_bind_b2BroadPhase__TouchProxy_p1, 0, _emscripten_bind_b2BroadPhase__CreateProxy_p2, 0, _emscripten_bind_b2BroadPhase__MoveProxy_p3, 0, _emscripten_bind_b2BroadPhase__DestroyProxy_p1, 0, _emscripten_bind_b2World__QueryAABB_p2, 0, _emscripten_bind_b2World__SetSubStepping_p1, 0, _emscripten_bind_b2World__GetTreeQuality_p0, 0, _emscripten_bind_b2World__GetTreeHeight_p0, 0, _emscripten_bind_b2World__GetProfile_p0, 0, _emscripten_bind_b2World__GetTreeBalance_p0, 0, _emscripten_bind_b2World__GetSubStepping_p0, 0, _emscripten_bind_b2World__GetContactManager_p0, 0, _emscripten_bind_b2World__SetContactListener_p1, 0, _emscripten_bind_b2World__DrawDebugData_p0, 0, _emscripten_bind_b2World__SetContinuousPhysics_p1, 0, _emscripten_bind_b2World__SetGravity_p1, 0, _emscripten_bind_b2World__GetBodyCount_p0, 0, _emscripten_bind_b2World__GetAutoClearForces_p0, 0, _emscripten_bind_b2World__GetContinuousPhysics_p0, 0, _emscripten_bind_b2World__GetJointList_p0, 0, _emscripten_bind_b2World__CreateBody_p1, 0, _emscripten_bind_b2World__GetBodyList_p0, 0, _emscripten_bind_b2World__SetDestructionListener_p1, 0, _emscripten_bind_b2World__DestroyJoint_p1, 0, _emscripten_bind_b2World__b2World_p1, 0, _emscripten_bind_b2World__GetJointCount_p0, 0, _emscripten_bind_b2World__Step_p3, 0, _emscripten_bind_b2World__ClearForces_p0, 0, _emscripten_bind_b2World__GetWarmStarting_p0, 0, _emscripten_bind_b2World__SetAllowSleeping_p1, 0, _emscripten_bind_b2World__DestroyBody_p1, 0, _emscripten_bind_b2World__GetAllowSleeping_p0, 0, _emscripten_bind_b2World__CreateJoint_p1, 0, _emscripten_bind_b2World__GetProxyCount_p0, 0, _emscripten_bind_b2World__RayCast_p3, 0, _emscripten_bind_b2World__IsLocked_p0, 0, _emscripten_bind_b2World__GetContactList_p0, 0, _emscripten_bind_b2World__SetDebugDraw_p1, 0, _emscripten_bind_b2World____destroy___p0, 0, _emscripten_bind_b2World__Dump_p0, 0, _emscripten_bind_b2World__SetAutoClearForces_p1, 0, _emscripten_bind_b2World__GetGravity_p0, 0, _emscripten_bind_b2World__GetContactCount_p0, 0, _emscripten_bind_b2World__SetWarmStarting_p1, 0, _emscripten_bind_b2World__SetContactFilter_p1, 0, _emscripten_bind_b2CircleShape____destroy___p0, 0, _emscripten_bind_b2CircleShape__GetType_p0, 0, _emscripten_bind_b2CircleShape__ComputeMass_p2, 0, _emscripten_bind_b2CircleShape__set_m_radius_p1, 0, _emscripten_bind_b2CircleShape__get_m_radius_p0, 0, _emscripten_bind_b2CircleShape__GetVertex_p1, 0, _emscripten_bind_b2CircleShape__Clone_p1, 0, _emscripten_bind_b2CircleShape__GetSupportVertex_p1, 0, _emscripten_bind_b2CircleShape__RayCast_p4, 0, _emscripten_bind_b2CircleShape__ComputeAABB_p3, 0, _emscripten_bind_b2CircleShape__GetVertexCount_p0, 0, _emscripten_bind_b2CircleShape__GetChildCount_p0, 0, _emscripten_bind_b2CircleShape__TestPoint_p2, 0, _emscripten_bind_b2CircleShape__b2CircleShape_p0, 0, _emscripten_bind_b2CircleShape__GetSupport_p1, 0, _emscripten_bind_b2CircleShape__set_m_p_p1, 0, _emscripten_bind_b2CircleShape__get_m_p_p0, 0, _emscripten_bind_b2Draw__AppendFlags_p1, 0, _emscripten_bind_b2Draw__DrawTransform_p1, 0, _emscripten_bind_b2Draw__ClearFlags_p1, 0, _emscripten_bind_b2Draw__DrawPolygon_p3, 0, _emscripten_bind_b2Draw__DrawSolidCircle_p4, 0, _emscripten_bind_b2Draw__DrawSolidPolygon_p3, 0, _emscripten_bind_b2Draw__DrawCircle_p3, 0, _emscripten_bind_b2Draw__SetFlags_p1, 0, _emscripten_bind_b2Draw__DrawSegment_p3, 0, _emscripten_bind_b2Draw__GetFlags_p0, 0, _emscripten_bind_b2Joint__GetNext_p0, 0, _emscripten_bind_b2Joint__GetBodyA_p0, 0, _emscripten_bind_b2Joint__GetBodyB_p0, 0, _emscripten_bind_b2Joint__GetReactionTorque_p1, 0, _emscripten_bind_b2Joint__GetAnchorA_p0, 0, _emscripten_bind_b2Joint__GetUserData_p0, 0, _emscripten_bind_b2Joint__GetType_p0, 0, _emscripten_bind_b2Joint__SetUserData_p1, 0, _emscripten_bind_b2Joint__GetCollideConnected_p0, 0, _emscripten_bind_b2Joint__Dump_p0, 0, _emscripten_bind_b2Joint__GetAnchorB_p0, 0, _emscripten_bind_b2Joint__GetReactionForce_p1, 0, _emscripten_bind_b2Joint__IsActive_p0, 0, _emscripten_bind_b2RayCastCallback__ReportFixture_p4, 0, _emscripten_bind_b2DynamicTree____destroy___p0, 0, _emscripten_bind_b2DynamicTree__b2DynamicTree_p0, 0, _emscripten_bind_b2DynamicTree__GetFatAABB_p1, 0, _emscripten_bind_b2DynamicTree__GetUserData_p1, 0, _emscripten_bind_b2DynamicTree__GetMaxBalance_p0, 0, _emscripten_bind_b2DynamicTree__GetHeight_p0, 0, _emscripten_bind_b2DynamicTree__GetAreaRatio_p0, 0, _emscripten_bind_b2DynamicTree__RebuildBottomUp_p0, 0, _emscripten_bind_b2DynamicTree__CreateProxy_p2, 0, _emscripten_bind_b2DynamicTree__MoveProxy_p3, 0, _emscripten_bind_b2DynamicTree__Validate_p0, 0, _emscripten_bind_b2DynamicTree__DestroyProxy_p1, 0, _emscripten_bind_b2Timer__b2Timer_p0, 0, _emscripten_bind_b2Timer__Reset_p0, 0, _emscripten_bind_b2Timer____destroy___p0, 0, _emscripten_bind_b2Timer__GetMilliseconds_p0, 0, _emscripten_bind_b2ChainShape____destroy___p0, 0, _emscripten_bind_b2ChainShape__GetType_p0, 0, _emscripten_bind_b2ChainShape__CreateChain_p2, 0, _emscripten_bind_b2ChainShape__set_m_radius_p1, 0, _emscripten_bind_b2ChainShape__get_m_radius_p0, 0, _emscripten_bind_b2ChainShape__get_m_vertices_p0, 0, _emscripten_bind_b2ChainShape__ComputeMass_p2, 0, _emscripten_bind_b2ChainShape__Clone_p1, 0, _emscripten_bind_b2ChainShape__get_m_count_p0, 0, _emscripten_bind_b2ChainShape__GetChildEdge_p2, 0, _emscripten_bind_b2ChainShape__b2ChainShape_p0, 0, _emscripten_bind_b2ChainShape__ComputeAABB_p3, 0, _emscripten_bind_b2ChainShape__RayCast_p4, 0, _emscripten_bind_b2ChainShape__GetChildCount_p0, 0, _emscripten_bind_b2ChainShape__TestPoint_p2, 0, _emscripten_bind_b2ChainShape__SetPrevVertex_p1, 0, _emscripten_bind_b2ChainShape__CreateLoop_p2, 0, _emscripten_bind_b2ChainShape__set_m_vertices_p1, 0, _emscripten_bind_b2ChainShape__SetNextVertex_p1, 0, _emscripten_bind_b2ChainShape__set_m_count_p1, 0, _emscripten_bind_b2QueryCallback__ReportFixture_p1, 0, _emscripten_bind_b2BlockAllocator____destroy___p0, 0, _emscripten_bind_b2BlockAllocator__Clear_p0, 0, _emscripten_bind_b2BlockAllocator__Free_p2, 0, _emscripten_bind_b2BlockAllocator__Allocate_p1, 0, _emscripten_bind_b2BlockAllocator__b2BlockAllocator_p0, 0, _emscripten_bind_b2PolygonShape____destroy___p0, 0, _emscripten_bind_b2PolygonShape__Set_p2, 0, _emscripten_bind_b2PolygonShape__ComputeMass_p2, 0, _emscripten_bind_b2PolygonShape__set_m_radius_p1, 0, _emscripten_bind_b2PolygonShape__get_m_radius_p0, 0, _emscripten_bind_b2PolygonShape__Clone_p1, 0, _emscripten_bind_b2PolygonShape__GetVertex_p1, 0, _emscripten_bind_b2PolygonShape__RayCast_p4, 0, _emscripten_bind_b2PolygonShape__SetAsBox_p2, 0, _emscripten_bind_b2PolygonShape__SetAsBox_p4, 0, _emscripten_bind_b2PolygonShape__set_m_centroid_p1, 0, _emscripten_bind_b2PolygonShape__ComputeAABB_p3, 0, _emscripten_bind_b2PolygonShape__set_m_vertexCount_p1, 0, _emscripten_bind_b2PolygonShape__GetVertexCount_p0, 0, _emscripten_bind_b2PolygonShape__GetChildCount_p0, 0, _emscripten_bind_b2PolygonShape__TestPoint_p2, 0, _emscripten_bind_b2PolygonShape__GetType_p0, 0, _emscripten_bind_b2PolygonShape__b2PolygonShape_p0, 0, _emscripten_bind_b2PolygonShape__get_m_vertexCount_p0, 0, _emscripten_bind_b2PolygonShape__get_m_centroid_p0, 0, _emscripten_bind_b2EdgeShape____destroy___p0, 0, _emscripten_bind_b2EdgeShape__Set_p2, 0, _emscripten_bind_b2EdgeShape__ComputeMass_p2, 0, _emscripten_bind_b2EdgeShape__set_m_radius_p1, 0, _emscripten_bind_b2EdgeShape__get_m_radius_p0, 0, _emscripten_bind_b2EdgeShape__Clone_p1, 0, _emscripten_bind_b2EdgeShape__GetType_p0, 0, _emscripten_bind_b2EdgeShape__RayCast_p4, 0, _emscripten_bind_b2EdgeShape__ComputeAABB_p3, 0, _emscripten_bind_b2EdgeShape__GetChildCount_p0, 0, _emscripten_bind_b2EdgeShape__TestPoint_p2, 0, _emscripten_bind_b2EdgeShape__b2EdgeShape_p0, 0, _emscripten_bind_b2Contact__GetNext_p0, 0, _emscripten_bind_b2Contact__SetEnabled_p1, 0, _emscripten_bind_b2Contact__GetWorldManifold_p1, 0, _emscripten_bind_b2Contact__GetRestitution_p0, 0, _emscripten_bind_b2Contact__ResetFriction_p0, 0, _emscripten_bind_b2Contact__GetFriction_p0, 0, _emscripten_bind_b2Contact__IsTouching_p0, 0, _emscripten_bind_b2Contact__IsEnabled_p0, 0, _emscripten_bind_b2Contact__GetFixtureB_p0, 0, _emscripten_bind_b2Contact__SetFriction_p1, 0, _emscripten_bind_b2Contact__GetFixtureA_p0, 0, _emscripten_bind_b2Contact__GetChildIndexA_p0, 0, _emscripten_bind_b2Contact__GetChildIndexB_p0, 0, _emscripten_bind_b2Contact__Evaluate_p3, 0, _emscripten_bind_b2Contact__SetRestitution_p1, 0, _emscripten_bind_b2Contact__GetManifold_p0, 0, _emscripten_bind_b2Contact__ResetRestitution_p0, 0, _emscripten_bind_b2Shape__get_m_radius_p0, 0, _emscripten_bind_b2Shape__ComputeMass_p2, 0, _emscripten_bind_b2Shape__set_m_radius_p1, 0, _emscripten_bind_b2Shape__Clone_p1, 0, _emscripten_bind_b2Shape__GetType_p0, 0, _emscripten_bind_b2Shape__RayCast_p4, 0, _emscripten_bind_b2Shape__ComputeAABB_p3, 0, _emscripten_bind_b2Shape__GetChildCount_p0, 0, _emscripten_bind_b2Shape__TestPoint_p2, 0, _emscripten_bind_b2Body__GetAngle_p0, 0, _emscripten_bind_b2Body__GetUserData_p0, 0, _emscripten_bind_b2Body__IsSleepingAllowed_p0, 0, _emscripten_bind_b2Body__SetAngularDamping_p1, 0, _emscripten_bind_b2Body__SetActive_p1, 0, _emscripten_bind_b2Body__SetGravityScale_p1, 0, _emscripten_bind_b2Body__SetUserData_p1, 0, _emscripten_bind_b2Body__GetAngularVelocity_p0, 0, _emscripten_bind_b2Body__GetFixtureList_p0, 0, _emscripten_bind_b2Body__ApplyForce_p2, 0, _emscripten_bind_b2Body__GetLocalPoint_p1, 0, _emscripten_bind_b2Body__SetLinearVelocity_p1, 0, _emscripten_bind_b2Body__GetJointList_p0, 0, _emscripten_bind_b2Body__GetLinearVelocity_p0, 0, _emscripten_bind_b2Body__GetNext_p0, 0, _emscripten_bind_b2Body__SetSleepingAllowed_p1, 0, _emscripten_bind_b2Body__SetTransform_p2, 0, _emscripten_bind_b2Body__GetMass_p0, 0, _emscripten_bind_b2Body__SetAngularVelocity_p1, 0, _emscripten_bind_b2Body__GetMassData_p1, 0, _emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1, 0, _emscripten_bind_b2Body__ResetMassData_p0, 0, _emscripten_bind_b2Body__ApplyForceToCenter_p1, 0, _emscripten_bind_b2Body__ApplyTorque_p1, 0, _emscripten_bind_b2Body__IsAwake_p0, 0, _emscripten_bind_b2Body__SetType_p1, 0, _emscripten_bind_b2Body__CreateFixture_p1, 0, _emscripten_bind_b2Body__CreateFixture_p2, 0, _emscripten_bind_b2Body__SetMassData_p1, 0, _emscripten_bind_b2Body__GetTransform_p0, 0, _emscripten_bind_b2Body__GetWorldCenter_p0, 0, _emscripten_bind_b2Body__GetAngularDamping_p0, 0, _emscripten_bind_b2Body__ApplyLinearImpulse_p2, 0, _emscripten_bind_b2Body__IsFixedRotation_p0, 0, _emscripten_bind_b2Body__GetLocalCenter_p0, 0, _emscripten_bind_b2Body__GetWorldVector_p1, 0, _emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1, 0, _emscripten_bind_b2Body__GetContactList_p0, 0, _emscripten_bind_b2Body__GetWorldPoint_p1, 0, _emscripten_bind_b2Body__SetAwake_p1, 0, _emscripten_bind_b2Body__GetLinearDamping_p0, 0, _emscripten_bind_b2Body__IsBullet_p0, 0, _emscripten_bind_b2Body__GetWorld_p0, 0, _emscripten_bind_b2Body__GetLocalVector_p1, 0, _emscripten_bind_b2Body__SetLinearDamping_p1, 0, _emscripten_bind_b2Body__Dump_p0, 0, _emscripten_bind_b2Body__SetBullet_p1, 0, _emscripten_bind_b2Body__GetType_p0, 0, _emscripten_bind_b2Body__GetGravityScale_p0, 0, _emscripten_bind_b2Body__DestroyFixture_p1, 0, _emscripten_bind_b2Body__GetInertia_p0, 0, _emscripten_bind_b2Body__IsActive_p0, 0, _emscripten_bind_b2Body__SetFixedRotation_p1, 0, _emscripten_bind_b2Body__ApplyAngularImpulse_p1, 0, _emscripten_bind_b2Body__GetPosition_p0, 0, _emscripten_bind_b2StackAllocator__GetMaxAllocation_p0, 0, _emscripten_bind_b2StackAllocator____destroy___p0, 0, _emscripten_bind_b2StackAllocator__b2StackAllocator_p0, 0, _emscripten_bind_b2StackAllocator__Allocate_p1, 0, _emscripten_bind_b2StackAllocator__Free_p1, 0, _emscripten_bind_b2DestructionListener__SayGoodbye_p1, 0, _emscripten_bind_b2Filter____destroy___p0, 0, _emscripten_bind_b2Filter__set_maskBits_p1, 0, _emscripten_bind_b2Filter__set_categoryBits_p1, 0, _emscripten_bind_b2Filter__get_groupIndex_p0, 0, _emscripten_bind_b2Filter__set_groupIndex_p1, 0, _emscripten_bind_b2Filter__get_maskBits_p0, 0, _emscripten_bind_b2Filter__b2Filter_p0, 0, _emscripten_bind_b2Filter__get_categoryBits_p0, 0, _emscripten_bind_b2FrictionJointDef__set_localAnchorA_p1, 0, _emscripten_bind_b2FrictionJointDef____destroy___p0, 0, _emscripten_bind_b2FrictionJointDef__set_localAnchorB_p1, 0, _emscripten_bind_b2FrictionJointDef__get_maxForce_p0, 0, _emscripten_bind_b2FrictionJointDef__b2FrictionJointDef_p0, 0, _emscripten_bind_b2FrictionJointDef__get_localAnchorA_p0, 0, _emscripten_bind_b2FrictionJointDef__set_maxForce_p1, 0, _emscripten_bind_b2FrictionJointDef__get_localAnchorB_p0, 0, _emscripten_bind_b2FrictionJointDef__set_maxTorque_p1, 0, _emscripten_bind_b2FrictionJointDef__get_maxTorque_p0, 0, _emscripten_bind_b2FrictionJointDef__Initialize_p3, 0, _emscripten_bind_b2BodyDef__get_linearDamping_p0, 0, _emscripten_bind_b2BodyDef__get_awake_p0, 0, _emscripten_bind_b2BodyDef__get_type_p0, 0, _emscripten_bind_b2BodyDef__get_allowSleep_p0, 0, _emscripten_bind_b2BodyDef__set_position_p1, 0, _emscripten_bind_b2BodyDef__set_linearVelocity_p1, 0, _emscripten_bind_b2BodyDef__b2BodyDef_p0, 0, _emscripten_bind_b2BodyDef__get_bullet_p0, 0, _emscripten_bind_b2BodyDef__get_userData_p0, 0, _emscripten_bind_b2BodyDef__set_angularDamping_p1, 0, _emscripten_bind_b2BodyDef__set_fixedRotation_p1, 0, _emscripten_bind_b2BodyDef__set_allowSleep_p1, 0, _emscripten_bind_b2BodyDef__get_gravityScale_p0, 0, _emscripten_bind_b2BodyDef__set_angularVelocity_p1, 0, _emscripten_bind_b2BodyDef__set_userData_p1, 0, _emscripten_bind_b2BodyDef__get_position_p0, 0, _emscripten_bind_b2BodyDef____destroy___p0, 0, _emscripten_bind_b2BodyDef__set_type_p1, 0, _emscripten_bind_b2BodyDef__set_gravityScale_p1, 0, _emscripten_bind_b2BodyDef__get_angularDamping_p0, 0, _emscripten_bind_b2BodyDef__set_bullet_p1, 0, _emscripten_bind_b2BodyDef__set_active_p1, 0, _emscripten_bind_b2BodyDef__set_angle_p1, 0, _emscripten_bind_b2BodyDef__get_angle_p0, 0, _emscripten_bind_b2BodyDef__get_angularVelocity_p0, 0, _emscripten_bind_b2BodyDef__get_linearVelocity_p0, 0, _emscripten_bind_b2BodyDef__get_active_p0, 0, _emscripten_bind_b2BodyDef__set_linearDamping_p1, 0, _emscripten_bind_b2BodyDef__get_fixedRotation_p0, 0, _emscripten_bind_b2BodyDef__set_awake_p1, 0, _emscripten_bind_b2Vec2__Normalize_p0, 0, _emscripten_bind_b2Vec2__set_x_p1, 0, _emscripten_bind_b2Vec2__b2Vec2_p0, 0, _emscripten_bind_b2Vec2__b2Vec2_p2, 0, _emscripten_bind_b2Vec2__Set_p2, 0, _emscripten_bind_b2Vec2__get_x_p0, 0, _emscripten_bind_b2Vec2__get_y_p0, 0, _emscripten_bind_b2Vec2__set_y_p1, 0, _emscripten_bind_b2Vec2__IsValid_p0, 0, _emscripten_bind_b2Vec2__Skew_p0, 0, _emscripten_bind_b2Vec2__LengthSquared_p0, 0, _emscripten_bind_b2Vec2__op_add_p1, 0, _emscripten_bind_b2Vec2__SetZero_p0, 0, _emscripten_bind_b2Vec2__Length_p0, 0, _emscripten_bind_b2Vec2____destroy___p0, 0, _emscripten_bind_b2Vec2__op_mul_p1, 0, _emscripten_bind_b2Vec2__op_sub_p0, 0, _emscripten_bind_b2Vec3____destroy___p0, 0, _emscripten_bind_b2Vec3__set_z_p1, 0, _emscripten_bind_b2Vec3__Set_p3, 0, _emscripten_bind_b2Vec3__get_z_p0, 0, _emscripten_bind_b2Vec3__op_add_p1, 0, _emscripten_bind_b2Vec3__SetZero_p0, 0, _emscripten_bind_b2Vec3__b2Vec3_p0, 0, _emscripten_bind_b2Vec3__b2Vec3_p3, 0, _emscripten_bind_b2Vec3__op_mul_p1, 0, _emscripten_bind_b2Vec3__op_sub_p0, 0, _emscripten_bind_b2DistanceProxy__get_m_radius_p0, 0, _emscripten_bind_b2DistanceProxy__Set_p2, 0, _emscripten_bind_b2DistanceProxy__b2DistanceProxy_p0, 0, _emscripten_bind_b2DistanceProxy__set_m_radius_p1, 0, _emscripten_bind_b2DistanceProxy____destroy___p0, 0, _emscripten_bind_b2DistanceProxy__get_m_vertices_p0, 0, _emscripten_bind_b2DistanceProxy__GetSupportVertex_p1, 0, _emscripten_bind_b2DistanceProxy__get_m_count_p0, 0, _emscripten_bind_b2DistanceProxy__GetVertexCount_p0, 0, _emscripten_bind_b2DistanceProxy__GetVertex_p1, 0, _emscripten_bind_b2DistanceProxy__GetSupport_p1, 0, _emscripten_bind_b2DistanceProxy__set_m_vertices_p1, 0, _emscripten_bind_b2DistanceProxy__set_m_count_p1, 0, _emscripten_bind_b2FixtureDef____destroy___p0, 0, _emscripten_bind_b2FixtureDef__get_isSensor_p0, 0, _emscripten_bind_b2FixtureDef__set_userData_p1, 0, _emscripten_bind_b2FixtureDef__set_shape_p1, 0, _emscripten_bind_b2FixtureDef__get_density_p0, 0, _emscripten_bind_b2FixtureDef__get_shape_p0, 0, _emscripten_bind_b2FixtureDef__b2FixtureDef_p0, 0, _emscripten_bind_b2FixtureDef__set_density_p1, 0, _emscripten_bind_b2FixtureDef__set_restitution_p1, 0, _emscripten_bind_b2FixtureDef__get_restitution_p0, 0, _emscripten_bind_b2FixtureDef__set_isSensor_p1, 0, _emscripten_bind_b2FixtureDef__get_filter_p0, 0, _emscripten_bind_b2FixtureDef__get_friction_p0, 0, _emscripten_bind_b2FixtureDef__set_friction_p1, 0, _emscripten_bind_b2FixtureDef__get_userData_p0, 0, _emscripten_bind_b2FixtureDef__set_filter_p1, 0, _emscripten_bind_b2PrismaticJointDef__set_localAnchorA_p1, 0, _emscripten_bind_b2PrismaticJointDef__set_localAnchorB_p1, 0, _emscripten_bind_b2PrismaticJointDef__get_motorSpeed_p0, 0, _emscripten_bind_b2PrismaticJointDef__get_enableMotor_p0, 0, _emscripten_bind_b2PrismaticJointDef__get_referenceAngle_p0, 0, _emscripten_bind_b2PrismaticJointDef__set_enableLimit_p1, 0, _emscripten_bind_b2PrismaticJointDef__set_motorSpeed_p1, 0, _emscripten_bind_b2PrismaticJointDef__get_localAxisA_p0, 0, _emscripten_bind_b2PrismaticJointDef__set_upperTranslation_p1, 0, _emscripten_bind_b2PrismaticJointDef__b2PrismaticJointDef_p0, 0, _emscripten_bind_b2PrismaticJointDef__Initialize_p4, 0, _emscripten_bind_b2PrismaticJointDef__set_lowerTranslation_p1, 0, _emscripten_bind_b2PrismaticJointDef__get_upperTranslation_p0, 0, _emscripten_bind_b2PrismaticJointDef__get_enableLimit_p0, 0, _emscripten_bind_b2PrismaticJointDef__set_referenceAngle_p1, 0, _emscripten_bind_b2PrismaticJointDef__get_localAnchorA_p0, 0, _emscripten_bind_b2PrismaticJointDef__get_localAnchorB_p0, 0, _emscripten_bind_b2PrismaticJointDef____destroy___p0, 0, _emscripten_bind_b2PrismaticJointDef__get_maxMotorForce_p0, 0, _emscripten_bind_b2PrismaticJointDef__set_maxMotorForce_p1, 0, _emscripten_bind_b2PrismaticJointDef__set_enableMotor_p1, 0, _emscripten_bind_b2PrismaticJointDef__get_lowerTranslation_p0, 0, _emscripten_bind_b2PrismaticJointDef__set_localAxisA_p1, 0, _emscripten_bind_b2Rot____destroy___p0, 0, _emscripten_bind_b2Rot__Set_p1, 0, _emscripten_bind_b2Rot__GetAngle_p0, 0, _emscripten_bind_b2Rot__GetYAxis_p0, 0, _emscripten_bind_b2Rot__GetXAxis_p0, 0, _emscripten_bind_b2Rot__set_c_p1, 0, _emscripten_bind_b2Rot__SetIdentity_p0, 0, _emscripten_bind_b2Rot__b2Rot_p0, 0, _emscripten_bind_b2Rot__b2Rot_p1, 0, _emscripten_bind_b2Rot__get_c_p0, 0, _emscripten_bind_b2WheelJointDef__set_localAnchorA_p1, 0, _emscripten_bind_b2WheelJointDef__set_motorSpeed_p1, 0, _emscripten_bind_b2WheelJointDef__get_localAxisA_p0, 0, _emscripten_bind_b2WheelJointDef__set_localAnchorB_p1, 0, _emscripten_bind_b2WheelJointDef__get_frequencyHz_p0, 0, _emscripten_bind_b2WheelJointDef__set_maxMotorTorque_p1, 0, _emscripten_bind_b2WheelJointDef__get_enableMotor_p0, 0, _emscripten_bind_b2WheelJointDef____destroy___p0, 0, _emscripten_bind_b2WheelJointDef__get_localAnchorA_p0, 0, _emscripten_bind_b2WheelJointDef__get_maxMotorTorque_p0, 0, _emscripten_bind_b2WheelJointDef__get_localAnchorB_p0, 0, _emscripten_bind_b2WheelJointDef__get_dampingRatio_p0, 0, _emscripten_bind_b2WheelJointDef__set_enableMotor_p1, 0, _emscripten_bind_b2WheelJointDef__set_frequencyHz_p1, 0, _emscripten_bind_b2WheelJointDef__Initialize_p4, 0, _emscripten_bind_b2WheelJointDef__set_dampingRatio_p1, 0, _emscripten_bind_b2WheelJointDef__b2WheelJointDef_p0, 0, _emscripten_bind_b2WheelJointDef__set_localAxisA_p1, 0, _emscripten_bind_b2WheelJointDef__get_motorSpeed_p0, 0, _emscripten_bind_b2RevoluteJointDef__set_localAnchorA_p1, 0, _emscripten_bind_b2RevoluteJointDef__get_lowerAngle_p0, 0, _emscripten_bind_b2RevoluteJointDef__set_upperAngle_p1, 0, _emscripten_bind_b2RevoluteJointDef__set_localAnchorB_p1, 0, _emscripten_bind_b2RevoluteJointDef__get_enableLimit_p0, 0, _emscripten_bind_b2RevoluteJointDef__set_lowerAngle_p1, 0, _emscripten_bind_b2RevoluteJointDef__get_enableMotor_p0, 0, _emscripten_bind_b2RevoluteJointDef__set_motorSpeed_p1, 0, _emscripten_bind_b2RevoluteJointDef__get_upperAngle_p0, 0, _emscripten_bind_b2RevoluteJointDef__set_referenceAngle_p1, 0, _emscripten_bind_b2RevoluteJointDef__set_maxMotorTorque_p1, 0, _emscripten_bind_b2RevoluteJointDef__get_localAnchorA_p0, 0, _emscripten_bind_b2RevoluteJointDef__get_referenceAngle_p0, 0, _emscripten_bind_b2RevoluteJointDef__get_localAnchorB_p0, 0, _emscripten_bind_b2RevoluteJointDef__set_enableLimit_p1, 0, _emscripten_bind_b2RevoluteJointDef__set_enableMotor_p1, 0, _emscripten_bind_b2RevoluteJointDef____destroy___p0, 0, _emscripten_bind_b2RevoluteJointDef__b2RevoluteJointDef_p0, 0, _emscripten_bind_b2RevoluteJointDef__Initialize_p3, 0, _emscripten_bind_b2RevoluteJointDef__get_maxMotorTorque_p0, 0, _emscripten_bind_b2RevoluteJointDef__get_motorSpeed_p0, 0, _emscripten_bind_b2PulleyJointDef__set_localAnchorA_p1, 0, _emscripten_bind_b2PulleyJointDef____destroy___p0, 0, _emscripten_bind_b2PulleyJointDef__set_localAnchorB_p1, 0, _emscripten_bind_b2PulleyJointDef__get_ratio_p0, 0, _emscripten_bind_b2PulleyJointDef__get_lengthB_p0, 0, _emscripten_bind_b2PulleyJointDef__get_lengthA_p0, 0, _emscripten_bind_b2PulleyJointDef__get_localAnchorA_p0, 0, _emscripten_bind_b2PulleyJointDef__set_ratio_p1, 0, _emscripten_bind_b2PulleyJointDef__get_localAnchorB_p0, 0, _emscripten_bind_b2PulleyJointDef__get_groundAnchorB_p0, 0, _emscripten_bind_b2PulleyJointDef__set_groundAnchorB_p1, 0, _emscripten_bind_b2PulleyJointDef__b2PulleyJointDef_p0, 0, _emscripten_bind_b2PulleyJointDef__set_groundAnchorA_p1, 0, _emscripten_bind_b2PulleyJointDef__Initialize_p7, 0, _emscripten_bind_b2PulleyJointDef__set_lengthB_p1, 0, _emscripten_bind_b2PulleyJointDef__set_lengthA_p1, 0, _emscripten_bind_b2PulleyJointDef__get_groundAnchorA_p0, 0, _emscripten_bind_b2JointDef__get_bodyA_p0, 0, _emscripten_bind_b2JointDef__set_userData_p1, 0, _emscripten_bind_b2JointDef__set_bodyA_p1, 0, _emscripten_bind_b2JointDef__set_bodyB_p1, 0, _emscripten_bind_b2JointDef____destroy___p0, 0, _emscripten_bind_b2JointDef__get_bodyB_p0, 0, _emscripten_bind_b2JointDef__set_type_p1, 0, _emscripten_bind_b2JointDef__get_collideConnected_p0, 0, _emscripten_bind_b2JointDef__get_type_p0, 0, _emscripten_bind_b2JointDef__set_collideConnected_p1, 0, _emscripten_bind_b2JointDef__b2JointDef_p0, 0, _emscripten_bind_b2JointDef__get_userData_p0, 0, _emscripten_bind_b2Transform____destroy___p0, 0, _emscripten_bind_b2Transform__Set_p2, 0, _emscripten_bind_b2Transform__set_p_p1, 0, _emscripten_bind_b2Transform__set_q_p1, 0, _emscripten_bind_b2Transform__get_p_p0, 0, _emscripten_bind_b2Transform__get_q_p0, 0, _emscripten_bind_b2Transform__b2Transform_p0, 0, _emscripten_bind_b2Transform__b2Transform_p2, 0, _emscripten_bind_b2Transform__SetIdentity_p0, 0, _emscripten_bind_b2Color____destroy___p0, 0, _emscripten_bind_b2Color__set_b_p1, 0, _emscripten_bind_b2Color__Set_p3, 0, _emscripten_bind_b2Color__get_b_p0, 0, _emscripten_bind_b2Color__b2Color_p0, 0, _emscripten_bind_b2Color__b2Color_p3, 0, _emscripten_bind_b2WeldJointDef__set_localAnchorA_p1, 0, _emscripten_bind_b2WeldJointDef____destroy___p0, 0, _emscripten_bind_b2WeldJointDef__get_frequencyHz_p0, 0, _emscripten_bind_b2WeldJointDef__set_localAnchorB_p1, 0, _emscripten_bind_b2WeldJointDef__set_dampingRatio_p1, 0, _emscripten_bind_b2WeldJointDef__set_referenceAngle_p1, 0, _emscripten_bind_b2WeldJointDef__get_localAnchorA_p0, 0, _emscripten_bind_b2WeldJointDef__get_referenceAngle_p0, 0, _emscripten_bind_b2WeldJointDef__get_localAnchorB_p0, 0, _emscripten_bind_b2WeldJointDef__get_dampingRatio_p0, 0, _emscripten_bind_b2WeldJointDef__set_frequencyHz_p1, 0, _emscripten_bind_b2WeldJointDef__Initialize_p3, 0, _emscripten_bind_b2WeldJointDef__b2WeldJointDef_p0, 0, _emscripten_bind_b2MouseJointDef____destroy___p0, 0, _emscripten_bind_b2MouseJointDef__get_frequencyHz_p0, 0, _emscripten_bind_b2MouseJointDef__set_dampingRatio_p1, 0, _emscripten_bind_b2MouseJointDef__b2MouseJointDef_p0, 0, _emscripten_bind_b2MouseJointDef__get_maxForce_p0, 0, _emscripten_bind_b2MouseJointDef__set_target_p1, 0, _emscripten_bind_b2MouseJointDef__set_maxForce_p1, 0, _emscripten_bind_b2MouseJointDef__get_target_p0, 0, _emscripten_bind_b2MouseJointDef__set_frequencyHz_p1, 0, _emscripten_bind_b2MouseJointDef__get_dampingRatio_p0, 0, _emscripten_bind_b2DistanceJointDef__set_localAnchorA_p1, 0, _emscripten_bind_b2DistanceJointDef__get_length_p0, 0, _emscripten_bind_b2DistanceJointDef__get_frequencyHz_p0, 0, _emscripten_bind_b2DistanceJointDef__set_localAnchorB_p1, 0, _emscripten_bind_b2DistanceJointDef__set_dampingRatio_p1, 0, _emscripten_bind_b2DistanceJointDef____destroy___p0, 0, _emscripten_bind_b2DistanceJointDef__get_localAnchorA_p0, 0, _emscripten_bind_b2DistanceJointDef__get_localAnchorB_p0, 0, _emscripten_bind_b2DistanceJointDef__get_dampingRatio_p0, 0, _emscripten_bind_b2DistanceJointDef__b2DistanceJointDef_p0, 0, _emscripten_bind_b2DistanceJointDef__set_length_p1, 0, _emscripten_bind_b2DistanceJointDef__set_frequencyHz_p1, 0, _emscripten_bind_b2DistanceJointDef__Initialize_p4, 0, _emscripten_bind_b2GearJointDef____destroy___p0, 0, _emscripten_bind_b2GearJointDef__set_joint1_p1, 0, _emscripten_bind_b2GearJointDef__set_joint2_p1, 0, _emscripten_bind_b2GearJointDef__set_ratio_p1, 0, _emscripten_bind_b2GearJointDef__get_joint1_p0, 0, _emscripten_bind_b2GearJointDef__get_joint2_p0, 0, _emscripten_bind_b2GearJointDef__b2GearJointDef_p0, 0, _emscripten_bind_b2GearJointDef__get_ratio_p0, 0, _emscripten_bind_b2RopeJointDef__set_localAnchorA_p1, 0, _emscripten_bind_b2RopeJointDef____destroy___p0, 0, _emscripten_bind_b2RopeJointDef__get_maxLength_p0, 0, _emscripten_bind_b2RopeJointDef__set_localAnchorB_p1, 0, _emscripten_bind_b2RopeJointDef__get_localAnchorA_p0, 0, _emscripten_bind_b2RopeJointDef__get_localAnchorB_p0, 0, _emscripten_bind_b2RopeJointDef__b2RopeJointDef_p0, 0, _emscripten_bind_b2RopeJointDef__set_maxLength_p1, 0, __ZNSt9bad_allocD0Ev, 0, __ZNKSt9bad_alloc4whatEv, 0, __ZNSt20bad_array_new_lengthD0Ev, 0, __ZNKSt20bad_array_new_length4whatEv, 0, __ZN12b2BroadPhaseC2Ev, 0, __ZN12b2BroadPhaseD2Ev, 0, __ZN13b2DynamicTreeC2Ev, 0, __ZN13b2DynamicTreeD2Ev, 0, __ZN16b2BlockAllocatorC2Ev, 0, __ZN16b2BlockAllocatorD2Ev, 0, __ZN16b2StackAllocatorC2Ev, 0, __ZN16b2StackAllocatorD2Ev, 0, __ZN7b2TimerC2Ev, 0, __ZN6b2BodyC2EPK9b2BodyDefP7b2World, 0, __ZN6b2BodyD2Ev, 0, __ZN16b2ContactManagerC2Ev, 0, __ZN9b2FixtureC2Ev, 0, __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener, 0, __ZN8b2IslandD2Ev, 0, __ZN7b2WorldC2ERK6b2Vec2, 0, __ZN7b2WorldD2Ev, 0, __ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i, 0, __ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i, 0, __ZN15b2CircleContactC2EP9b2FixtureS1_, 0, __ZN15b2ContactSolverC2EP18b2ContactSolverDef, 0, __ZN15b2ContactSolverD2Ev, 0, __ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_, 0, __ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_, 0, __ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_, 0, __ZN16b2PolygonContactC2EP9b2FixtureS1_, 0, __ZN15b2DistanceJointC2EPK18b2DistanceJointDef, 0, __ZN15b2FrictionJointC2EPK18b2FrictionJointDef, 0, __ZN11b2GearJointC2EPK14b2GearJointDef, 0, __ZN12b2MouseJointC2EPK15b2MouseJointDef, 0, __ZN16b2PrismaticJointC2EPK19b2PrismaticJointDef, 0, __ZN13b2PulleyJointC2EPK16b2PulleyJointDef, 0, __ZN15b2RevoluteJointC2EPK18b2RevoluteJointDef, 0, __ZN11b2RopeJointC2EPK14b2RopeJointDef, 0, __ZN11b2WeldJointC2EPK14b2WeldJointDef, 0, __ZN12b2WheelJointC2EPK15b2WheelJointDef, 0, __ZN6b2RopeC2Ev, 0, __ZN6b2RopeD2Ev, 0, __ZNSt9bad_allocC2Ev, 0, __ZNSt20bad_array_new_lengthC2Ev, 0 ];

Module["FUNCTION_TABLE"] = FUNCTION_TABLE;

function run(args) {
  args = args || Module["arguments"];
  initRuntime();
  var ret = null;
  if (Module["_main"]) {
    ret = Module.callMain(args);
    exitRuntime();
  }
  return ret;
}

Module["run"] = run;

if (Module["preRun"]) {
  Module["preRun"]();
}

if (!Module["noInitialRun"]) {
  var ret = run();
}

if (Module["postRun"]) {
  Module["postRun"]();
}

var Object__cache = {};

function wrapPointer(ptr, __class__) {
  var cache = __class__ ? __class__.prototype.__cache__ : Object__cache;
  var ret = cache[ptr];
  if (ret) return ret;
  __class__ = __class__ || Object;
  ret = Object.create(__class__.prototype);
  ret.ptr = ptr;
  ret.__class__ = __class__;
  return cache[ptr] = ret;
}

Module["wrapPointer"] = wrapPointer;

function castObject(obj, __class__) {
  return wrapPointer(obj.ptr, __class__);
}

Module["castObject"] = castObject;

Module["NULL"] = wrapPointer(0);

function destroy(obj) {
  if (!obj["__destroy__"]) throw "Error: Cannot destroy object. (Did you create it yourself?)";
  obj["__destroy__"]();
  if (obj.__class__ !== Object) {
    delete obj.__class__.prototype.__cache__[obj.ptr];
  } else {
    delete Object__cache[obj.ptr];
  }
}

Module["destroy"] = destroy;

function compare(obj1, obj2) {
  return obj1.ptr === obj2.ptr;
}

Module["compare"] = compare;

function getPointer(obj) {
  return obj.ptr;
}

Module["getPointer"] = getPointer;

function getClass(obj) {
  return obj.__class__;
}

Module["getClass"] = getClass;

function customizeVTable(object, replacementPairs) {
  var vTable = getValue(object.ptr, "void*");
  var size = 0;
  while (getValue(vTable + Runtime.QUANTUM_SIZE * size, "void*")) {
    size++;
  }
  var vTable2 = _malloc(size * Runtime.QUANTUM_SIZE);
  setValue(object.ptr, vTable2, "void*");
  var canaryValue;
  var functions = FUNCTION_TABLE.length;
  for (var i = 0; i < size; i++) {
    var index = FUNCTION_TABLE.length;
    ((function(j) {
      FUNCTION_TABLE.push((function() {
        canaryValue = j;
      }));
    }))(i);
    FUNCTION_TABLE.push(0);
    setValue(vTable2 + Runtime.QUANTUM_SIZE * i, index, "void*");
  }
  var args = [ {
    ptr: 0
  } ];
  replacementPairs.forEach((function(pair) {
    while (1) {
      try {
        pair["original"].apply(object, args);
        break;
      } catch (e) {
        args.push(args[0]);
      }
    }
    pair.originalIndex = getValue(vTable + canaryValue * Runtime.QUANTUM_SIZE, "void*");
  }));
  FUNCTION_TABLE = FUNCTION_TABLE.slice(0, functions);
  var replacements = {};
  replacementPairs.forEach((function(pair) {
    var replacementIndex = FUNCTION_TABLE.length;
    FUNCTION_TABLE.push(pair["replacement"]);
    FUNCTION_TABLE.push(0);
    replacements[pair.originalIndex] = replacementIndex;
  }));
  for (var i = 0; i < size; i++) {
    var value = getValue(vTable + Runtime.QUANTUM_SIZE * i, "void*");
    if (value in replacements) value = replacements[value];
    setValue(vTable2 + Runtime.QUANTUM_SIZE * i, value, "void*");
  }
  return object;
}

Module["customizeVTable"] = customizeVTable;

b2ContactManager.prototype["get_m_contactFilter"] = (function() {
  return wrapPointer(_emscripten_bind_b2ContactManager__get_m_contactFilter_p0(this.ptr), Module.b2ContactFilter);
});

b2ContactManager.prototype["get_m_contactCount"] = (function() {
  return _emscripten_bind_b2ContactManager__get_m_contactCount_p0(this.ptr);
});

b2ContactManager.prototype["set_m_contactFilter"] = (function(arg0) {
  _emscripten_bind_b2ContactManager__set_m_contactFilter_p1(this.ptr, arg0.ptr);
});

function b2ContactManager() {
  this.ptr = _emscripten_bind_b2ContactManager__b2ContactManager_p0();
  b2ContactManager.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2ContactManager;
}

b2ContactManager.prototype.__cache__ = {};

Module["b2ContactManager"] = b2ContactManager;

b2ContactManager.prototype["AddPair"] = (function(arg0, arg1) {
  _emscripten_bind_b2ContactManager__AddPair_p2(this.ptr, arg0, arg1);
});

b2ContactManager.prototype["set_m_allocator"] = (function(arg0) {
  _emscripten_bind_b2ContactManager__set_m_allocator_p1(this.ptr, arg0.ptr);
});

b2ContactManager.prototype["set_m_contactCount"] = (function(arg0) {
  _emscripten_bind_b2ContactManager__set_m_contactCount_p1(this.ptr, arg0);
});

b2ContactManager.prototype["Collide"] = (function() {
  _emscripten_bind_b2ContactManager__Collide_p0(this.ptr);
});

b2ContactManager.prototype["set_m_contactList"] = (function(arg0) {
  _emscripten_bind_b2ContactManager__set_m_contactList_p1(this.ptr, arg0.ptr);
});

b2ContactManager.prototype["FindNewContacts"] = (function() {
  _emscripten_bind_b2ContactManager__FindNewContacts_p0(this.ptr);
});

b2ContactManager.prototype["get_m_contactListener"] = (function() {
  return wrapPointer(_emscripten_bind_b2ContactManager__get_m_contactListener_p0(this.ptr), Module.b2ContactListener);
});

b2ContactManager.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2ContactManager____destroy___p0(this.ptr);
});

b2ContactManager.prototype["set_m_contactListener"] = (function(arg0) {
  _emscripten_bind_b2ContactManager__set_m_contactListener_p1(this.ptr, arg0.ptr);
});

b2ContactManager.prototype["get_m_broadPhase"] = (function() {
  return wrapPointer(_emscripten_bind_b2ContactManager__get_m_broadPhase_p0(this.ptr), Module.b2BroadPhase);
});

b2ContactManager.prototype["Destroy"] = (function(arg0) {
  _emscripten_bind_b2ContactManager__Destroy_p1(this.ptr, arg0.ptr);
});

b2ContactManager.prototype["set_m_broadPhase"] = (function(arg0) {
  _emscripten_bind_b2ContactManager__set_m_broadPhase_p1(this.ptr, arg0.ptr);
});

b2ContactManager.prototype["get_m_contactList"] = (function() {
  return wrapPointer(_emscripten_bind_b2ContactManager__get_m_contactList_p0(this.ptr), Module.b2Contact);
});

b2ContactManager.prototype["get_m_allocator"] = (function() {
  return wrapPointer(_emscripten_bind_b2ContactManager__get_m_allocator_p0(this.ptr), Module.b2BlockAllocator);
});

b2BroadPhase.prototype["GetTreeQuality"] = (function() {
  return _emscripten_bind_b2BroadPhase__GetTreeQuality_p0(this.ptr);
});

b2BroadPhase.prototype["GetFatAABB"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2BroadPhase__GetFatAABB_p1(this.ptr, arg0), Module.b2AABB);
});

b2BroadPhase.prototype["GetUserData"] = (function(arg0) {
  return _emscripten_bind_b2BroadPhase__GetUserData_p1(this.ptr, arg0);
});

b2BroadPhase.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2BroadPhase____destroy___p0(this.ptr);
});

b2BroadPhase.prototype["GetTreeHeight"] = (function() {
  return _emscripten_bind_b2BroadPhase__GetTreeHeight_p0(this.ptr);
});

function b2BroadPhase() {
  this.ptr = _emscripten_bind_b2BroadPhase__b2BroadPhase_p0();
  b2BroadPhase.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2BroadPhase;
}

b2BroadPhase.prototype.__cache__ = {};

Module["b2BroadPhase"] = b2BroadPhase;

b2BroadPhase.prototype["GetProxyCount"] = (function() {
  return _emscripten_bind_b2BroadPhase__GetProxyCount_p0(this.ptr);
});

b2BroadPhase.prototype["GetTreeBalance"] = (function() {
  return _emscripten_bind_b2BroadPhase__GetTreeBalance_p0(this.ptr);
});

b2BroadPhase.prototype["TestOverlap"] = (function(arg0, arg1) {
  return _emscripten_bind_b2BroadPhase__TestOverlap_p2(this.ptr, arg0, arg1);
});

b2BroadPhase.prototype["TouchProxy"] = (function(arg0) {
  _emscripten_bind_b2BroadPhase__TouchProxy_p1(this.ptr, arg0);
});

b2BroadPhase.prototype["CreateProxy"] = (function(arg0, arg1) {
  return _emscripten_bind_b2BroadPhase__CreateProxy_p2(this.ptr, arg0.ptr, arg1);
});

b2BroadPhase.prototype["MoveProxy"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2BroadPhase__MoveProxy_p3(this.ptr, arg0, arg1.ptr, arg2.ptr);
});

b2BroadPhase.prototype["DestroyProxy"] = (function(arg0) {
  _emscripten_bind_b2BroadPhase__DestroyProxy_p1(this.ptr, arg0);
});

b2World.prototype["QueryAABB"] = (function(arg0, arg1) {
  _emscripten_bind_b2World__QueryAABB_p2(this.ptr, arg0.ptr, arg1.ptr);
});

b2World.prototype["SetSubStepping"] = (function(arg0) {
  _emscripten_bind_b2World__SetSubStepping_p1(this.ptr, arg0);
});

b2World.prototype["GetTreeQuality"] = (function() {
  return _emscripten_bind_b2World__GetTreeQuality_p0(this.ptr);
});

b2World.prototype["GetTreeHeight"] = (function() {
  return _emscripten_bind_b2World__GetTreeHeight_p0(this.ptr);
});

b2World.prototype["GetProfile"] = (function() {
  return wrapPointer(_emscripten_bind_b2World__GetProfile_p0(this.ptr), Module.b2Profile);
});

b2World.prototype["GetTreeBalance"] = (function() {
  return _emscripten_bind_b2World__GetTreeBalance_p0(this.ptr);
});

b2World.prototype["GetSubStepping"] = (function() {
  return _emscripten_bind_b2World__GetSubStepping_p0(this.ptr);
});

b2World.prototype["GetContactManager"] = (function() {
  return wrapPointer(_emscripten_bind_b2World__GetContactManager_p0(this.ptr), Module.b2ContactManager);
});

b2World.prototype["SetContactListener"] = (function(arg0) {
  _emscripten_bind_b2World__SetContactListener_p1(this.ptr, arg0.ptr);
});

b2World.prototype["DrawDebugData"] = (function() {
  _emscripten_bind_b2World__DrawDebugData_p0(this.ptr);
});

b2World.prototype["SetContinuousPhysics"] = (function(arg0) {
  _emscripten_bind_b2World__SetContinuousPhysics_p1(this.ptr, arg0);
});

b2World.prototype["SetGravity"] = (function(arg0) {
  _emscripten_bind_b2World__SetGravity_p1(this.ptr, arg0.ptr);
});

b2World.prototype["GetBodyCount"] = (function() {
  return _emscripten_bind_b2World__GetBodyCount_p0(this.ptr);
});

b2World.prototype["GetAutoClearForces"] = (function() {
  return _emscripten_bind_b2World__GetAutoClearForces_p0(this.ptr);
});

b2World.prototype["GetContinuousPhysics"] = (function() {
  return _emscripten_bind_b2World__GetContinuousPhysics_p0(this.ptr);
});

b2World.prototype["GetJointList"] = (function() {
  return wrapPointer(_emscripten_bind_b2World__GetJointList_p0(this.ptr), Module.b2Joint);
});

b2World.prototype["CreateBody"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2World__CreateBody_p1(this.ptr, arg0.ptr), Module.b2Body);
});

b2World.prototype["GetBodyList"] = (function() {
  return wrapPointer(_emscripten_bind_b2World__GetBodyList_p0(this.ptr), Module.b2Body);
});

b2World.prototype["SetDestructionListener"] = (function(arg0) {
  _emscripten_bind_b2World__SetDestructionListener_p1(this.ptr, arg0.ptr);
});

b2World.prototype["DestroyJoint"] = (function(arg0) {
  _emscripten_bind_b2World__DestroyJoint_p1(this.ptr, arg0.ptr);
});

function b2World(arg0) {
  this.ptr = _emscripten_bind_b2World__b2World_p1(arg0.ptr);
  b2World.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2World;
}

b2World.prototype.__cache__ = {};

Module["b2World"] = b2World;

b2World.prototype["GetJointCount"] = (function() {
  return _emscripten_bind_b2World__GetJointCount_p0(this.ptr);
});

b2World.prototype["Step"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2World__Step_p3(this.ptr, arg0, arg1, arg2);
});

b2World.prototype["ClearForces"] = (function() {
  _emscripten_bind_b2World__ClearForces_p0(this.ptr);
});

b2World.prototype["GetWarmStarting"] = (function() {
  return _emscripten_bind_b2World__GetWarmStarting_p0(this.ptr);
});

b2World.prototype["SetAllowSleeping"] = (function(arg0) {
  _emscripten_bind_b2World__SetAllowSleeping_p1(this.ptr, arg0);
});

b2World.prototype["DestroyBody"] = (function(arg0) {
  _emscripten_bind_b2World__DestroyBody_p1(this.ptr, arg0.ptr);
});

b2World.prototype["GetAllowSleeping"] = (function() {
  return _emscripten_bind_b2World__GetAllowSleeping_p0(this.ptr);
});

b2World.prototype["CreateJoint"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2World__CreateJoint_p1(this.ptr, arg0.ptr), Module.b2Joint);
});

b2World.prototype["GetProxyCount"] = (function() {
  return _emscripten_bind_b2World__GetProxyCount_p0(this.ptr);
});

b2World.prototype["RayCast"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2World__RayCast_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
});

b2World.prototype["IsLocked"] = (function() {
  return _emscripten_bind_b2World__IsLocked_p0(this.ptr);
});

b2World.prototype["GetContactList"] = (function() {
  return wrapPointer(_emscripten_bind_b2World__GetContactList_p0(this.ptr), Module.b2Contact);
});

b2World.prototype["SetDebugDraw"] = (function(arg0) {
  _emscripten_bind_b2World__SetDebugDraw_p1(this.ptr, arg0.ptr);
});

b2World.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2World____destroy___p0(this.ptr);
});

b2World.prototype["Dump"] = (function() {
  _emscripten_bind_b2World__Dump_p0(this.ptr);
});

b2World.prototype["SetAutoClearForces"] = (function(arg0) {
  _emscripten_bind_b2World__SetAutoClearForces_p1(this.ptr, arg0);
});

b2World.prototype["GetGravity"] = (function() {
  return wrapPointer(_emscripten_bind_b2World__GetGravity_p0(this.ptr), Module.b2Vec2);
});

b2World.prototype["GetContactCount"] = (function() {
  return _emscripten_bind_b2World__GetContactCount_p0(this.ptr);
});

b2World.prototype["SetWarmStarting"] = (function(arg0) {
  _emscripten_bind_b2World__SetWarmStarting_p1(this.ptr, arg0);
});

b2World.prototype["SetContactFilter"] = (function(arg0) {
  _emscripten_bind_b2World__SetContactFilter_p1(this.ptr, arg0.ptr);
});

b2CircleShape.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2CircleShape____destroy___p0(this.ptr);
});

b2CircleShape.prototype["GetType"] = (function() {
  return _emscripten_bind_b2CircleShape__GetType_p0(this.ptr);
});

b2CircleShape.prototype["ComputeMass"] = (function(arg0, arg1) {
  _emscripten_bind_b2CircleShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
});

b2CircleShape.prototype["set_m_radius"] = (function(arg0) {
  _emscripten_bind_b2CircleShape__set_m_radius_p1(this.ptr, arg0);
});

b2CircleShape.prototype["get_m_radius"] = (function() {
  return _emscripten_bind_b2CircleShape__get_m_radius_p0(this.ptr);
});

b2CircleShape.prototype["GetVertex"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2CircleShape__GetVertex_p1(this.ptr, arg0), Module.b2Vec2);
});

b2CircleShape.prototype["Clone"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2CircleShape__Clone_p1(this.ptr, arg0.ptr), Module.b2Shape);
});

b2CircleShape.prototype["GetSupportVertex"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2CircleShape__GetSupportVertex_p1(this.ptr, arg0.ptr), Module.b2Vec2);
});

b2CircleShape.prototype["RayCast"] = (function(arg0, arg1, arg2, arg3) {
  return _emscripten_bind_b2CircleShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
});

b2CircleShape.prototype["ComputeAABB"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2CircleShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
});

b2CircleShape.prototype["GetVertexCount"] = (function() {
  return _emscripten_bind_b2CircleShape__GetVertexCount_p0(this.ptr);
});

b2CircleShape.prototype["GetChildCount"] = (function() {
  return _emscripten_bind_b2CircleShape__GetChildCount_p0(this.ptr);
});

b2CircleShape.prototype["TestPoint"] = (function(arg0, arg1) {
  return _emscripten_bind_b2CircleShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
});

function b2CircleShape() {
  this.ptr = _emscripten_bind_b2CircleShape__b2CircleShape_p0();
  b2CircleShape.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2CircleShape;
}

b2CircleShape.prototype.__cache__ = {};

Module["b2CircleShape"] = b2CircleShape;

b2CircleShape.prototype["GetSupport"] = (function(arg0) {
  return _emscripten_bind_b2CircleShape__GetSupport_p1(this.ptr, arg0.ptr);
});

b2CircleShape.prototype["set_m_p"] = (function(arg0) {
  _emscripten_bind_b2CircleShape__set_m_p_p1(this.ptr, arg0.ptr);
});

b2CircleShape.prototype["get_m_p"] = (function() {
  return wrapPointer(_emscripten_bind_b2CircleShape__get_m_p_p0(this.ptr), Module.b2Vec2);
});

function b2Draw() {
  throw "b2Draw is abstract!";
}

b2Draw.prototype.__cache__ = {};

Module["b2Draw"] = b2Draw;

b2Draw.prototype["AppendFlags"] = (function(arg0) {
  _emscripten_bind_b2Draw__AppendFlags_p1(this.ptr, arg0);
});

b2Draw.prototype["DrawTransform"] = (function(arg0) {
  _emscripten_bind_b2Draw__DrawTransform_p1(this.ptr, arg0.ptr);
});

b2Draw.prototype["ClearFlags"] = (function(arg0) {
  _emscripten_bind_b2Draw__ClearFlags_p1(this.ptr, arg0);
});

b2Draw.prototype["DrawPolygon"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2Draw__DrawPolygon_p3(this.ptr, arg0.ptr, arg1, arg2.ptr);
});

b2Draw.prototype["DrawSolidCircle"] = (function(arg0, arg1, arg2, arg3) {
  _emscripten_bind_b2Draw__DrawSolidCircle_p4(this.ptr, arg0.ptr, arg1, arg2.ptr, arg3.ptr);
});

b2Draw.prototype["DrawSolidPolygon"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2Draw__DrawSolidPolygon_p3(this.ptr, arg0.ptr, arg1, arg2.ptr);
});

b2Draw.prototype["DrawCircle"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2Draw__DrawCircle_p3(this.ptr, arg0.ptr, arg1, arg2.ptr);
});

b2Draw.prototype["SetFlags"] = (function(arg0) {
  _emscripten_bind_b2Draw__SetFlags_p1(this.ptr, arg0);
});

b2Draw.prototype["DrawSegment"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2Draw__DrawSegment_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
});

b2Draw.prototype["GetFlags"] = (function() {
  return _emscripten_bind_b2Draw__GetFlags_p0(this.ptr);
});

function b2Joint() {
  throw "b2Joint is abstract!";
}

b2Joint.prototype.__cache__ = {};

Module["b2Joint"] = b2Joint;

b2Joint.prototype["GetNext"] = (function() {
  return wrapPointer(_emscripten_bind_b2Joint__GetNext_p0(this.ptr), Module.b2Joint);
});

b2Joint.prototype["GetBodyA"] = (function() {
  return wrapPointer(_emscripten_bind_b2Joint__GetBodyA_p0(this.ptr), Module.b2Body);
});

b2Joint.prototype["GetBodyB"] = (function() {
  return wrapPointer(_emscripten_bind_b2Joint__GetBodyB_p0(this.ptr), Module.b2Body);
});

b2Joint.prototype["GetReactionTorque"] = (function(arg0) {
  return _emscripten_bind_b2Joint__GetReactionTorque_p1(this.ptr, arg0);
});

b2Joint.prototype["GetAnchorA"] = (function() {
  return wrapPointer(_emscripten_bind_b2Joint__GetAnchorA_p0(this.ptr), Module.b2Vec2);
});

b2Joint.prototype["GetUserData"] = (function() {
  return _emscripten_bind_b2Joint__GetUserData_p0(this.ptr);
});

b2Joint.prototype["GetType"] = (function() {
  return _emscripten_bind_b2Joint__GetType_p0(this.ptr);
});

b2Joint.prototype["SetUserData"] = (function(arg0) {
  _emscripten_bind_b2Joint__SetUserData_p1(this.ptr, arg0);
});

b2Joint.prototype["GetCollideConnected"] = (function() {
  return _emscripten_bind_b2Joint__GetCollideConnected_p0(this.ptr);
});

b2Joint.prototype["Dump"] = (function() {
  _emscripten_bind_b2Joint__Dump_p0(this.ptr);
});

b2Joint.prototype["GetAnchorB"] = (function() {
  return wrapPointer(_emscripten_bind_b2Joint__GetAnchorB_p0(this.ptr), Module.b2Vec2);
});

b2Joint.prototype["GetReactionForce"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2Joint__GetReactionForce_p1(this.ptr, arg0), Module.b2Vec2);
});

b2Joint.prototype["IsActive"] = (function() {
  return _emscripten_bind_b2Joint__IsActive_p0(this.ptr);
});

function b2RayCastCallback() {
  throw "b2RayCastCallback is abstract!";
}

b2RayCastCallback.prototype.__cache__ = {};

Module["b2RayCastCallback"] = b2RayCastCallback;

b2RayCastCallback.prototype["ReportFixture"] = (function(arg0, arg1, arg2, arg3) {
  return _emscripten_bind_b2RayCastCallback__ReportFixture_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
});

b2DynamicTree.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2DynamicTree____destroy___p0(this.ptr);
});

function b2DynamicTree() {
  this.ptr = _emscripten_bind_b2DynamicTree__b2DynamicTree_p0();
  b2DynamicTree.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2DynamicTree;
}

b2DynamicTree.prototype.__cache__ = {};

Module["b2DynamicTree"] = b2DynamicTree;

b2DynamicTree.prototype["GetFatAABB"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2DynamicTree__GetFatAABB_p1(this.ptr, arg0), Module.b2AABB);
});

b2DynamicTree.prototype["GetUserData"] = (function(arg0) {
  return _emscripten_bind_b2DynamicTree__GetUserData_p1(this.ptr, arg0);
});

b2DynamicTree.prototype["GetMaxBalance"] = (function() {
  return _emscripten_bind_b2DynamicTree__GetMaxBalance_p0(this.ptr);
});

b2DynamicTree.prototype["GetHeight"] = (function() {
  return _emscripten_bind_b2DynamicTree__GetHeight_p0(this.ptr);
});

b2DynamicTree.prototype["GetAreaRatio"] = (function() {
  return _emscripten_bind_b2DynamicTree__GetAreaRatio_p0(this.ptr);
});

b2DynamicTree.prototype["RebuildBottomUp"] = (function() {
  _emscripten_bind_b2DynamicTree__RebuildBottomUp_p0(this.ptr);
});

b2DynamicTree.prototype["CreateProxy"] = (function(arg0, arg1) {
  return _emscripten_bind_b2DynamicTree__CreateProxy_p2(this.ptr, arg0.ptr, arg1);
});

b2DynamicTree.prototype["MoveProxy"] = (function(arg0, arg1, arg2) {
  return _emscripten_bind_b2DynamicTree__MoveProxy_p3(this.ptr, arg0, arg1.ptr, arg2.ptr);
});

b2DynamicTree.prototype["Validate"] = (function() {
  _emscripten_bind_b2DynamicTree__Validate_p0(this.ptr);
});

b2DynamicTree.prototype["DestroyProxy"] = (function(arg0) {
  _emscripten_bind_b2DynamicTree__DestroyProxy_p1(this.ptr, arg0);
});

function b2Timer() {
  this.ptr = _emscripten_bind_b2Timer__b2Timer_p0();
  b2Timer.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Timer;
}

b2Timer.prototype.__cache__ = {};

Module["b2Timer"] = b2Timer;

b2Timer.prototype["Reset"] = (function() {
  _emscripten_bind_b2Timer__Reset_p0(this.ptr);
});

b2Timer.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2Timer____destroy___p0(this.ptr);
});

b2Timer.prototype["GetMilliseconds"] = (function() {
  return _emscripten_bind_b2Timer__GetMilliseconds_p0(this.ptr);
});

b2ChainShape.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2ChainShape____destroy___p0(this.ptr);
});

b2ChainShape.prototype["GetType"] = (function() {
  return _emscripten_bind_b2ChainShape__GetType_p0(this.ptr);
});

b2ChainShape.prototype["CreateChain"] = (function(arg0, arg1) {
  _emscripten_bind_b2ChainShape__CreateChain_p2(this.ptr, arg0.ptr, arg1);
});

b2ChainShape.prototype["set_m_radius"] = (function(arg0) {
  _emscripten_bind_b2ChainShape__set_m_radius_p1(this.ptr, arg0);
});

b2ChainShape.prototype["get_m_radius"] = (function() {
  return _emscripten_bind_b2ChainShape__get_m_radius_p0(this.ptr);
});

b2ChainShape.prototype["get_m_vertices"] = (function() {
  return wrapPointer(_emscripten_bind_b2ChainShape__get_m_vertices_p0(this.ptr), Module.b2Vec2);
});

b2ChainShape.prototype["ComputeMass"] = (function(arg0, arg1) {
  _emscripten_bind_b2ChainShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
});

b2ChainShape.prototype["Clone"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2ChainShape__Clone_p1(this.ptr, arg0.ptr), Module.b2Shape);
});

b2ChainShape.prototype["get_m_count"] = (function() {
  return _emscripten_bind_b2ChainShape__get_m_count_p0(this.ptr);
});

b2ChainShape.prototype["GetChildEdge"] = (function(arg0, arg1) {
  _emscripten_bind_b2ChainShape__GetChildEdge_p2(this.ptr, arg0.ptr, arg1);
});

function b2ChainShape() {
  this.ptr = _emscripten_bind_b2ChainShape__b2ChainShape_p0();
  b2ChainShape.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2ChainShape;
}

b2ChainShape.prototype.__cache__ = {};

Module["b2ChainShape"] = b2ChainShape;

b2ChainShape.prototype["ComputeAABB"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2ChainShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
});

b2ChainShape.prototype["RayCast"] = (function(arg0, arg1, arg2, arg3) {
  return _emscripten_bind_b2ChainShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
});

b2ChainShape.prototype["GetChildCount"] = (function() {
  return _emscripten_bind_b2ChainShape__GetChildCount_p0(this.ptr);
});

b2ChainShape.prototype["TestPoint"] = (function(arg0, arg1) {
  return _emscripten_bind_b2ChainShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
});

b2ChainShape.prototype["SetPrevVertex"] = (function(arg0) {
  _emscripten_bind_b2ChainShape__SetPrevVertex_p1(this.ptr, arg0.ptr);
});

b2ChainShape.prototype["CreateLoop"] = (function(arg0, arg1) {
  _emscripten_bind_b2ChainShape__CreateLoop_p2(this.ptr, arg0.ptr, arg1);
});

b2ChainShape.prototype["set_m_vertices"] = (function(arg0) {
  _emscripten_bind_b2ChainShape__set_m_vertices_p1(this.ptr, arg0.ptr);
});

b2ChainShape.prototype["SetNextVertex"] = (function(arg0) {
  _emscripten_bind_b2ChainShape__SetNextVertex_p1(this.ptr, arg0.ptr);
});

b2ChainShape.prototype["set_m_count"] = (function(arg0) {
  _emscripten_bind_b2ChainShape__set_m_count_p1(this.ptr, arg0);
});

function b2QueryCallback() {
  throw "b2QueryCallback is abstract!";
}

b2QueryCallback.prototype.__cache__ = {};

Module["b2QueryCallback"] = b2QueryCallback;

b2QueryCallback.prototype["ReportFixture"] = (function(arg0) {
  return _emscripten_bind_b2QueryCallback__ReportFixture_p1(this.ptr, arg0.ptr);
});

b2BlockAllocator.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2BlockAllocator____destroy___p0(this.ptr);
});

b2BlockAllocator.prototype["Clear"] = (function() {
  _emscripten_bind_b2BlockAllocator__Clear_p0(this.ptr);
});

b2BlockAllocator.prototype["Free"] = (function(arg0, arg1) {
  _emscripten_bind_b2BlockAllocator__Free_p2(this.ptr, arg0, arg1);
});

b2BlockAllocator.prototype["Allocate"] = (function(arg0) {
  return _emscripten_bind_b2BlockAllocator__Allocate_p1(this.ptr, arg0);
});

function b2BlockAllocator() {
  this.ptr = _emscripten_bind_b2BlockAllocator__b2BlockAllocator_p0();
  b2BlockAllocator.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2BlockAllocator;
}

b2BlockAllocator.prototype.__cache__ = {};

Module["b2BlockAllocator"] = b2BlockAllocator;

b2PolygonShape.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2PolygonShape____destroy___p0(this.ptr);
});

b2PolygonShape.prototype["Set"] = (function(arg0, arg1) {
  _emscripten_bind_b2PolygonShape__Set_p2(this.ptr, arg0.ptr, arg1);
});

b2PolygonShape.prototype["ComputeMass"] = (function(arg0, arg1) {
  _emscripten_bind_b2PolygonShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
});

b2PolygonShape.prototype["set_m_radius"] = (function(arg0) {
  _emscripten_bind_b2PolygonShape__set_m_radius_p1(this.ptr, arg0);
});

b2PolygonShape.prototype["get_m_radius"] = (function() {
  return _emscripten_bind_b2PolygonShape__get_m_radius_p0(this.ptr);
});

b2PolygonShape.prototype["Clone"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2PolygonShape__Clone_p1(this.ptr, arg0.ptr), Module.b2Shape);
});

b2PolygonShape.prototype["GetVertex"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2PolygonShape__GetVertex_p1(this.ptr, arg0), Module.b2Vec2);
});

b2PolygonShape.prototype["RayCast"] = (function(arg0, arg1, arg2, arg3) {
  return _emscripten_bind_b2PolygonShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
});

b2PolygonShape.prototype["SetAsBox"] = (function(arg0, arg1, arg2, arg3) {
  if (arg2 === undefined) _emscripten_bind_b2PolygonShape__SetAsBox_p2(this.ptr, arg0, arg1); else _emscripten_bind_b2PolygonShape__SetAsBox_p4(this.ptr, arg0, arg1, arg2.ptr, arg3);
});

b2PolygonShape.prototype["set_m_centroid"] = (function(arg0) {
  _emscripten_bind_b2PolygonShape__set_m_centroid_p1(this.ptr, arg0.ptr);
});

b2PolygonShape.prototype["ComputeAABB"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2PolygonShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
});

b2PolygonShape.prototype["set_m_vertexCount"] = (function(arg0) {
  _emscripten_bind_b2PolygonShape__set_m_vertexCount_p1(this.ptr, arg0);
});

b2PolygonShape.prototype["GetVertexCount"] = (function() {
  return _emscripten_bind_b2PolygonShape__GetVertexCount_p0(this.ptr);
});

b2PolygonShape.prototype["GetChildCount"] = (function() {
  return _emscripten_bind_b2PolygonShape__GetChildCount_p0(this.ptr);
});

b2PolygonShape.prototype["TestPoint"] = (function(arg0, arg1) {
  return _emscripten_bind_b2PolygonShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
});

b2PolygonShape.prototype["GetType"] = (function() {
  return _emscripten_bind_b2PolygonShape__GetType_p0(this.ptr);
});

function b2PolygonShape() {
  this.ptr = _emscripten_bind_b2PolygonShape__b2PolygonShape_p0();
  b2PolygonShape.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2PolygonShape;
}

b2PolygonShape.prototype.__cache__ = {};

Module["b2PolygonShape"] = b2PolygonShape;

b2PolygonShape.prototype["get_m_vertexCount"] = (function() {
  return _emscripten_bind_b2PolygonShape__get_m_vertexCount_p0(this.ptr);
});

b2PolygonShape.prototype["get_m_centroid"] = (function() {
  return wrapPointer(_emscripten_bind_b2PolygonShape__get_m_centroid_p0(this.ptr), Module.b2Vec2);
});

b2EdgeShape.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2EdgeShape____destroy___p0(this.ptr);
});

b2EdgeShape.prototype["Set"] = (function(arg0, arg1) {
  _emscripten_bind_b2EdgeShape__Set_p2(this.ptr, arg0.ptr, arg1.ptr);
});

b2EdgeShape.prototype["ComputeMass"] = (function(arg0, arg1) {
  _emscripten_bind_b2EdgeShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
});

b2EdgeShape.prototype["set_m_radius"] = (function(arg0) {
  _emscripten_bind_b2EdgeShape__set_m_radius_p1(this.ptr, arg0);
});

b2EdgeShape.prototype["get_m_radius"] = (function() {
  return _emscripten_bind_b2EdgeShape__get_m_radius_p0(this.ptr);
});

b2EdgeShape.prototype["Clone"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2EdgeShape__Clone_p1(this.ptr, arg0.ptr), Module.b2Shape);
});

b2EdgeShape.prototype["GetType"] = (function() {
  return _emscripten_bind_b2EdgeShape__GetType_p0(this.ptr);
});

b2EdgeShape.prototype["RayCast"] = (function(arg0, arg1, arg2, arg3) {
  return _emscripten_bind_b2EdgeShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
});

b2EdgeShape.prototype["ComputeAABB"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2EdgeShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
});

b2EdgeShape.prototype["GetChildCount"] = (function() {
  return _emscripten_bind_b2EdgeShape__GetChildCount_p0(this.ptr);
});

b2EdgeShape.prototype["TestPoint"] = (function(arg0, arg1) {
  return _emscripten_bind_b2EdgeShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
});

function b2EdgeShape() {
  this.ptr = _emscripten_bind_b2EdgeShape__b2EdgeShape_p0();
  b2EdgeShape.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2EdgeShape;
}

b2EdgeShape.prototype.__cache__ = {};

Module["b2EdgeShape"] = b2EdgeShape;

function b2Contact() {
  throw "b2Contact is abstract!";
}

b2Contact.prototype.__cache__ = {};

Module["b2Contact"] = b2Contact;

b2Contact.prototype["GetNext"] = (function() {
  return wrapPointer(_emscripten_bind_b2Contact__GetNext_p0(this.ptr), Module.b2Contact);
});

b2Contact.prototype["SetEnabled"] = (function(arg0) {
  _emscripten_bind_b2Contact__SetEnabled_p1(this.ptr, arg0);
});

b2Contact.prototype["GetWorldManifold"] = (function(arg0) {
  _emscripten_bind_b2Contact__GetWorldManifold_p1(this.ptr, arg0.ptr);
});

b2Contact.prototype["GetRestitution"] = (function() {
  return _emscripten_bind_b2Contact__GetRestitution_p0(this.ptr);
});

b2Contact.prototype["ResetFriction"] = (function() {
  _emscripten_bind_b2Contact__ResetFriction_p0(this.ptr);
});

b2Contact.prototype["GetFriction"] = (function() {
  return _emscripten_bind_b2Contact__GetFriction_p0(this.ptr);
});

b2Contact.prototype["IsTouching"] = (function() {
  return _emscripten_bind_b2Contact__IsTouching_p0(this.ptr);
});

b2Contact.prototype["IsEnabled"] = (function() {
  return _emscripten_bind_b2Contact__IsEnabled_p0(this.ptr);
});

b2Contact.prototype["GetFixtureB"] = (function() {
  return wrapPointer(_emscripten_bind_b2Contact__GetFixtureB_p0(this.ptr), Module.b2Fixture);
});

b2Contact.prototype["SetFriction"] = (function(arg0) {
  _emscripten_bind_b2Contact__SetFriction_p1(this.ptr, arg0);
});

b2Contact.prototype["GetFixtureA"] = (function() {
  return wrapPointer(_emscripten_bind_b2Contact__GetFixtureA_p0(this.ptr), Module.b2Fixture);
});

b2Contact.prototype["GetChildIndexA"] = (function() {
  return _emscripten_bind_b2Contact__GetChildIndexA_p0(this.ptr);
});

b2Contact.prototype["GetChildIndexB"] = (function() {
  return _emscripten_bind_b2Contact__GetChildIndexB_p0(this.ptr);
});

b2Contact.prototype["Evaluate"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2Contact__Evaluate_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
});

b2Contact.prototype["SetRestitution"] = (function(arg0) {
  _emscripten_bind_b2Contact__SetRestitution_p1(this.ptr, arg0);
});

b2Contact.prototype["GetManifold"] = (function() {
  return wrapPointer(_emscripten_bind_b2Contact__GetManifold_p0(this.ptr), Module.b2Manifold);
});

b2Contact.prototype["ResetRestitution"] = (function() {
  _emscripten_bind_b2Contact__ResetRestitution_p0(this.ptr);
});

function b2Shape() {
  throw "b2Shape is abstract!";
}

b2Shape.prototype.__cache__ = {};

Module["b2Shape"] = b2Shape;

b2Shape.prototype["get_m_radius"] = (function() {
  return _emscripten_bind_b2Shape__get_m_radius_p0(this.ptr);
});

b2Shape.prototype["ComputeMass"] = (function(arg0, arg1) {
  _emscripten_bind_b2Shape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
});

b2Shape.prototype["set_m_radius"] = (function(arg0) {
  _emscripten_bind_b2Shape__set_m_radius_p1(this.ptr, arg0);
});

b2Shape.prototype["Clone"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2Shape__Clone_p1(this.ptr, arg0.ptr), Module.b2Shape);
});

b2Shape.prototype["GetType"] = (function() {
  return _emscripten_bind_b2Shape__GetType_p0(this.ptr);
});

b2Shape.prototype["RayCast"] = (function(arg0, arg1, arg2, arg3) {
  return _emscripten_bind_b2Shape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
});

b2Shape.prototype["ComputeAABB"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2Shape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
});

b2Shape.prototype["GetChildCount"] = (function() {
  return _emscripten_bind_b2Shape__GetChildCount_p0(this.ptr);
});

b2Shape.prototype["TestPoint"] = (function(arg0, arg1) {
  return _emscripten_bind_b2Shape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
});

function b2Body() {
  throw "b2Body is abstract!";
}

b2Body.prototype.__cache__ = {};

Module["b2Body"] = b2Body;

b2Body.prototype["GetAngle"] = (function() {
  return _emscripten_bind_b2Body__GetAngle_p0(this.ptr);
});

b2Body.prototype["GetUserData"] = (function() {
  return _emscripten_bind_b2Body__GetUserData_p0(this.ptr);
});

b2Body.prototype["IsSleepingAllowed"] = (function() {
  return _emscripten_bind_b2Body__IsSleepingAllowed_p0(this.ptr);
});

b2Body.prototype["SetAngularDamping"] = (function(arg0) {
  _emscripten_bind_b2Body__SetAngularDamping_p1(this.ptr, arg0);
});

b2Body.prototype["SetActive"] = (function(arg0) {
  _emscripten_bind_b2Body__SetActive_p1(this.ptr, arg0);
});

b2Body.prototype["SetGravityScale"] = (function(arg0) {
  _emscripten_bind_b2Body__SetGravityScale_p1(this.ptr, arg0);
});

b2Body.prototype["SetUserData"] = (function(arg0) {
  _emscripten_bind_b2Body__SetUserData_p1(this.ptr, arg0);
});

b2Body.prototype["GetAngularVelocity"] = (function() {
  return _emscripten_bind_b2Body__GetAngularVelocity_p0(this.ptr);
});

b2Body.prototype["GetFixtureList"] = (function() {
  return wrapPointer(_emscripten_bind_b2Body__GetFixtureList_p0(this.ptr), Module.b2Fixture);
});

b2Body.prototype["ApplyForce"] = (function(arg0, arg1) {
  _emscripten_bind_b2Body__ApplyForce_p2(this.ptr, arg0.ptr, arg1.ptr);
});

b2Body.prototype["GetLocalPoint"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2Body__GetLocalPoint_p1(this.ptr, arg0.ptr), Module.b2Vec2);
});

b2Body.prototype["SetLinearVelocity"] = (function(arg0) {
  _emscripten_bind_b2Body__SetLinearVelocity_p1(this.ptr, arg0.ptr);
});

b2Body.prototype["GetJointList"] = (function() {
  return wrapPointer(_emscripten_bind_b2Body__GetJointList_p0(this.ptr), Module.b2JointEdge);
});

b2Body.prototype["GetLinearVelocity"] = (function() {
  return wrapPointer(_emscripten_bind_b2Body__GetLinearVelocity_p0(this.ptr), Module.b2Vec2);
});

b2Body.prototype["GetNext"] = (function() {
  return wrapPointer(_emscripten_bind_b2Body__GetNext_p0(this.ptr), Module.b2Body);
});

b2Body.prototype["SetSleepingAllowed"] = (function(arg0) {
  _emscripten_bind_b2Body__SetSleepingAllowed_p1(this.ptr, arg0);
});

b2Body.prototype["SetTransform"] = (function(arg0, arg1) {
  _emscripten_bind_b2Body__SetTransform_p2(this.ptr, arg0.ptr, arg1);
});

b2Body.prototype["GetMass"] = (function() {
  return _emscripten_bind_b2Body__GetMass_p0(this.ptr);
});

b2Body.prototype["SetAngularVelocity"] = (function(arg0) {
  _emscripten_bind_b2Body__SetAngularVelocity_p1(this.ptr, arg0);
});

b2Body.prototype["GetMassData"] = (function(arg0) {
  _emscripten_bind_b2Body__GetMassData_p1(this.ptr, arg0.ptr);
});

b2Body.prototype["GetLinearVelocityFromWorldPoint"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1(this.ptr, arg0.ptr), Module.b2Vec2);
});

b2Body.prototype["ResetMassData"] = (function() {
  _emscripten_bind_b2Body__ResetMassData_p0(this.ptr);
});

b2Body.prototype["ApplyForceToCenter"] = (function(arg0) {
  _emscripten_bind_b2Body__ApplyForceToCenter_p1(this.ptr, arg0.ptr);
});

b2Body.prototype["ApplyTorque"] = (function(arg0) {
  _emscripten_bind_b2Body__ApplyTorque_p1(this.ptr, arg0);
});

b2Body.prototype["IsAwake"] = (function() {
  return _emscripten_bind_b2Body__IsAwake_p0(this.ptr);
});

b2Body.prototype["SetType"] = (function(arg0) {
  _emscripten_bind_b2Body__SetType_p1(this.ptr, arg0);
});

b2Body.prototype["CreateFixture"] = (function(arg0, arg1) {
  if (arg1 === undefined) return wrapPointer(_emscripten_bind_b2Body__CreateFixture_p1(this.ptr, arg0.ptr), Module.b2Fixture); else return wrapPointer(_emscripten_bind_b2Body__CreateFixture_p2(this.ptr, arg0.ptr, arg1), Module.b2Fixture);
});

b2Body.prototype["SetMassData"] = (function(arg0) {
  _emscripten_bind_b2Body__SetMassData_p1(this.ptr, arg0.ptr);
});

b2Body.prototype["GetTransform"] = (function() {
  return wrapPointer(_emscripten_bind_b2Body__GetTransform_p0(this.ptr), Module.b2Transform);
});

b2Body.prototype["GetWorldCenter"] = (function() {
  return wrapPointer(_emscripten_bind_b2Body__GetWorldCenter_p0(this.ptr), Module.b2Vec2);
});

b2Body.prototype["GetAngularDamping"] = (function() {
  return _emscripten_bind_b2Body__GetAngularDamping_p0(this.ptr);
});

b2Body.prototype["ApplyLinearImpulse"] = (function(arg0, arg1) {
  _emscripten_bind_b2Body__ApplyLinearImpulse_p2(this.ptr, arg0.ptr, arg1.ptr);
});

b2Body.prototype["IsFixedRotation"] = (function() {
  return _emscripten_bind_b2Body__IsFixedRotation_p0(this.ptr);
});

b2Body.prototype["GetLocalCenter"] = (function() {
  return wrapPointer(_emscripten_bind_b2Body__GetLocalCenter_p0(this.ptr), Module.b2Vec2);
});

b2Body.prototype["GetWorldVector"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2Body__GetWorldVector_p1(this.ptr, arg0.ptr), Module.b2Vec2);
});

b2Body.prototype["GetLinearVelocityFromLocalPoint"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1(this.ptr, arg0.ptr), Module.b2Vec2);
});

b2Body.prototype["GetContactList"] = (function() {
  return wrapPointer(_emscripten_bind_b2Body__GetContactList_p0(this.ptr), Module.b2ContactEdge);
});

b2Body.prototype["GetWorldPoint"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2Body__GetWorldPoint_p1(this.ptr, arg0.ptr), Module.b2Vec2);
});

b2Body.prototype["SetAwake"] = (function(arg0) {
  _emscripten_bind_b2Body__SetAwake_p1(this.ptr, arg0);
});

b2Body.prototype["GetLinearDamping"] = (function() {
  return _emscripten_bind_b2Body__GetLinearDamping_p0(this.ptr);
});

b2Body.prototype["IsBullet"] = (function() {
  return _emscripten_bind_b2Body__IsBullet_p0(this.ptr);
});

b2Body.prototype["GetWorld"] = (function() {
  return wrapPointer(_emscripten_bind_b2Body__GetWorld_p0(this.ptr), Module.b2World);
});

b2Body.prototype["GetLocalVector"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2Body__GetLocalVector_p1(this.ptr, arg0.ptr), Module.b2Vec2);
});

b2Body.prototype["SetLinearDamping"] = (function(arg0) {
  _emscripten_bind_b2Body__SetLinearDamping_p1(this.ptr, arg0);
});

b2Body.prototype["Dump"] = (function() {
  _emscripten_bind_b2Body__Dump_p0(this.ptr);
});

b2Body.prototype["SetBullet"] = (function(arg0) {
  _emscripten_bind_b2Body__SetBullet_p1(this.ptr, arg0);
});

b2Body.prototype["GetType"] = (function() {
  return _emscripten_bind_b2Body__GetType_p0(this.ptr);
});

b2Body.prototype["GetGravityScale"] = (function() {
  return _emscripten_bind_b2Body__GetGravityScale_p0(this.ptr);
});

b2Body.prototype["DestroyFixture"] = (function(arg0) {
  _emscripten_bind_b2Body__DestroyFixture_p1(this.ptr, arg0.ptr);
});

b2Body.prototype["GetInertia"] = (function() {
  return _emscripten_bind_b2Body__GetInertia_p0(this.ptr);
});

b2Body.prototype["IsActive"] = (function() {
  return _emscripten_bind_b2Body__IsActive_p0(this.ptr);
});

b2Body.prototype["SetFixedRotation"] = (function(arg0) {
  _emscripten_bind_b2Body__SetFixedRotation_p1(this.ptr, arg0);
});

b2Body.prototype["ApplyAngularImpulse"] = (function(arg0) {
  _emscripten_bind_b2Body__ApplyAngularImpulse_p1(this.ptr, arg0);
});

b2Body.prototype["GetPosition"] = (function() {
  return wrapPointer(_emscripten_bind_b2Body__GetPosition_p0(this.ptr), Module.b2Vec2);
});

b2StackAllocator.prototype["GetMaxAllocation"] = (function() {
  return _emscripten_bind_b2StackAllocator__GetMaxAllocation_p0(this.ptr);
});

b2StackAllocator.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2StackAllocator____destroy___p0(this.ptr);
});

function b2StackAllocator() {
  this.ptr = _emscripten_bind_b2StackAllocator__b2StackAllocator_p0();
  b2StackAllocator.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2StackAllocator;
}

b2StackAllocator.prototype.__cache__ = {};

Module["b2StackAllocator"] = b2StackAllocator;

b2StackAllocator.prototype["Allocate"] = (function(arg0) {
  return _emscripten_bind_b2StackAllocator__Allocate_p1(this.ptr, arg0);
});

b2StackAllocator.prototype["Free"] = (function(arg0) {
  _emscripten_bind_b2StackAllocator__Free_p1(this.ptr, arg0);
});

function b2DestructionListener() {
  throw "b2DestructionListener is abstract!";
}

b2DestructionListener.prototype.__cache__ = {};

Module["b2DestructionListener"] = b2DestructionListener;

b2DestructionListener.prototype["SayGoodbye"] = (function(arg0) {
  _emscripten_bind_b2DestructionListener__SayGoodbye_p1(this.ptr, arg0.ptr);
});

b2Filter.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2Filter____destroy___p0(this.ptr);
});

b2Filter.prototype["set_maskBits"] = (function(arg0) {
  _emscripten_bind_b2Filter__set_maskBits_p1(this.ptr, arg0);
});

b2Filter.prototype["set_categoryBits"] = (function(arg0) {
  _emscripten_bind_b2Filter__set_categoryBits_p1(this.ptr, arg0);
});

b2Filter.prototype["get_groupIndex"] = (function() {
  return _emscripten_bind_b2Filter__get_groupIndex_p0(this.ptr);
});

b2Filter.prototype["set_groupIndex"] = (function(arg0) {
  _emscripten_bind_b2Filter__set_groupIndex_p1(this.ptr, arg0);
});

b2Filter.prototype["get_maskBits"] = (function() {
  return _emscripten_bind_b2Filter__get_maskBits_p0(this.ptr);
});

function b2Filter() {
  this.ptr = _emscripten_bind_b2Filter__b2Filter_p0();
  b2Filter.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Filter;
}

b2Filter.prototype.__cache__ = {};

Module["b2Filter"] = b2Filter;

b2Filter.prototype["get_categoryBits"] = (function() {
  return _emscripten_bind_b2Filter__get_categoryBits_p0(this.ptr);
});

b2FrictionJointDef.prototype["set_localAnchorA"] = (function(arg0) {
  _emscripten_bind_b2FrictionJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
});

b2FrictionJointDef.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2FrictionJointDef____destroy___p0(this.ptr);
});

b2FrictionJointDef.prototype["set_localAnchorB"] = (function(arg0) {
  _emscripten_bind_b2FrictionJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
});

b2FrictionJointDef.prototype["get_maxForce"] = (function() {
  return _emscripten_bind_b2FrictionJointDef__get_maxForce_p0(this.ptr);
});

function b2FrictionJointDef() {
  this.ptr = _emscripten_bind_b2FrictionJointDef__b2FrictionJointDef_p0();
  b2FrictionJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2FrictionJointDef;
}

b2FrictionJointDef.prototype.__cache__ = {};

Module["b2FrictionJointDef"] = b2FrictionJointDef;

b2FrictionJointDef.prototype["get_localAnchorA"] = (function() {
  return wrapPointer(_emscripten_bind_b2FrictionJointDef__get_localAnchorA_p0(this.ptr), Module.b2Vec2);
});

b2FrictionJointDef.prototype["set_maxForce"] = (function(arg0) {
  _emscripten_bind_b2FrictionJointDef__set_maxForce_p1(this.ptr, arg0);
});

b2FrictionJointDef.prototype["get_localAnchorB"] = (function() {
  return wrapPointer(_emscripten_bind_b2FrictionJointDef__get_localAnchorB_p0(this.ptr), Module.b2Vec2);
});

b2FrictionJointDef.prototype["set_maxTorque"] = (function(arg0) {
  _emscripten_bind_b2FrictionJointDef__set_maxTorque_p1(this.ptr, arg0);
});

b2FrictionJointDef.prototype["get_maxTorque"] = (function() {
  return _emscripten_bind_b2FrictionJointDef__get_maxTorque_p0(this.ptr);
});

b2FrictionJointDef.prototype["Initialize"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2FrictionJointDef__Initialize_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
});

b2BodyDef.prototype["get_linearDamping"] = (function() {
  return _emscripten_bind_b2BodyDef__get_linearDamping_p0(this.ptr);
});

b2BodyDef.prototype["get_awake"] = (function() {
  return _emscripten_bind_b2BodyDef__get_awake_p0(this.ptr);
});

b2BodyDef.prototype["get_type"] = (function() {
  return _emscripten_bind_b2BodyDef__get_type_p0(this.ptr);
});

b2BodyDef.prototype["get_allowSleep"] = (function() {
  return _emscripten_bind_b2BodyDef__get_allowSleep_p0(this.ptr);
});

b2BodyDef.prototype["set_position"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_position_p1(this.ptr, arg0.ptr);
});

b2BodyDef.prototype["set_linearVelocity"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_linearVelocity_p1(this.ptr, arg0.ptr);
});

function b2BodyDef() {
  this.ptr = _emscripten_bind_b2BodyDef__b2BodyDef_p0();
  b2BodyDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2BodyDef;
}

b2BodyDef.prototype.__cache__ = {};

Module["b2BodyDef"] = b2BodyDef;

b2BodyDef.prototype["get_bullet"] = (function() {
  return _emscripten_bind_b2BodyDef__get_bullet_p0(this.ptr);
});

b2BodyDef.prototype["get_userData"] = (function() {
  return _emscripten_bind_b2BodyDef__get_userData_p0(this.ptr);
});

b2BodyDef.prototype["set_angularDamping"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_angularDamping_p1(this.ptr, arg0);
});

b2BodyDef.prototype["set_fixedRotation"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_fixedRotation_p1(this.ptr, arg0);
});

b2BodyDef.prototype["set_allowSleep"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_allowSleep_p1(this.ptr, arg0);
});

b2BodyDef.prototype["get_gravityScale"] = (function() {
  return _emscripten_bind_b2BodyDef__get_gravityScale_p0(this.ptr);
});

b2BodyDef.prototype["set_angularVelocity"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_angularVelocity_p1(this.ptr, arg0);
});

b2BodyDef.prototype["set_userData"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_userData_p1(this.ptr, arg0);
});

b2BodyDef.prototype["get_position"] = (function() {
  return wrapPointer(_emscripten_bind_b2BodyDef__get_position_p0(this.ptr), Module.b2Vec2);
});

b2BodyDef.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2BodyDef____destroy___p0(this.ptr);
});

b2BodyDef.prototype["set_type"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_type_p1(this.ptr, arg0);
});

b2BodyDef.prototype["set_gravityScale"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_gravityScale_p1(this.ptr, arg0);
});

b2BodyDef.prototype["get_angularDamping"] = (function() {
  return _emscripten_bind_b2BodyDef__get_angularDamping_p0(this.ptr);
});

b2BodyDef.prototype["set_bullet"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_bullet_p1(this.ptr, arg0);
});

b2BodyDef.prototype["set_active"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_active_p1(this.ptr, arg0);
});

b2BodyDef.prototype["set_angle"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_angle_p1(this.ptr, arg0);
});

b2BodyDef.prototype["get_angle"] = (function() {
  return _emscripten_bind_b2BodyDef__get_angle_p0(this.ptr);
});

b2BodyDef.prototype["get_angularVelocity"] = (function() {
  return _emscripten_bind_b2BodyDef__get_angularVelocity_p0(this.ptr);
});

b2BodyDef.prototype["get_linearVelocity"] = (function() {
  return wrapPointer(_emscripten_bind_b2BodyDef__get_linearVelocity_p0(this.ptr), Module.b2Vec2);
});

b2BodyDef.prototype["get_active"] = (function() {
  return _emscripten_bind_b2BodyDef__get_active_p0(this.ptr);
});

b2BodyDef.prototype["set_linearDamping"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_linearDamping_p1(this.ptr, arg0);
});

b2BodyDef.prototype["get_fixedRotation"] = (function() {
  return _emscripten_bind_b2BodyDef__get_fixedRotation_p0(this.ptr);
});

b2BodyDef.prototype["set_awake"] = (function(arg0) {
  _emscripten_bind_b2BodyDef__set_awake_p1(this.ptr, arg0);
});

b2Vec2.prototype["Normalize"] = (function() {
  return _emscripten_bind_b2Vec2__Normalize_p0(this.ptr);
});

b2Vec2.prototype["set_x"] = (function(arg0) {
  _emscripten_bind_b2Vec2__set_x_p1(this.ptr, arg0);
});

function b2Vec2(arg0, arg1) {
  if (arg0 === undefined) this.ptr = _emscripten_bind_b2Vec2__b2Vec2_p0(); else this.ptr = _emscripten_bind_b2Vec2__b2Vec2_p2(arg0, arg1);
  b2Vec2.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Vec2;
}

b2Vec2.prototype.__cache__ = {};

Module["b2Vec2"] = b2Vec2;

b2Vec2.prototype["Set"] = (function(arg0, arg1) {
  _emscripten_bind_b2Vec2__Set_p2(this.ptr, arg0, arg1);
});

b2Vec2.prototype["get_x"] = (function() {
  return _emscripten_bind_b2Vec2__get_x_p0(this.ptr);
});

b2Vec2.prototype["get_y"] = (function() {
  return _emscripten_bind_b2Vec2__get_y_p0(this.ptr);
});

b2Vec2.prototype["set_y"] = (function(arg0) {
  _emscripten_bind_b2Vec2__set_y_p1(this.ptr, arg0);
});

b2Vec2.prototype["IsValid"] = (function() {
  return _emscripten_bind_b2Vec2__IsValid_p0(this.ptr);
});

b2Vec2.prototype["Skew"] = (function() {
  return wrapPointer(_emscripten_bind_b2Vec2__Skew_p0(this.ptr), Module.b2Vec2);
});

b2Vec2.prototype["LengthSquared"] = (function() {
  return _emscripten_bind_b2Vec2__LengthSquared_p0(this.ptr);
});

b2Vec2.prototype["op_add"] = (function(arg0) {
  _emscripten_bind_b2Vec2__op_add_p1(this.ptr, arg0.ptr);
});

b2Vec2.prototype["SetZero"] = (function() {
  _emscripten_bind_b2Vec2__SetZero_p0(this.ptr);
});

b2Vec2.prototype["Length"] = (function() {
  return _emscripten_bind_b2Vec2__Length_p0(this.ptr);
});

b2Vec2.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2Vec2____destroy___p0(this.ptr);
});

b2Vec2.prototype["op_mul"] = (function(arg0) {
  _emscripten_bind_b2Vec2__op_mul_p1(this.ptr, arg0);
});

b2Vec2.prototype["op_sub"] = (function() {
  return wrapPointer(_emscripten_bind_b2Vec2__op_sub_p0(this.ptr), Module.b2Vec2);
});

b2Vec3.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2Vec3____destroy___p0(this.ptr);
});

b2Vec3.prototype["set_z"] = (function(arg0) {
  _emscripten_bind_b2Vec3__set_z_p1(this.ptr, arg0);
});

b2Vec3.prototype["Set"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2Vec3__Set_p3(this.ptr, arg0, arg1, arg2);
});

b2Vec3.prototype["get_z"] = (function() {
  return _emscripten_bind_b2Vec3__get_z_p0(this.ptr);
});

b2Vec3.prototype["op_add"] = (function(arg0) {
  _emscripten_bind_b2Vec3__op_add_p1(this.ptr, arg0.ptr);
});

b2Vec3.prototype["SetZero"] = (function() {
  _emscripten_bind_b2Vec3__SetZero_p0(this.ptr);
});

function b2Vec3(arg0, arg1, arg2) {
  if (arg0 === undefined) this.ptr = _emscripten_bind_b2Vec3__b2Vec3_p0(); else this.ptr = _emscripten_bind_b2Vec3__b2Vec3_p3(arg0, arg1, arg2);
  b2Vec3.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Vec3;
}

b2Vec3.prototype.__cache__ = {};

Module["b2Vec3"] = b2Vec3;

b2Vec3.prototype["op_mul"] = (function(arg0) {
  _emscripten_bind_b2Vec3__op_mul_p1(this.ptr, arg0);
});

b2Vec3.prototype["op_sub"] = (function() {
  return wrapPointer(_emscripten_bind_b2Vec3__op_sub_p0(this.ptr), Module.b2Vec3);
});

b2DistanceProxy.prototype["get_m_radius"] = (function() {
  return _emscripten_bind_b2DistanceProxy__get_m_radius_p0(this.ptr);
});

b2DistanceProxy.prototype["Set"] = (function(arg0, arg1) {
  _emscripten_bind_b2DistanceProxy__Set_p2(this.ptr, arg0.ptr, arg1);
});

function b2DistanceProxy() {
  this.ptr = _emscripten_bind_b2DistanceProxy__b2DistanceProxy_p0();
  b2DistanceProxy.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2DistanceProxy;
}

b2DistanceProxy.prototype.__cache__ = {};

Module["b2DistanceProxy"] = b2DistanceProxy;

b2DistanceProxy.prototype["set_m_radius"] = (function(arg0) {
  _emscripten_bind_b2DistanceProxy__set_m_radius_p1(this.ptr, arg0);
});

b2DistanceProxy.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2DistanceProxy____destroy___p0(this.ptr);
});

b2DistanceProxy.prototype["get_m_vertices"] = (function() {
  return _emscripten_bind_b2DistanceProxy__get_m_vertices_p0(this.ptr);
});

b2DistanceProxy.prototype["GetSupportVertex"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2DistanceProxy__GetSupportVertex_p1(this.ptr, arg0.ptr), Module.b2Vec2);
});

b2DistanceProxy.prototype["get_m_count"] = (function() {
  return _emscripten_bind_b2DistanceProxy__get_m_count_p0(this.ptr);
});

b2DistanceProxy.prototype["GetVertexCount"] = (function() {
  return _emscripten_bind_b2DistanceProxy__GetVertexCount_p0(this.ptr);
});

b2DistanceProxy.prototype["GetVertex"] = (function(arg0) {
  return wrapPointer(_emscripten_bind_b2DistanceProxy__GetVertex_p1(this.ptr, arg0), Module.b2Vec2);
});

b2DistanceProxy.prototype["GetSupport"] = (function(arg0) {
  return _emscripten_bind_b2DistanceProxy__GetSupport_p1(this.ptr, arg0.ptr);
});

b2DistanceProxy.prototype["set_m_vertices"] = (function(arg0) {
  _emscripten_bind_b2DistanceProxy__set_m_vertices_p1(this.ptr, arg0.ptr);
});

b2DistanceProxy.prototype["set_m_count"] = (function(arg0) {
  _emscripten_bind_b2DistanceProxy__set_m_count_p1(this.ptr, arg0);
});

b2FixtureDef.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2FixtureDef____destroy___p0(this.ptr);
});

b2FixtureDef.prototype["get_isSensor"] = (function() {
  return _emscripten_bind_b2FixtureDef__get_isSensor_p0(this.ptr);
});

b2FixtureDef.prototype["set_userData"] = (function(arg0) {
  _emscripten_bind_b2FixtureDef__set_userData_p1(this.ptr, arg0);
});

b2FixtureDef.prototype["set_shape"] = (function(arg0) {
  _emscripten_bind_b2FixtureDef__set_shape_p1(this.ptr, arg0.ptr);
});

b2FixtureDef.prototype["get_density"] = (function() {
  return _emscripten_bind_b2FixtureDef__get_density_p0(this.ptr);
});

b2FixtureDef.prototype["get_shape"] = (function() {
  return _emscripten_bind_b2FixtureDef__get_shape_p0(this.ptr);
});

function b2FixtureDef() {
  this.ptr = _emscripten_bind_b2FixtureDef__b2FixtureDef_p0();
  b2FixtureDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2FixtureDef;
}

b2FixtureDef.prototype.__cache__ = {};

Module["b2FixtureDef"] = b2FixtureDef;

b2FixtureDef.prototype["set_density"] = (function(arg0) {
  _emscripten_bind_b2FixtureDef__set_density_p1(this.ptr, arg0);
});

b2FixtureDef.prototype["set_restitution"] = (function(arg0) {
  _emscripten_bind_b2FixtureDef__set_restitution_p1(this.ptr, arg0);
});

b2FixtureDef.prototype["get_restitution"] = (function() {
  return _emscripten_bind_b2FixtureDef__get_restitution_p0(this.ptr);
});

b2FixtureDef.prototype["set_isSensor"] = (function(arg0) {
  _emscripten_bind_b2FixtureDef__set_isSensor_p1(this.ptr, arg0);
});

b2FixtureDef.prototype["get_filter"] = (function() {
  return wrapPointer(_emscripten_bind_b2FixtureDef__get_filter_p0(this.ptr), Module.b2Filter);
});

b2FixtureDef.prototype["get_friction"] = (function() {
  return _emscripten_bind_b2FixtureDef__get_friction_p0(this.ptr);
});

b2FixtureDef.prototype["set_friction"] = (function(arg0) {
  _emscripten_bind_b2FixtureDef__set_friction_p1(this.ptr, arg0);
});

b2FixtureDef.prototype["get_userData"] = (function() {
  return _emscripten_bind_b2FixtureDef__get_userData_p0(this.ptr);
});

b2FixtureDef.prototype["set_filter"] = (function(arg0) {
  _emscripten_bind_b2FixtureDef__set_filter_p1(this.ptr, arg0.ptr);
});

b2PrismaticJointDef.prototype["set_localAnchorA"] = (function(arg0) {
  _emscripten_bind_b2PrismaticJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
});

b2PrismaticJointDef.prototype["set_localAnchorB"] = (function(arg0) {
  _emscripten_bind_b2PrismaticJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
});

b2PrismaticJointDef.prototype["get_motorSpeed"] = (function() {
  return _emscripten_bind_b2PrismaticJointDef__get_motorSpeed_p0(this.ptr);
});

b2PrismaticJointDef.prototype["get_enableMotor"] = (function() {
  return _emscripten_bind_b2PrismaticJointDef__get_enableMotor_p0(this.ptr);
});

b2PrismaticJointDef.prototype["get_referenceAngle"] = (function() {
  return _emscripten_bind_b2PrismaticJointDef__get_referenceAngle_p0(this.ptr);
});

b2PrismaticJointDef.prototype["set_enableLimit"] = (function(arg0) {
  _emscripten_bind_b2PrismaticJointDef__set_enableLimit_p1(this.ptr, arg0);
});

b2PrismaticJointDef.prototype["set_motorSpeed"] = (function(arg0) {
  _emscripten_bind_b2PrismaticJointDef__set_motorSpeed_p1(this.ptr, arg0);
});

b2PrismaticJointDef.prototype["get_localAxisA"] = (function() {
  return wrapPointer(_emscripten_bind_b2PrismaticJointDef__get_localAxisA_p0(this.ptr), Module.b2Vec2);
});

b2PrismaticJointDef.prototype["set_upperTranslation"] = (function(arg0) {
  _emscripten_bind_b2PrismaticJointDef__set_upperTranslation_p1(this.ptr, arg0);
});

function b2PrismaticJointDef() {
  this.ptr = _emscripten_bind_b2PrismaticJointDef__b2PrismaticJointDef_p0();
  b2PrismaticJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2PrismaticJointDef;
}

b2PrismaticJointDef.prototype.__cache__ = {};

Module["b2PrismaticJointDef"] = b2PrismaticJointDef;

b2PrismaticJointDef.prototype["Initialize"] = (function(arg0, arg1, arg2, arg3) {
  _emscripten_bind_b2PrismaticJointDef__Initialize_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr);
});

b2PrismaticJointDef.prototype["set_lowerTranslation"] = (function(arg0) {
  _emscripten_bind_b2PrismaticJointDef__set_lowerTranslation_p1(this.ptr, arg0);
});

b2PrismaticJointDef.prototype["get_upperTranslation"] = (function() {
  return _emscripten_bind_b2PrismaticJointDef__get_upperTranslation_p0(this.ptr);
});

b2PrismaticJointDef.prototype["get_enableLimit"] = (function() {
  return _emscripten_bind_b2PrismaticJointDef__get_enableLimit_p0(this.ptr);
});

b2PrismaticJointDef.prototype["set_referenceAngle"] = (function(arg0) {
  _emscripten_bind_b2PrismaticJointDef__set_referenceAngle_p1(this.ptr, arg0);
});

b2PrismaticJointDef.prototype["get_localAnchorA"] = (function() {
  return wrapPointer(_emscripten_bind_b2PrismaticJointDef__get_localAnchorA_p0(this.ptr), Module.b2Vec2);
});

b2PrismaticJointDef.prototype["get_localAnchorB"] = (function() {
  return wrapPointer(_emscripten_bind_b2PrismaticJointDef__get_localAnchorB_p0(this.ptr), Module.b2Vec2);
});

b2PrismaticJointDef.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2PrismaticJointDef____destroy___p0(this.ptr);
});

b2PrismaticJointDef.prototype["get_maxMotorForce"] = (function() {
  return _emscripten_bind_b2PrismaticJointDef__get_maxMotorForce_p0(this.ptr);
});

b2PrismaticJointDef.prototype["set_maxMotorForce"] = (function(arg0) {
  _emscripten_bind_b2PrismaticJointDef__set_maxMotorForce_p1(this.ptr, arg0);
});

b2PrismaticJointDef.prototype["set_enableMotor"] = (function(arg0) {
  _emscripten_bind_b2PrismaticJointDef__set_enableMotor_p1(this.ptr, arg0);
});

b2PrismaticJointDef.prototype["get_lowerTranslation"] = (function() {
  return _emscripten_bind_b2PrismaticJointDef__get_lowerTranslation_p0(this.ptr);
});

b2PrismaticJointDef.prototype["set_localAxisA"] = (function(arg0) {
  _emscripten_bind_b2PrismaticJointDef__set_localAxisA_p1(this.ptr, arg0.ptr);
});

b2Rot.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2Rot____destroy___p0(this.ptr);
});

b2Rot.prototype["Set"] = (function(arg0) {
  _emscripten_bind_b2Rot__Set_p1(this.ptr, arg0);
});

b2Rot.prototype["GetAngle"] = (function() {
  return _emscripten_bind_b2Rot__GetAngle_p0(this.ptr);
});

b2Rot.prototype["GetYAxis"] = (function() {
  return wrapPointer(_emscripten_bind_b2Rot__GetYAxis_p0(this.ptr), Module.b2Vec2);
});

b2Rot.prototype["GetXAxis"] = (function() {
  return wrapPointer(_emscripten_bind_b2Rot__GetXAxis_p0(this.ptr), Module.b2Vec2);
});

b2Rot.prototype["set_c"] = (function(arg0) {
  _emscripten_bind_b2Rot__set_c_p1(this.ptr, arg0);
});

b2Rot.prototype["SetIdentity"] = (function() {
  _emscripten_bind_b2Rot__SetIdentity_p0(this.ptr);
});

function b2Rot(arg0) {
  if (arg0 === undefined) this.ptr = _emscripten_bind_b2Rot__b2Rot_p0(); else this.ptr = _emscripten_bind_b2Rot__b2Rot_p1(arg0);
  b2Rot.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Rot;
}

b2Rot.prototype.__cache__ = {};

Module["b2Rot"] = b2Rot;

b2Rot.prototype["get_c"] = (function() {
  return _emscripten_bind_b2Rot__get_c_p0(this.ptr);
});

b2WheelJointDef.prototype["set_localAnchorA"] = (function(arg0) {
  _emscripten_bind_b2WheelJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
});

b2WheelJointDef.prototype["set_motorSpeed"] = (function(arg0) {
  _emscripten_bind_b2WheelJointDef__set_motorSpeed_p1(this.ptr, arg0);
});

b2WheelJointDef.prototype["get_localAxisA"] = (function() {
  return wrapPointer(_emscripten_bind_b2WheelJointDef__get_localAxisA_p0(this.ptr), Module.b2Vec2);
});

b2WheelJointDef.prototype["set_localAnchorB"] = (function(arg0) {
  _emscripten_bind_b2WheelJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
});

b2WheelJointDef.prototype["get_frequencyHz"] = (function() {
  return _emscripten_bind_b2WheelJointDef__get_frequencyHz_p0(this.ptr);
});

b2WheelJointDef.prototype["set_maxMotorTorque"] = (function(arg0) {
  _emscripten_bind_b2WheelJointDef__set_maxMotorTorque_p1(this.ptr, arg0);
});

b2WheelJointDef.prototype["get_enableMotor"] = (function() {
  return _emscripten_bind_b2WheelJointDef__get_enableMotor_p0(this.ptr);
});

b2WheelJointDef.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2WheelJointDef____destroy___p0(this.ptr);
});

b2WheelJointDef.prototype["get_localAnchorA"] = (function() {
  return wrapPointer(_emscripten_bind_b2WheelJointDef__get_localAnchorA_p0(this.ptr), Module.b2Vec2);
});

b2WheelJointDef.prototype["get_maxMotorTorque"] = (function() {
  return _emscripten_bind_b2WheelJointDef__get_maxMotorTorque_p0(this.ptr);
});

b2WheelJointDef.prototype["get_localAnchorB"] = (function() {
  return wrapPointer(_emscripten_bind_b2WheelJointDef__get_localAnchorB_p0(this.ptr), Module.b2Vec2);
});

b2WheelJointDef.prototype["get_dampingRatio"] = (function() {
  return _emscripten_bind_b2WheelJointDef__get_dampingRatio_p0(this.ptr);
});

b2WheelJointDef.prototype["set_enableMotor"] = (function(arg0) {
  _emscripten_bind_b2WheelJointDef__set_enableMotor_p1(this.ptr, arg0);
});

b2WheelJointDef.prototype["set_frequencyHz"] = (function(arg0) {
  _emscripten_bind_b2WheelJointDef__set_frequencyHz_p1(this.ptr, arg0);
});

b2WheelJointDef.prototype["Initialize"] = (function(arg0, arg1, arg2, arg3) {
  _emscripten_bind_b2WheelJointDef__Initialize_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr);
});

b2WheelJointDef.prototype["set_dampingRatio"] = (function(arg0) {
  _emscripten_bind_b2WheelJointDef__set_dampingRatio_p1(this.ptr, arg0);
});

function b2WheelJointDef() {
  this.ptr = _emscripten_bind_b2WheelJointDef__b2WheelJointDef_p0();
  b2WheelJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2WheelJointDef;
}

b2WheelJointDef.prototype.__cache__ = {};

Module["b2WheelJointDef"] = b2WheelJointDef;

b2WheelJointDef.prototype["set_localAxisA"] = (function(arg0) {
  _emscripten_bind_b2WheelJointDef__set_localAxisA_p1(this.ptr, arg0.ptr);
});

b2WheelJointDef.prototype["get_motorSpeed"] = (function() {
  return _emscripten_bind_b2WheelJointDef__get_motorSpeed_p0(this.ptr);
});

b2RevoluteJointDef.prototype["set_localAnchorA"] = (function(arg0) {
  _emscripten_bind_b2RevoluteJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
});

b2RevoluteJointDef.prototype["get_lowerAngle"] = (function() {
  return _emscripten_bind_b2RevoluteJointDef__get_lowerAngle_p0(this.ptr);
});

b2RevoluteJointDef.prototype["set_upperAngle"] = (function(arg0) {
  _emscripten_bind_b2RevoluteJointDef__set_upperAngle_p1(this.ptr, arg0);
});

b2RevoluteJointDef.prototype["set_localAnchorB"] = (function(arg0) {
  _emscripten_bind_b2RevoluteJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
});

b2RevoluteJointDef.prototype["get_enableLimit"] = (function() {
  return _emscripten_bind_b2RevoluteJointDef__get_enableLimit_p0(this.ptr);
});

b2RevoluteJointDef.prototype["set_lowerAngle"] = (function(arg0) {
  _emscripten_bind_b2RevoluteJointDef__set_lowerAngle_p1(this.ptr, arg0);
});

b2RevoluteJointDef.prototype["get_enableMotor"] = (function() {
  return _emscripten_bind_b2RevoluteJointDef__get_enableMotor_p0(this.ptr);
});

b2RevoluteJointDef.prototype["set_motorSpeed"] = (function(arg0) {
  _emscripten_bind_b2RevoluteJointDef__set_motorSpeed_p1(this.ptr, arg0);
});

b2RevoluteJointDef.prototype["get_upperAngle"] = (function() {
  return _emscripten_bind_b2RevoluteJointDef__get_upperAngle_p0(this.ptr);
});

b2RevoluteJointDef.prototype["set_referenceAngle"] = (function(arg0) {
  _emscripten_bind_b2RevoluteJointDef__set_referenceAngle_p1(this.ptr, arg0);
});

b2RevoluteJointDef.prototype["set_maxMotorTorque"] = (function(arg0) {
  _emscripten_bind_b2RevoluteJointDef__set_maxMotorTorque_p1(this.ptr, arg0);
});

b2RevoluteJointDef.prototype["get_localAnchorA"] = (function() {
  return wrapPointer(_emscripten_bind_b2RevoluteJointDef__get_localAnchorA_p0(this.ptr), Module.b2Vec2);
});

b2RevoluteJointDef.prototype["get_referenceAngle"] = (function() {
  return _emscripten_bind_b2RevoluteJointDef__get_referenceAngle_p0(this.ptr);
});

b2RevoluteJointDef.prototype["get_localAnchorB"] = (function() {
  return wrapPointer(_emscripten_bind_b2RevoluteJointDef__get_localAnchorB_p0(this.ptr), Module.b2Vec2);
});

b2RevoluteJointDef.prototype["set_enableLimit"] = (function(arg0) {
  _emscripten_bind_b2RevoluteJointDef__set_enableLimit_p1(this.ptr, arg0);
});

b2RevoluteJointDef.prototype["set_enableMotor"] = (function(arg0) {
  _emscripten_bind_b2RevoluteJointDef__set_enableMotor_p1(this.ptr, arg0);
});

b2RevoluteJointDef.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2RevoluteJointDef____destroy___p0(this.ptr);
});

function b2RevoluteJointDef() {
  this.ptr = _emscripten_bind_b2RevoluteJointDef__b2RevoluteJointDef_p0();
  b2RevoluteJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2RevoluteJointDef;
}

b2RevoluteJointDef.prototype.__cache__ = {};

Module["b2RevoluteJointDef"] = b2RevoluteJointDef;

b2RevoluteJointDef.prototype["Initialize"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2RevoluteJointDef__Initialize_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
});

b2RevoluteJointDef.prototype["get_maxMotorTorque"] = (function() {
  return _emscripten_bind_b2RevoluteJointDef__get_maxMotorTorque_p0(this.ptr);
});

b2RevoluteJointDef.prototype["get_motorSpeed"] = (function() {
  return _emscripten_bind_b2RevoluteJointDef__get_motorSpeed_p0(this.ptr);
});

b2PulleyJointDef.prototype["set_localAnchorA"] = (function(arg0) {
  _emscripten_bind_b2PulleyJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
});

b2PulleyJointDef.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2PulleyJointDef____destroy___p0(this.ptr);
});

b2PulleyJointDef.prototype["set_localAnchorB"] = (function(arg0) {
  _emscripten_bind_b2PulleyJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
});

b2PulleyJointDef.prototype["get_ratio"] = (function() {
  return _emscripten_bind_b2PulleyJointDef__get_ratio_p0(this.ptr);
});

b2PulleyJointDef.prototype["get_lengthB"] = (function() {
  return _emscripten_bind_b2PulleyJointDef__get_lengthB_p0(this.ptr);
});

b2PulleyJointDef.prototype["get_lengthA"] = (function() {
  return _emscripten_bind_b2PulleyJointDef__get_lengthA_p0(this.ptr);
});

b2PulleyJointDef.prototype["get_localAnchorA"] = (function() {
  return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_localAnchorA_p0(this.ptr), Module.b2Vec2);
});

b2PulleyJointDef.prototype["set_ratio"] = (function(arg0) {
  _emscripten_bind_b2PulleyJointDef__set_ratio_p1(this.ptr, arg0);
});

b2PulleyJointDef.prototype["get_localAnchorB"] = (function() {
  return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_localAnchorB_p0(this.ptr), Module.b2Vec2);
});

b2PulleyJointDef.prototype["get_groundAnchorB"] = (function() {
  return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_groundAnchorB_p0(this.ptr), Module.b2Vec2);
});

b2PulleyJointDef.prototype["set_groundAnchorB"] = (function(arg0) {
  _emscripten_bind_b2PulleyJointDef__set_groundAnchorB_p1(this.ptr, arg0.ptr);
});

function b2PulleyJointDef() {
  this.ptr = _emscripten_bind_b2PulleyJointDef__b2PulleyJointDef_p0();
  b2PulleyJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2PulleyJointDef;
}

b2PulleyJointDef.prototype.__cache__ = {};

Module["b2PulleyJointDef"] = b2PulleyJointDef;

b2PulleyJointDef.prototype["set_groundAnchorA"] = (function(arg0) {
  _emscripten_bind_b2PulleyJointDef__set_groundAnchorA_p1(this.ptr, arg0.ptr);
});

b2PulleyJointDef.prototype["Initialize"] = (function(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
  _emscripten_bind_b2PulleyJointDef__Initialize_p7(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr, arg4.ptr, arg5.ptr, arg6);
});

b2PulleyJointDef.prototype["set_lengthB"] = (function(arg0) {
  _emscripten_bind_b2PulleyJointDef__set_lengthB_p1(this.ptr, arg0);
});

b2PulleyJointDef.prototype["set_lengthA"] = (function(arg0) {
  _emscripten_bind_b2PulleyJointDef__set_lengthA_p1(this.ptr, arg0);
});

b2PulleyJointDef.prototype["get_groundAnchorA"] = (function() {
  return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_groundAnchorA_p0(this.ptr), Module.b2Vec2);
});

b2JointDef.prototype["get_bodyA"] = (function() {
  return wrapPointer(_emscripten_bind_b2JointDef__get_bodyA_p0(this.ptr), Module.b2Body);
});

b2JointDef.prototype["set_userData"] = (function(arg0) {
  _emscripten_bind_b2JointDef__set_userData_p1(this.ptr, arg0);
});

b2JointDef.prototype["set_bodyA"] = (function(arg0) {
  _emscripten_bind_b2JointDef__set_bodyA_p1(this.ptr, arg0.ptr);
});

b2JointDef.prototype["set_bodyB"] = (function(arg0) {
  _emscripten_bind_b2JointDef__set_bodyB_p1(this.ptr, arg0.ptr);
});

b2JointDef.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2JointDef____destroy___p0(this.ptr);
});

b2JointDef.prototype["get_bodyB"] = (function() {
  return wrapPointer(_emscripten_bind_b2JointDef__get_bodyB_p0(this.ptr), Module.b2Body);
});

b2JointDef.prototype["set_type"] = (function(arg0) {
  _emscripten_bind_b2JointDef__set_type_p1(this.ptr, arg0);
});

b2JointDef.prototype["get_collideConnected"] = (function() {
  return _emscripten_bind_b2JointDef__get_collideConnected_p0(this.ptr);
});

b2JointDef.prototype["get_type"] = (function() {
  return _emscripten_bind_b2JointDef__get_type_p0(this.ptr);
});

b2JointDef.prototype["set_collideConnected"] = (function(arg0) {
  _emscripten_bind_b2JointDef__set_collideConnected_p1(this.ptr, arg0);
});

function b2JointDef() {
  this.ptr = _emscripten_bind_b2JointDef__b2JointDef_p0();
  b2JointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2JointDef;
}

b2JointDef.prototype.__cache__ = {};

Module["b2JointDef"] = b2JointDef;

b2JointDef.prototype["get_userData"] = (function() {
  return _emscripten_bind_b2JointDef__get_userData_p0(this.ptr);
});

b2Transform.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2Transform____destroy___p0(this.ptr);
});

b2Transform.prototype["Set"] = (function(arg0, arg1) {
  _emscripten_bind_b2Transform__Set_p2(this.ptr, arg0.ptr, arg1);
});

b2Transform.prototype["set_p"] = (function(arg0) {
  _emscripten_bind_b2Transform__set_p_p1(this.ptr, arg0.ptr);
});

b2Transform.prototype["set_q"] = (function(arg0) {
  _emscripten_bind_b2Transform__set_q_p1(this.ptr, arg0.ptr);
});

b2Transform.prototype["get_p"] = (function() {
  return wrapPointer(_emscripten_bind_b2Transform__get_p_p0(this.ptr), Module.b2Vec2);
});

b2Transform.prototype["get_q"] = (function() {
  return wrapPointer(_emscripten_bind_b2Transform__get_q_p0(this.ptr), Module.b2Rot);
});

function b2Transform(arg0, arg1) {
  if (arg0 === undefined) this.ptr = _emscripten_bind_b2Transform__b2Transform_p0(); else this.ptr = _emscripten_bind_b2Transform__b2Transform_p2(arg0.ptr, arg1.ptr);
  b2Transform.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Transform;
}

b2Transform.prototype.__cache__ = {};

Module["b2Transform"] = b2Transform;

b2Transform.prototype["SetIdentity"] = (function() {
  _emscripten_bind_b2Transform__SetIdentity_p0(this.ptr);
});

b2Color.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2Color____destroy___p0(this.ptr);
});

b2Color.prototype["set_b"] = (function(arg0) {
  _emscripten_bind_b2Color__set_b_p1(this.ptr, arg0);
});

b2Color.prototype["Set"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2Color__Set_p3(this.ptr, arg0, arg1, arg2);
});

b2Color.prototype["get_b"] = (function() {
  return _emscripten_bind_b2Color__get_b_p0(this.ptr);
});

function b2Color(arg0, arg1, arg2) {
  if (arg0 === undefined) this.ptr = _emscripten_bind_b2Color__b2Color_p0(); else this.ptr = _emscripten_bind_b2Color__b2Color_p3(arg0, arg1, arg2);
  b2Color.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Color;
}

b2Color.prototype.__cache__ = {};

Module["b2Color"] = b2Color;

b2WeldJointDef.prototype["set_localAnchorA"] = (function(arg0) {
  _emscripten_bind_b2WeldJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
});

b2WeldJointDef.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2WeldJointDef____destroy___p0(this.ptr);
});

b2WeldJointDef.prototype["get_frequencyHz"] = (function() {
  return _emscripten_bind_b2WeldJointDef__get_frequencyHz_p0(this.ptr);
});

b2WeldJointDef.prototype["set_localAnchorB"] = (function(arg0) {
  _emscripten_bind_b2WeldJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
});

b2WeldJointDef.prototype["set_dampingRatio"] = (function(arg0) {
  _emscripten_bind_b2WeldJointDef__set_dampingRatio_p1(this.ptr, arg0);
});

b2WeldJointDef.prototype["set_referenceAngle"] = (function(arg0) {
  _emscripten_bind_b2WeldJointDef__set_referenceAngle_p1(this.ptr, arg0);
});

b2WeldJointDef.prototype["get_localAnchorA"] = (function() {
  return wrapPointer(_emscripten_bind_b2WeldJointDef__get_localAnchorA_p0(this.ptr), Module.b2Vec2);
});

b2WeldJointDef.prototype["get_referenceAngle"] = (function() {
  return _emscripten_bind_b2WeldJointDef__get_referenceAngle_p0(this.ptr);
});

b2WeldJointDef.prototype["get_localAnchorB"] = (function() {
  return wrapPointer(_emscripten_bind_b2WeldJointDef__get_localAnchorB_p0(this.ptr), Module.b2Vec2);
});

b2WeldJointDef.prototype["get_dampingRatio"] = (function() {
  return _emscripten_bind_b2WeldJointDef__get_dampingRatio_p0(this.ptr);
});

b2WeldJointDef.prototype["set_frequencyHz"] = (function(arg0) {
  _emscripten_bind_b2WeldJointDef__set_frequencyHz_p1(this.ptr, arg0);
});

b2WeldJointDef.prototype["Initialize"] = (function(arg0, arg1, arg2) {
  _emscripten_bind_b2WeldJointDef__Initialize_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
});

function b2WeldJointDef() {
  this.ptr = _emscripten_bind_b2WeldJointDef__b2WeldJointDef_p0();
  b2WeldJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2WeldJointDef;
}

b2WeldJointDef.prototype.__cache__ = {};

Module["b2WeldJointDef"] = b2WeldJointDef;

b2MouseJointDef.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2MouseJointDef____destroy___p0(this.ptr);
});

b2MouseJointDef.prototype["get_frequencyHz"] = (function() {
  return _emscripten_bind_b2MouseJointDef__get_frequencyHz_p0(this.ptr);
});

b2MouseJointDef.prototype["set_dampingRatio"] = (function(arg0) {
  _emscripten_bind_b2MouseJointDef__set_dampingRatio_p1(this.ptr, arg0);
});

function b2MouseJointDef() {
  this.ptr = _emscripten_bind_b2MouseJointDef__b2MouseJointDef_p0();
  b2MouseJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2MouseJointDef;
}

b2MouseJointDef.prototype.__cache__ = {};

Module["b2MouseJointDef"] = b2MouseJointDef;

b2MouseJointDef.prototype["get_maxForce"] = (function() {
  return _emscripten_bind_b2MouseJointDef__get_maxForce_p0(this.ptr);
});

b2MouseJointDef.prototype["set_target"] = (function(arg0) {
  _emscripten_bind_b2MouseJointDef__set_target_p1(this.ptr, arg0.ptr);
});

b2MouseJointDef.prototype["set_maxForce"] = (function(arg0) {
  _emscripten_bind_b2MouseJointDef__set_maxForce_p1(this.ptr, arg0);
});

b2MouseJointDef.prototype["get_target"] = (function() {
  return wrapPointer(_emscripten_bind_b2MouseJointDef__get_target_p0(this.ptr), Module.b2Vec2);
});

b2MouseJointDef.prototype["set_frequencyHz"] = (function(arg0) {
  _emscripten_bind_b2MouseJointDef__set_frequencyHz_p1(this.ptr, arg0);
});

b2MouseJointDef.prototype["get_dampingRatio"] = (function() {
  return _emscripten_bind_b2MouseJointDef__get_dampingRatio_p0(this.ptr);
});

b2DistanceJointDef.prototype["set_localAnchorA"] = (function(arg0) {
  _emscripten_bind_b2DistanceJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
});

b2DistanceJointDef.prototype["get_length"] = (function() {
  return _emscripten_bind_b2DistanceJointDef__get_length_p0(this.ptr);
});

b2DistanceJointDef.prototype["get_frequencyHz"] = (function() {
  return _emscripten_bind_b2DistanceJointDef__get_frequencyHz_p0(this.ptr);
});

b2DistanceJointDef.prototype["set_localAnchorB"] = (function(arg0) {
  _emscripten_bind_b2DistanceJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
});

b2DistanceJointDef.prototype["set_dampingRatio"] = (function(arg0) {
  _emscripten_bind_b2DistanceJointDef__set_dampingRatio_p1(this.ptr, arg0);
});

b2DistanceJointDef.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2DistanceJointDef____destroy___p0(this.ptr);
});

b2DistanceJointDef.prototype["get_localAnchorA"] = (function() {
  return wrapPointer(_emscripten_bind_b2DistanceJointDef__get_localAnchorA_p0(this.ptr), Module.b2Vec2);
});

b2DistanceJointDef.prototype["get_localAnchorB"] = (function() {
  return wrapPointer(_emscripten_bind_b2DistanceJointDef__get_localAnchorB_p0(this.ptr), Module.b2Vec2);
});

b2DistanceJointDef.prototype["get_dampingRatio"] = (function() {
  return _emscripten_bind_b2DistanceJointDef__get_dampingRatio_p0(this.ptr);
});

function b2DistanceJointDef() {
  this.ptr = _emscripten_bind_b2DistanceJointDef__b2DistanceJointDef_p0();
  b2DistanceJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2DistanceJointDef;
}

b2DistanceJointDef.prototype.__cache__ = {};

Module["b2DistanceJointDef"] = b2DistanceJointDef;

b2DistanceJointDef.prototype["set_length"] = (function(arg0) {
  _emscripten_bind_b2DistanceJointDef__set_length_p1(this.ptr, arg0);
});

b2DistanceJointDef.prototype["set_frequencyHz"] = (function(arg0) {
  _emscripten_bind_b2DistanceJointDef__set_frequencyHz_p1(this.ptr, arg0);
});

b2DistanceJointDef.prototype["Initialize"] = (function(arg0, arg1, arg2, arg3) {
  _emscripten_bind_b2DistanceJointDef__Initialize_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr);
});

b2GearJointDef.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2GearJointDef____destroy___p0(this.ptr);
});

b2GearJointDef.prototype["set_joint1"] = (function(arg0) {
  _emscripten_bind_b2GearJointDef__set_joint1_p1(this.ptr, arg0.ptr);
});

b2GearJointDef.prototype["set_joint2"] = (function(arg0) {
  _emscripten_bind_b2GearJointDef__set_joint2_p1(this.ptr, arg0.ptr);
});

b2GearJointDef.prototype["set_ratio"] = (function(arg0) {
  _emscripten_bind_b2GearJointDef__set_ratio_p1(this.ptr, arg0);
});

b2GearJointDef.prototype["get_joint1"] = (function() {
  return wrapPointer(_emscripten_bind_b2GearJointDef__get_joint1_p0(this.ptr), Module.b2Joint);
});

b2GearJointDef.prototype["get_joint2"] = (function() {
  return wrapPointer(_emscripten_bind_b2GearJointDef__get_joint2_p0(this.ptr), Module.b2Joint);
});

function b2GearJointDef() {
  this.ptr = _emscripten_bind_b2GearJointDef__b2GearJointDef_p0();
  b2GearJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2GearJointDef;
}

b2GearJointDef.prototype.__cache__ = {};

Module["b2GearJointDef"] = b2GearJointDef;

b2GearJointDef.prototype["get_ratio"] = (function() {
  return _emscripten_bind_b2GearJointDef__get_ratio_p0(this.ptr);
});

b2RopeJointDef.prototype["set_localAnchorA"] = (function(arg0) {
  _emscripten_bind_b2RopeJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
});

b2RopeJointDef.prototype["__destroy__"] = (function() {
  _emscripten_bind_b2RopeJointDef____destroy___p0(this.ptr);
});

b2RopeJointDef.prototype["get_maxLength"] = (function() {
  return _emscripten_bind_b2RopeJointDef__get_maxLength_p0(this.ptr);
});

b2RopeJointDef.prototype["set_localAnchorB"] = (function(arg0) {
  _emscripten_bind_b2RopeJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
});

b2RopeJointDef.prototype["get_localAnchorA"] = (function() {
  return wrapPointer(_emscripten_bind_b2RopeJointDef__get_localAnchorA_p0(this.ptr), Module.b2Vec2);
});

b2RopeJointDef.prototype["get_localAnchorB"] = (function() {
  return wrapPointer(_emscripten_bind_b2RopeJointDef__get_localAnchorB_p0(this.ptr), Module.b2Vec2);
});

function b2RopeJointDef() {
  this.ptr = _emscripten_bind_b2RopeJointDef__b2RopeJointDef_p0();
  b2RopeJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2RopeJointDef;
}

b2RopeJointDef.prototype.__cache__ = {};

Module["b2RopeJointDef"] = b2RopeJointDef;

b2RopeJointDef.prototype["set_maxLength"] = (function(arg0) {
  _emscripten_bind_b2RopeJointDef__set_maxLength_p1(this.ptr, arg0);
});

this["Box2D"] = Module;

Module["b2_staticBody"] = 0;

Module["b2_kinematicBody"] = 1;

Module["b2_dynamicBody"] = 2;
// EMSCRIPTEN_GENERATED_FUNCTIONS: ["__ZN12b2BroadPhase12UnBufferMoveEi","__Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_","__ZN12b2BroadPhaseC2Ev","__ZN12b2BroadPhaseD2Ev","__ZN12b2BroadPhase11CreateProxyERK6b2AABBPv","__ZN12b2BroadPhase10BufferMoveEi","__ZN12b2BroadPhase12DestroyProxyEi","__ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2","__ZN12b2BroadPhase10TouchProxyEi","__ZN12b2BroadPhase13QueryCallbackEi","__Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_","__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_","__ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_","__ZN12b2EPCollider21ComputeEdgeSeparationEv","__ZN12b2EPCollider24ComputePolygonSeparationEv","__Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_","__Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_","__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_","__Z16b2GetPointStatesP12b2PointStateS0_PK10b2ManifoldS3_","__ZNK6b2AABB7RayCastEP15b2RayCastOutputRK14b2RayCastInput","__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_","__ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f","__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi","__Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_","__ZN15b2DistanceProxy3SetEPK7b2Shapei","__ZN9b2Simplex6Solve2Ev","__ZN9b2Simplex6Solve3Ev","__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput","__ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_","__ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_","__ZN13b2DynamicTreeC2Ev","__ZN13b2DynamicTreeD2Ev","__ZN13b2DynamicTree12AllocateNodeEv","__ZN13b2DynamicTree8FreeNodeEi","__ZN13b2DynamicTree11CreateProxyERK6b2AABBPv","__ZN13b2DynamicTree10InsertLeafEi","__ZN13b2DynamicTree12DestroyProxyEi","__ZN13b2DynamicTree10RemoveLeafEi","__ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2","__ZNK13b2DynamicTree9GetHeightEv","__ZNK13b2DynamicTree12GetAreaRatioEv","__ZN13b2DynamicTree7BalanceEi","__ZNK13b2DynamicTree13ComputeHeightEi","__ZNK13b2DynamicTree13ComputeHeightEv","__ZNK13b2DynamicTree17ValidateStructureEi","__ZNK13b2DynamicTree15ValidateMetricsEi","__ZNK13b2DynamicTree8ValidateEv","__ZNK13b2DynamicTree13GetMaxBalanceEv","__ZN13b2DynamicTree15RebuildBottomUpEv","__Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput","__ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f","__ZN12b2ChainShape13SetPrevVertexERK6b2Vec2","__ZN12b2ChainShape13SetNextVertexERK6b2Vec2","__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f","__ZNK20b2SeparationFunction8EvaluateEiif","__ZN12b2ChainShapeD0Ev","__ZN12b2ChainShapeD2Ev","__ZN12b2ChainShape10CreateLoopEPK6b2Vec2i","__ZN12b2ChainShape11CreateChainEPK6b2Vec2i","__ZNK12b2ChainShape9TestPointERK11b2TransformRK6b2Vec2","__ZN11b2EdgeShapeD1Ev","__ZNK13b2CircleShape13GetChildCountEv","__ZN13b2CircleShapeD1Ev","__ZNK11b2EdgeShape13GetChildCountEv","__ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2","__ZNK12b2ChainShape13GetChildCountEv","__ZNK12b2ChainShape11ComputeMassEP10b2MassDataf","__ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2","__ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi","__ZNK13b2CircleShape11ComputeMassEP10b2MassDataf","__ZN11b2EdgeShape3SetERK6b2Vec2S2_","__ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi","__ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf","__ZNK12b2ChainShape5CloneEP16b2BlockAllocator","__ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei","__ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi","__ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi","__ZNK13b2CircleShape5CloneEP16b2BlockAllocator","__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi","__ZN13b2CircleShapeD0Ev","__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator","__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi","__ZN11b2EdgeShapeD0Ev","__ZNK14b2PolygonShape13GetChildCountEv","__ZN14b2PolygonShapeD1Ev","__ZN14b2PolygonShape8SetAsBoxEff","__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2","__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi","__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator","__ZN14b2PolygonShape8SetAsBoxEffRK6b2Vec2f","__ZN14b2PolygonShape3SetEPK6b2Vec2i","__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi","__ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf","__ZN14b2PolygonShapeD0Ev","__ZN16b2BlockAllocatorC2Ev","__ZN16b2BlockAllocatorD2Ev","__ZN6b2DrawD1Ev","__ZN6b2DrawC2Ev","__ZN6b2Draw8SetFlagsEj","__ZNK6b2Draw8GetFlagsEv","__ZN6b2Draw11AppendFlagsEj","__ZN6b2Draw10ClearFlagsEj","__ZNK7b2Mat337Solve33ERK6b2Vec3","__ZNK7b2Mat337Solve22ERK6b2Vec2","__ZNK7b2Mat3312GetInverse22EPS_","__ZNK7b2Mat3315GetSymInverse33EPS_","__ZN16b2StackAllocatorC2Ev","__ZNK16b2StackAllocator16GetMaxAllocationEv","__ZN16b2BlockAllocator8AllocateEi","__ZN16b2BlockAllocator4FreeEPvi","__ZN16b2BlockAllocator5ClearEv","__ZN6b2DrawD0Ev","__Z7b2Alloci","__Z6b2FreePv","__Z5b2LogPKcz","__ZN16b2StackAllocatorD2Ev","__ZN16b2StackAllocator8AllocateEi","__ZN16b2StackAllocator4FreeEPv","__ZN7b2TimerC2Ev","__ZN7b2Timer5ResetEv","__ZNK7b2Timer15GetMillisecondsEv","__ZN6b2BodyD2Ev","__ZN6b2BodyC2EPK9b2BodyDefP7b2World","__ZN6b2Body7SetTypeE10b2BodyType","__ZN6b2Body13ResetMassDataEv","__ZN6b2Body19SynchronizeFixturesEv","__ZN6b2Body13CreateFixtureEPK12b2FixtureDef","__ZN6b2Body13CreateFixtureEPK7b2Shapef","__ZN15b2ContactFilterD1Ev","__ZN17b2ContactListenerD1Ev","__ZNK6b2Body13ShouldCollideEPKS_","__ZN6b2Body14DestroyFixtureEP9b2Fixture","__ZN6b2Body11SetMassDataEPK10b2MassData","__ZN6b2Body12SetTransformERK6b2Vec2f","__ZN6b2Body9SetActiveEb","__ZN6b2Body4DumpEv","__ZN16b2ContactManagerC2Ev","__ZN16b2ContactManager7DestroyEP9b2Contact","__Z14b2PairLessThanRK6b2PairS1_","__ZN16b2ContactManager7CollideEv","__ZN16b2ContactManager15FindNewContactsEv","__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_","__ZN16b2ContactManager7AddPairEPvS0_","__ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB","__ZN17b2ContactListener12BeginContactEP9b2Contact","__ZN17b2ContactListener10EndContactEP9b2Contact","__ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold","__ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse","__ZN9b2FixtureC2Ev","__ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_","__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_","__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_","__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_","__ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_","__ZN17b2ContactListenerD0Ev","__ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef","__ZN9b2Fixture9SetSensorEb","__ZN9b2Fixture7DestroyEP16b2BlockAllocator","__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform","__ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase","__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_","__ZN9b2Fixture13SetFilterDataERK8b2Filter","__ZN9b2Fixture8RefilterEv","__ZN9b2Fixture4DumpEi","__ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener","__ZN8b2IslandD2Ev","__ZN8b2Island6ReportEPK27b2ContactVelocityConstraint","__ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b","__ZN7b2World22SetDestructionListenerEP21b2DestructionListener","__ZN7b2World16SetContactFilterEP15b2ContactFilter","__ZN7b2World18SetContactListenerEP17b2ContactListener","__ZN7b2World12SetDebugDrawEP6b2Draw","__ZN7b2WorldC2ERK6b2Vec2","__ZN7b2World10CreateBodyEPK9b2BodyDef","__ZN8b2Island8SolveTOIERK10b2TimeStepii","__ZN7b2WorldD2Ev","__ZN7b2World16SetAllowSleepingEb","__ZN7b2World11DestroyBodyEP6b2Body","__ZN7b2World12DestroyJointEP7b2Joint","__ZN7b2World11CreateJointEPK10b2JointDef","__ZN7b2World5SolveERK10b2TimeStep","__ZN7b2World8SolveTOIERK10b2TimeStep","__ZN7b2World11ClearForcesEv","__ZN7b2World4StepEfii","__ZNK7b2World9QueryAABBEP15b2QueryCallbackRK6b2AABB","__ZNK7b2World7RayCastEP17b2RayCastCallbackRK6b2Vec2S4_","__ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color","__ZN7b2World9DrawJointEP7b2Joint","__ZNK7b2World13GetProxyCountEv","__ZNK7b2World13GetTreeHeightEv","__ZNK7b2World14GetTreeQualityEv","__ZN7b2World13DrawDebugDataEv","__ZNK7b2World14GetTreeBalanceEv","__ZN7b2World4DumpEv","__ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput","__ZN23b2ChainAndCircleContactD1Ev","__ZN24b2ChainAndPolygonContactD1Ev","__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_","__ZN21b2WorldRayCastWrapper15RayCastCallbackERK14b2RayCastInputi","__ZNK13b2DynamicTree5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB","__ZN15b2ContactFilterD0Ev","__ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i","__ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN23b2ChainAndCircleContactD0Ev","__ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i","__ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN24b2ChainAndPolygonContactD0Ev","__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZN15b2CircleContactC2EP9b2FixtureS1_","__ZN15b2CircleContactD1Ev","__ZN9b2Contact19InitializeRegistersEv","__ZN9b2ContactD1Ev","__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN15b2CircleContactD0Ev","__ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_","__ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN9b2Contact7DestroyEPS_P16b2BlockAllocator","__ZN9b2ContactC2EP9b2FixtureiS1_i","__ZN9b2Contact6UpdateEP17b2ContactListener","__ZN9b2ContactD0Ev","__ZN15b2ContactSolverC2EP18b2ContactSolverDef","__ZN15b2ContactSolver9WarmStartEv","__ZN15b2ContactSolverD2Ev","__ZN15b2ContactSolver29InitializeVelocityConstraintsEv","__ZN15b2ContactSolver13StoreImpulsesEv","__ZN15b2ContactSolver24SolveVelocityConstraintsEv","__ZN15b2ContactSolver24SolvePositionConstraintsEv","__ZN22b2EdgeAndCircleContactD1Ev","__ZN23b2EdgeAndPolygonContactD1Ev","__ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i","__ZN15b2ContactSolver27SolveTOIPositionConstraintsEii","__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_","__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN22b2EdgeAndCircleContactD0Ev","__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_","__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN23b2EdgeAndPolygonContactD0Ev","__ZN25b2PolygonAndCircleContactD1Ev","__ZN16b2PolygonContactD1Ev","__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_","__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN25b2PolygonAndCircleContactD0Ev","__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator","__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator","__ZN16b2PolygonContactC2EP9b2FixtureS1_","__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_","__ZN16b2PolygonContactD0Ev","__ZN18b2DistanceJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_","__ZN15b2DistanceJointC2EPK18b2DistanceJointDef","__ZN15b2DistanceJoint23InitVelocityConstraintsERK12b2SolverData","__ZNK15b2DistanceJoint17GetReactionTorqueEf","__ZN15b2DistanceJointD1Ev","__ZN15b2DistanceJoint24SolveVelocityConstraintsERK12b2SolverData","__ZNK15b2DistanceJoint10GetAnchorAEv","__ZNK15b2DistanceJoint10GetAnchorBEv","__ZNK15b2DistanceJoint16GetReactionForceEf","__ZN18b2FrictionJointDef10InitializeEP6b2BodyS1_RK6b2Vec2","__ZN15b2DistanceJoint24SolvePositionConstraintsERK12b2SolverData","__ZN15b2DistanceJoint4DumpEv","__ZN15b2DistanceJointD0Ev","__ZN15b2FrictionJointC2EPK18b2FrictionJointDef","__ZN15b2FrictionJoint23InitVelocityConstraintsERK12b2SolverData","__ZN15b2FrictionJoint24SolvePositionConstraintsERK12b2SolverData","__ZN15b2FrictionJointD1Ev","__ZNK15b2FrictionJoint10GetAnchorAEv","__ZNK15b2FrictionJoint10GetAnchorBEv","__ZNK15b2FrictionJoint16GetReactionForceEf","__ZNK15b2FrictionJoint17GetReactionTorqueEf","__ZNK15b2FrictionJoint11GetMaxForceEv","__ZNK15b2FrictionJoint12GetMaxTorqueEv","__ZN15b2FrictionJoint24SolveVelocityConstraintsERK12b2SolverData","__ZN15b2FrictionJoint11SetMaxForceEf","__ZN15b2FrictionJoint12SetMaxTorqueEf","__ZN15b2FrictionJoint4DumpEv","__ZN15b2FrictionJointD0Ev","__ZN11b2GearJointC2EPK14b2GearJointDef","__ZN11b2GearJoint24SolveVelocityConstraintsERK12b2SolverData","__ZN11b2GearJoint23InitVelocityConstraintsERK12b2SolverData","__ZN11b2GearJointD1Ev","__ZNK11b2GearJoint10GetAnchorAEv","__ZNK11b2GearJoint10GetAnchorBEv","__ZNK11b2GearJoint16GetReactionForceEf","__ZNK11b2GearJoint17GetReactionTorqueEf","__ZNK11b2GearJoint8GetRatioEv","__ZN11b2GearJoint24SolvePositionConstraintsERK12b2SolverData","__ZN11b2GearJoint8SetRatioEf","__ZN11b2GearJoint4DumpEv","__ZN11b2GearJointD0Ev","__ZN7b2JointD1Ev","__ZNK7b2Joint8IsActiveEv","__ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator","__ZN7b2Joint7DestroyEPS_P16b2BlockAllocator","__ZN7b2JointC2EPK10b2JointDef","__ZN7b2Joint4DumpEv","__ZN7b2JointD0Ev","__ZN12b2MouseJoint24SolvePositionConstraintsERK12b2SolverData","__ZN12b2MouseJointD1Ev","__ZNK12b2MouseJoint17GetReactionTorqueEf","__ZN12b2MouseJoint9SetTargetERK6b2Vec2","__ZNK12b2MouseJoint9GetTargetEv","__ZN12b2MouseJoint11SetMaxForceEf","__ZNK12b2MouseJoint11GetMaxForceEv","__ZN12b2MouseJoint12SetFrequencyEf","__ZNK12b2MouseJoint12GetFrequencyEv","__ZN12b2MouseJoint15SetDampingRatioEf","__ZNK12b2MouseJoint15GetDampingRatioEv","__ZNK12b2MouseJoint10GetAnchorAEv","__ZNK12b2MouseJoint10GetAnchorBEv","__ZNK12b2MouseJoint16GetReactionForceEf","__ZN19b2PrismaticJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_","__ZN12b2MouseJointC2EPK15b2MouseJointDef","__ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData","__ZN12b2MouseJoint24SolveVelocityConstraintsERK12b2SolverData","__ZN12b2MouseJoint4DumpEv","__ZN12b2MouseJointD0Ev","__ZN16b2PrismaticJointC2EPK19b2PrismaticJointDef","__ZN16b2PrismaticJoint23InitVelocityConstraintsERK12b2SolverData","__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK12b2SolverData","__ZNK16b2PrismaticJoint10GetAnchorAEv","__ZNK16b2PrismaticJoint10GetAnchorBEv","__ZNK16b2PrismaticJoint16GetReactionForceEf","__ZNK16b2PrismaticJoint17GetReactionTorqueEf","__ZNK16b2PrismaticJoint19GetJointTranslationEv","__ZNK16b2PrismaticJoint13GetJointSpeedEv","__ZNK16b2PrismaticJoint14IsLimitEnabledEv","__ZN16b2PrismaticJoint11EnableLimitEb","__ZNK16b2PrismaticJoint13GetLowerLimitEv","__ZNK16b2PrismaticJoint13GetUpperLimitEv","__ZNK16b2PrismaticJoint14IsMotorEnabledEv","__ZN16b2PrismaticJoint11EnableMotorEb","__ZN16b2PrismaticJoint13SetMotorSpeedEf","__ZN16b2PrismaticJoint16SetMaxMotorForceEf","__ZNK16b2PrismaticJoint13GetMotorForceEf","__ZN16b2PrismaticJoint24SolvePositionConstraintsERK12b2SolverData","__ZN16b2PrismaticJoint9SetLimitsEff","__ZN16b2PrismaticJointD1Ev","__ZN13b2PulleyJoint24SolveVelocityConstraintsERK12b2SolverData","__ZN16b2PrismaticJoint4DumpEv","__ZN16b2PrismaticJointD0Ev","__ZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_f","__ZN13b2PulleyJointC2EPK16b2PulleyJointDef","__ZN13b2PulleyJoint23InitVelocityConstraintsERK12b2SolverData","__ZN13b2PulleyJoint24SolvePositionConstraintsERK12b2SolverData","__ZNK13b2PulleyJoint17GetReactionTorqueEf","__ZN13b2PulleyJointD1Ev","__ZNK13b2PulleyJoint10GetAnchorAEv","__ZNK13b2PulleyJoint10GetAnchorBEv","__ZNK13b2PulleyJoint16GetReactionForceEf","__ZNK13b2PulleyJoint16GetGroundAnchorAEv","__ZNK13b2PulleyJoint16GetGroundAnchorBEv","__ZNK13b2PulleyJoint8GetRatioEv","__ZN18b2RevoluteJointDef10InitializeEP6b2BodyS1_RK6b2Vec2","__ZNK13b2PulleyJoint10GetLengthAEv","__ZNK13b2PulleyJoint10GetLengthBEv","__ZN13b2PulleyJoint4DumpEv","__ZN13b2PulleyJointD0Ev","__ZN15b2RevoluteJointC2EPK18b2RevoluteJointDef","__ZN15b2RevoluteJoint23InitVelocityConstraintsERK12b2SolverData","__ZNK15b2RevoluteJoint10GetAnchorAEv","__ZNK15b2RevoluteJoint10GetAnchorBEv","__ZNK15b2RevoluteJoint16GetReactionForceEf","__ZNK15b2RevoluteJoint17GetReactionTorqueEf","__ZNK15b2RevoluteJoint13GetJointAngleEv","__ZNK15b2RevoluteJoint13GetJointSpeedEv","__ZNK15b2RevoluteJoint14IsMotorEnabledEv","__ZN15b2RevoluteJoint11EnableMotorEb","__ZNK15b2RevoluteJoint14GetMotorTorqueEf","__ZN15b2RevoluteJoint13SetMotorSpeedEf","__ZN15b2RevoluteJoint17SetMaxMotorTorqueEf","__ZNK15b2RevoluteJoint14IsLimitEnabledEv","__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK12b2SolverData","__ZN15b2RevoluteJoint24SolvePositionConstraintsERK12b2SolverData","__ZN15b2RevoluteJointD1Ev","__ZNK11b2RopeJoint17GetReactionTorqueEf","__ZN15b2RevoluteJoint11EnableLimitEb","__ZNK15b2RevoluteJoint13GetLowerLimitEv","__ZNK15b2RevoluteJoint13GetUpperLimitEv","__ZN11b2RopeJoint24SolveVelocityConstraintsERK12b2SolverData","__ZNK11b2RopeJoint10GetAnchorAEv","__ZNK11b2RopeJoint10GetAnchorBEv","__ZNK11b2RopeJoint16GetReactionForceEf","__ZNK11b2RopeJoint12GetMaxLengthEv","__ZNK11b2RopeJoint13GetLimitStateEv","__ZN15b2RevoluteJoint9SetLimitsEff","__ZN15b2RevoluteJoint4DumpEv","__ZN15b2RevoluteJointD0Ev","__ZN11b2RopeJointC2EPK14b2RopeJointDef","__ZN11b2RopeJoint23InitVelocityConstraintsERK12b2SolverData","__ZN11b2RopeJoint24SolvePositionConstraintsERK12b2SolverData","__ZN11b2RopeJointD1Ev","__ZN14b2WeldJointDef10InitializeEP6b2BodyS1_RK6b2Vec2","__ZN11b2WeldJoint24SolveVelocityConstraintsERK12b2SolverData","__ZN11b2RopeJoint4DumpEv","__ZN11b2RopeJointD0Ev","__ZN11b2WeldJointC2EPK14b2WeldJointDef","__ZN11b2WeldJoint23InitVelocityConstraintsERK12b2SolverData","__ZN11b2WeldJointD1Ev","__ZNK11b2WeldJoint10GetAnchorAEv","__ZNK11b2WeldJoint10GetAnchorBEv","__ZNK11b2WeldJoint16GetReactionForceEf","__ZNK11b2WeldJoint17GetReactionTorqueEf","__ZN15b2WheelJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_","__ZN11b2WeldJoint24SolvePositionConstraintsERK12b2SolverData","__ZN11b2WeldJoint4DumpEv","__ZN11b2WeldJointD0Ev","__ZN12b2WheelJointC2EPK15b2WheelJointDef","__ZN12b2WheelJoint24SolveVelocityConstraintsERK12b2SolverData","__ZNK12b2WheelJoint10GetAnchorAEv","__ZNK12b2WheelJoint10GetAnchorBEv","__ZNK12b2WheelJoint16GetReactionForceEf","__ZNK12b2WheelJoint17GetReactionTorqueEf","__ZNK12b2WheelJoint19GetJointTranslationEv","__ZNK12b2WheelJoint13GetJointSpeedEv","__ZNK12b2WheelJoint14IsMotorEnabledEv","__ZN12b2WheelJoint11EnableMotorEb","__ZN12b2WheelJoint23InitVelocityConstraintsERK12b2SolverData","__ZN12b2WheelJoint24SolvePositionConstraintsERK12b2SolverData","__ZN12b2WheelJointD1Ev","__ZN12b2WheelJoint13SetMotorSpeedEf","__ZN12b2WheelJoint17SetMaxMotorTorqueEf","__ZNK12b2WheelJoint14GetMotorTorqueEf","__ZN6b2Rope8SetAngleEf","_emscripten_bind_b2ContactManager__get_m_contactFilter_p0","_emscripten_bind_b2ContactManager__get_m_contactCount_p0","_emscripten_bind_b2ContactManager__set_m_contactFilter_p1","_emscripten_bind_b2ContactManager__set_m_allocator_p1","_emscripten_bind_b2ContactManager__set_m_contactCount_p1","_emscripten_bind_b2ContactManager__set_m_contactList_p1","__ZN12b2WheelJoint4DumpEv","__ZN12b2WheelJointD0Ev","__ZN6b2RopeC2Ev","__ZN6b2RopeD2Ev","__ZN6b2Rope10InitializeEPK9b2RopeDef","__ZN6b2Rope4StepEfi","__ZN6b2Rope7SolveC2Ev","__ZN6b2Rope7SolveC3Ev","__ZNK6b2Rope4DrawEP6b2Draw","_emscripten_bind_b2ContactManager__b2ContactManager_p0","_emscripten_bind_b2ContactManager__AddPair_p2","_emscripten_bind_b2ContactManager__Collide_p0","_emscripten_bind_b2ContactManager__get_m_contactListener_p0","_emscripten_bind_b2ContactManager__set_m_contactListener_p1","_emscripten_bind_b2ContactManager__get_m_broadPhase_p0","_emscripten_bind_b2ContactManager__get_m_contactList_p0","_emscripten_bind_b2ContactManager__get_m_allocator_p0","_emscripten_bind_b2BroadPhase__GetTreeQuality_p0","_emscripten_bind_b2BroadPhase__GetTreeHeight_p0","_emscripten_bind_b2BroadPhase__GetProxyCount_p0","_emscripten_bind_b2World__SetSubStepping_p1","_emscripten_bind_b2World__GetTreeQuality_p0","_emscripten_bind_b2World__GetTreeHeight_p0","_emscripten_bind_b2World__GetProfile_p0","_emscripten_bind_b2World__GetSubStepping_p0","_emscripten_bind_b2World__GetContactManager_p0","_emscripten_bind_b2World__SetContactListener_p1","_emscripten_bind_b2World__SetContinuousPhysics_p1","_emscripten_bind_b2World__SetGravity_p1","_emscripten_bind_b2World__GetBodyCount_p0","_emscripten_bind_b2World__GetAutoClearForces_p0","_emscripten_bind_b2World__GetContinuousPhysics_p0","_emscripten_bind_b2World__GetJointList_p0","_emscripten_bind_b2World__GetBodyList_p0","_emscripten_bind_b2World__SetDestructionListener_p1","_emscripten_bind_b2World__GetJointCount_p0","_emscripten_bind_b2World__ClearForces_p0","_emscripten_bind_b2World__GetWarmStarting_p0","_emscripten_bind_b2World__SetAllowSleeping_p1","_emscripten_bind_b2World__GetAllowSleeping_p0","_emscripten_bind_b2World__GetProxyCount_p0","_emscripten_bind_b2ContactManager__FindNewContacts_p0","_emscripten_bind_b2ContactManager____destroy___p0","_emscripten_bind_b2ContactManager__Destroy_p1","_emscripten_bind_b2ContactManager__set_m_broadPhase_p1","_emscripten_bind_b2BroadPhase__GetFatAABB_p1","_emscripten_bind_b2BroadPhase__GetUserData_p1","_emscripten_bind_b2BroadPhase____destroy___p0","_emscripten_bind_b2BroadPhase__b2BroadPhase_p0","_emscripten_bind_b2BroadPhase__GetTreeBalance_p0","_emscripten_bind_b2BroadPhase__TestOverlap_p2","_emscripten_bind_b2BroadPhase__TouchProxy_p1","_emscripten_bind_b2BroadPhase__CreateProxy_p2","_emscripten_bind_b2BroadPhase__MoveProxy_p3","_emscripten_bind_b2BroadPhase__DestroyProxy_p1","_emscripten_bind_b2World__QueryAABB_p2","_emscripten_bind_b2World__GetTreeBalance_p0","_emscripten_bind_b2World__DrawDebugData_p0","_emscripten_bind_b2World__CreateBody_p1","_emscripten_bind_b2World__DestroyJoint_p1","_emscripten_bind_b2World__b2World_p1","_emscripten_bind_b2World__Step_p3","_emscripten_bind_b2World__DestroyBody_p1","_emscripten_bind_b2World__CreateJoint_p1","_emscripten_bind_b2World__RayCast_p3","_emscripten_bind_b2CircleShape__GetVertexCount_p0","_emscripten_bind_b2CircleShape__GetSupport_p1","_emscripten_bind_b2World__IsLocked_p0","_emscripten_bind_b2World__GetContactList_p0","_emscripten_bind_b2World__SetDebugDraw_p1","_emscripten_bind_b2World__SetAutoClearForces_p1","_emscripten_bind_b2World__GetContactCount_p0","_emscripten_bind_b2World__SetWarmStarting_p1","_emscripten_bind_b2World__SetContactFilter_p1","_emscripten_bind_b2CircleShape__GetType_p0","_emscripten_bind_b2CircleShape__set_m_radius_p1","_emscripten_bind_b2CircleShape__get_m_radius_p0","_emscripten_bind_b2CircleShape__GetVertex_p1","_emscripten_bind_b2CircleShape__GetSupportVertex_p1","_emscripten_bind_b2CircleShape__set_m_p_p1","_emscripten_bind_b2CircleShape__get_m_p_p0","_emscripten_bind_b2Draw__AppendFlags_p1","_emscripten_bind_b2Draw__ClearFlags_p1","_emscripten_bind_b2Draw__SetFlags_p1","_emscripten_bind_b2Draw__GetFlags_p0","_emscripten_bind_b2Joint__GetNext_p0","_emscripten_bind_b2Joint__GetBodyA_p0","_emscripten_bind_b2Joint__GetBodyB_p0","_emscripten_bind_b2Joint__GetUserData_p0","_emscripten_bind_b2Joint__GetType_p0","_emscripten_bind_b2Joint__SetUserData_p1","_emscripten_bind_b2Joint__GetCollideConnected_p0","_emscripten_bind_b2Joint__IsActive_p0","_emscripten_bind_b2DynamicTree__GetHeight_p0","_emscripten_bind_b2DynamicTree__GetAreaRatio_p0","_emscripten_bind_b2ChainShape__GetType_p0","_emscripten_bind_b2ChainShape__set_m_radius_p1","_emscripten_bind_b2World____destroy___p0","_emscripten_bind_b2World__Dump_p0","_emscripten_bind_b2World__GetGravity_p0","_emscripten_bind_b2CircleShape____destroy___p0","_emscripten_bind_b2CircleShape__ComputeMass_p2","_emscripten_bind_b2CircleShape__Clone_p1","_emscripten_bind_b2CircleShape__RayCast_p4","_emscripten_bind_b2CircleShape__ComputeAABB_p3","_emscripten_bind_b2CircleShape__GetChildCount_p0","_emscripten_bind_b2CircleShape__TestPoint_p2","_emscripten_bind_b2CircleShape__b2CircleShape_p0","_emscripten_bind_b2Draw__DrawTransform_p1","_emscripten_bind_b2Draw__DrawPolygon_p3","_emscripten_bind_b2Draw__DrawSolidCircle_p4","_emscripten_bind_b2Draw__DrawSolidPolygon_p3","_emscripten_bind_b2Draw__DrawCircle_p3","_emscripten_bind_b2Draw__DrawSegment_p3","_emscripten_bind_b2Joint__GetReactionTorque_p1","_emscripten_bind_b2Joint__GetAnchorA_p0","_emscripten_bind_b2Joint__Dump_p0","_emscripten_bind_b2Joint__GetAnchorB_p0","_emscripten_bind_b2Joint__GetReactionForce_p1","_emscripten_bind_b2RayCastCallback__ReportFixture_p4","_emscripten_bind_b2DynamicTree____destroy___p0","_emscripten_bind_b2DynamicTree__b2DynamicTree_p0","_emscripten_bind_b2DynamicTree__GetFatAABB_p1","_emscripten_bind_b2DynamicTree__GetUserData_p1","_emscripten_bind_b2DynamicTree__GetMaxBalance_p0","_emscripten_bind_b2DynamicTree__RebuildBottomUp_p0","_emscripten_bind_b2DynamicTree__CreateProxy_p2","_emscripten_bind_b2DynamicTree__MoveProxy_p3","_emscripten_bind_b2DynamicTree__Validate_p0","_emscripten_bind_b2DynamicTree__DestroyProxy_p1","_emscripten_bind_b2Timer__b2Timer_p0","_emscripten_bind_b2Timer__Reset_p0","_emscripten_bind_b2Timer____destroy___p0","_emscripten_bind_b2Timer__GetMilliseconds_p0","_emscripten_bind_b2ChainShape____destroy___p0","_emscripten_bind_b2ChainShape__CreateChain_p2","_emscripten_bind_b2ChainShape__get_m_radius_p0","_emscripten_bind_b2ChainShape__get_m_vertices_p0","_emscripten_bind_b2ChainShape__get_m_count_p0","_emscripten_bind_b2ChainShape__SetPrevVertex_p1","_emscripten_bind_b2ChainShape__set_m_vertices_p1","_emscripten_bind_b2ChainShape__SetNextVertex_p1","_emscripten_bind_b2ChainShape__set_m_count_p1","_emscripten_bind_b2PolygonShape__set_m_radius_p1","_emscripten_bind_b2PolygonShape__get_m_radius_p0","_emscripten_bind_b2PolygonShape__GetVertex_p1","_emscripten_bind_b2PolygonShape__SetAsBox_p2","_emscripten_bind_b2PolygonShape__set_m_centroid_p1","_emscripten_bind_b2PolygonShape__set_m_vertexCount_p1","_emscripten_bind_b2PolygonShape__GetVertexCount_p0","_emscripten_bind_b2PolygonShape__GetType_p0","_emscripten_bind_b2PolygonShape__get_m_vertexCount_p0","_emscripten_bind_b2PolygonShape__get_m_centroid_p0","_emscripten_bind_b2EdgeShape__Set_p2","_emscripten_bind_b2EdgeShape__set_m_radius_p1","_emscripten_bind_b2EdgeShape__get_m_radius_p0","_emscripten_bind_b2EdgeShape__GetType_p0","_emscripten_bind_b2Contact__GetNext_p0","_emscripten_bind_b2Contact__SetEnabled_p1","_emscripten_bind_b2Contact__GetRestitution_p0","_emscripten_bind_b2Contact__GetFriction_p0","_emscripten_bind_b2Contact__IsTouching_p0","_emscripten_bind_b2Contact__IsEnabled_p0","_emscripten_bind_b2Contact__GetFixtureB_p0","_emscripten_bind_b2Contact__SetFriction_p1","_emscripten_bind_b2Contact__GetFixtureA_p0","_emscripten_bind_b2Contact__GetChildIndexA_p0","_emscripten_bind_b2Contact__GetChildIndexB_p0","_emscripten_bind_b2Contact__SetRestitution_p1","_emscripten_bind_b2Contact__GetManifold_p0","_emscripten_bind_b2Contact__ResetRestitution_p0","_emscripten_bind_b2Shape__get_m_radius_p0","_emscripten_bind_b2Shape__set_m_radius_p1","_emscripten_bind_b2Shape__GetType_p0","_emscripten_bind_b2Body__GetAngle_p0","_emscripten_bind_b2Body__GetUserData_p0","_emscripten_bind_b2Body__IsSleepingAllowed_p0","_emscripten_bind_b2Body__SetAngularDamping_p1","_emscripten_bind_b2ChainShape__ComputeMass_p2","_emscripten_bind_b2ChainShape__Clone_p1","_emscripten_bind_b2ChainShape__GetChildEdge_p2","_emscripten_bind_b2ChainShape__b2ChainShape_p0","_emscripten_bind_b2ChainShape__ComputeAABB_p3","_emscripten_bind_b2ChainShape__RayCast_p4","_emscripten_bind_b2ChainShape__GetChildCount_p0","_emscripten_bind_b2ChainShape__TestPoint_p2","_emscripten_bind_b2ChainShape__CreateLoop_p2","_emscripten_bind_b2QueryCallback__ReportFixture_p1","_emscripten_bind_b2BlockAllocator____destroy___p0","_emscripten_bind_b2BlockAllocator__Clear_p0","_emscripten_bind_b2BlockAllocator__Free_p2","_emscripten_bind_b2BlockAllocator__Allocate_p1","_emscripten_bind_b2BlockAllocator__b2BlockAllocator_p0","_emscripten_bind_b2PolygonShape____destroy___p0","_emscripten_bind_b2PolygonShape__Set_p2","_emscripten_bind_b2PolygonShape__ComputeMass_p2","_emscripten_bind_b2PolygonShape__Clone_p1","_emscripten_bind_b2PolygonShape__RayCast_p4","_emscripten_bind_b2PolygonShape__SetAsBox_p4","_emscripten_bind_b2PolygonShape__ComputeAABB_p3","_emscripten_bind_b2PolygonShape__GetChildCount_p0","_emscripten_bind_b2PolygonShape__TestPoint_p2","_emscripten_bind_b2PolygonShape__b2PolygonShape_p0","_emscripten_bind_b2EdgeShape____destroy___p0","_emscripten_bind_b2EdgeShape__ComputeMass_p2","_emscripten_bind_b2EdgeShape__Clone_p1","_emscripten_bind_b2EdgeShape__RayCast_p4","_emscripten_bind_b2EdgeShape__ComputeAABB_p3","_emscripten_bind_b2EdgeShape__GetChildCount_p0","_emscripten_bind_b2EdgeShape__TestPoint_p2","_emscripten_bind_b2EdgeShape__b2EdgeShape_p0","_emscripten_bind_b2Contact__GetWorldManifold_p1","_emscripten_bind_b2Contact__ResetFriction_p0","_emscripten_bind_b2Contact__Evaluate_p3","_emscripten_bind_b2Shape__ComputeMass_p2","_emscripten_bind_b2Shape__Clone_p1","_emscripten_bind_b2Shape__RayCast_p4","_emscripten_bind_b2Shape__ComputeAABB_p3","_emscripten_bind_b2Shape__GetChildCount_p0","_emscripten_bind_b2Shape__TestPoint_p2","_emscripten_bind_b2Body__SetActive_p1","_emscripten_bind_b2Body__SetGravityScale_p1","_emscripten_bind_b2Body__SetUserData_p1","_emscripten_bind_b2Body__GetAngularVelocity_p0","_emscripten_bind_b2Body__GetFixtureList_p0","_emscripten_bind_b2Body__ApplyForce_p2","_emscripten_bind_b2Body__SetLinearVelocity_p1","_emscripten_bind_b2Body__GetJointList_p0","_emscripten_bind_b2Body__GetNext_p0","_emscripten_bind_b2Body__SetSleepingAllowed_p1","_emscripten_bind_b2Body__GetMass_p0","_emscripten_bind_b2Body__SetAngularVelocity_p1","_emscripten_bind_b2Body__GetMassData_p1","_emscripten_bind_b2Body__ApplyForceToCenter_p1","_emscripten_bind_b2Body__ApplyTorque_p1","_emscripten_bind_b2Body__IsAwake_p0","_emscripten_bind_b2Body__GetTransform_p0","_emscripten_bind_b2Body__GetWorldCenter_p0","_emscripten_bind_b2Body__GetAngularDamping_p0","_emscripten_bind_b2Body__ApplyLinearImpulse_p2","_emscripten_bind_b2Body__IsFixedRotation_p0","_emscripten_bind_b2Body__GetLocalCenter_p0","_emscripten_bind_b2Body__GetContactList_p0","_emscripten_bind_b2Body__SetAwake_p1","_emscripten_bind_b2Body__GetLinearDamping_p0","_emscripten_bind_b2Body__IsBullet_p0","_emscripten_bind_b2Body__GetWorld_p0","_emscripten_bind_b2Body__SetLinearDamping_p1","_emscripten_bind_b2Body__SetBullet_p1","_emscripten_bind_b2Body__GetType_p0","_emscripten_bind_b2Body__GetGravityScale_p0","_emscripten_bind_b2Body__GetInertia_p0","_emscripten_bind_b2Body__IsActive_p0","_emscripten_bind_b2Body__ApplyAngularImpulse_p1","_emscripten_bind_b2Body__GetPosition_p0","_emscripten_bind_b2StackAllocator__GetMaxAllocation_p0","_emscripten_bind_b2Body__GetLocalPoint_p1","_emscripten_bind_b2Body__GetLinearVelocity_p0","_emscripten_bind_b2Body__SetTransform_p2","_emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1","_emscripten_bind_b2Body__ResetMassData_p0","_emscripten_bind_b2Body__SetType_p1","_emscripten_bind_b2Body__CreateFixture_p1","_emscripten_bind_b2Body__CreateFixture_p2","_emscripten_bind_b2Body__SetMassData_p1","_emscripten_bind_b2Body__GetWorldVector_p1","_emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1","_emscripten_bind_b2Body__GetWorldPoint_p1","_emscripten_bind_b2Body__GetLocalVector_p1","_emscripten_bind_b2Body__Dump_p0","_emscripten_bind_b2Body__DestroyFixture_p1","_emscripten_bind_b2Body__SetFixedRotation_p1","_emscripten_bind_b2StackAllocator____destroy___p0","_emscripten_bind_b2Filter__set_maskBits_p1","_emscripten_bind_b2Filter__set_categoryBits_p1","_emscripten_bind_b2Filter__get_groupIndex_p0","_emscripten_bind_b2Filter__set_groupIndex_p1","_emscripten_bind_b2Filter__get_maskBits_p0","_emscripten_bind_b2Filter__get_categoryBits_p0","_emscripten_bind_b2FrictionJointDef__set_localAnchorA_p1","_emscripten_bind_b2FrictionJointDef__set_localAnchorB_p1","_emscripten_bind_b2FrictionJointDef__get_maxForce_p0","_emscripten_bind_b2FrictionJointDef__get_localAnchorA_p0","_emscripten_bind_b2FrictionJointDef__set_maxForce_p1","_emscripten_bind_b2FrictionJointDef__get_localAnchorB_p0","_emscripten_bind_b2FrictionJointDef__set_maxTorque_p1","_emscripten_bind_b2FrictionJointDef__get_maxTorque_p0","_emscripten_bind_b2FrictionJointDef__Initialize_p3","_emscripten_bind_b2BodyDef__get_linearDamping_p0","_emscripten_bind_b2BodyDef__get_awake_p0","_emscripten_bind_b2BodyDef__get_type_p0","_emscripten_bind_b2BodyDef__get_allowSleep_p0","_emscripten_bind_b2BodyDef__set_position_p1","_emscripten_bind_b2BodyDef__set_linearVelocity_p1","_emscripten_bind_b2BodyDef__get_bullet_p0","_emscripten_bind_b2BodyDef__get_userData_p0","_emscripten_bind_b2BodyDef__set_angularDamping_p1","_emscripten_bind_b2BodyDef__set_fixedRotation_p1","_emscripten_bind_b2BodyDef__set_allowSleep_p1","_emscripten_bind_b2BodyDef__get_gravityScale_p0","_emscripten_bind_b2BodyDef__set_angularVelocity_p1","_emscripten_bind_b2BodyDef__set_userData_p1","_emscripten_bind_b2BodyDef__get_position_p0","_emscripten_bind_b2BodyDef__set_type_p1","_emscripten_bind_b2BodyDef__set_gravityScale_p1","_emscripten_bind_b2BodyDef__get_angularDamping_p0","_emscripten_bind_b2BodyDef__set_bullet_p1","_emscripten_bind_b2BodyDef__set_active_p1","_emscripten_bind_b2BodyDef__set_angle_p1","_emscripten_bind_b2BodyDef__get_angle_p0","_emscripten_bind_b2BodyDef__get_angularVelocity_p0","_emscripten_bind_b2BodyDef__get_linearVelocity_p0","_emscripten_bind_b2BodyDef__get_active_p0","_emscripten_bind_b2BodyDef__set_linearDamping_p1","_emscripten_bind_b2BodyDef__get_fixedRotation_p0","_emscripten_bind_b2BodyDef__set_awake_p1","_emscripten_bind_b2Vec2__set_x_p1","_emscripten_bind_b2Vec2__Set_p2","_emscripten_bind_b2Vec2__get_x_p0","_emscripten_bind_b2Vec2__get_y_p0","_emscripten_bind_b2Vec2__set_y_p1","_emscripten_bind_b2Vec2__IsValid_p0","_emscripten_bind_b2Vec2__LengthSquared_p0","_emscripten_bind_b2Vec2__op_add_p1","_emscripten_bind_b2Vec2__SetZero_p0","_emscripten_bind_b2Vec2__op_mul_p1","_emscripten_bind_b2Vec3__set_z_p1","_emscripten_bind_b2Vec3__Set_p3","_emscripten_bind_b2Vec3__get_z_p0","_emscripten_bind_b2Vec3__op_add_p1","_emscripten_bind_b2Vec3__SetZero_p0","_emscripten_bind_b2Vec3__op_mul_p1","_emscripten_bind_b2DistanceProxy__get_m_radius_p0","_emscripten_bind_b2DistanceProxy__set_m_radius_p1","_emscripten_bind_b2DistanceProxy__get_m_vertices_p0","_emscripten_bind_b2StackAllocator__b2StackAllocator_p0","_emscripten_bind_b2StackAllocator__Allocate_p1","_emscripten_bind_b2StackAllocator__Free_p1","_emscripten_bind_b2DestructionListener__SayGoodbye_p1","_emscripten_bind_b2Filter____destroy___p0","_emscripten_bind_b2Filter__b2Filter_p0","_emscripten_bind_b2FrictionJointDef____destroy___p0","_emscripten_bind_b2FrictionJointDef__b2FrictionJointDef_p0","_emscripten_bind_b2BodyDef__b2BodyDef_p0","_emscripten_bind_b2BodyDef____destroy___p0","_emscripten_bind_b2Vec2__Normalize_p0","_emscripten_bind_b2Vec2__b2Vec2_p0","_emscripten_bind_b2Vec2__b2Vec2_p2","_emscripten_bind_b2Vec2__Skew_p0","_emscripten_bind_b2Vec2__Length_p0","_emscripten_bind_b2Vec2____destroy___p0","_emscripten_bind_b2Vec2__op_sub_p0","_emscripten_bind_b2Vec3____destroy___p0","_emscripten_bind_b2Vec3__b2Vec3_p0","_emscripten_bind_b2Vec3__b2Vec3_p3","_emscripten_bind_b2Vec3__op_sub_p0","_emscripten_bind_b2DistanceProxy__Set_p2","_emscripten_bind_b2DistanceProxy__b2DistanceProxy_p0","_emscripten_bind_b2DistanceProxy____destroy___p0","_emscripten_bind_b2DistanceProxy__GetSupportVertex_p1","_emscripten_bind_b2DistanceProxy__get_m_count_p0","_emscripten_bind_b2DistanceProxy__GetVertexCount_p0","_emscripten_bind_b2DistanceProxy__GetSupport_p1","_emscripten_bind_b2DistanceProxy__set_m_vertices_p1","_emscripten_bind_b2DistanceProxy__set_m_count_p1","_emscripten_bind_b2FixtureDef__get_isSensor_p0","_emscripten_bind_b2FixtureDef__set_userData_p1","_emscripten_bind_b2FixtureDef__set_shape_p1","_emscripten_bind_b2FixtureDef__get_density_p0","_emscripten_bind_b2FixtureDef__get_shape_p0","_emscripten_bind_b2FixtureDef__set_density_p1","_emscripten_bind_b2FixtureDef__set_restitution_p1","_emscripten_bind_b2FixtureDef__get_restitution_p0","_emscripten_bind_b2FixtureDef__set_isSensor_p1","_emscripten_bind_b2FixtureDef__get_filter_p0","_emscripten_bind_b2FixtureDef__get_friction_p0","_emscripten_bind_b2FixtureDef__set_friction_p1","_emscripten_bind_b2FixtureDef__get_userData_p0","_emscripten_bind_b2PrismaticJointDef__set_localAnchorA_p1","_emscripten_bind_b2PrismaticJointDef__set_localAnchorB_p1","_emscripten_bind_b2PrismaticJointDef__get_motorSpeed_p0","_emscripten_bind_b2PrismaticJointDef__get_enableMotor_p0","_emscripten_bind_b2PrismaticJointDef__get_referenceAngle_p0","_emscripten_bind_b2PrismaticJointDef__set_enableLimit_p1","_emscripten_bind_b2PrismaticJointDef__set_motorSpeed_p1","_emscripten_bind_b2PrismaticJointDef__get_localAxisA_p0","_emscripten_bind_b2PrismaticJointDef__set_upperTranslation_p1","_emscripten_bind_b2PrismaticJointDef__Initialize_p4","_emscripten_bind_b2PrismaticJointDef__set_lowerTranslation_p1","_emscripten_bind_b2PrismaticJointDef__get_upperTranslation_p0","_emscripten_bind_b2PrismaticJointDef__get_enableLimit_p0","_emscripten_bind_b2PrismaticJointDef__set_referenceAngle_p1","_emscripten_bind_b2PrismaticJointDef__get_localAnchorA_p0","_emscripten_bind_b2PrismaticJointDef__get_localAnchorB_p0","_emscripten_bind_b2PrismaticJointDef__get_maxMotorForce_p0","_emscripten_bind_b2PrismaticJointDef__set_maxMotorForce_p1","_emscripten_bind_b2PrismaticJointDef__set_enableMotor_p1","_emscripten_bind_b2PrismaticJointDef__get_lowerTranslation_p0","_emscripten_bind_b2PrismaticJointDef__set_localAxisA_p1","_emscripten_bind_b2Rot__set_c_p1","_emscripten_bind_b2Rot__SetIdentity_p0","_emscripten_bind_b2Rot__get_c_p0","_emscripten_bind_b2WheelJointDef__set_localAnchorA_p1","_emscripten_bind_b2WheelJointDef__set_motorSpeed_p1","_emscripten_bind_b2WheelJointDef__get_localAxisA_p0","_emscripten_bind_b2WheelJointDef__set_localAnchorB_p1","_emscripten_bind_b2WheelJointDef__get_frequencyHz_p0","_emscripten_bind_b2WheelJointDef__set_maxMotorTorque_p1","_emscripten_bind_b2WheelJointDef__get_enableMotor_p0","_emscripten_bind_b2WheelJointDef__get_localAnchorA_p0","_emscripten_bind_b2WheelJointDef__get_maxMotorTorque_p0","_emscripten_bind_b2WheelJointDef__get_localAnchorB_p0","_emscripten_bind_b2WheelJointDef__get_dampingRatio_p0","_emscripten_bind_b2WheelJointDef__set_enableMotor_p1","_emscripten_bind_b2WheelJointDef__set_frequencyHz_p1","_emscripten_bind_b2WheelJointDef__Initialize_p4","_emscripten_bind_b2WheelJointDef__set_dampingRatio_p1","_emscripten_bind_b2WheelJointDef__set_localAxisA_p1","_emscripten_bind_b2WheelJointDef__get_motorSpeed_p0","_emscripten_bind_b2RevoluteJointDef__set_localAnchorA_p1","_emscripten_bind_b2RevoluteJointDef__get_lowerAngle_p0","_emscripten_bind_b2RevoluteJointDef__set_upperAngle_p1","_emscripten_bind_b2RevoluteJointDef__set_localAnchorB_p1","_emscripten_bind_b2RevoluteJointDef__get_enableLimit_p0","_emscripten_bind_b2RevoluteJointDef__set_lowerAngle_p1","_emscripten_bind_b2DistanceProxy__GetVertex_p1","_emscripten_bind_b2FixtureDef____destroy___p0","_emscripten_bind_b2FixtureDef__b2FixtureDef_p0","_emscripten_bind_b2FixtureDef__set_filter_p1","_emscripten_bind_b2PrismaticJointDef__b2PrismaticJointDef_p0","_emscripten_bind_b2PrismaticJointDef____destroy___p0","_emscripten_bind_b2Rot____destroy___p0","_emscripten_bind_b2Rot__Set_p1","_emscripten_bind_b2Rot__GetAngle_p0","_emscripten_bind_b2Rot__GetYAxis_p0","_emscripten_bind_b2Rot__GetXAxis_p0","_emscripten_bind_b2Rot__b2Rot_p0","_emscripten_bind_b2Rot__b2Rot_p1","_emscripten_bind_b2WheelJointDef____destroy___p0","_emscripten_bind_b2WheelJointDef__b2WheelJointDef_p0","_emscripten_bind_b2RevoluteJointDef__get_enableMotor_p0","_emscripten_bind_b2RevoluteJointDef__set_motorSpeed_p1","_emscripten_bind_b2RevoluteJointDef__get_upperAngle_p0","_emscripten_bind_b2RevoluteJointDef__set_referenceAngle_p1","_emscripten_bind_b2RevoluteJointDef__set_maxMotorTorque_p1","_emscripten_bind_b2RevoluteJointDef__get_localAnchorA_p0","_emscripten_bind_b2RevoluteJointDef__get_referenceAngle_p0","_emscripten_bind_b2RevoluteJointDef__get_localAnchorB_p0","_emscripten_bind_b2RevoluteJointDef__set_enableLimit_p1","_emscripten_bind_b2RevoluteJointDef__set_enableMotor_p1","_emscripten_bind_b2RevoluteJointDef__Initialize_p3","_emscripten_bind_b2RevoluteJointDef__get_maxMotorTorque_p0","_emscripten_bind_b2RevoluteJointDef__get_motorSpeed_p0","_emscripten_bind_b2PulleyJointDef__set_localAnchorA_p1","_emscripten_bind_b2PulleyJointDef__set_localAnchorB_p1","_emscripten_bind_b2PulleyJointDef__get_ratio_p0","_emscripten_bind_b2PulleyJointDef__get_lengthB_p0","_emscripten_bind_b2PulleyJointDef__get_lengthA_p0","_emscripten_bind_b2PulleyJointDef__get_localAnchorA_p0","_emscripten_bind_b2PulleyJointDef__set_ratio_p1","_emscripten_bind_b2PulleyJointDef__get_localAnchorB_p0","_emscripten_bind_b2PulleyJointDef__get_groundAnchorB_p0","_emscripten_bind_b2PulleyJointDef__set_groundAnchorB_p1","_emscripten_bind_b2PulleyJointDef__set_groundAnchorA_p1","_emscripten_bind_b2PulleyJointDef__set_lengthB_p1","_emscripten_bind_b2PulleyJointDef__set_lengthA_p1","_emscripten_bind_b2PulleyJointDef__get_groundAnchorA_p0","_emscripten_bind_b2JointDef__get_bodyA_p0","_emscripten_bind_b2JointDef__set_userData_p1","_emscripten_bind_b2JointDef__set_bodyA_p1","_emscripten_bind_b2JointDef__set_bodyB_p1","_emscripten_bind_b2JointDef__get_bodyB_p0","_emscripten_bind_b2JointDef__set_type_p1","_emscripten_bind_b2JointDef__get_collideConnected_p0","_emscripten_bind_b2JointDef__get_type_p0","_emscripten_bind_b2JointDef__set_collideConnected_p1","_emscripten_bind_b2JointDef__get_userData_p0","_emscripten_bind_b2Transform__set_p_p1","_emscripten_bind_b2Transform__set_q_p1","_emscripten_bind_b2Transform__get_p_p0","_emscripten_bind_b2Transform__get_q_p0","_emscripten_bind_b2Transform__SetIdentity_p0","_emscripten_bind_b2Color__set_b_p1","_emscripten_bind_b2Color__Set_p3","_emscripten_bind_b2Color__get_b_p0","_emscripten_bind_b2WeldJointDef__set_localAnchorA_p1","_emscripten_bind_b2WeldJointDef__get_frequencyHz_p0","_emscripten_bind_b2WeldJointDef__set_localAnchorB_p1","_emscripten_bind_b2WeldJointDef__set_dampingRatio_p1","_emscripten_bind_b2WeldJointDef__set_referenceAngle_p1","_emscripten_bind_b2WeldJointDef__get_localAnchorA_p0","_emscripten_bind_b2WeldJointDef__get_referenceAngle_p0","_emscripten_bind_b2WeldJointDef__get_localAnchorB_p0","_emscripten_bind_b2WeldJointDef__get_dampingRatio_p0","_emscripten_bind_b2WeldJointDef__set_frequencyHz_p1","_emscripten_bind_b2WeldJointDef__Initialize_p3","_emscripten_bind_b2MouseJointDef__get_frequencyHz_p0","_emscripten_bind_b2MouseJointDef__set_dampingRatio_p1","_emscripten_bind_b2MouseJointDef__get_maxForce_p0","_emscripten_bind_b2MouseJointDef__set_target_p1","_emscripten_bind_b2MouseJointDef__set_maxForce_p1","_emscripten_bind_b2MouseJointDef__get_target_p0","_emscripten_bind_b2MouseJointDef__set_frequencyHz_p1","_emscripten_bind_b2MouseJointDef__get_dampingRatio_p0","_emscripten_bind_b2DistanceJointDef__set_localAnchorA_p1","_emscripten_bind_b2DistanceJointDef__get_length_p0","_emscripten_bind_b2DistanceJointDef__get_frequencyHz_p0","_emscripten_bind_b2DistanceJointDef__set_localAnchorB_p1","_emscripten_bind_b2DistanceJointDef__set_dampingRatio_p1","_emscripten_bind_b2DistanceJointDef__get_localAnchorA_p0","_emscripten_bind_b2DistanceJointDef__get_localAnchorB_p0","_emscripten_bind_b2DistanceJointDef__get_dampingRatio_p0","_emscripten_bind_b2RevoluteJointDef____destroy___p0","_emscripten_bind_b2RevoluteJointDef__b2RevoluteJointDef_p0","_emscripten_bind_b2PulleyJointDef____destroy___p0","_emscripten_bind_b2PulleyJointDef__b2PulleyJointDef_p0","_emscripten_bind_b2PulleyJointDef__Initialize_p7","_emscripten_bind_b2JointDef____destroy___p0","_emscripten_bind_b2JointDef__b2JointDef_p0","_emscripten_bind_b2Transform____destroy___p0","_emscripten_bind_b2Transform__Set_p2","_emscripten_bind_b2Transform__b2Transform_p0","_emscripten_bind_b2Transform__b2Transform_p2","_emscripten_bind_b2Color____destroy___p0","_emscripten_bind_b2Color__b2Color_p0","_emscripten_bind_b2Color__b2Color_p3","_emscripten_bind_b2WeldJointDef____destroy___p0","_emscripten_bind_b2WeldJointDef__b2WeldJointDef_p0","_emscripten_bind_b2MouseJointDef____destroy___p0","_emscripten_bind_b2MouseJointDef__b2MouseJointDef_p0","_emscripten_bind_b2DistanceJointDef____destroy___p0","_emscripten_bind_b2DistanceJointDef__set_length_p1","_emscripten_bind_b2DistanceJointDef__set_frequencyHz_p1","_emscripten_bind_b2GearJointDef__set_joint1_p1","_emscripten_bind_b2GearJointDef__set_joint2_p1","_emscripten_bind_b2GearJointDef__set_ratio_p1","_emscripten_bind_b2GearJointDef__get_joint1_p0","_emscripten_bind_b2GearJointDef__get_joint2_p0","_emscripten_bind_b2GearJointDef__get_ratio_p0","_emscripten_bind_b2RopeJointDef__set_localAnchorA_p1","_emscripten_bind_b2RopeJointDef__get_maxLength_p0","_emscripten_bind_b2RopeJointDef__set_localAnchorB_p1","_emscripten_bind_b2RopeJointDef__get_localAnchorA_p0","_emscripten_bind_b2RopeJointDef__get_localAnchorB_p0","_emscripten_bind_b2RopeJointDef__set_maxLength_p1","_emscripten_bind_b2DistanceJointDef__b2DistanceJointDef_p0","_emscripten_bind_b2DistanceJointDef__Initialize_p4","_emscripten_bind_b2GearJointDef____destroy___p0","_emscripten_bind_b2GearJointDef__b2GearJointDef_p0","_emscripten_bind_b2RopeJointDef____destroy___p0","_emscripten_bind_b2RopeJointDef__b2RopeJointDef_p0","_malloc","_free","_malloc_footprint","_malloc_max_footprint","_calloc","_memalign","_independent_calloc","_independent_comalloc","_sys_trim","_realloc","_ialloc","_valloc","_pvalloc","_malloc_trim","__ZNKSt9bad_alloc4whatEv","__ZNKSt20bad_array_new_length4whatEv","__ZSt15get_new_handlerv","__ZSt15set_new_handlerPFvvE","_malloc_usable_size","__ZNSt9bad_allocC2Ev","__ZNSt20bad_array_new_lengthC2Ev","__ZdlPv","__ZdlPvRKSt9nothrow_t","__ZdaPv","__ZdaPvRKSt9nothrow_t","__ZNSt9bad_allocD0Ev","__ZNSt9bad_allocD2Ev","__ZNSt20bad_array_new_lengthD0Ev","_mallinfo","_malloc_stats","_mallopt","__Znwj","__ZnwjRKSt9nothrow_t","__Znaj","__ZnajRKSt9nothrow_t","__ZSt17__throw_bad_allocv"]
